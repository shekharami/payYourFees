// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../../node_modules/core-js/modules/_global.js":[function(require,module,exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],"../../node_modules/core-js/modules/_core.js":[function(require,module,exports) {
var core = module.exports = { version: '2.6.12' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],"../../node_modules/core-js/modules/_is-object.js":[function(require,module,exports) {
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],"../../node_modules/core-js/modules/_an-object.js":[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js"}],"../../node_modules/core-js/modules/_fails.js":[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],"../../node_modules/core-js/modules/_descriptors.js":[function(require,module,exports) {
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":"../../node_modules/core-js/modules/_fails.js"}],"../../node_modules/core-js/modules/_dom-create.js":[function(require,module,exports) {
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_global":"../../node_modules/core-js/modules/_global.js"}],"../../node_modules/core-js/modules/_ie8-dom-define.js":[function(require,module,exports) {
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_dom-create":"../../node_modules/core-js/modules/_dom-create.js"}],"../../node_modules/core-js/modules/_to-primitive.js":[function(require,module,exports) {
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js"}],"../../node_modules/core-js/modules/_object-dp.js":[function(require,module,exports) {
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_ie8-dom-define":"../../node_modules/core-js/modules/_ie8-dom-define.js","./_to-primitive":"../../node_modules/core-js/modules/_to-primitive.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js"}],"../../node_modules/core-js/modules/_property-desc.js":[function(require,module,exports) {
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],"../../node_modules/core-js/modules/_hide.js":[function(require,module,exports) {
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_property-desc":"../../node_modules/core-js/modules/_property-desc.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js"}],"../../node_modules/core-js/modules/_has.js":[function(require,module,exports) {
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],"../../node_modules/core-js/modules/_uid.js":[function(require,module,exports) {
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],"../../node_modules/core-js/modules/_library.js":[function(require,module,exports) {
module.exports = false;

},{}],"../../node_modules/core-js/modules/_shared.js":[function(require,module,exports) {

var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: 'Â© 2020 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":"../../node_modules/core-js/modules/_core.js","./_global":"../../node_modules/core-js/modules/_global.js","./_library":"../../node_modules/core-js/modules/_library.js"}],"../../node_modules/core-js/modules/_function-to-string.js":[function(require,module,exports) {
module.exports = require('./_shared')('native-function-to-string', Function.toString);

},{"./_shared":"../../node_modules/core-js/modules/_shared.js"}],"../../node_modules/core-js/modules/_redefine.js":[function(require,module,exports) {

var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var $toString = require('./_function-to-string');
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_hide":"../../node_modules/core-js/modules/_hide.js","./_has":"../../node_modules/core-js/modules/_has.js","./_uid":"../../node_modules/core-js/modules/_uid.js","./_function-to-string":"../../node_modules/core-js/modules/_function-to-string.js","./_core":"../../node_modules/core-js/modules/_core.js"}],"../../node_modules/core-js/modules/_a-function.js":[function(require,module,exports) {
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],"../../node_modules/core-js/modules/_ctx.js":[function(require,module,exports) {
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":"../../node_modules/core-js/modules/_a-function.js"}],"../../node_modules/core-js/modules/_export.js":[function(require,module,exports) {

var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_core":"../../node_modules/core-js/modules/_core.js","./_hide":"../../node_modules/core-js/modules/_hide.js","./_redefine":"../../node_modules/core-js/modules/_redefine.js","./_ctx":"../../node_modules/core-js/modules/_ctx.js"}],"../../node_modules/core-js/modules/_defined.js":[function(require,module,exports) {
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],"../../node_modules/core-js/modules/_to-object.js":[function(require,module,exports) {
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":"../../node_modules/core-js/modules/_defined.js"}],"../../node_modules/core-js/modules/_to-integer.js":[function(require,module,exports) {
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],"../../node_modules/core-js/modules/_to-absolute-index.js":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":"../../node_modules/core-js/modules/_to-integer.js"}],"../../node_modules/core-js/modules/_to-length.js":[function(require,module,exports) {
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":"../../node_modules/core-js/modules/_to-integer.js"}],"../../node_modules/core-js/modules/_array-copy-within.js":[function(require,module,exports) {
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_to-absolute-index":"../../node_modules/core-js/modules/_to-absolute-index.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js"}],"../../node_modules/core-js/modules/_wks.js":[function(require,module,exports) {
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_shared":"../../node_modules/core-js/modules/_shared.js","./_uid":"../../node_modules/core-js/modules/_uid.js","./_global":"../../node_modules/core-js/modules/_global.js"}],"../../node_modules/core-js/modules/_add-to-unscopables.js":[function(require,module,exports) {
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_wks":"../../node_modules/core-js/modules/_wks.js","./_hide":"../../node_modules/core-js/modules/_hide.js"}],"../../node_modules/core-js/modules/es6.array.copy-within.js":[function(require,module,exports) {
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });

require('./_add-to-unscopables')('copyWithin');

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_array-copy-within":"../../node_modules/core-js/modules/_array-copy-within.js","./_add-to-unscopables":"../../node_modules/core-js/modules/_add-to-unscopables.js"}],"../../node_modules/core-js/modules/_array-fill.js":[function(require,module,exports) {
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_to-absolute-index":"../../node_modules/core-js/modules/_to-absolute-index.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js"}],"../../node_modules/core-js/modules/es6.array.fill.js":[function(require,module,exports) {
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { fill: require('./_array-fill') });

require('./_add-to-unscopables')('fill');

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_array-fill":"../../node_modules/core-js/modules/_array-fill.js","./_add-to-unscopables":"../../node_modules/core-js/modules/_add-to-unscopables.js"}],"../../node_modules/core-js/modules/_cof.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],"../../node_modules/core-js/modules/_iobject.js":[function(require,module,exports) {
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":"../../node_modules/core-js/modules/_cof.js"}],"../../node_modules/core-js/modules/_is-array.js":[function(require,module,exports) {
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":"../../node_modules/core-js/modules/_cof.js"}],"../../node_modules/core-js/modules/_array-species-constructor.js":[function(require,module,exports) {
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_is-array":"../../node_modules/core-js/modules/_is-array.js","./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/core-js/modules/_array-species-create.js":[function(require,module,exports) {
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":"../../node_modules/core-js/modules/_array-species-constructor.js"}],"../../node_modules/core-js/modules/_array-methods.js":[function(require,module,exports) {
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_ctx":"../../node_modules/core-js/modules/_ctx.js","./_iobject":"../../node_modules/core-js/modules/_iobject.js","./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_array-species-create":"../../node_modules/core-js/modules/_array-species-create.js"}],"../../node_modules/core-js/modules/_strict-method.js":[function(require,module,exports) {
'use strict';
var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"./_fails":"../../node_modules/core-js/modules/_fails.js"}],"../../node_modules/core-js/modules/es6.array.filter.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_array-methods":"../../node_modules/core-js/modules/_array-methods.js","./_strict-method":"../../node_modules/core-js/modules/_strict-method.js"}],"../../node_modules/core-js/modules/es6.array.find.js":[function(require,module,exports) {
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_array-methods":"../../node_modules/core-js/modules/_array-methods.js","./_add-to-unscopables":"../../node_modules/core-js/modules/_add-to-unscopables.js"}],"../../node_modules/core-js/modules/es6.array.find-index.js":[function(require,module,exports) {
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_array-methods":"../../node_modules/core-js/modules/_array-methods.js","./_add-to-unscopables":"../../node_modules/core-js/modules/_add-to-unscopables.js"}],"../../node_modules/core-js/modules/_flatten-into-array.js":[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = require('./_is-array');
var isObject = require('./_is-object');
var toLength = require('./_to-length');
var ctx = require('./_ctx');
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

},{"./_is-array":"../../node_modules/core-js/modules/_is-array.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_ctx":"../../node_modules/core-js/modules/_ctx.js","./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/core-js/modules/es7.array.flat-map.js":[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var aFunction = require('./_a-function');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

require('./_add-to-unscopables')('flatMap');

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_flatten-into-array":"../../node_modules/core-js/modules/_flatten-into-array.js","./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_a-function":"../../node_modules/core-js/modules/_a-function.js","./_array-species-create":"../../node_modules/core-js/modules/_array-species-create.js","./_add-to-unscopables":"../../node_modules/core-js/modules/_add-to-unscopables.js"}],"../../node_modules/core-js/modules/_iter-call.js":[function(require,module,exports) {
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":"../../node_modules/core-js/modules/_an-object.js"}],"../../node_modules/core-js/modules/_iterators.js":[function(require,module,exports) {
module.exports = {};

},{}],"../../node_modules/core-js/modules/_is-array-iter.js":[function(require,module,exports) {
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":"../../node_modules/core-js/modules/_iterators.js","./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/core-js/modules/_create-property.js":[function(require,module,exports) {
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_property-desc":"../../node_modules/core-js/modules/_property-desc.js"}],"../../node_modules/core-js/modules/_classof.js":[function(require,module,exports) {
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":"../../node_modules/core-js/modules/_cof.js","./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/core-js/modules/core.get-iterator-method.js":[function(require,module,exports) {
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":"../../node_modules/core-js/modules/_classof.js","./_wks":"../../node_modules/core-js/modules/_wks.js","./_iterators":"../../node_modules/core-js/modules/_iterators.js","./_core":"../../node_modules/core-js/modules/_core.js"}],"../../node_modules/core-js/modules/_iter-detect.js":[function(require,module,exports) {
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/core-js/modules/es6.array.from.js":[function(require,module,exports) {
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_ctx":"../../node_modules/core-js/modules/_ctx.js","./_export":"../../node_modules/core-js/modules/_export.js","./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_iter-call":"../../node_modules/core-js/modules/_iter-call.js","./_is-array-iter":"../../node_modules/core-js/modules/_is-array-iter.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_create-property":"../../node_modules/core-js/modules/_create-property.js","./core.get-iterator-method":"../../node_modules/core-js/modules/core.get-iterator-method.js","./_iter-detect":"../../node_modules/core-js/modules/_iter-detect.js"}],"../../node_modules/core-js/modules/_to-iobject.js":[function(require,module,exports) {
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_iobject":"../../node_modules/core-js/modules/_iobject.js","./_defined":"../../node_modules/core-js/modules/_defined.js"}],"../../node_modules/core-js/modules/_array-includes.js":[function(require,module,exports) {
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-iobject":"../../node_modules/core-js/modules/_to-iobject.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_to-absolute-index":"../../node_modules/core-js/modules/_to-absolute-index.js"}],"../../node_modules/core-js/modules/es7.array.includes.js":[function(require,module,exports) {
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = require('./_export');
var $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_array-includes":"../../node_modules/core-js/modules/_array-includes.js","./_add-to-unscopables":"../../node_modules/core-js/modules/_add-to-unscopables.js"}],"../../node_modules/core-js/modules/_iter-step.js":[function(require,module,exports) {
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],"../../node_modules/core-js/modules/_shared-key.js":[function(require,module,exports) {
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":"../../node_modules/core-js/modules/_shared.js","./_uid":"../../node_modules/core-js/modules/_uid.js"}],"../../node_modules/core-js/modules/_object-keys-internal.js":[function(require,module,exports) {
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_has":"../../node_modules/core-js/modules/_has.js","./_to-iobject":"../../node_modules/core-js/modules/_to-iobject.js","./_array-includes":"../../node_modules/core-js/modules/_array-includes.js","./_shared-key":"../../node_modules/core-js/modules/_shared-key.js"}],"../../node_modules/core-js/modules/_enum-bug-keys.js":[function(require,module,exports) {
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],"../../node_modules/core-js/modules/_object-keys.js":[function(require,module,exports) {
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_object-keys-internal":"../../node_modules/core-js/modules/_object-keys-internal.js","./_enum-bug-keys":"../../node_modules/core-js/modules/_enum-bug-keys.js"}],"../../node_modules/core-js/modules/_object-dps.js":[function(require,module,exports) {
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_object-keys":"../../node_modules/core-js/modules/_object-keys.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js"}],"../../node_modules/core-js/modules/_html.js":[function(require,module,exports) {
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":"../../node_modules/core-js/modules/_global.js"}],"../../node_modules/core-js/modules/_object-create.js":[function(require,module,exports) {
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_object-dps":"../../node_modules/core-js/modules/_object-dps.js","./_enum-bug-keys":"../../node_modules/core-js/modules/_enum-bug-keys.js","./_shared-key":"../../node_modules/core-js/modules/_shared-key.js","./_dom-create":"../../node_modules/core-js/modules/_dom-create.js","./_html":"../../node_modules/core-js/modules/_html.js"}],"../../node_modules/core-js/modules/_set-to-string-tag.js":[function(require,module,exports) {
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_has":"../../node_modules/core-js/modules/_has.js","./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/core-js/modules/_iter-create.js":[function(require,module,exports) {
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_object-create":"../../node_modules/core-js/modules/_object-create.js","./_property-desc":"../../node_modules/core-js/modules/_property-desc.js","./_set-to-string-tag":"../../node_modules/core-js/modules/_set-to-string-tag.js","./_hide":"../../node_modules/core-js/modules/_hide.js","./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/core-js/modules/_object-gpo.js":[function(require,module,exports) {
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":"../../node_modules/core-js/modules/_has.js","./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_shared-key":"../../node_modules/core-js/modules/_shared-key.js"}],"../../node_modules/core-js/modules/_iter-define.js":[function(require,module,exports) {
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_library":"../../node_modules/core-js/modules/_library.js","./_export":"../../node_modules/core-js/modules/_export.js","./_redefine":"../../node_modules/core-js/modules/_redefine.js","./_hide":"../../node_modules/core-js/modules/_hide.js","./_iterators":"../../node_modules/core-js/modules/_iterators.js","./_iter-create":"../../node_modules/core-js/modules/_iter-create.js","./_set-to-string-tag":"../../node_modules/core-js/modules/_set-to-string-tag.js","./_object-gpo":"../../node_modules/core-js/modules/_object-gpo.js","./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/core-js/modules/es6.array.iterator.js":[function(require,module,exports) {
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":"../../node_modules/core-js/modules/_add-to-unscopables.js","./_iter-step":"../../node_modules/core-js/modules/_iter-step.js","./_iterators":"../../node_modules/core-js/modules/_iterators.js","./_to-iobject":"../../node_modules/core-js/modules/_to-iobject.js","./_iter-define":"../../node_modules/core-js/modules/_iter-define.js"}],"../../node_modules/core-js/modules/es6.array.map.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $map = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_array-methods":"../../node_modules/core-js/modules/_array-methods.js","./_strict-method":"../../node_modules/core-js/modules/_strict-method.js"}],"../../node_modules/core-js/modules/es6.array.of.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_create-property":"../../node_modules/core-js/modules/_create-property.js","./_fails":"../../node_modules/core-js/modules/_fails.js"}],"../../node_modules/core-js/modules/es6.array.slice.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var html = require('./_html');
var cof = require('./_cof');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_html":"../../node_modules/core-js/modules/_html.js","./_cof":"../../node_modules/core-js/modules/_cof.js","./_to-absolute-index":"../../node_modules/core-js/modules/_to-absolute-index.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_fails":"../../node_modules/core-js/modules/_fails.js"}],"../../node_modules/core-js/modules/es6.array.sort.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_a-function":"../../node_modules/core-js/modules/_a-function.js","./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_strict-method":"../../node_modules/core-js/modules/_strict-method.js"}],"../../node_modules/core-js/modules/_set-species.js":[function(require,module,exports) {

'use strict';
var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/core-js/modules/es6.array.species.js":[function(require,module,exports) {
require('./_set-species')('Array');

},{"./_set-species":"../../node_modules/core-js/modules/_set-species.js"}],"../../node_modules/core-js/modules/_date-to-primitive.js":[function(require,module,exports) {
'use strict';
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_to-primitive":"../../node_modules/core-js/modules/_to-primitive.js"}],"../../node_modules/core-js/modules/es6.date.to-primitive.js":[function(require,module,exports) {
var TO_PRIMITIVE = require('./_wks')('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

},{"./_wks":"../../node_modules/core-js/modules/_wks.js","./_hide":"../../node_modules/core-js/modules/_hide.js","./_date-to-primitive":"../../node_modules/core-js/modules/_date-to-primitive.js"}],"../../node_modules/core-js/modules/es6.function.has-instance.js":[function(require,module,exports) {
'use strict';
var isObject = require('./_is-object');
var getPrototypeOf = require('./_object-gpo');
var HAS_INSTANCE = require('./_wks')('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_object-gpo":"../../node_modules/core-js/modules/_object-gpo.js","./_wks":"../../node_modules/core-js/modules/_wks.js","./_object-dp":"../../node_modules/core-js/modules/_object-dp.js"}],"../../node_modules/core-js/modules/es6.function.name.js":[function(require,module,exports) {
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js"}],"../../node_modules/core-js/modules/_redefine-all.js":[function(require,module,exports) {
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":"../../node_modules/core-js/modules/_redefine.js"}],"../../node_modules/core-js/modules/_an-instance.js":[function(require,module,exports) {
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],"../../node_modules/core-js/modules/_for-of.js":[function(require,module,exports) {
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_ctx":"../../node_modules/core-js/modules/_ctx.js","./_iter-call":"../../node_modules/core-js/modules/_iter-call.js","./_is-array-iter":"../../node_modules/core-js/modules/_is-array-iter.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./core.get-iterator-method":"../../node_modules/core-js/modules/core.get-iterator-method.js"}],"../../node_modules/core-js/modules/_meta.js":[function(require,module,exports) {
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_uid":"../../node_modules/core-js/modules/_uid.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_has":"../../node_modules/core-js/modules/_has.js","./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_fails":"../../node_modules/core-js/modules/_fails.js"}],"../../node_modules/core-js/modules/_validate-collection.js":[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js"}],"../../node_modules/core-js/modules/_collection-strong.js":[function(require,module,exports) {
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_object-create":"../../node_modules/core-js/modules/_object-create.js","./_redefine-all":"../../node_modules/core-js/modules/_redefine-all.js","./_ctx":"../../node_modules/core-js/modules/_ctx.js","./_an-instance":"../../node_modules/core-js/modules/_an-instance.js","./_for-of":"../../node_modules/core-js/modules/_for-of.js","./_iter-define":"../../node_modules/core-js/modules/_iter-define.js","./_iter-step":"../../node_modules/core-js/modules/_iter-step.js","./_set-species":"../../node_modules/core-js/modules/_set-species.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_meta":"../../node_modules/core-js/modules/_meta.js","./_validate-collection":"../../node_modules/core-js/modules/_validate-collection.js"}],"../../node_modules/core-js/modules/_object-pie.js":[function(require,module,exports) {
exports.f = {}.propertyIsEnumerable;

},{}],"../../node_modules/core-js/modules/_object-gopd.js":[function(require,module,exports) {
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_object-pie":"../../node_modules/core-js/modules/_object-pie.js","./_property-desc":"../../node_modules/core-js/modules/_property-desc.js","./_to-iobject":"../../node_modules/core-js/modules/_to-iobject.js","./_to-primitive":"../../node_modules/core-js/modules/_to-primitive.js","./_has":"../../node_modules/core-js/modules/_has.js","./_ie8-dom-define":"../../node_modules/core-js/modules/_ie8-dom-define.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js"}],"../../node_modules/core-js/modules/_set-proto.js":[function(require,module,exports) {
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_ctx":"../../node_modules/core-js/modules/_ctx.js","./_object-gopd":"../../node_modules/core-js/modules/_object-gopd.js"}],"../../node_modules/core-js/modules/_inherit-if-required.js":[function(require,module,exports) {
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_set-proto":"../../node_modules/core-js/modules/_set-proto.js"}],"../../node_modules/core-js/modules/_collection.js":[function(require,module,exports) {

'use strict';
var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_export":"../../node_modules/core-js/modules/_export.js","./_redefine":"../../node_modules/core-js/modules/_redefine.js","./_redefine-all":"../../node_modules/core-js/modules/_redefine-all.js","./_meta":"../../node_modules/core-js/modules/_meta.js","./_for-of":"../../node_modules/core-js/modules/_for-of.js","./_an-instance":"../../node_modules/core-js/modules/_an-instance.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_iter-detect":"../../node_modules/core-js/modules/_iter-detect.js","./_set-to-string-tag":"../../node_modules/core-js/modules/_set-to-string-tag.js","./_inherit-if-required":"../../node_modules/core-js/modules/_inherit-if-required.js"}],"../../node_modules/core-js/modules/es6.map.js":[function(require,module,exports) {
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection-strong":"../../node_modules/core-js/modules/_collection-strong.js","./_validate-collection":"../../node_modules/core-js/modules/_validate-collection.js","./_collection":"../../node_modules/core-js/modules/_collection.js"}],"../../node_modules/core-js/modules/_math-log1p.js":[function(require,module,exports) {
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],"../../node_modules/core-js/modules/es6.math.acosh.js":[function(require,module,exports) {
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_math-log1p":"../../node_modules/core-js/modules/_math-log1p.js"}],"../../node_modules/core-js/modules/es6.math.asinh.js":[function(require,module,exports) {
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/es6.math.atanh.js":[function(require,module,exports) {
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/_math-sign.js":[function(require,module,exports) {
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],"../../node_modules/core-js/modules/es6.math.cbrt.js":[function(require,module,exports) {
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export');
var sign = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_math-sign":"../../node_modules/core-js/modules/_math-sign.js"}],"../../node_modules/core-js/modules/es6.math.clz32.js":[function(require,module,exports) {
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/es6.math.cosh.js":[function(require,module,exports) {
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/_math-expm1.js":[function(require,module,exports) {
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],"../../node_modules/core-js/modules/es6.math.expm1.js":[function(require,module,exports) {
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_math-expm1":"../../node_modules/core-js/modules/_math-expm1.js"}],"../../node_modules/core-js/modules/_math-fround.js":[function(require,module,exports) {
// 20.2.2.16 Math.fround(x)
var sign = require('./_math-sign');
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"./_math-sign":"../../node_modules/core-js/modules/_math-sign.js"}],"../../node_modules/core-js/modules/es6.math.fround.js":[function(require,module,exports) {
// 20.2.2.16 Math.fround(x)
var $export = require('./_export');

$export($export.S, 'Math', { fround: require('./_math-fround') });

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_math-fround":"../../node_modules/core-js/modules/_math-fround.js"}],"../../node_modules/core-js/modules/es6.math.hypot.js":[function(require,module,exports) {
// 20.2.2.17 Math.hypot([value1[, value2[, â¦ ]]])
var $export = require('./_export');
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/es6.math.imul.js":[function(require,module,exports) {
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_fails":"../../node_modules/core-js/modules/_fails.js"}],"../../node_modules/core-js/modules/es6.math.log1p.js":[function(require,module,exports) {
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_math-log1p":"../../node_modules/core-js/modules/_math-log1p.js"}],"../../node_modules/core-js/modules/es6.math.log10.js":[function(require,module,exports) {
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/es6.math.log2.js":[function(require,module,exports) {
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/es6.math.sign.js":[function(require,module,exports) {
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', { sign: require('./_math-sign') });

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_math-sign":"../../node_modules/core-js/modules/_math-sign.js"}],"../../node_modules/core-js/modules/es6.math.sinh.js":[function(require,module,exports) {
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_math-expm1":"../../node_modules/core-js/modules/_math-expm1.js","./_fails":"../../node_modules/core-js/modules/_fails.js"}],"../../node_modules/core-js/modules/es6.math.tanh.js":[function(require,module,exports) {
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_math-expm1":"../../node_modules/core-js/modules/_math-expm1.js"}],"../../node_modules/core-js/modules/es6.math.trunc.js":[function(require,module,exports) {
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/_object-gopn.js":[function(require,module,exports) {
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_object-keys-internal":"../../node_modules/core-js/modules/_object-keys-internal.js","./_enum-bug-keys":"../../node_modules/core-js/modules/_enum-bug-keys.js"}],"../../node_modules/core-js/modules/_string-ws.js":[function(require,module,exports) {
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],"../../node_modules/core-js/modules/_string-trim.js":[function(require,module,exports) {
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_defined":"../../node_modules/core-js/modules/_defined.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_string-ws":"../../node_modules/core-js/modules/_string-ws.js"}],"../../node_modules/core-js/modules/es6.number.constructor.js":[function(require,module,exports) {

'use strict';
var global = require('./_global');
var has = require('./_has');
var cof = require('./_cof');
var inheritIfRequired = require('./_inherit-if-required');
var toPrimitive = require('./_to-primitive');
var fails = require('./_fails');
var gOPN = require('./_object-gopn').f;
var gOPD = require('./_object-gopd').f;
var dP = require('./_object-dp').f;
var $trim = require('./_string-trim').trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_has":"../../node_modules/core-js/modules/_has.js","./_cof":"../../node_modules/core-js/modules/_cof.js","./_inherit-if-required":"../../node_modules/core-js/modules/_inherit-if-required.js","./_to-primitive":"../../node_modules/core-js/modules/_to-primitive.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_object-gopn":"../../node_modules/core-js/modules/_object-gopn.js","./_object-gopd":"../../node_modules/core-js/modules/_object-gopd.js","./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_string-trim":"../../node_modules/core-js/modules/_string-trim.js","./_object-create":"../../node_modules/core-js/modules/_object-create.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_redefine":"../../node_modules/core-js/modules/_redefine.js"}],"../../node_modules/core-js/modules/es6.number.epsilon.js":[function(require,module,exports) {
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/es6.number.is-finite.js":[function(require,module,exports) {
// 20.1.2.2 Number.isFinite(number)
var $export = require('./_export');
var _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_global":"../../node_modules/core-js/modules/_global.js"}],"../../node_modules/core-js/modules/_is-integer.js":[function(require,module,exports) {
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js"}],"../../node_modules/core-js/modules/es6.number.is-integer.js":[function(require,module,exports) {
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_is-integer":"../../node_modules/core-js/modules/_is-integer.js"}],"../../node_modules/core-js/modules/es6.number.is-nan.js":[function(require,module,exports) {
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/es6.number.is-safe-integer.js":[function(require,module,exports) {
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_is-integer":"../../node_modules/core-js/modules/_is-integer.js"}],"../../node_modules/core-js/modules/es6.number.max-safe-integer.js":[function(require,module,exports) {
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/es6.number.min-safe-integer.js":[function(require,module,exports) {
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/_parse-float.js":[function(require,module,exports) {
var $parseFloat = require('./_global').parseFloat;
var $trim = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_string-trim":"../../node_modules/core-js/modules/_string-trim.js","./_string-ws":"../../node_modules/core-js/modules/_string-ws.js"}],"../../node_modules/core-js/modules/es6.number.parse-float.js":[function(require,module,exports) {
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_parse-float":"../../node_modules/core-js/modules/_parse-float.js"}],"../../node_modules/core-js/modules/_parse-int.js":[function(require,module,exports) {
var $parseInt = require('./_global').parseInt;
var $trim = require('./_string-trim').trim;
var ws = require('./_string-ws');
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_string-trim":"../../node_modules/core-js/modules/_string-trim.js","./_string-ws":"../../node_modules/core-js/modules/_string-ws.js"}],"../../node_modules/core-js/modules/es6.number.parse-int.js":[function(require,module,exports) {
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_parse-int":"../../node_modules/core-js/modules/_parse-int.js"}],"../../node_modules/core-js/modules/_object-gops.js":[function(require,module,exports) {
exports.f = Object.getOwnPropertySymbols;

},{}],"../../node_modules/core-js/modules/_object-assign.js":[function(require,module,exports) {
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = require('./_descriptors');
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;

},{"./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_object-keys":"../../node_modules/core-js/modules/_object-keys.js","./_object-gops":"../../node_modules/core-js/modules/_object-gops.js","./_object-pie":"../../node_modules/core-js/modules/_object-pie.js","./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_iobject":"../../node_modules/core-js/modules/_iobject.js","./_fails":"../../node_modules/core-js/modules/_fails.js"}],"../../node_modules/core-js/modules/es6.object.assign.js":[function(require,module,exports) {
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_object-assign":"../../node_modules/core-js/modules/_object-assign.js"}],"../../node_modules/core-js/modules/_object-forced-pam.js":[function(require,module,exports) {
'use strict';
// Forced replacement prototype accessors methods
module.exports = require('./_library') || !require('./_fails')(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete require('./_global')[K];
});

},{"./_library":"../../node_modules/core-js/modules/_library.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_global":"../../node_modules/core-js/modules/_global.js"}],"../../node_modules/core-js/modules/es7.object.define-getter.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_a-function":"../../node_modules/core-js/modules/_a-function.js","./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_object-forced-pam":"../../node_modules/core-js/modules/_object-forced-pam.js"}],"../../node_modules/core-js/modules/es7.object.define-setter.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_a-function":"../../node_modules/core-js/modules/_a-function.js","./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_object-forced-pam":"../../node_modules/core-js/modules/_object-forced-pam.js"}],"../../node_modules/core-js/modules/_object-to-array.js":[function(require,module,exports) {
var DESCRIPTORS = require('./_descriptors');
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

},{"./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_object-keys":"../../node_modules/core-js/modules/_object-keys.js","./_to-iobject":"../../node_modules/core-js/modules/_to-iobject.js","./_object-pie":"../../node_modules/core-js/modules/_object-pie.js"}],"../../node_modules/core-js/modules/es7.object.entries.js":[function(require,module,exports) {
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_object-to-array":"../../node_modules/core-js/modules/_object-to-array.js"}],"../../node_modules/core-js/modules/_object-sap.js":[function(require,module,exports) {
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_core":"../../node_modules/core-js/modules/_core.js","./_fails":"../../node_modules/core-js/modules/_fails.js"}],"../../node_modules/core-js/modules/es6.object.freeze.js":[function(require,module,exports) {
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_meta":"../../node_modules/core-js/modules/_meta.js","./_object-sap":"../../node_modules/core-js/modules/_object-sap.js"}],"../../node_modules/core-js/modules/es6.object.get-own-property-descriptor.js":[function(require,module,exports) {
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_to-iobject":"../../node_modules/core-js/modules/_to-iobject.js","./_object-gopd":"../../node_modules/core-js/modules/_object-gopd.js","./_object-sap":"../../node_modules/core-js/modules/_object-sap.js"}],"../../node_modules/core-js/modules/_own-keys.js":[function(require,module,exports) {
// all object keys, includes non-enumerable and symbols
var gOPN = require('./_object-gopn');
var gOPS = require('./_object-gops');
var anObject = require('./_an-object');
var Reflect = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"./_object-gopn":"../../node_modules/core-js/modules/_object-gopn.js","./_object-gops":"../../node_modules/core-js/modules/_object-gops.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_global":"../../node_modules/core-js/modules/_global.js"}],"../../node_modules/core-js/modules/es7.object.get-own-property-descriptors.js":[function(require,module,exports) {
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = require('./_export');
var ownKeys = require('./_own-keys');
var toIObject = require('./_to-iobject');
var gOPD = require('./_object-gopd');
var createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_own-keys":"../../node_modules/core-js/modules/_own-keys.js","./_to-iobject":"../../node_modules/core-js/modules/_to-iobject.js","./_object-gopd":"../../node_modules/core-js/modules/_object-gopd.js","./_create-property":"../../node_modules/core-js/modules/_create-property.js"}],"../../node_modules/core-js/modules/_object-gopn-ext.js":[function(require,module,exports) {
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_to-iobject":"../../node_modules/core-js/modules/_to-iobject.js","./_object-gopn":"../../node_modules/core-js/modules/_object-gopn.js"}],"../../node_modules/core-js/modules/es6.object.get-own-property-names.js":[function(require,module,exports) {
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-sap":"../../node_modules/core-js/modules/_object-sap.js","./_object-gopn-ext":"../../node_modules/core-js/modules/_object-gopn-ext.js"}],"../../node_modules/core-js/modules/es6.object.get-prototype-of.js":[function(require,module,exports) {
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_object-gpo":"../../node_modules/core-js/modules/_object-gpo.js","./_object-sap":"../../node_modules/core-js/modules/_object-sap.js"}],"../../node_modules/core-js/modules/es7.object.lookup-getter.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_to-primitive":"../../node_modules/core-js/modules/_to-primitive.js","./_object-gpo":"../../node_modules/core-js/modules/_object-gpo.js","./_object-gopd":"../../node_modules/core-js/modules/_object-gopd.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_object-forced-pam":"../../node_modules/core-js/modules/_object-forced-pam.js"}],"../../node_modules/core-js/modules/es7.object.lookup-setter.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_to-primitive":"../../node_modules/core-js/modules/_to-primitive.js","./_object-gpo":"../../node_modules/core-js/modules/_object-gpo.js","./_object-gopd":"../../node_modules/core-js/modules/_object-gopd.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_object-forced-pam":"../../node_modules/core-js/modules/_object-forced-pam.js"}],"../../node_modules/core-js/modules/es6.object.prevent-extensions.js":[function(require,module,exports) {
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_meta":"../../node_modules/core-js/modules/_meta.js","./_object-sap":"../../node_modules/core-js/modules/_object-sap.js"}],"../../node_modules/core-js/modules/es6.object.to-string.js":[function(require,module,exports) {
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof');
var test = {};
test[require('./_wks')('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  require('./_redefine')(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"./_classof":"../../node_modules/core-js/modules/_classof.js","./_wks":"../../node_modules/core-js/modules/_wks.js","./_redefine":"../../node_modules/core-js/modules/_redefine.js"}],"../../node_modules/core-js/modules/_same-value.js":[function(require,module,exports) {
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],"../../node_modules/core-js/modules/es6.object.is.js":[function(require,module,exports) {
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', { is: require('./_same-value') });

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_same-value":"../../node_modules/core-js/modules/_same-value.js"}],"../../node_modules/core-js/modules/es6.object.is-frozen.js":[function(require,module,exports) {
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_object-sap":"../../node_modules/core-js/modules/_object-sap.js"}],"../../node_modules/core-js/modules/es6.object.is-sealed.js":[function(require,module,exports) {
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_object-sap":"../../node_modules/core-js/modules/_object-sap.js"}],"../../node_modules/core-js/modules/es6.object.is-extensible.js":[function(require,module,exports) {
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_object-sap":"../../node_modules/core-js/modules/_object-sap.js"}],"../../node_modules/core-js/modules/es6.object.keys.js":[function(require,module,exports) {
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_object-keys":"../../node_modules/core-js/modules/_object-keys.js","./_object-sap":"../../node_modules/core-js/modules/_object-sap.js"}],"../../node_modules/core-js/modules/es6.object.seal.js":[function(require,module,exports) {
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_meta":"../../node_modules/core-js/modules/_meta.js","./_object-sap":"../../node_modules/core-js/modules/_object-sap.js"}],"../../node_modules/core-js/modules/es7.object.values.js":[function(require,module,exports) {
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_object-to-array":"../../node_modules/core-js/modules/_object-to-array.js"}],"../../node_modules/core-js/modules/_species-constructor.js":[function(require,module,exports) {
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_a-function":"../../node_modules/core-js/modules/_a-function.js","./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/core-js/modules/_invoke.js":[function(require,module,exports) {
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],"../../node_modules/core-js/modules/_task.js":[function(require,module,exports) {


var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_ctx":"../../node_modules/core-js/modules/_ctx.js","./_invoke":"../../node_modules/core-js/modules/_invoke.js","./_html":"../../node_modules/core-js/modules/_html.js","./_dom-create":"../../node_modules/core-js/modules/_dom-create.js","./_global":"../../node_modules/core-js/modules/_global.js","./_cof":"../../node_modules/core-js/modules/_cof.js"}],"../../node_modules/core-js/modules/_microtask.js":[function(require,module,exports) {


var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_task":"../../node_modules/core-js/modules/_task.js","./_cof":"../../node_modules/core-js/modules/_cof.js"}],"../../node_modules/core-js/modules/_new-promise-capability.js":[function(require,module,exports) {
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":"../../node_modules/core-js/modules/_a-function.js"}],"../../node_modules/core-js/modules/_perform.js":[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],"../../node_modules/core-js/modules/_user-agent.js":[function(require,module,exports) {

var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":"../../node_modules/core-js/modules/_global.js"}],"../../node_modules/core-js/modules/_promise-resolve.js":[function(require,module,exports) {
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_new-promise-capability":"../../node_modules/core-js/modules/_new-promise-capability.js"}],"../../node_modules/core-js/modules/es6.promise.js":[function(require,module,exports) {


'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_library":"../../node_modules/core-js/modules/_library.js","./_global":"../../node_modules/core-js/modules/_global.js","./_ctx":"../../node_modules/core-js/modules/_ctx.js","./_classof":"../../node_modules/core-js/modules/_classof.js","./_export":"../../node_modules/core-js/modules/_export.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_a-function":"../../node_modules/core-js/modules/_a-function.js","./_an-instance":"../../node_modules/core-js/modules/_an-instance.js","./_for-of":"../../node_modules/core-js/modules/_for-of.js","./_species-constructor":"../../node_modules/core-js/modules/_species-constructor.js","./_task":"../../node_modules/core-js/modules/_task.js","./_microtask":"../../node_modules/core-js/modules/_microtask.js","./_new-promise-capability":"../../node_modules/core-js/modules/_new-promise-capability.js","./_perform":"../../node_modules/core-js/modules/_perform.js","./_user-agent":"../../node_modules/core-js/modules/_user-agent.js","./_promise-resolve":"../../node_modules/core-js/modules/_promise-resolve.js","./_wks":"../../node_modules/core-js/modules/_wks.js","./_redefine-all":"../../node_modules/core-js/modules/_redefine-all.js","./_set-to-string-tag":"../../node_modules/core-js/modules/_set-to-string-tag.js","./_set-species":"../../node_modules/core-js/modules/_set-species.js","./_core":"../../node_modules/core-js/modules/_core.js","./_iter-detect":"../../node_modules/core-js/modules/_iter-detect.js"}],"../../node_modules/core-js/modules/es7.promise.finally.js":[function(require,module,exports) {

// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_core":"../../node_modules/core-js/modules/_core.js","./_global":"../../node_modules/core-js/modules/_global.js","./_species-constructor":"../../node_modules/core-js/modules/_species-constructor.js","./_promise-resolve":"../../node_modules/core-js/modules/_promise-resolve.js"}],"../../node_modules/core-js/modules/es6.reflect.apply.js":[function(require,module,exports) {
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_a-function":"../../node_modules/core-js/modules/_a-function.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_global":"../../node_modules/core-js/modules/_global.js","./_fails":"../../node_modules/core-js/modules/_fails.js"}],"../../node_modules/core-js/modules/_bind.js":[function(require,module,exports) {
'use strict';
var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":"../../node_modules/core-js/modules/_a-function.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_invoke":"../../node_modules/core-js/modules/_invoke.js"}],"../../node_modules/core-js/modules/es6.reflect.construct.js":[function(require,module,exports) {
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_object-create":"../../node_modules/core-js/modules/_object-create.js","./_a-function":"../../node_modules/core-js/modules/_a-function.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_bind":"../../node_modules/core-js/modules/_bind.js","./_global":"../../node_modules/core-js/modules/_global.js"}],"../../node_modules/core-js/modules/es6.reflect.define-property.js":[function(require,module,exports) {
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_export":"../../node_modules/core-js/modules/_export.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_to-primitive":"../../node_modules/core-js/modules/_to-primitive.js","./_fails":"../../node_modules/core-js/modules/_fails.js"}],"../../node_modules/core-js/modules/es6.reflect.delete-property.js":[function(require,module,exports) {
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = require('./_export');
var gOPD = require('./_object-gopd').f;
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_object-gopd":"../../node_modules/core-js/modules/_object-gopd.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js"}],"../../node_modules/core-js/modules/es6.reflect.get.js":[function(require,module,exports) {
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var isObject = require('./_is-object');
var anObject = require('./_an-object');

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"./_object-gopd":"../../node_modules/core-js/modules/_object-gopd.js","./_object-gpo":"../../node_modules/core-js/modules/_object-gpo.js","./_has":"../../node_modules/core-js/modules/_has.js","./_export":"../../node_modules/core-js/modules/_export.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js"}],"../../node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js":[function(require,module,exports) {
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = require('./_object-gopd');
var $export = require('./_export');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"./_object-gopd":"../../node_modules/core-js/modules/_object-gopd.js","./_export":"../../node_modules/core-js/modules/_export.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js"}],"../../node_modules/core-js/modules/es6.reflect.get-prototype-of.js":[function(require,module,exports) {
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = require('./_export');
var getProto = require('./_object-gpo');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_object-gpo":"../../node_modules/core-js/modules/_object-gpo.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js"}],"../../node_modules/core-js/modules/es6.reflect.has.js":[function(require,module,exports) {
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/es6.reflect.is-extensible.js":[function(require,module,exports) {
// 26.1.10 Reflect.isExtensible(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js"}],"../../node_modules/core-js/modules/es6.reflect.own-keys.js":[function(require,module,exports) {
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_own-keys":"../../node_modules/core-js/modules/_own-keys.js"}],"../../node_modules/core-js/modules/es6.reflect.prevent-extensions.js":[function(require,module,exports) {
// 26.1.12 Reflect.preventExtensions(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js"}],"../../node_modules/core-js/modules/es6.reflect.set.js":[function(require,module,exports) {
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = require('./_object-dp');
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var createDesc = require('./_property-desc');
var anObject = require('./_an-object');
var isObject = require('./_is-object');

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_object-gopd":"../../node_modules/core-js/modules/_object-gopd.js","./_object-gpo":"../../node_modules/core-js/modules/_object-gpo.js","./_has":"../../node_modules/core-js/modules/_has.js","./_export":"../../node_modules/core-js/modules/_export.js","./_property-desc":"../../node_modules/core-js/modules/_property-desc.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js"}],"../../node_modules/core-js/modules/es6.reflect.set-prototype-of.js":[function(require,module,exports) {
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = require('./_export');
var setProto = require('./_set-proto');

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_set-proto":"../../node_modules/core-js/modules/_set-proto.js"}],"../../node_modules/core-js/modules/_is-regexp.js":[function(require,module,exports) {
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_cof":"../../node_modules/core-js/modules/_cof.js","./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/core-js/modules/_flags.js":[function(require,module,exports) {
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":"../../node_modules/core-js/modules/_an-object.js"}],"../../node_modules/core-js/modules/es6.regexp.constructor.js":[function(require,module,exports) {

var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_inherit-if-required":"../../node_modules/core-js/modules/_inherit-if-required.js","./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_object-gopn":"../../node_modules/core-js/modules/_object-gopn.js","./_is-regexp":"../../node_modules/core-js/modules/_is-regexp.js","./_flags":"../../node_modules/core-js/modules/_flags.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_wks":"../../node_modules/core-js/modules/_wks.js","./_redefine":"../../node_modules/core-js/modules/_redefine.js","./_set-species":"../../node_modules/core-js/modules/_set-species.js"}],"../../node_modules/core-js/modules/es6.regexp.flags.js":[function(require,module,exports) {
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});

},{"./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_flags":"../../node_modules/core-js/modules/_flags.js"}],"../../node_modules/core-js/modules/_string-at.js":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_to-integer":"../../node_modules/core-js/modules/_to-integer.js","./_defined":"../../node_modules/core-js/modules/_defined.js"}],"../../node_modules/core-js/modules/_advance-string-index.js":[function(require,module,exports) {
'use strict';
var at = require('./_string-at')(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

},{"./_string-at":"../../node_modules/core-js/modules/_string-at.js"}],"../../node_modules/core-js/modules/_regexp-exec-abstract.js":[function(require,module,exports) {
'use strict';

var classof = require('./_classof');
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};

},{"./_classof":"../../node_modules/core-js/modules/_classof.js"}],"../../node_modules/core-js/modules/_regexp-exec.js":[function(require,module,exports) {
'use strict';

var regexpFlags = require('./_flags');

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"./_flags":"../../node_modules/core-js/modules/_flags.js"}],"../../node_modules/core-js/modules/es6.regexp.exec.js":[function(require,module,exports) {
'use strict';
var regexpExec = require('./_regexp-exec');
require('./_export')({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});

},{"./_regexp-exec":"../../node_modules/core-js/modules/_regexp-exec.js","./_export":"../../node_modules/core-js/modules/_export.js"}],"../../node_modules/core-js/modules/_fix-re-wks.js":[function(require,module,exports) {
'use strict';
require('./es6.regexp.exec');
var redefine = require('./_redefine');
var hide = require('./_hide');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');
var regexpExec = require('./_regexp-exec');

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"./es6.regexp.exec":"../../node_modules/core-js/modules/es6.regexp.exec.js","./_redefine":"../../node_modules/core-js/modules/_redefine.js","./_hide":"../../node_modules/core-js/modules/_hide.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_defined":"../../node_modules/core-js/modules/_defined.js","./_wks":"../../node_modules/core-js/modules/_wks.js","./_regexp-exec":"../../node_modules/core-js/modules/_regexp-exec.js"}],"../../node_modules/core-js/modules/es6.regexp.match.js":[function(require,module,exports) {
'use strict';

var anObject = require('./_an-object');
var toLength = require('./_to-length');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');

// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_advance-string-index":"../../node_modules/core-js/modules/_advance-string-index.js","./_regexp-exec-abstract":"../../node_modules/core-js/modules/_regexp-exec-abstract.js","./_fix-re-wks":"../../node_modules/core-js/modules/_fix-re-wks.js"}],"../../node_modules/core-js/modules/es6.regexp.replace.js":[function(require,module,exports) {
var global = arguments[3];
'use strict';

var anObject = require('./_an-object');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

},{"./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_to-integer":"../../node_modules/core-js/modules/_to-integer.js","./_advance-string-index":"../../node_modules/core-js/modules/_advance-string-index.js","./_regexp-exec-abstract":"../../node_modules/core-js/modules/_regexp-exec-abstract.js","./_fix-re-wks":"../../node_modules/core-js/modules/_fix-re-wks.js"}],"../../node_modules/core-js/modules/es6.regexp.split.js":[function(require,module,exports) {
'use strict';

var isRegExp = require('./_is-regexp');
var anObject = require('./_an-object');
var speciesConstructor = require('./_species-constructor');
var advanceStringIndex = require('./_advance-string-index');
var toLength = require('./_to-length');
var callRegExpExec = require('./_regexp-exec-abstract');
var regexpExec = require('./_regexp-exec');
var fails = require('./_fails');
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});

},{"./_is-regexp":"../../node_modules/core-js/modules/_is-regexp.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_species-constructor":"../../node_modules/core-js/modules/_species-constructor.js","./_advance-string-index":"../../node_modules/core-js/modules/_advance-string-index.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_regexp-exec-abstract":"../../node_modules/core-js/modules/_regexp-exec-abstract.js","./_regexp-exec":"../../node_modules/core-js/modules/_regexp-exec.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_fix-re-wks":"../../node_modules/core-js/modules/_fix-re-wks.js"}],"../../node_modules/core-js/modules/es6.regexp.search.js":[function(require,module,exports) {
'use strict';

var anObject = require('./_an-object');
var sameValue = require('./_same-value');
var regExpExec = require('./_regexp-exec-abstract');

// @@search logic
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

},{"./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_same-value":"../../node_modules/core-js/modules/_same-value.js","./_regexp-exec-abstract":"../../node_modules/core-js/modules/_regexp-exec-abstract.js","./_fix-re-wks":"../../node_modules/core-js/modules/_fix-re-wks.js"}],"../../node_modules/core-js/modules/es6.regexp.to-string.js":[function(require,module,exports) {

'use strict';
require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"./es6.regexp.flags":"../../node_modules/core-js/modules/es6.regexp.flags.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_flags":"../../node_modules/core-js/modules/_flags.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_redefine":"../../node_modules/core-js/modules/_redefine.js","./_fails":"../../node_modules/core-js/modules/_fails.js"}],"../../node_modules/core-js/modules/es6.set.js":[function(require,module,exports) {
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection-strong":"../../node_modules/core-js/modules/_collection-strong.js","./_validate-collection":"../../node_modules/core-js/modules/_validate-collection.js","./_collection":"../../node_modules/core-js/modules/_collection.js"}],"../../node_modules/core-js/modules/_wks-ext.js":[function(require,module,exports) {
exports.f = require('./_wks');

},{"./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/core-js/modules/_wks-define.js":[function(require,module,exports) {

var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_core":"../../node_modules/core-js/modules/_core.js","./_library":"../../node_modules/core-js/modules/_library.js","./_wks-ext":"../../node_modules/core-js/modules/_wks-ext.js","./_object-dp":"../../node_modules/core-js/modules/_object-dp.js"}],"../../node_modules/core-js/modules/_enum-keys.js":[function(require,module,exports) {
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-keys":"../../node_modules/core-js/modules/_object-keys.js","./_object-gops":"../../node_modules/core-js/modules/_object-gops.js","./_object-pie":"../../node_modules/core-js/modules/_object-pie.js"}],"../../node_modules/core-js/modules/es6.symbol.js":[function(require,module,exports) {

'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toObject = require('./_to-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $GOPS = require('./_object-gops');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_has":"../../node_modules/core-js/modules/_has.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_export":"../../node_modules/core-js/modules/_export.js","./_redefine":"../../node_modules/core-js/modules/_redefine.js","./_meta":"../../node_modules/core-js/modules/_meta.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_shared":"../../node_modules/core-js/modules/_shared.js","./_set-to-string-tag":"../../node_modules/core-js/modules/_set-to-string-tag.js","./_uid":"../../node_modules/core-js/modules/_uid.js","./_wks":"../../node_modules/core-js/modules/_wks.js","./_wks-ext":"../../node_modules/core-js/modules/_wks-ext.js","./_wks-define":"../../node_modules/core-js/modules/_wks-define.js","./_enum-keys":"../../node_modules/core-js/modules/_enum-keys.js","./_is-array":"../../node_modules/core-js/modules/_is-array.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_to-iobject":"../../node_modules/core-js/modules/_to-iobject.js","./_to-primitive":"../../node_modules/core-js/modules/_to-primitive.js","./_property-desc":"../../node_modules/core-js/modules/_property-desc.js","./_object-create":"../../node_modules/core-js/modules/_object-create.js","./_object-gopn-ext":"../../node_modules/core-js/modules/_object-gopn-ext.js","./_object-gopd":"../../node_modules/core-js/modules/_object-gopd.js","./_object-gops":"../../node_modules/core-js/modules/_object-gops.js","./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_object-keys":"../../node_modules/core-js/modules/_object-keys.js","./_object-gopn":"../../node_modules/core-js/modules/_object-gopn.js","./_object-pie":"../../node_modules/core-js/modules/_object-pie.js","./_library":"../../node_modules/core-js/modules/_library.js","./_hide":"../../node_modules/core-js/modules/_hide.js"}],"../../node_modules/core-js/modules/es7.symbol.async-iterator.js":[function(require,module,exports) {
require('./_wks-define')('asyncIterator');

},{"./_wks-define":"../../node_modules/core-js/modules/_wks-define.js"}],"../../node_modules/core-js/modules/_string-html.js":[function(require,module,exports) {
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_defined":"../../node_modules/core-js/modules/_defined.js"}],"../../node_modules/core-js/modules/es6.string.anchor.js":[function(require,module,exports) {
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"./_string-html":"../../node_modules/core-js/modules/_string-html.js"}],"../../node_modules/core-js/modules/es6.string.big.js":[function(require,module,exports) {
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"./_string-html":"../../node_modules/core-js/modules/_string-html.js"}],"../../node_modules/core-js/modules/es6.string.blink.js":[function(require,module,exports) {
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"./_string-html":"../../node_modules/core-js/modules/_string-html.js"}],"../../node_modules/core-js/modules/es6.string.bold.js":[function(require,module,exports) {
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"./_string-html":"../../node_modules/core-js/modules/_string-html.js"}],"../../node_modules/core-js/modules/es6.string.code-point-at.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_string-at":"../../node_modules/core-js/modules/_string-at.js"}],"../../node_modules/core-js/modules/_string-context.js":[function(require,module,exports) {
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_is-regexp":"../../node_modules/core-js/modules/_is-regexp.js","./_defined":"../../node_modules/core-js/modules/_defined.js"}],"../../node_modules/core-js/modules/_fails-is-regexp.js":[function(require,module,exports) {
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/core-js/modules/es6.string.ends-with.js":[function(require,module,exports) {
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_string-context":"../../node_modules/core-js/modules/_string-context.js","./_fails-is-regexp":"../../node_modules/core-js/modules/_fails-is-regexp.js"}],"../../node_modules/core-js/modules/es6.string.fixed.js":[function(require,module,exports) {
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"./_string-html":"../../node_modules/core-js/modules/_string-html.js"}],"../../node_modules/core-js/modules/es6.string.fontcolor.js":[function(require,module,exports) {
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"./_string-html":"../../node_modules/core-js/modules/_string-html.js"}],"../../node_modules/core-js/modules/es6.string.fontsize.js":[function(require,module,exports) {
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"./_string-html":"../../node_modules/core-js/modules/_string-html.js"}],"../../node_modules/core-js/modules/es6.string.from-code-point.js":[function(require,module,exports) {
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_to-absolute-index":"../../node_modules/core-js/modules/_to-absolute-index.js"}],"../../node_modules/core-js/modules/es6.string.includes.js":[function(require,module,exports) {
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_string-context":"../../node_modules/core-js/modules/_string-context.js","./_fails-is-regexp":"../../node_modules/core-js/modules/_fails-is-regexp.js"}],"../../node_modules/core-js/modules/es6.string.italics.js":[function(require,module,exports) {
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"./_string-html":"../../node_modules/core-js/modules/_string-html.js"}],"../../node_modules/core-js/modules/es6.string.iterator.js":[function(require,module,exports) {
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_string-at":"../../node_modules/core-js/modules/_string-at.js","./_iter-define":"../../node_modules/core-js/modules/_iter-define.js"}],"../../node_modules/core-js/modules/es6.string.link.js":[function(require,module,exports) {
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"./_string-html":"../../node_modules/core-js/modules/_string-html.js"}],"../../node_modules/core-js/modules/_string-repeat.js":[function(require,module,exports) {
'use strict';
var toInteger = require('./_to-integer');
var defined = require('./_defined');

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"./_to-integer":"../../node_modules/core-js/modules/_to-integer.js","./_defined":"../../node_modules/core-js/modules/_defined.js"}],"../../node_modules/core-js/modules/_string-pad.js":[function(require,module,exports) {
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length');
var repeat = require('./_string-repeat');
var defined = require('./_defined');

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_string-repeat":"../../node_modules/core-js/modules/_string-repeat.js","./_defined":"../../node_modules/core-js/modules/_defined.js"}],"../../node_modules/core-js/modules/es7.string.pad-start.js":[function(require,module,exports) {
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_string-pad":"../../node_modules/core-js/modules/_string-pad.js","./_user-agent":"../../node_modules/core-js/modules/_user-agent.js"}],"../../node_modules/core-js/modules/es7.string.pad-end.js":[function(require,module,exports) {
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_string-pad":"../../node_modules/core-js/modules/_string-pad.js","./_user-agent":"../../node_modules/core-js/modules/_user-agent.js"}],"../../node_modules/core-js/modules/es6.string.raw.js":[function(require,module,exports) {
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_to-iobject":"../../node_modules/core-js/modules/_to-iobject.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js"}],"../../node_modules/core-js/modules/es6.string.repeat.js":[function(require,module,exports) {
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_string-repeat":"../../node_modules/core-js/modules/_string-repeat.js"}],"../../node_modules/core-js/modules/es6.string.small.js":[function(require,module,exports) {
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"./_string-html":"../../node_modules/core-js/modules/_string-html.js"}],"../../node_modules/core-js/modules/es6.string.starts-with.js":[function(require,module,exports) {
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_string-context":"../../node_modules/core-js/modules/_string-context.js","./_fails-is-regexp":"../../node_modules/core-js/modules/_fails-is-regexp.js"}],"../../node_modules/core-js/modules/es6.string.strike.js":[function(require,module,exports) {
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"./_string-html":"../../node_modules/core-js/modules/_string-html.js"}],"../../node_modules/core-js/modules/es6.string.sub.js":[function(require,module,exports) {
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"./_string-html":"../../node_modules/core-js/modules/_string-html.js"}],"../../node_modules/core-js/modules/es6.string.sup.js":[function(require,module,exports) {
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"./_string-html":"../../node_modules/core-js/modules/_string-html.js"}],"../../node_modules/core-js/modules/es7.string.trim-left.js":[function(require,module,exports) {
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

},{"./_string-trim":"../../node_modules/core-js/modules/_string-trim.js"}],"../../node_modules/core-js/modules/es7.string.trim-right.js":[function(require,module,exports) {
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

},{"./_string-trim":"../../node_modules/core-js/modules/_string-trim.js"}],"../../node_modules/core-js/modules/_typed.js":[function(require,module,exports) {

var global = require('./_global');
var hide = require('./_hide');
var uid = require('./_uid');
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_hide":"../../node_modules/core-js/modules/_hide.js","./_uid":"../../node_modules/core-js/modules/_uid.js"}],"../../node_modules/core-js/modules/_to-index.js":[function(require,module,exports) {
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"./_to-integer":"../../node_modules/core-js/modules/_to-integer.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js"}],"../../node_modules/core-js/modules/_typed-buffer.js":[function(require,module,exports) {

'use strict';
var global = require('./_global');
var DESCRIPTORS = require('./_descriptors');
var LIBRARY = require('./_library');
var $typed = require('./_typed');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var fails = require('./_fails');
var anInstance = require('./_an-instance');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var toIndex = require('./_to-index');
var gOPN = require('./_object-gopn').f;
var dP = require('./_object-dp').f;
var arrayFill = require('./_array-fill');
var setToStringTag = require('./_set-to-string-tag');
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_library":"../../node_modules/core-js/modules/_library.js","./_typed":"../../node_modules/core-js/modules/_typed.js","./_hide":"../../node_modules/core-js/modules/_hide.js","./_redefine-all":"../../node_modules/core-js/modules/_redefine-all.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_an-instance":"../../node_modules/core-js/modules/_an-instance.js","./_to-integer":"../../node_modules/core-js/modules/_to-integer.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_to-index":"../../node_modules/core-js/modules/_to-index.js","./_object-gopn":"../../node_modules/core-js/modules/_object-gopn.js","./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_array-fill":"../../node_modules/core-js/modules/_array-fill.js","./_set-to-string-tag":"../../node_modules/core-js/modules/_set-to-string-tag.js"}],"../../node_modules/core-js/modules/es6.typed.array-buffer.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_typed":"../../node_modules/core-js/modules/_typed.js","./_typed-buffer":"../../node_modules/core-js/modules/_typed-buffer.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_to-absolute-index":"../../node_modules/core-js/modules/_to-absolute-index.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_global":"../../node_modules/core-js/modules/_global.js","./_species-constructor":"../../node_modules/core-js/modules/_species-constructor.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_set-species":"../../node_modules/core-js/modules/_set-species.js"}],"../../node_modules/core-js/modules/_typed-array.js":[function(require,module,exports) {
var global = arguments[3];
'use strict';
if (require('./_descriptors')) {
  var LIBRARY = require('./_library');
  var global = require('./_global');
  var fails = require('./_fails');
  var $export = require('./_export');
  var $typed = require('./_typed');
  var $buffer = require('./_typed-buffer');
  var ctx = require('./_ctx');
  var anInstance = require('./_an-instance');
  var propertyDesc = require('./_property-desc');
  var hide = require('./_hide');
  var redefineAll = require('./_redefine-all');
  var toInteger = require('./_to-integer');
  var toLength = require('./_to-length');
  var toIndex = require('./_to-index');
  var toAbsoluteIndex = require('./_to-absolute-index');
  var toPrimitive = require('./_to-primitive');
  var has = require('./_has');
  var classof = require('./_classof');
  var isObject = require('./_is-object');
  var toObject = require('./_to-object');
  var isArrayIter = require('./_is-array-iter');
  var create = require('./_object-create');
  var getPrototypeOf = require('./_object-gpo');
  var gOPN = require('./_object-gopn').f;
  var getIterFn = require('./core.get-iterator-method');
  var uid = require('./_uid');
  var wks = require('./_wks');
  var createArrayMethod = require('./_array-methods');
  var createArrayIncludes = require('./_array-includes');
  var speciesConstructor = require('./_species-constructor');
  var ArrayIterators = require('./es6.array.iterator');
  var Iterators = require('./_iterators');
  var $iterDetect = require('./_iter-detect');
  var setSpecies = require('./_set-species');
  var arrayFill = require('./_array-fill');
  var arrayCopyWithin = require('./_array-copy-within');
  var $DP = require('./_object-dp');
  var $GOPD = require('./_object-gopd');
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };

},{"./_descriptors":"../../node_modules/core-js/modules/_descriptors.js","./_library":"../../node_modules/core-js/modules/_library.js","./_global":"../../node_modules/core-js/modules/_global.js","./_fails":"../../node_modules/core-js/modules/_fails.js","./_export":"../../node_modules/core-js/modules/_export.js","./_typed":"../../node_modules/core-js/modules/_typed.js","./_typed-buffer":"../../node_modules/core-js/modules/_typed-buffer.js","./_ctx":"../../node_modules/core-js/modules/_ctx.js","./_an-instance":"../../node_modules/core-js/modules/_an-instance.js","./_property-desc":"../../node_modules/core-js/modules/_property-desc.js","./_hide":"../../node_modules/core-js/modules/_hide.js","./_redefine-all":"../../node_modules/core-js/modules/_redefine-all.js","./_to-integer":"../../node_modules/core-js/modules/_to-integer.js","./_to-length":"../../node_modules/core-js/modules/_to-length.js","./_to-index":"../../node_modules/core-js/modules/_to-index.js","./_to-absolute-index":"../../node_modules/core-js/modules/_to-absolute-index.js","./_to-primitive":"../../node_modules/core-js/modules/_to-primitive.js","./_has":"../../node_modules/core-js/modules/_has.js","./_classof":"../../node_modules/core-js/modules/_classof.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_to-object":"../../node_modules/core-js/modules/_to-object.js","./_is-array-iter":"../../node_modules/core-js/modules/_is-array-iter.js","./_object-create":"../../node_modules/core-js/modules/_object-create.js","./_object-gpo":"../../node_modules/core-js/modules/_object-gpo.js","./_object-gopn":"../../node_modules/core-js/modules/_object-gopn.js","./core.get-iterator-method":"../../node_modules/core-js/modules/core.get-iterator-method.js","./_uid":"../../node_modules/core-js/modules/_uid.js","./_wks":"../../node_modules/core-js/modules/_wks.js","./_array-methods":"../../node_modules/core-js/modules/_array-methods.js","./_array-includes":"../../node_modules/core-js/modules/_array-includes.js","./_species-constructor":"../../node_modules/core-js/modules/_species-constructor.js","./es6.array.iterator":"../../node_modules/core-js/modules/es6.array.iterator.js","./_iterators":"../../node_modules/core-js/modules/_iterators.js","./_iter-detect":"../../node_modules/core-js/modules/_iter-detect.js","./_set-species":"../../node_modules/core-js/modules/_set-species.js","./_array-fill":"../../node_modules/core-js/modules/_array-fill.js","./_array-copy-within":"../../node_modules/core-js/modules/_array-copy-within.js","./_object-dp":"../../node_modules/core-js/modules/_object-dp.js","./_object-gopd":"../../node_modules/core-js/modules/_object-gopd.js"}],"../../node_modules/core-js/modules/es6.typed.int8-array.js":[function(require,module,exports) {
require('./_typed-array')('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"../../node_modules/core-js/modules/_typed-array.js"}],"../../node_modules/core-js/modules/es6.typed.uint8-array.js":[function(require,module,exports) {
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"../../node_modules/core-js/modules/_typed-array.js"}],"../../node_modules/core-js/modules/es6.typed.uint8-clamped-array.js":[function(require,module,exports) {
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"./_typed-array":"../../node_modules/core-js/modules/_typed-array.js"}],"../../node_modules/core-js/modules/es6.typed.int16-array.js":[function(require,module,exports) {
require('./_typed-array')('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"../../node_modules/core-js/modules/_typed-array.js"}],"../../node_modules/core-js/modules/es6.typed.uint16-array.js":[function(require,module,exports) {
require('./_typed-array')('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"../../node_modules/core-js/modules/_typed-array.js"}],"../../node_modules/core-js/modules/es6.typed.int32-array.js":[function(require,module,exports) {
require('./_typed-array')('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"../../node_modules/core-js/modules/_typed-array.js"}],"../../node_modules/core-js/modules/es6.typed.uint32-array.js":[function(require,module,exports) {
require('./_typed-array')('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"../../node_modules/core-js/modules/_typed-array.js"}],"../../node_modules/core-js/modules/es6.typed.float32-array.js":[function(require,module,exports) {
require('./_typed-array')('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"../../node_modules/core-js/modules/_typed-array.js"}],"../../node_modules/core-js/modules/es6.typed.float64-array.js":[function(require,module,exports) {
require('./_typed-array')('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"../../node_modules/core-js/modules/_typed-array.js"}],"../../node_modules/core-js/modules/_collection-weak.js":[function(require,module,exports) {
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_redefine-all":"../../node_modules/core-js/modules/_redefine-all.js","./_meta":"../../node_modules/core-js/modules/_meta.js","./_an-object":"../../node_modules/core-js/modules/_an-object.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_an-instance":"../../node_modules/core-js/modules/_an-instance.js","./_for-of":"../../node_modules/core-js/modules/_for-of.js","./_array-methods":"../../node_modules/core-js/modules/_array-methods.js","./_has":"../../node_modules/core-js/modules/_has.js","./_validate-collection":"../../node_modules/core-js/modules/_validate-collection.js"}],"../../node_modules/core-js/modules/es6.weak-map.js":[function(require,module,exports) {

'use strict';
var global = require('./_global');
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var validate = require('./_validate-collection');
var NATIVE_WEAK_MAP = require('./_validate-collection');
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_array-methods":"../../node_modules/core-js/modules/_array-methods.js","./_redefine":"../../node_modules/core-js/modules/_redefine.js","./_meta":"../../node_modules/core-js/modules/_meta.js","./_object-assign":"../../node_modules/core-js/modules/_object-assign.js","./_collection-weak":"../../node_modules/core-js/modules/_collection-weak.js","./_is-object":"../../node_modules/core-js/modules/_is-object.js","./_validate-collection":"../../node_modules/core-js/modules/_validate-collection.js","./_collection":"../../node_modules/core-js/modules/_collection.js"}],"../../node_modules/core-js/modules/es6.weak-set.js":[function(require,module,exports) {
'use strict';
var weak = require('./_collection-weak');
var validate = require('./_validate-collection');
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
require('./_collection')(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"./_collection-weak":"../../node_modules/core-js/modules/_collection-weak.js","./_validate-collection":"../../node_modules/core-js/modules/_validate-collection.js","./_collection":"../../node_modules/core-js/modules/_collection.js"}],"../../node_modules/core-js/modules/web.timers.js":[function(require,module,exports) {

// ie9- setTimeout & setInterval additional parameters fix
var global = require('./_global');
var $export = require('./_export');
var userAgent = require('./_user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"./_global":"../../node_modules/core-js/modules/_global.js","./_export":"../../node_modules/core-js/modules/_export.js","./_user-agent":"../../node_modules/core-js/modules/_user-agent.js"}],"../../node_modules/core-js/modules/web.immediate.js":[function(require,module,exports) {
var $export = require('./_export');
var $task = require('./_task');
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"./_export":"../../node_modules/core-js/modules/_export.js","./_task":"../../node_modules/core-js/modules/_task.js"}],"../../node_modules/core-js/modules/web.dom.iterable.js":[function(require,module,exports) {

var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./es6.array.iterator":"../../node_modules/core-js/modules/es6.array.iterator.js","./_object-keys":"../../node_modules/core-js/modules/_object-keys.js","./_redefine":"../../node_modules/core-js/modules/_redefine.js","./_global":"../../node_modules/core-js/modules/_global.js","./_hide":"../../node_modules/core-js/modules/_hide.js","./_iterators":"../../node_modules/core-js/modules/_iterators.js","./_wks":"../../node_modules/core-js/modules/_wks.js"}],"../../node_modules/regenerator-runtime/runtime.js":[function(require,module,exports) {
var define;
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],"common/utilities.js":[function(require,module,exports) {
/* FOR OLDER HEADER (BURGER)NAV BAR */
var open = document.getElementById('burger');

if (open) {
  open.onclick = function () {
    document.getElementById('mySidepanel').style.width = '200px';
  };
}

var close = document.getElementById('close-btn');

if (close) {
  close.href = 'javascript:void(0)';

  close.onclick = function () {
    document.getElementById('mySidepanel').style.width = '0';
  };
}

var togglePassword = document.getElementById('togglePassword');

if (togglePassword) {
  togglePassword.addEventListener('click', function (e) {
    document.getElementsByName('password')[0];

    if (document.getElementsByName('password')[0].type === 'password') {
      document.getElementsByName('password')[0].type = 'text';
    } else {
      document.getElementsByName('password')[0].type = 'password';
    }

    this.classList.toggle('bi-eye');
  });
}
},{}],"common/redirectToMain.js":[function(require,module,exports) {
var redirectToMain = document.getElementById('redirect-to-main');

if (redirectToMain) {
  setTimeout(function () {
    return location.assign('/');
  }, 3000);
}
},{}],"common/loginSignupRedirect.js":[function(require,module,exports) {
var loginRedirectBtn = document.getElementById('login-redirect-btn');

if (loginRedirectBtn) {
  loginRedirectBtn.addEventListener('click', function () {
    var redirectlink;
    document.getElementsByName('login-radio').forEach(function (e) {
      if (e.checked) {
        redirectlink = e.value;
      }
    });

    if (!redirectlink) {
      alert('Please select an option');
      return;
    }

    redirectlink = '/' + redirectlink + '-login';
    document.getElementById('login-redirect-link').href = redirectlink;
  });
}

var signupRedirectBtn = document.getElementById('signup-redirect-btn');

if (signupRedirectBtn) {
  signupRedirectBtn.addEventListener('click', function () {
    var redirectlink;
    document.getElementsByName('signup-radio').forEach(function (e) {
      if (e.checked) {
        redirectlink = e.value;
      }
    });

    if (!redirectlink) {
      alert('Please select an option');
      return;
    }

    redirectlink = '/' + redirectlink + '-signup';
    document.getElementById('signup-redirect-link').href = redirectlink;
  });
}
},{}],"../../node_modules/axios/lib/helpers/bind.js":[function(require,module,exports) {
'use strict';

module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

},{}],"../../node_modules/axios/lib/utils.js":[function(require,module,exports) {
'use strict';

var bind = require('./helpers/bind');

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};

},{"./helpers/bind":"../../node_modules/axios/lib/helpers/bind.js"}],"../../node_modules/axios/lib/helpers/buildURL.js":[function(require,module,exports) {
'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

},{"./../utils":"../../node_modules/axios/lib/utils.js"}],"../../node_modules/axios/lib/core/InterceptorManager.js":[function(require,module,exports) {
'use strict';

var utils = require('./../utils');

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

},{"./../utils":"../../node_modules/axios/lib/utils.js"}],"../../node_modules/axios/lib/core/transformData.js":[function(require,module,exports) {
'use strict';

var utils = require('./../utils');

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};

},{"./../utils":"../../node_modules/axios/lib/utils.js"}],"../../node_modules/axios/lib/cancel/isCancel.js":[function(require,module,exports) {
'use strict';

module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

},{}],"../../node_modules/axios/lib/helpers/normalizeHeaderName.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

},{"../utils":"../../node_modules/axios/lib/utils.js"}],"../../node_modules/axios/lib/core/enhanceError.js":[function(require,module,exports) {
'use strict';

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};

},{}],"../../node_modules/axios/lib/core/createError.js":[function(require,module,exports) {
'use strict';

var enhanceError = require('./enhanceError');

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

},{"./enhanceError":"../../node_modules/axios/lib/core/enhanceError.js"}],"../../node_modules/axios/lib/core/settle.js":[function(require,module,exports) {
'use strict';

var createError = require('./createError');

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};

},{"./createError":"../../node_modules/axios/lib/core/createError.js"}],"../../node_modules/axios/lib/helpers/cookies.js":[function(require,module,exports) {
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);

},{"./../utils":"../../node_modules/axios/lib/utils.js"}],"../../node_modules/axios/lib/helpers/isAbsoluteURL.js":[function(require,module,exports) {
'use strict';

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

},{}],"../../node_modules/axios/lib/helpers/combineURLs.js":[function(require,module,exports) {
'use strict';

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};

},{}],"../../node_modules/axios/lib/core/buildFullPath.js":[function(require,module,exports) {
'use strict';

var isAbsoluteURL = require('../helpers/isAbsoluteURL');
var combineURLs = require('../helpers/combineURLs');

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};

},{"../helpers/isAbsoluteURL":"../../node_modules/axios/lib/helpers/isAbsoluteURL.js","../helpers/combineURLs":"../../node_modules/axios/lib/helpers/combineURLs.js"}],"../../node_modules/axios/lib/helpers/parseHeaders.js":[function(require,module,exports) {
'use strict';

var utils = require('./../utils');

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

},{"./../utils":"../../node_modules/axios/lib/utils.js"}],"../../node_modules/axios/lib/helpers/isURLSameOrigin.js":[function(require,module,exports) {
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);

},{"./../utils":"../../node_modules/axios/lib/utils.js"}],"../../node_modules/axios/lib/adapters/xhr.js":[function(require,module,exports) {
'use strict';

var utils = require('./../utils');
var settle = require('./../core/settle');
var cookies = require('./../helpers/cookies');
var buildURL = require('./../helpers/buildURL');
var buildFullPath = require('../core/buildFullPath');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

},{"./../utils":"../../node_modules/axios/lib/utils.js","./../core/settle":"../../node_modules/axios/lib/core/settle.js","./../helpers/cookies":"../../node_modules/axios/lib/helpers/cookies.js","./../helpers/buildURL":"../../node_modules/axios/lib/helpers/buildURL.js","../core/buildFullPath":"../../node_modules/axios/lib/core/buildFullPath.js","./../helpers/parseHeaders":"../../node_modules/axios/lib/helpers/parseHeaders.js","./../helpers/isURLSameOrigin":"../../node_modules/axios/lib/helpers/isURLSameOrigin.js","../core/createError":"../../node_modules/axios/lib/core/createError.js"}],"../../node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"../../node_modules/axios/lib/defaults.js":[function(require,module,exports) {
var process = require("process");
'use strict';

var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = require('./adapters/http');
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

},{"./utils":"../../node_modules/axios/lib/utils.js","./helpers/normalizeHeaderName":"../../node_modules/axios/lib/helpers/normalizeHeaderName.js","./adapters/xhr":"../../node_modules/axios/lib/adapters/xhr.js","./adapters/http":"../../node_modules/axios/lib/adapters/xhr.js","process":"../../node_modules/process/browser.js"}],"../../node_modules/axios/lib/core/dispatchRequest.js":[function(require,module,exports) {
'use strict';

var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

},{"./../utils":"../../node_modules/axios/lib/utils.js","./transformData":"../../node_modules/axios/lib/core/transformData.js","../cancel/isCancel":"../../node_modules/axios/lib/cancel/isCancel.js","../defaults":"../../node_modules/axios/lib/defaults.js"}],"../../node_modules/axios/lib/core/mergeConfig.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};

},{"../utils":"../../node_modules/axios/lib/utils.js"}],"../../node_modules/axios/lib/core/Axios.js":[function(require,module,exports) {
'use strict';

var utils = require('./../utils');
var buildURL = require('../helpers/buildURL');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var mergeConfig = require('./mergeConfig');

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;

},{"./../utils":"../../node_modules/axios/lib/utils.js","../helpers/buildURL":"../../node_modules/axios/lib/helpers/buildURL.js","./InterceptorManager":"../../node_modules/axios/lib/core/InterceptorManager.js","./dispatchRequest":"../../node_modules/axios/lib/core/dispatchRequest.js","./mergeConfig":"../../node_modules/axios/lib/core/mergeConfig.js"}],"../../node_modules/axios/lib/cancel/Cancel.js":[function(require,module,exports) {
'use strict';

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;

},{}],"../../node_modules/axios/lib/cancel/CancelToken.js":[function(require,module,exports) {
'use strict';

var Cancel = require('./Cancel');

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

},{"./Cancel":"../../node_modules/axios/lib/cancel/Cancel.js"}],"../../node_modules/axios/lib/helpers/spread.js":[function(require,module,exports) {
'use strict';

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

},{}],"../../node_modules/axios/lib/helpers/isAxiosError.js":[function(require,module,exports) {
'use strict';

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return (typeof payload === 'object') && (payload.isAxiosError === true);
};

},{}],"../../node_modules/axios/lib/axios.js":[function(require,module,exports) {
'use strict';

var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var mergeConfig = require('./core/mergeConfig');
var defaults = require('./defaults');

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

// Expose isAxiosError
axios.isAxiosError = require('./helpers/isAxiosError');

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./utils":"../../node_modules/axios/lib/utils.js","./helpers/bind":"../../node_modules/axios/lib/helpers/bind.js","./core/Axios":"../../node_modules/axios/lib/core/Axios.js","./core/mergeConfig":"../../node_modules/axios/lib/core/mergeConfig.js","./defaults":"../../node_modules/axios/lib/defaults.js","./cancel/Cancel":"../../node_modules/axios/lib/cancel/Cancel.js","./cancel/CancelToken":"../../node_modules/axios/lib/cancel/CancelToken.js","./cancel/isCancel":"../../node_modules/axios/lib/cancel/isCancel.js","./helpers/spread":"../../node_modules/axios/lib/helpers/spread.js","./helpers/isAxiosError":"../../node_modules/axios/lib/helpers/isAxiosError.js"}],"../../node_modules/axios/index.js":[function(require,module,exports) {
module.exports = require('./lib/axios');
},{"./lib/axios":"../../node_modules/axios/lib/axios.js"}],"common/loginSignup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.login = exports.signUp = void 0;

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var signUp = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {
    var res;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return (0, _axios.default)({
              method: 'POST',
              url: '/api/v1/auth/signup',
              data: data,
              headers: {
                'Content-type': 'application/json; charset=UTF-8'
              }
            });

          case 3:
            res = _context.sent;
            return _context.abrupt("return", res);

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
            alert('Error :\n* password should be min 5 characters long *\nor\n*User with this email already exists!*');

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 7]]);
  }));

  return function signUp(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.signUp = signUp;

var login = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(data) {
    var res;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return (0, _axios.default)({
              method: 'POST',
              url: '/api/v1/auth/login',
              data: data,
              headers: {
                'Content-type': 'application/json; charset=UTF-8'
              }
            });

          case 3:
            res = _context2.sent;
            return _context2.abrupt("return", res);

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](0);
            alert('Wrong Email or Password !');

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 7]]);
  }));

  return function login(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

exports.login = login;
},{"axios":"../../node_modules/axios/index.js"}],"common/loginSignupHandler.js":[function(require,module,exports) {
"use strict";

var _loginSignup = require("./loginSignup");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var userSignup = document.getElementById('user-signup');

if (userSignup) {
  userSignup.addEventListener('click', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {
      var name, email, phone, password, confirmPassword, address, district, pincode, state, response;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              e.preventDefault();
              userSignup.value = 'Please Wait !';
              name = document.getElementById('full-name').value;
              email = document.getElementById('email').value;
              phone = document.getElementById('phone-number').value;
              password = document.getElementById('user-password').value;
              confirmPassword = document.getElementById('confirm-password').value; // const institute = document.getElementById('institute').value

              address = document.getElementById('address').value; // const address2 = document.getElementById('address2').value
              // const address3 = document.getElementById('address3').value
              // const city = document.getElementById('address-city').value

              district = document.getElementById('address-district').value;
              pincode = document.getElementById('pincode').value;
              state = document.getElementById('address-state').value;

              if (name) {
                _context.next = 15;
                break;
              }

              alert('Please provide your name');
              _context.next = 61;
              break;

            case 15:
              if (phone) {
                _context.next = 19;
                break;
              }

              alert('Please provide your phone number');
              _context.next = 61;
              break;

            case 19:
              if (!(isNaN(phone * 1) || phone.length !== 10)) {
                _context.next = 23;
                break;
              }

              alert('Invalid phone number');
              _context.next = 61;
              break;

            case 23:
              if (password) {
                _context.next = 27;
                break;
              }

              alert('Please provide password');
              _context.next = 61;
              break;

            case 27:
              if (confirmPassword) {
                _context.next = 31;
                break;
              }

              alert('Please confirm your password');
              _context.next = 61;
              break;

            case 31:
              if (!(password !== confirmPassword)) {
                _context.next = 35;
                break;
              }

              alert('Passwords do not match');
              _context.next = 61;
              break;

            case 35:
              if (address) {
                _context.next = 39;
                break;
              }

              alert('please provide your address');
              _context.next = 61;
              break;

            case 39:
              if (district) {
                _context.next = 43;
                break;
              }

              alert('please provide your district');
              _context.next = 61;
              break;

            case 43:
              if (pincode) {
                _context.next = 47;
                break;
              }

              alert('please provide your pincode');
              _context.next = 61;
              break;

            case 47:
              if (!(isNaN(pincode * 1) || pincode.length !== 6)) {
                _context.next = 51;
                break;
              }

              alert('incorrect pincode');
              _context.next = 61;
              break;

            case 51:
              if (state) {
                _context.next = 55;
                break;
              }

              alert('please provide your state');
              _context.next = 61;
              break;

            case 55:
              _context.next = 57;
              return (0, _loginSignup.signUp)({
                type: 'user',
                name: name,
                email: email,
                phone: phone,
                password: password,
                confirmPassword: confirmPassword,
                // institute,
                address: address,
                district: district,
                pincode: pincode,
                state: state
              });

            case 57:
              response = _context.sent;

              if (response.data.status === 'success') {
                alert('Account created successfully!');
              } //after response is recieved set button text as before


              userSignup.value = 'Create an Account'; // redirect to dasshboard

              location.reload(); // replace later

            case 61:
              userSignup.value = 'Create an Account';

            case 62:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
}

var instituteSignup = document.getElementById('institute-signup');

if (instituteSignup) {
  instituteSignup.addEventListener('click', /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(e) {
      var instituteType, name, email, phone, alternatePhone, password, confirmPassword, address, district, pincode, state, numbers, response;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              e.preventDefault(); // instituteSignup.value = 'Please Wait !'

              document.getElementsByName('institute').forEach(function (p) {
                if (p.checked) {
                  instituteType = p.value;
                }
              });
              name = document.getElementById('full-name').value;
              email = document.getElementById('email').value;
              phone = document.getElementById('phone-number').value;
              alternatePhone = document.getElementById('alternate-phone-number').value;
              password = document.getElementById('user-password').value;
              confirmPassword = document.getElementById('confirm-password').value;
              address = document.getElementById('address').value;
              district = document.getElementById('address-district').value;
              pincode = document.getElementById('pincode').value;
              state = document.getElementById('address-state').value;

              if (instituteType) {
                _context2.next = 16;
                break;
              }

              alert('Please select Institute Type');
              _context2.next = 71;
              break;

            case 16:
              if (name) {
                _context2.next = 20;
                break;
              }

              alert('Please provide your name');
              _context2.next = 71;
              break;

            case 20:
              if (email) {
                _context2.next = 24;
                break;
              }

              alert('Please provide your email');
              _context2.next = 71;
              break;

            case 24:
              if (phone) {
                _context2.next = 28;
                break;
              }

              alert('Please provide your phone number');
              _context2.next = 71;
              break;

            case 28:
              if (!(isNaN(phone * 1) || phone.length !== 10)) {
                _context2.next = 32;
                break;
              }

              alert('Invalid phone number');
              _context2.next = 71;
              break;

            case 32:
              if (password) {
                _context2.next = 36;
                break;
              }

              alert('Please provide password');
              _context2.next = 71;
              break;

            case 36:
              if (confirmPassword) {
                _context2.next = 40;
                break;
              }

              alert('Please confirm your password');
              _context2.next = 71;
              break;

            case 40:
              if (!(password !== confirmPassword)) {
                _context2.next = 44;
                break;
              }

              alert('Passwords do not match');
              _context2.next = 71;
              break;

            case 44:
              if (address) {
                _context2.next = 48;
                break;
              }

              alert('please provide your address');
              _context2.next = 71;
              break;

            case 48:
              if (district) {
                _context2.next = 52;
                break;
              }

              alert('please provide your district');
              _context2.next = 71;
              break;

            case 52:
              if (pincode) {
                _context2.next = 56;
                break;
              }

              alert('please provide your pincode');
              _context2.next = 71;
              break;

            case 56:
              if (!(isNaN(pincode * 1) || pincode.length !== 6)) {
                _context2.next = 60;
                break;
              }

              alert('incorrect pincode');
              _context2.next = 71;
              break;

            case 60:
              if (state) {
                _context2.next = 64;
                break;
              }

              alert('please provide your state');
              _context2.next = 71;
              break;

            case 64:
              numbers = [phone];

              if (alternatePhone) {
                numbers.push(alternatePhone);
              } // server request


              _context2.next = 68;
              return (0, _loginSignup.signUp)({
                type: 'institute',
                instituteType: instituteType,
                name: name,
                email: email,
                phone: numbers,
                password: password,
                confirmPassword: confirmPassword,
                address: address,
                district: district,
                pincode: pincode,
                state: state
              });

            case 68:
              response = _context2.sent;
              console.log(response);

              if (response.data.status === 'success') {
                alert('Account created successfully!');
                location.assign('/institute/dashboard');
              }

            case 71:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }());
}

var userLogin = document.getElementById('user-login');

if (userLogin) {
  userLogin.addEventListener('click', /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(e) {
      var eorp, password, email, phone, authRes;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              e.preventDefault();
              eorp = document.getElementById('email-or-mobile').value;
              password = document.getElementById('user-password').value;
              email = null, phone = null;

              if (!(!password || !eorp)) {
                _context3.next = 8;
                break;
              }

              alert('Please provide email or phone and password !');
              _context3.next = 22;
              break;

            case 8:
              if (!(isNaN(eorp * 1) && eorp.includes('@'))) {
                _context3.next = 12;
                break;
              }

              email = eorp;
              _context3.next = 18;
              break;

            case 12:
              if (!(eorp.length === 10 && !isNaN(eorp * 1))) {
                _context3.next = 16;
                break;
              }

              phone = eorp;
              _context3.next = 18;
              break;

            case 16:
              alert('Incorrect Email or phone');
              return _context3.abrupt("return");

            case 18:
              _context3.next = 20;
              return (0, _loginSignup.login)({
                email: email,
                phone: phone,
                password: password,
                type: 'user'
              });

            case 20:
              authRes = _context3.sent;

              if (authRes.data.status === 'success') {
                location.assign('/dashboard');
              }

            case 22:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x3) {
      return _ref3.apply(this, arguments);
    };
  }());
}

var instituteLogin = document.getElementById('institute-login');

if (instituteLogin) {
  instituteLogin.addEventListener('click', /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(e) {
      var email, password, authRes;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              e.preventDefault();
              email = document.getElementById('institute-id').value;
              password = document.getElementById('institute-password').value;

              if (!(!password || !email)) {
                _context4.next = 7;
                break;
              }

              alert('Please provide email and password !');
              _context4.next = 11;
              break;

            case 7:
              _context4.next = 9;
              return (0, _loginSignup.login)({
                email: email,
                password: password,
                type: 'institute'
              });

            case 9:
              authRes = _context4.sent;

              if (authRes.data.status === 'success') {
                location.assign('/institute/dashboard');
              }

            case 11:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x4) {
      return _ref4.apply(this, arguments);
    };
  }());
}
},{"./loginSignup":"common/loginSignup.js"}],"utils/staticData.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.months = void 0;
var months = {
  1: 'JAN',
  2: 'FEB',
  3: 'Mar',
  4: 'APR',
  5: 'MAY',
  6: 'JUN',
  7: 'JUL',
  8: 'AUG',
  9: 'SEP',
  10: 'OCT',
  11: 'NOV',
  12: 'DEC'
};
exports.months = months;
},{}],"user/dashboard.js":[function(require,module,exports) {
"use strict";

var _axios = _interopRequireDefault(require("axios"));

var _staticData = require("../utils/staticData");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var addStudentImg = document.getElementById('addStudent-img');

if (addStudentImg) {
  addStudentImg.addEventListener('click', function () {
    location.assign('/link-student');
  });
}

if (document.location.pathname === '/dashboard') {
  window.onload = function () {
    document.getElementsByName('card').forEach(function (checkbox) {
      checkbox.removeAttribute('checked');
    });
    var flag = 0;

    for (var i = 0; i < 5; i++) {
      if (!localStorage.getItem("".concat(i))) {
        flag = 1;
        localStorage.removeItem("".concat(i));
      }
    }

    document.getElementsByName('card').forEach(function (c) {
      c.onchange = function () {
        if (c.parentElement.classList.length === 2) {
          c.parentElement.style.backgroundColor = '#f8f8ff';
          c.parentElement.classList.remove('selected');
        } else if (c.parentElement.classList.length === 1) {
          c.parentElement.classList.add('selected');
          c.parentElement.style.backgroundColor = 'lightgreen';
        }
      };
    });
  };
}

var checkout = _toConsumableArray(document.getElementsByClassName('checkout'));

if (checkout.length) {
  //since there are two buttons for proceeding to payment page
  checkout.forEach(function (button) {
    button.onclick = function () {
      var selectedStudents = _toConsumableArray(document.getElementsByClassName('selected'));

      if (!selectedStudents.length) {
        alert('Please select at least one student!');
        return;
      }

      var i = 0;
      selectedStudents.forEach(function (s) {
        var dataset = s.children;
        var nextPay = new Date("02-".concat(dataset[8].textContent.split(': ')[1]));
        var month = nextPay.getMonth() + 2;
        var year = nextPay.getFullYear();
        nextPay = new Date("25-".concat(_staticData.months["".concat(month)], "-").concat(year));
        var studObj = {
          institute: dataset[3].id,
          class: dataset[1].textContent,
          nextPay: nextPay,
          name: dataset[0].textContent
        };
        localStorage.setItem("".concat(i), JSON.stringify(studObj));
        i++;
      });
      location.assign('/checkout');
    };
  });
} //add for payment


var addToCart = _toConsumableArray(document.getElementsByName('add-to-cart'));

if (addToCart.length) {
  addToCart.forEach(function (button) {
    button.onclick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var _this = this;

      var selectedRows, data, res;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              // data variable is array of ovjects
              //  [{
              //   student : studentId,
              //   institute : array of institute ids,
              //   lastFeePriority : priority of last paid fee,
              //   fee : feeId
              // }]
              selectedRows = [];

              _toConsumableArray(document.getElementsByName("".concat(this.id, "-select"))).forEach(function (instCheck) {
                if (instCheck.checked) {
                  selectedRows.push(instCheck.parentElement.parentElement);
                }
              });

              if (selectedRows.length) {
                _context.next = 6;
                break;
              }

              document.getElementById("".concat(this.id, "-err")).innerText = 'Please select at least 1 institute.';
              return _context.abrupt("return");

            case 6:
              data = selectedRows.map(function (row) {
                var institute = row.children[0].id;
                var lastFee = row.children[1].id || null; // lastFee = lastFee.split('-');

                return {
                  student: _this.id,
                  institute: institute,
                  // lastFeePriority: lastFee[1] * 1,
                  lastFee: lastFee
                };
              });
              _context.next = 9;
              return (0, _axios.default)({
                method: 'POST',
                url: '/api/v1/student/add-to-cart',
                data: data,
                headers: {
                  'Content-type': 'application/json; charset=UTF-8'
                }
              });

            case 9:
              res = _context.sent;

              if (res.data.status === 'success') {
                alert('added successfully!');
                location.reload(true);
              }

              _context.next = 16;
              break;

            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](0);
              console.log(_context.t0.response);

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 13]]);
    }));
  });
}
},{"axios":"../../node_modules/axios/index.js","../utils/staticData":"utils/staticData.js"}],"user/cart.js":[function(require,module,exports) {
"use strict";

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var checkout = document.getElementById('checkout');

if (checkout) {
  checkout.onclick = function () {
    var alertError = function alertError() {
      return alert('Something went wrong!');
    };

    var amount = checkout.value.split(' ').pop();

    if (amount && checkout.name) {
      sessionStorage.setItem('amount', "".concat(amount));
      sessionStorage.setItem('receipt', "".concat(checkout.name));
    } else {
      alertError();
      return;
    }

    location.assign('/checkout');
  };
}

var removeFromCart = _toConsumableArray(document.getElementsByName('remove-from-cart'));

if (removeFromCart.length) {
  removeFromCart.forEach(function (removeIcon) {
    removeIcon.onclick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var data, res;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              data = {
                institute: removeIcon.id || null,
                student: removeIcon.parentElement.id || null
              };

              if (!(!data.institute || !data.student)) {
                _context.next = 4;
                break;
              }

              alert('something went wrong!');
              return _context.abrupt("return");

            case 4:
              _context.next = 6;
              return (0, _axios.default)({
                method: 'DELETE',
                url: '/api/v1/student/remove-from-cart',
                data: data,
                headers: {
                  'Content-type': 'application/json; charset=UTF-8'
                }
              });

            case 6:
              res = _context.sent;

              if (res.status === 204) {
                alert('Removed successfully');
                location.reload(true);
              }

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
  });
}
},{"axios":"../../node_modules/axios/index.js"}],"user/payment.js":[function(require,module,exports) {
"use strict";

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var orderGenerate = document.getElementById('generate');

if (orderGenerate) {
  orderGenerate.addEventListener('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var params, res;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            params = {
              amount: '100',
              currency: 'INR',
              receipt: 'noreciept',
              payment_capture: '1'
            };
            _context.next = 3;
            return (0, _axios.default)({
              method: 'POST',
              url: '/api/v1/payment/order',
              data: params,
              headers: {
                'Content-type': 'application/json; charset=UTF-8'
              }
            });

          case 3:
            res = _context.sent;

            if (res.data.status === 'success') {
              document.getElementById('orderId').innerText = "Order Id: ".concat(res.data.data.id);
            }

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
}

var proceedForPayment = function proceedForPayment(key, name, orderId) {
  var pay = document.getElementById('pay');

  if (pay) {
    pay.addEventListener('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var options, rzp1;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              options = {
                key: key,
                currency: 'INR',
                name: name,
                //change it to payment for which month
                description: 'Fees Payment',
                order_id: orderId,
                handler: function () {
                  var _handler = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(response) {
                    var params, ax_res;
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            params = {
                              razorpay_payment_id: response.razorpay_payment_id,
                              razorpay_order_id: response.razorpay_order_id,
                              razorpay_signature: response.razorpay_signature
                            };
                            _context2.next = 3;
                            return (0, _axios.default)({
                              method: 'POST',
                              url: '/api/v1/payment/verify',
                              data: params,
                              headers: {
                                'Content-type': 'application/json; charset=UTF-8'
                              }
                            });

                          case 3:
                            ax_res = _context2.sent;

                            if (ax_res.data.status === 'success') {
                              document.getElementById('1').textContent = 'Payment Successful and verified';
                            }

                          case 5:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  }));

                  function handler(_x) {
                    return _handler.apply(this, arguments);
                  }

                  return handler;
                }(),
                theme: {
                  color: '#0EB9F2'
                }
              };
              rzp1 = new Razorpay(options);
              rzp1.open();

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
  }
};

var _ref3 = _toConsumableArray(document.getElementsByClassName('checkout-table')),
    checkoutTable = _ref3[0];

if (checkoutTable) {
  var data = {};
  data.amount = sessionStorage.getItem('amount');
  data.receipt = sessionStorage.getItem('receipt');

  if (!data.amount || !data.receipt) {
    alert('Something went wrong!');
    location.assign('/cart');
  }

  (0, _axios.default)({
    method: 'POST',
    url: 'api/v1/payments/createOrder',
    data: data,
    headers: {
      'Content-type': 'application/json; charset=UTF-8'
    }
  }).then(function (res) {
    if (!(res.data.status === 'success')) throw new Error('Something went wrong!');
    document.getElementById('orderId').textContent = "Order Id: ".concat(res.data.data.razr.id);
    console.log(res.data);
    document.getElementById('orderId').innerText = res.data.data.razr.id;
    document.getElementById('amount').innerText = "\u20B9 ".concat(res.data.data.razr.amount / 100); // checkoutContent.innerHTML = html;
    // document.getElementById('spinner').style.display = 'none';
    // checkoutContent.style.display = '';

    proceedForPayment(res.data.data.key, res.data.data.razr.receipt, res.data.data.razr.id);
  }).catch(function (err) {
    // checkoutContent.innerHTML = `<h2>${err.message}</h2>`;
    // document.getElementById('spinner').style.display = 'none';
    // checkoutContent.style.display = '';
    // checkoutContent.style.color = 'red';
    // checkoutContent.classList.add('common-style');
    // pay.style.display = 'none';
    console.log(err);
  });
}
},{"axios":"../../node_modules/axios/index.js"}],"user/linkStudent.js":[function(require,module,exports) {
"use strict";

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var addOrRemove = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id, action) {
    var data, res;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            data = {
              students: id,
              action: {
                add: false,
                remove: false
              }
            };
            action === 'add' ? data.action.add = true : data.action.remove = true;
            _context.next = 4;
            return (0, _axios.default)({
              method: 'PATCH',
              url: '/api/v1/user/update',
              data: data,
              headers: {
                'Content-type': 'application/json; charset=UTF-8'
              }
            });

          case 4:
            res = _context.sent;

            if (!(res.data.status === 'success')) {
              _context.next = 9;
              break;
            }

            return _context.abrupt("return", 1);

          case 9:
            throw new Error('Something Went wrong, Please try again later.');

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function addOrRemove(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}(); //remove students


var removeStudents = document.getElementsByName('removeStudent');

if (removeStudents.length) {
  removeStudents.forEach(function (c) {
    c.onclick = function () {
      c.style.display = 'none';
      c.parentElement.children[1].style.display = '';
      addOrRemove(c.id, 'remove').then(function (a) {
        if (a) {
          location.reload(true);
        }
      }).catch(function (err) {
        alert(err.message);
        c.parentElement.children[1].style.display = 'none';
        c.style.display = '';
      });
    };
  });
}

var searchStudent = document.getElementById('searchStudent');

if (searchStudent) {
  searchStudent.onclick = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(e) {
      var name, father, mother, regNo, uid, institute, res, html, table;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              e.preventDefault();
              name = document.getElementById('name').value.toLowerCase();
              father = document.getElementById('father').value.toLowerCase();
              mother = document.getElementById('mother').value.toLowerCase();
              regNo = document.getElementById('regNo').value.toLowerCase();
              uid = document.getElementById('uid').value;
              institute = document.getElementById('institute').selectedOptions[0].value;

              if (institute) {
                _context2.next = 10;
                break;
              }

              alert('Please select institute first!');
              return _context2.abrupt("return");

            case 10:
              if (!(!uid && !regNo && !name && (!father || !mother))) {
                _context2.next = 13;
                break;
              }

              alert("Please provide any one of ADHAAR, Registration No, \n            Students's Name or Father's name + Mother's name");
              return _context2.abrupt("return");

            case 13:
              _context2.next = 15;
              return (0, _axios.default)({
                method: 'POST',
                url: '/api/v1/student/search',
                data: {
                  name: name,
                  father: father,
                  mother: mother,
                  regNo: regNo,
                  uid: uid,
                  institute: institute
                },
                headers: {
                  'Content-type': 'application/json; charset=UTF-8'
                }
              });

            case 15:
              res = _context2.sent;
              html = '';
              table = "<hr>\n                <h2 style='color:green;text-align:center;text-decoration:underline;'>Search Results</h2>\n                <p style='text-align:center;'>Click on 'Add' button below to select student whom you want to link.</p>\n                    <table>\n                        <tr>\n                            <th>Action</th>\n                            <th>Name</th>\n                            <th>Registration Number</th>\n                            <th>Class (section)</th>\n                            <th>Roll No.</th>\n                            <th>Fees Paid Upto</th>\n                        </tr>";

              if (res.data.status === 'success') {
                res.data.data.forEach(function (s) {
                  var date = new Date(new Date(s.feesPaidTill).getMonth() + '-27-' + new Date(Date.now()).getFullYear());
                  date = date.toLocaleString('en-us', {
                    month: 'short'
                  }) + '-' + new Date(Date.now()).getFullYear();
                  table += "<tr>\n                            <td style='text-align:left';>\n                                <button id= ".concat(s.id, " style='color:green;' name='addStudent'>Add</button>\n                                <img src=\"/img/spinner.gif\" alt=\"Loading\" width=\"40\" height=\"40\" style='display:none;'>\n                            </td>\n                            <td>\n                                ").concat(s.name, "\n                            </td>\n                            <td>\n                                ").concat(s.registrationNo, "\n                            </td>\n                            <td>\n                                ").concat(s.class, " ( ").concat(s.section, " )\n                            </td>\n                            <td>\n                                ").concat(s.rollNo, "\n                            </td>\n                            <td>\n                                ").concat(date, "\n                            </td>\n                          </tr>");
                });
                table += '</table>';
                document.getElementById('returned-students').innerHTML = table;
                document.getElementsByName('addStudent').forEach(function (c) {
                  c.onclick = function () {
                    c.style.display = 'none';
                    c.parentElement.children[1].style.display = '';
                    addOrRemove(c.id, 'add').then(function (a) {
                      if (a) {
                        location.reload(true);
                      }
                    }).catch(function (err) {
                      alert(err.message);
                      c.parentElement.children[1].style.display = 'none';
                      c.style.display = '';
                    });
                  };
                });
              } else {
                alert('NO students found');
              }

            case 19:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3) {
      return _ref2.apply(this, arguments);
    };
  }();
}
},{"axios":"../../node_modules/axios/index.js"}],"institute/searchStudent.js":[function(require,module,exports) {
"use strict";

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var filterByClass = function filterByClass(cls) {
  var tr = _toConsumableArray(document.getElementsByTagName('tr'));

  tr = tr.splice(1, tr.length);

  var sect = _toConsumableArray(document.getElementById('sectionFilter').options);

  sect = sect.splice(1, sect.length);

  if (cls === 'All') {
    tr.forEach(function (t) {
      return t.style.display = '';
    });
    sect.forEach(function (o) {
      return o.style.display = '';
    });
    return;
  } else {
    var sections = [];
    tr.forEach(function (t) {
      if (!(t.children[2].innerText === cls)) {
        t.style.display = 'none';
      } else {
        t.style.display = '';
        var sec = t.children[3].innerText;

        if (!sections.includes(sec)) {
          sections.push(sec);
        }
      }
    });
    sect.forEach(function (o) {
      if (!sections.includes(o.innerText)) {
        o.style.display = 'none';
      } else {
        o.style.display = '';
      }
    });
  }
};

var filterBySection = function filterBySection(sec) {
  var tr = _toConsumableArray(document.getElementsByTagName('tr'));

  tr = tr.splice(1, tr.length);

  if (sec === 'All') {
    tr.forEach(function (t) {
      return t.style.display = '';
    });
    return;
  }

  tr.forEach(function (t) {
    if (!t.children[3].innerText.includes(sec)) {
      t.style.display = 'none';
    } else {
      t.style.display = '';
    }
  });
}; // const sortStudents = (students) => {
//     const
//     return students
// }


var searchStudent = document.getElementById('search-student');

if (searchStudent) {
  var months = {
    1: 'JAN',
    2: 'FEB',
    3: 'Mar',
    4: 'APR',
    5: 'MAY',
    6: 'JUN',
    7: 'JUL',
    8: 'AUG',
    9: 'SEP',
    10: 'OCT',
    11: 'NOV',
    12: 'DEC'
  };
  searchStudent.addEventListener('click', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {
      var regno, name, clas, section, res, numResult, html1, html3, html2, classes, _section, feesPaidTill, month, year, wts_r, wts, html, a, _document$getElements, _document$getElements2, cls, sec, classFilter, sectionFilter;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              e.preventDefault();
              regno = document.getElementById('regno').value;
              name = document.getElementById('name').value.toLowerCase();
              clas = document.getElementById('class').value;
              section = document.getElementById('section').value; // Make network request

              if (regno || name || clas) {
                _context.next = 8;
                break;
              }

              alert('Please provide the details first.');
              return _context.abrupt("return");

            case 8:
              _context.next = 10;
              return (0, _axios.default)({
                method: 'GET',
                url: "/api/v1/student/search?".concat(regno, "&name=").concat(name, "&class=").concat(clas, "&section=").concat(section),
                headers: {
                  'Content-type': 'application/json; charset=UTF-8'
                }
              });

            case 10:
              res = _context.sent;

              if (res.data.status === 'success') {
                numResult = res.data.data.students.length * 1;
                document.getElementById('num-results').textContent = "".concat(numResult, " Results Found.");

                if (numResult) {
                  document.getElementById('export').style.display = '';
                }

                res.data.data.students.sort();
                html1 = '', html3 = '', html2 = '';
                classes = [], _section = [];
                res.data.data.students.sort(function (a, b) {
                  return a.rollNo * 1 - b.rollNo * 1;
                }).forEach(function (o) {
                  if (!classes.includes(o.class)) {
                    classes.push(o.class);
                  }

                  if (!_section.includes(o.section)) {
                    _section.push(o.section);
                  }

                  feesPaidTill = o.feesPaidTill; //.split('-')
                  // year = feesPaidTill[0]
                  // month = feesPaidTill[1]*1

                  html3 += "<tr>\n                <td>".concat(o.rollNo, "</td>\n                <td>").concat(o.name, "</td>\n                <td>").concat(o.class, "</td>\n                <td>").concat(o.section, "</td>\n                <td>").concat(o.feesPaidTill, "</td>\n                <!--<td>{months[month] {year}</td> -->\n                <td><button id=").concat(o.id, " name='view-details'>View Details</button></td>\n                </tr>");
                });

                _section.sort();

                html3 += '</table>';
                html1 += "<table>\n                            <tr>\n                                <th>Roll No.</th>\n                                <th>Name</th><th>Class : <select id='classFilter'>";
                wts_r = {
                  1: 'I',
                  2: 'II',
                  3: 'III',
                  4: 'IV',
                  5: 'V',
                  6: 'VI',
                  7: 'VII',
                  8: 'VIII',
                  9: 'IX',
                  10: 'X',
                  11: 'XI',
                  12: 'XII'
                };
                wts = {
                  I: 1,
                  II: 2,
                  III: 3,
                  IV: 4,
                  V: 5,
                  VI: 6,
                  VII: 7,
                  VIII: 8,
                  IX: 9,
                  X: 10,
                  XI: 11,
                  XII: 12
                };
                html1 += '<option>All</option>';
                classes.map(function (c) {
                  return wts[c];
                }).sort(function (a, b) {
                  return a - b;
                }).map(function (a) {
                  return wts_r[a];
                }).forEach(function (c) {
                  html1 += "<option>".concat(c, "</option>");
                });
                html1 += ' </select></th>';
                html2 += "<th>Section : \n            <select id='sectionFilter'><option>All</option>";

                _section.forEach(function (s) {
                  html2 += "<option>".concat(s, "</option>");
                });

                html2 += "</select>\n            </th>\n            <th>Fees paid upto</th>\n            <th>Action</th>\n            </tr>";
                html = html1 + html2 + html3;
                a = document.getElementById('result-table');
                a.innerHTML = html;
                a.style.display = '';

                _toConsumableArray(document.getElementsByName('view-details')).forEach(function (button) {
                  button.onclick = function () {
                    location.assign("/institute/student-detail/".concat(button.id));
                  };
                });

                _document$getElements = document.getElementsByTagName('select'), _document$getElements2 = _slicedToArray(_document$getElements, 2), cls = _document$getElements2[0], sec = _document$getElements2[1];
                classFilter = document.getElementById('classFilter');
                sectionFilter = document.getElementById('sectionFilter');

                classFilter.onchange = function () {
                  filterByClass(cls[cls.selectedIndex].innerText);
                };

                sectionFilter.onchange = function () {
                  filterBySection(sec[sec.selectedIndex].innerText);
                };
              }

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
}
},{"axios":"../../node_modules/axios/index.js"}],"institute/studentDetails.js":[function(require,module,exports) {
"use strict";

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var editStudent = document.getElementById('editStudent');

if (editStudent) {
  editStudent.onclick = function () {
    editStudent.style.display = 'none';
    var father = document.getElementById('father').children[0].textContent;
    var mother = document.getElementById('mother').children[0].textContent;
    var email = document.getElementById('email');

    if (email.children[0]) {
      email = email.children[0].textContent;
    } else {
      email = '';
    }

    var phone = document.getElementById('phone');

    if (phone.children[0]) {
      phone = phone.children[0].textContent;
    } else {
      phone = '';
    }

    var clas = document.getElementById('class').children[0].textContent;
    var section = document.getElementById('section');

    if (section.children[0]) {
      section = section.children[0].textContent;
    } else {
      section = '';
    }

    var rollNo = document.getElementById('rollNo').children[0].textContent;
    document.getElementById('father').innerHTML = "<input type='text' value='".concat(father, "'>");
    document.getElementById('mother').innerHTML = "<input type='text' value='".concat(mother, "'>");
    document.getElementById('email').innerHTML = "<input type='text' value='".concat(email, "'>");
    document.getElementById('phone').innerHTML = "<input type='text' value='".concat(phone, "'>");
    document.getElementById('class').innerHTML = "<input type='text'  value='".concat(clas, "'>");
    document.getElementById('section').innerHTML = "<input type='text' value='".concat(section, "'>");
    document.getElementById('rollNo').innerHTML = "<input type='text' value='".concat(rollNo, "'>");
    document.getElementById('active').style = '';
    document.getElementById('actionButtons').style.display = '';
  };
}

var saveStudenetDetail = document.getElementById('saveStudentDetail');

if (saveStudenetDetail) {
  saveStudenetDetail.onclick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var father, mother, email, phone, clas, section, rollNo, res;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            father = document.getElementById('father').children[0].value;
            mother = document.getElementById('mother').children[0].value;
            email = document.getElementById('email');

            if (email.children[0]) {
              email = email.children[0].value;
            } else {
              email = '';
            }

            phone = document.getElementById('phone').children[0].value;
            clas = document.getElementById('class').children[0].value;
            section = document.getElementById('section').children[0].value;
            rollNo = document.getElementById('rollNo').children[0].value; // const active = document.getElementById('activeFlag').selectedOptions[0].value ;

            _context.next = 10;
            return (0, _axios.default)({
              method: 'POST',
              url: '/api/v1/student/update',
              data: {
                id: document.getElementsByTagName('h1')[0].id,
                father: father,
                mother: mother,
                email: email,
                phone: phone,
                clas: clas,
                section: section,
                rollNo: rollNo
              },
              headers: {
                'Content-type': 'application/json; charset=UTF-8'
              }
            });

          case 10:
            res = _context.sent;

            if (res.data.status === 'success') {
              alert('Saved Successfully !');
              location.reload(true);
            }

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
}

var cancelStudenetDetail = document.getElementById('cancelStudentDetail');

if (cancelStudenetDetail) {
  cancelStudenetDetail.onclick = function () {
    location.reload(true);
  };
}

var modifyRegistration = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(activeFlag) {
    var res;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _axios.default)({
              method: 'POST',
              url: '/api/v1/student/update',
              data: {
                activeFlag: 1,
                id: document.getElementsByTagName('h1')[0].id,
                active: activeFlag
              },
              headers: {
                'Content-type': 'application/json; charset=UTF-8'
              }
            });

          case 2:
            res = _context2.sent;
            return _context2.abrupt("return", res.data.status);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function modifyRegistration(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var deregisterStudent = document.getElementById('deregisterStudent');

if (deregisterStudent) {
  deregisterStudent.onclick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return modifyRegistration(false);

          case 2:
            _context3.t0 = _context3.sent;

            if (!(_context3.t0 === 'success')) {
              _context3.next = 6;
              break;
            }

            alert('Operation Successful !');
            location.reload(true);

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
}

var registerStudent = document.getElementById('registerStudent');

if (registerStudent) {
  registerStudent.onclick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return modifyRegistration(true);

          case 2:
            _context4.t0 = _context4.sent;

            if (!(_context4.t0 === 'success')) {
              _context4.next = 6;
              break;
            }

            alert('Operation Successful !');
            location.reload(true);

          case 6:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
} // Get the modal


var modal = document.getElementById('myModal'); // Get the button that opens the modal

var btn = document.getElementById('recordPayment'); // Get the <span> element that closes the modal

var span = document.getElementsByClassName('close')[0]; // When the user clicks the button, open the modal

if (btn) {
  btn.onclick = function () {
    modal.style.display = 'block';
  };
} // When the user clicks on <span> (x), close the modal


if (span) {
  span.onclick = function () {
    modal.style.display = 'none';
  };
} // When the user clicks anywhere outside of the modal, close it


window.onclick = function (event) {
  if (event.target == modal) {
    modal.style.display = 'none';
  }
};

var save = document.getElementById('save');

if (save) {
  save.onclick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
    var fee, date, amount, note, studentId, res;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            fee = document.getElementById('fees').options;
            fee = fee[fee.selectedIndex].id;
            date = document.getElementById('date').value;

            if (!(!fee || !date)) {
              _context5.next = 6;
              break;
            }

            alert('Asterisk marked fields are mandatory!');
            return _context5.abrupt("return");

          case 6:
            date = new Date(date);
            amount = document.getElementById('amount').value || null;
            note = document.getElementById('note').value || null;
            studentId = document.getElementsByTagName('h1')[0].id;
            _context5.next = 12;
            return (0, _axios.default)({
              method: 'POST',
              url: '/api/v1/payments/record-cash-payment',
              data: {
                fee: fee,
                date: date,
                amount: amount,
                note: note,
                mode: 'offline',
                studentId: studentId
              },
              headers: {
                'Content-type': 'application/json; charset=UTF-8'
              }
            });

          case 12:
            res = _context5.sent;
            console.log(res);

          case 14:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
}
},{"axios":"../../node_modules/axios/index.js"}],"institute/viewStudents.js":[function(require,module,exports) {
"use strict";

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var cls = document.getElementById('cls');

if (cls) {
  var section = document.getElementById('section');
  var clear = document.getElementById('clear');
  var resultDiv = document.getElementById('result');
  var submit = document.getElementById('submit');

  var renderResult = function renderResult(_ref) {
    var _ref$html = _ref.html,
        html = _ref$html === void 0 ? null : _ref$html,
        _ref$error = _ref.error,
        error = _ref$error === void 0 ? false : _ref$error,
        _ref$errorMsg = _ref.errorMsg,
        errorMsg = _ref$errorMsg === void 0 ? 'Please Select Class' : _ref$errorMsg;

    if (error) {
      resultDiv.innerHTML = "<p style=\"text-align:center;color:red;\">".concat(errorMsg, "</p>");
      return;
    }

    resultDiv.innerHTML = html;
  };

  var clearResultDiv = function clearResultDiv() {
    resultDiv.innerHTML = '';
  };

  var showSectionDropdown = function showSectionDropdown(selectedCls) {
    var sectionsArray = JSON.parse(cls.value)[selectedCls];
    sectionsArray.unshift('Select');
    sectionsArray.forEach(function (sec) {
      var opt = document.createElement('option');
      opt.text = sec;
      section.add(opt);
    });
    section.style.display = '';
  };

  clear.onclick = function () {
    submit.style.display = 'none';
    clear.style.display = 'none';
    document.getElementsByTagName('label')[1].style.display = 'none';
    cls.selectedIndex = 0;
    cls.disabled = false;
    section.style.display = 'none';

    var sections = _toConsumableArray(section.options);

    sections.forEach(function (o) {
      return o.remove();
    });
    renderResult({
      error: true
    });
  };

  renderResult({
    error: true
  });

  cls.onchange = function () {
    var selectedCls = cls.options[cls.selectedIndex].id;

    if (selectedCls === '0') {
      renderResult({
        error: true
      });
      return;
    } else {
      cls.disabled = true;
      document.getElementsByTagName('label')[1].style.display = '';
      clearResultDiv();
      showSectionDropdown(selectedCls);
      submit.style.display = '';
      clear.style.display = '';
    }
  };

  var makeTable = function makeTable(_ref2) {
    var data = _ref2.data,
        headersDataMapping = _ref2.headersDataMapping;

    if (!Array.isArray(data)) {
      throw new Error('Please provide data array.');
    }

    var headers = Object.keys(headersDataMapping);
    var html = "<table>";
    headers.forEach(function (header) {
      html += "<th>".concat(header, "</th>");
    });
    data.forEach(function (obj) {
      html += '<tr>';
      headers.forEach(function (header) {
        var tempData = obj[headersDataMapping[header]];

        if (header === 'Action') {
          html += "<td>\n                    <a href='student-detail/".concat(tempData ? tempData : '-', "'>View Details</a>\n                </td>");
        } else {
          html += "<td>".concat(tempData ? tempData : '-', "</td>");
        }
      });
      html += '</tr>';
    });
    html += '</table>';
    return html;
  };

  submit.onclick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var selectedCls, selectedSec, res, headersDataMapping, table;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            selectedCls = cls.options[cls.selectedIndex].id;
            selectedSec = section.options[section.selectedIndex].text;

            if (selectedCls) {
              _context.next = 7;
              break;
            }

            alert('Please select Class !');
            return _context.abrupt("return");

          case 7:
            if (!(selectedSec === 'Select')) {
              _context.next = 10;
              break;
            }

            alert('Please select Section !');
            return _context.abrupt("return");

          case 10:
            _context.next = 12;
            return (0, _axios.default)({
              method: 'GET',
              url: "/api/v1/institute/getDetails?class=".concat(selectedCls, "&section=").concat(selectedSec),
              headers: {
                'Content-type': 'application/json; charset=UTF-8'
              }
            });

          case 12:
            res = _context.sent;
            _context.prev = 13;

            if (!(res.data.status === 'success')) {
              _context.next = 22;
              break;
            }

            if (res.data.data.students.length) {
              _context.next = 17;
              break;
            }

            throw new Error('No students Found.');

          case 17:
            headersDataMapping = {
              'Roll No.': 'rollNo',
              Name: 'name',
              "Father's Name": 'father',
              "Mother's Name": 'mother',
              Action: 'id'
            };
            table = makeTable({
              data: res.data.data.students,
              headersDataMapping: headersDataMapping
            });
            renderResult({
              html: table
            });
            _context.next = 23;
            break;

          case 22:
            throw new Error(res.data.error);

          case 23:
            _context.next = 28;
            break;

          case 25:
            _context.prev = 25;
            _context.t0 = _context["catch"](13);
            renderResult({
              error: true,
              errorMsg: _context.t0.message
            });

          case 28:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[13, 25]]);
  }));
}
},{"axios":"../../node_modules/axios/index.js"}],"utils/apiCalls.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateInstituteData = void 0;

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var updateInstituteData = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {
    var res;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return (0, _axios.default)({
              method: 'PATCH',
              url: '/api/v1/institute/update',
              data: data,
              headers: {
                'Content-type': 'application/json; charset=UTF-8'
              }
            });

          case 3:
            res = _context.sent;
            return _context.abrupt("return", res);

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
            console.log(_context.t0);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 7]]);
  }));

  return function updateInstituteData(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.updateInstituteData = updateInstituteData;
},{"axios":"../../node_modules/axios/index.js"}],"institute/addInstituteDetails.js":[function(require,module,exports) {
"use strict";

var _apiCalls = require("../utils/apiCalls");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var addInstituteDetails = document.getElementById('addInstituteDetails');

if (addInstituteDetails) {
  /* Select all checkbox toggle functionality */
  var selectAll = document.getElementById('select-all');
  var classes = document.getElementsByName('class');

  selectAll.onchange = function () {
    if (selectAll.checked) {
      classes.forEach(function (o) {
        return o.checked = true;
      });
    } else {
      classes.forEach(function (o) {
        return o.checked = false;
      });
    }
  };

  classes.forEach(function (o) {
    return o.onchange = function () {
      if (!o.checked) {
        document.getElementById('select-all').checked = false;
      }
    };
  });
  /* Update database make api call */

  var addDetails = document.getElementById('add-details');
  addDetails.addEventListener('click', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {
      var pan, gst, classes, response;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              e.preventDefault();
              pan = document.getElementById('pan').value;
              gst = document.getElementById('gst').value;
              classes = [];
              document.getElementsByName('class').forEach(function (e) {
                if (e.checked) {
                  classes.push(e.value);
                }
              });
              _context.next = 7;
              return (0, _apiCalls.updateInstituteData)({
                pan: pan,
                gst: gst,
                classes: classes
              });

            case 7:
              response = _context.sent;

              if (response.data.status === 'success') {
                location.reload(true);
              }

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
}
},{"../utils/apiCalls":"utils/apiCalls.js"}],"../../node_modules/chart.js/dist/chunks/helpers.segment.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.A = toPadding;
exports.B = each;
exports.C = getMaximumSize;
exports.D = _getParentNode;
exports.E = readUsedSize;
exports.F = throttled;
exports.I = _isDomSupported;
exports.K = _factorize;
exports.L = finiteOrDefault;
exports.M = callback;
exports.N = _addGrace;
exports.O = toDegrees;
exports.Q = _measureText;
exports.R = _int16Range;
exports.S = _alignPixel;
exports.U = clipArea;
exports.V = renderText;
exports.W = unclipArea;
exports.X = toFont;
exports._ = _arrayUnique;
exports.a = resolve;
exports.a0 = merge;
exports.a1 = _capitalize;
exports.a4 = _attachContext;
exports.a5 = _createResolver;
exports.a6 = _descriptors;
exports.a7 = mergeIf;
exports.a9 = debounce;
exports.aA = _setMinAndMaxByKey;
exports.aB = niceNum;
exports.aC = almostWhole;
exports.aD = almostEquals;
exports.aE = _decimalPlaces;
exports.aF = _longestText;
exports.aG = _filterBetween;
exports.aH = _lookup;
exports.aI = getHoverColor;
exports.aJ = clone$1;
exports.aK = _merger;
exports.aL = _mergerIf;
exports.aM = _deprecated;
exports.aN = toFontString;
exports.aO = splineCurve;
exports.aP = splineCurveMonotone;
exports.aQ = getStyle;
exports.aR = fontString;
exports.aS = toLineHeight;
exports.aY = _angleDiff;
exports.aa = retinaScale;
exports.ab = clearCanvas;
exports.ad = _elementsEqual;
exports.ae = getAngleFromPoint;
exports.af = _readValueToProps;
exports.ag = _updateBezierControlPoints;
exports.ah = _computeSegments;
exports.ai = _boundSegments;
exports.aj = _steppedInterpolation;
exports.ak = _bezierInterpolation;
exports.al = _pointInLine;
exports.am = _steppedLineTo;
exports.an = _bezierCurveTo;
exports.ao = drawPoint;
exports.ap = addRoundedRectPath;
exports.aq = toTRBL;
exports.ar = toTRBLCorners;
exports.as = _boundSegment;
exports.at = _normalizeAngle;
exports.au = getRtlAdapter;
exports.av = overrideTextDirection;
exports.ax = restoreTextDirection;
exports.ay = noop;
exports.az = distanceBetweenPoints;
exports.b = isArray;
exports.c = color;
exports.f = resolveObjectKey;
exports.i = isObject;
exports.j = isNullOrUndef;
exports.l = listenArrayEvents;
exports.n = formatNumber;
exports.o = _angleBetween;
exports.p = isNumber;
exports.q = _limitValue;
exports.t = toRadians;
exports.u = unlistenArrayEvents;
exports.v = valueOrDefault;
exports.x = getRelativePosition;
exports.y = _isPointInArea;
exports.z = exports.w = exports.s = exports.r = exports.m = exports.k = exports.h = exports.g = exports.e = exports.d = exports.aw = exports.ac = exports.aX = exports.aW = exports.aV = exports.aU = exports.aT = exports.a8 = exports.a3 = exports.a2 = exports.Z = exports.Y = exports.T = exports.P = exports.J = exports.H = exports.G = exports.$ = void 0;

/*!
 * Chart.js v3.5.1
 * https://www.chartjs.org
 * (c) 2021 Chart.js Contributors
 * Released under the MIT License
 */
function fontString(pixelSize, fontStyle, fontFamily) {
  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
}

const requestAnimFrame = function () {
  if (typeof window === 'undefined') {
    return function (callback) {
      return callback();
    };
  }

  return window.requestAnimationFrame;
}();

exports.r = requestAnimFrame;

function throttled(fn, thisArg, updateFn) {
  const updateArgs = updateFn || (args => Array.prototype.slice.call(args));

  let ticking = false;
  let args = [];
  return function (...rest) {
    args = updateArgs(rest);

    if (!ticking) {
      ticking = true;
      requestAnimFrame.call(window, () => {
        ticking = false;
        fn.apply(thisArg, args);
      });
    }
  };
}

function debounce(fn, delay) {
  let timeout;
  return function () {
    if (delay) {
      clearTimeout(timeout);
      timeout = setTimeout(fn, delay);
    } else {
      fn();
    }

    return delay;
  };
}

const _toLeftRightCenter = align => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';

exports.Y = _toLeftRightCenter;

const _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;

exports.Z = _alignStartEnd;

const _textX = (align, left, right, rtl) => {
  const check = rtl ? 'left' : 'right';
  return align === check ? right : align === 'center' ? (left + right) / 2 : left;
};

exports.aw = _textX;

function noop() {}

const uid = function () {
  let id = 0;
  return function () {
    return id++;
  };
}();

exports.a8 = uid;

function isNullOrUndef(value) {
  return value === null || typeof value === 'undefined';
}

function isArray(value) {
  if (Array.isArray && Array.isArray(value)) {
    return true;
  }

  const type = Object.prototype.toString.call(value);

  if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
    return true;
  }

  return false;
}

function isObject(value) {
  return value !== null && Object.prototype.toString.call(value) === '[object Object]';
}

const isNumberFinite = value => (typeof value === 'number' || value instanceof Number) && isFinite(+value);

exports.g = isNumberFinite;

function finiteOrDefault(value, defaultValue) {
  return isNumberFinite(value) ? value : defaultValue;
}

function valueOrDefault(value, defaultValue) {
  return typeof value === 'undefined' ? defaultValue : value;
}

const toPercentage = (value, dimension) => typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : value / dimension;

exports.k = toPercentage;

const toDimension = (value, dimension) => typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;

exports.m = toDimension;

function callback(fn, args, thisArg) {
  if (fn && typeof fn.call === 'function') {
    return fn.apply(thisArg, args);
  }
}

function each(loopable, fn, thisArg, reverse) {
  let i, len, keys;

  if (isArray(loopable)) {
    len = loopable.length;

    if (reverse) {
      for (i = len - 1; i >= 0; i--) {
        fn.call(thisArg, loopable[i], i);
      }
    } else {
      for (i = 0; i < len; i++) {
        fn.call(thisArg, loopable[i], i);
      }
    }
  } else if (isObject(loopable)) {
    keys = Object.keys(loopable);
    len = keys.length;

    for (i = 0; i < len; i++) {
      fn.call(thisArg, loopable[keys[i]], keys[i]);
    }
  }
}

function _elementsEqual(a0, a1) {
  let i, ilen, v0, v1;

  if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
  }

  for (i = 0, ilen = a0.length; i < ilen; ++i) {
    v0 = a0[i];
    v1 = a1[i];

    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
      return false;
    }
  }

  return true;
}

function clone$1(source) {
  if (isArray(source)) {
    return source.map(clone$1);
  }

  if (isObject(source)) {
    const target = Object.create(null);
    const keys = Object.keys(source);
    const klen = keys.length;
    let k = 0;

    for (; k < klen; ++k) {
      target[keys[k]] = clone$1(source[keys[k]]);
    }

    return target;
  }

  return source;
}

function isValidKey(key) {
  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;
}

function _merger(key, target, source, options) {
  if (!isValidKey(key)) {
    return;
  }

  const tval = target[key];
  const sval = source[key];

  if (isObject(tval) && isObject(sval)) {
    merge(tval, sval, options);
  } else {
    target[key] = clone$1(sval);
  }
}

function merge(target, source, options) {
  const sources = isArray(source) ? source : [source];
  const ilen = sources.length;

  if (!isObject(target)) {
    return target;
  }

  options = options || {};
  const merger = options.merger || _merger;

  for (let i = 0; i < ilen; ++i) {
    source = sources[i];

    if (!isObject(source)) {
      continue;
    }

    const keys = Object.keys(source);

    for (let k = 0, klen = keys.length; k < klen; ++k) {
      merger(keys[k], target, source, options);
    }
  }

  return target;
}

function mergeIf(target, source) {
  return merge(target, source, {
    merger: _mergerIf
  });
}

function _mergerIf(key, target, source) {
  if (!isValidKey(key)) {
    return;
  }

  const tval = target[key];
  const sval = source[key];

  if (isObject(tval) && isObject(sval)) {
    mergeIf(tval, sval);
  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
    target[key] = clone$1(sval);
  }
}

function _deprecated(scope, value, previous, current) {
  if (value !== undefined) {
    console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
  }
}

const emptyString = '';
const dot = '.';

function indexOfDotOrLength(key, start) {
  const idx = key.indexOf(dot, start);
  return idx === -1 ? key.length : idx;
}

function resolveObjectKey(obj, key) {
  if (key === emptyString) {
    return obj;
  }

  let pos = 0;
  let idx = indexOfDotOrLength(key, pos);

  while (obj && idx > pos) {
    obj = obj[key.substr(pos, idx - pos)];
    pos = idx + 1;
    idx = indexOfDotOrLength(key, pos);
  }

  return obj;
}

function _capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

const defined = value => typeof value !== 'undefined';

exports.h = defined;

const isFunction = value => typeof value === 'function';

exports.a3 = isFunction;

const setsEqual = (a, b) => {
  if (a.size !== b.size) {
    return false;
  }

  for (const item of a) {
    if (!b.has(item)) {
      return false;
    }
  }

  return true;
};

exports.ac = setsEqual;
const PI = Math.PI;
exports.P = PI;
const TAU = 2 * PI;
exports.T = TAU;
const PITAU = TAU + PI;
exports.aT = PITAU;
const INFINITY = Number.POSITIVE_INFINITY;
exports.aU = INFINITY;
const RAD_PER_DEG = PI / 180;
exports.aV = RAD_PER_DEG;
const HALF_PI = PI / 2;
exports.H = HALF_PI;
const QUARTER_PI = PI / 4;
exports.aW = QUARTER_PI;
const TWO_THIRDS_PI = PI * 2 / 3;
exports.aX = TWO_THIRDS_PI;
const log10 = Math.log10;
exports.J = log10;
const sign = Math.sign;
exports.s = sign;

function niceNum(range) {
  const roundedRange = Math.round(range);
  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;
  const niceRange = Math.pow(10, Math.floor(log10(range)));
  const fraction = range / niceRange;
  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
  return niceFraction * niceRange;
}

function _factorize(value) {
  const result = [];
  const sqrt = Math.sqrt(value);
  let i;

  for (i = 1; i < sqrt; i++) {
    if (value % i === 0) {
      result.push(i);
      result.push(value / i);
    }
  }

  if (sqrt === (sqrt | 0)) {
    result.push(sqrt);
  }

  result.sort((a, b) => a - b).pop();
  return result;
}

function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}

function almostEquals(x, y, epsilon) {
  return Math.abs(x - y) < epsilon;
}

function almostWhole(x, epsilon) {
  const rounded = Math.round(x);
  return rounded - epsilon <= x && rounded + epsilon >= x;
}

function _setMinAndMaxByKey(array, target, property) {
  let i, ilen, value;

  for (i = 0, ilen = array.length; i < ilen; i++) {
    value = array[i][property];

    if (!isNaN(value)) {
      target.min = Math.min(target.min, value);
      target.max = Math.max(target.max, value);
    }
  }
}

function toRadians(degrees) {
  return degrees * (PI / 180);
}

function toDegrees(radians) {
  return radians * (180 / PI);
}

function _decimalPlaces(x) {
  if (!isNumberFinite(x)) {
    return;
  }

  let e = 1;
  let p = 0;

  while (Math.round(x * e) / e !== x) {
    e *= 10;
    p++;
  }

  return p;
}

function getAngleFromPoint(centrePoint, anglePoint) {
  const distanceFromXCenter = anglePoint.x - centrePoint.x;
  const distanceFromYCenter = anglePoint.y - centrePoint.y;
  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

  if (angle < -0.5 * PI) {
    angle += TAU;
  }

  return {
    angle,
    distance: radialDistanceFromCenter
  };
}

function distanceBetweenPoints(pt1, pt2) {
  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}

function _angleDiff(a, b) {
  return (a - b + PITAU) % TAU - PI;
}

function _normalizeAngle(a) {
  return (a % TAU + TAU) % TAU;
}

function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
  const a = _normalizeAngle(angle);

  const s = _normalizeAngle(start);

  const e = _normalizeAngle(end);

  const angleToStart = _normalizeAngle(s - a);

  const angleToEnd = _normalizeAngle(e - a);

  const startToAngle = _normalizeAngle(a - s);

  const endToAngle = _normalizeAngle(a - e);

  return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
}

function _limitValue(value, min, max) {
  return Math.max(min, Math.min(max, value));
}

function _int16Range(value) {
  return _limitValue(value, -32768, 32767);
}

const atEdge = t => t === 0 || t === 1;

const elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));

const elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;

const effects = {
  linear: t => t,
  easeInQuad: t => t * t,
  easeOutQuad: t => -t * (t - 2),
  easeInOutQuad: t => (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),
  easeInCubic: t => t * t * t,
  easeOutCubic: t => (t -= 1) * t * t + 1,
  easeInOutCubic: t => (t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),
  easeInQuart: t => t * t * t * t,
  easeOutQuart: t => -((t -= 1) * t * t * t - 1),
  easeInOutQuart: t => (t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),
  easeInQuint: t => t * t * t * t * t,
  easeOutQuint: t => (t -= 1) * t * t * t * t + 1,
  easeInOutQuint: t => (t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),
  easeInSine: t => -Math.cos(t * HALF_PI) + 1,
  easeOutSine: t => Math.sin(t * HALF_PI),
  easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),
  easeInExpo: t => t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),
  easeOutExpo: t => t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,
  easeInOutExpo: t => atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
  easeInCirc: t => t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),
  easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),
  easeInOutCirc: t => (t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
  easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),
  easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),

  easeInOutElastic(t) {
    const s = 0.1125;
    const p = 0.45;
    return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
  },

  easeInBack(t) {
    const s = 1.70158;
    return t * t * ((s + 1) * t - s);
  },

  easeOutBack(t) {
    const s = 1.70158;
    return (t -= 1) * t * ((s + 1) * t + s) + 1;
  },

  easeInOutBack(t) {
    let s = 1.70158;

    if ((t /= 0.5) < 1) {
      return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
    }

    return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
  },

  easeInBounce: t => 1 - effects.easeOutBounce(1 - t),

  easeOutBounce(t) {
    const m = 7.5625;
    const d = 2.75;

    if (t < 1 / d) {
      return m * t * t;
    }

    if (t < 2 / d) {
      return m * (t -= 1.5 / d) * t + 0.75;
    }

    if (t < 2.5 / d) {
      return m * (t -= 2.25 / d) * t + 0.9375;
    }

    return m * (t -= 2.625 / d) * t + 0.984375;
  },

  easeInOutBounce: t => t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5
};
/*!
 * @kurkle/color v0.1.9
 * https://github.com/kurkle/color#readme
 * (c) 2020 Jukka Kurkela
 * Released under the MIT License
 */

exports.e = effects;
const map = {
  0: 0,
  1: 1,
  2: 2,
  3: 3,
  4: 4,
  5: 5,
  6: 6,
  7: 7,
  8: 8,
  9: 9,
  A: 10,
  B: 11,
  C: 12,
  D: 13,
  E: 14,
  F: 15,
  a: 10,
  b: 11,
  c: 12,
  d: 13,
  e: 14,
  f: 15
};
const hex = '0123456789ABCDEF';

const h1 = b => hex[b & 0xF];

const h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];

const eq = b => (b & 0xF0) >> 4 === (b & 0xF);

function isShort(v) {
  return eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
}

function hexParse(str) {
  var len = str.length;
  var ret;

  if (str[0] === '#') {
    if (len === 4 || len === 5) {
      ret = {
        r: 255 & map[str[1]] * 17,
        g: 255 & map[str[2]] * 17,
        b: 255 & map[str[3]] * 17,
        a: len === 5 ? map[str[4]] * 17 : 255
      };
    } else if (len === 7 || len === 9) {
      ret = {
        r: map[str[1]] << 4 | map[str[2]],
        g: map[str[3]] << 4 | map[str[4]],
        b: map[str[5]] << 4 | map[str[6]],
        a: len === 9 ? map[str[7]] << 4 | map[str[8]] : 255
      };
    }
  }

  return ret;
}

function hexString(v) {
  var f = isShort(v) ? h1 : h2;
  return v ? '#' + f(v.r) + f(v.g) + f(v.b) + (v.a < 255 ? f(v.a) : '') : v;
}

function round(v) {
  return v + 0.5 | 0;
}

const lim = (v, l, h) => Math.max(Math.min(v, h), l);

function p2b(v) {
  return lim(round(v * 2.55), 0, 255);
}

function n2b(v) {
  return lim(round(v * 255), 0, 255);
}

function b2n(v) {
  return lim(round(v / 2.55) / 100, 0, 1);
}

function n2p(v) {
  return lim(round(v * 100), 0, 100);
}

const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;

function rgbParse(str) {
  const m = RGB_RE.exec(str);
  let a = 255;
  let r, g, b;

  if (!m) {
    return;
  }

  if (m[7] !== r) {
    const v = +m[7];
    a = 255 & (m[8] ? p2b(v) : v * 255);
  }

  r = +m[1];
  g = +m[3];
  b = +m[5];
  r = 255 & (m[2] ? p2b(r) : r);
  g = 255 & (m[4] ? p2b(g) : g);
  b = 255 & (m[6] ? p2b(b) : b);
  return {
    r: r,
    g: g,
    b: b,
    a: a
  };
}

function rgbString(v) {
  return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);
}

const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;

function hsl2rgbn(h, s, l) {
  const a = s * Math.min(l, 1 - l);

  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);

  return [f(0), f(8), f(4)];
}

function hsv2rgbn(h, s, v) {
  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);

  return [f(5), f(3), f(1)];
}

function hwb2rgbn(h, w, b) {
  const rgb = hsl2rgbn(h, 1, 0.5);
  let i;

  if (w + b > 1) {
    i = 1 / (w + b);
    w *= i;
    b *= i;
  }

  for (i = 0; i < 3; i++) {
    rgb[i] *= 1 - w - b;
    rgb[i] += w;
  }

  return rgb;
}

function rgb2hsl(v) {
  const range = 255;
  const r = v.r / range;
  const g = v.g / range;
  const b = v.b / range;
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  const l = (max + min) / 2;
  let h, s, d;

  if (max !== min) {
    d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
    h = h * 60 + 0.5;
  }

  return [h | 0, s || 0, l];
}

function calln(f, a, b, c) {
  return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map(n2b);
}

function hsl2rgb(h, s, l) {
  return calln(hsl2rgbn, h, s, l);
}

function hwb2rgb(h, w, b) {
  return calln(hwb2rgbn, h, w, b);
}

function hsv2rgb(h, s, v) {
  return calln(hsv2rgbn, h, s, v);
}

function hue(h) {
  return (h % 360 + 360) % 360;
}

function hueParse(str) {
  const m = HUE_RE.exec(str);
  let a = 255;
  let v;

  if (!m) {
    return;
  }

  if (m[5] !== v) {
    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
  }

  const h = hue(+m[2]);
  const p1 = +m[3] / 100;
  const p2 = +m[4] / 100;

  if (m[1] === 'hwb') {
    v = hwb2rgb(h, p1, p2);
  } else if (m[1] === 'hsv') {
    v = hsv2rgb(h, p1, p2);
  } else {
    v = hsl2rgb(h, p1, p2);
  }

  return {
    r: v[0],
    g: v[1],
    b: v[2],
    a: a
  };
}

function rotate(v, deg) {
  var h = rgb2hsl(v);
  h[0] = hue(h[0] + deg);
  h = hsl2rgb(h);
  v.r = h[0];
  v.g = h[1];
  v.b = h[2];
}

function hslString(v) {
  if (!v) {
    return;
  }

  const a = rgb2hsl(v);
  const h = a[0];
  const s = n2p(a[1]);
  const l = n2p(a[2]);
  return v.a < 255 ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})` : `hsl(${h}, ${s}%, ${l}%)`;
}

const map$1 = {
  x: 'dark',
  Z: 'light',
  Y: 're',
  X: 'blu',
  W: 'gr',
  V: 'medium',
  U: 'slate',
  A: 'ee',
  T: 'ol',
  S: 'or',
  B: 'ra',
  C: 'lateg',
  D: 'ights',
  R: 'in',
  Q: 'turquois',
  E: 'hi',
  P: 'ro',
  O: 'al',
  N: 'le',
  M: 'de',
  L: 'yello',
  F: 'en',
  K: 'ch',
  G: 'arks',
  H: 'ea',
  I: 'ightg',
  J: 'wh'
};
const names = {
  OiceXe: 'f0f8ff',
  antiquewEte: 'faebd7',
  aqua: 'ffff',
  aquamarRe: '7fffd4',
  azuY: 'f0ffff',
  beige: 'f5f5dc',
  bisque: 'ffe4c4',
  black: '0',
  blanKedOmond: 'ffebcd',
  Xe: 'ff',
  XeviTet: '8a2be2',
  bPwn: 'a52a2a',
  burlywood: 'deb887',
  caMtXe: '5f9ea0',
  KartYuse: '7fff00',
  KocTate: 'd2691e',
  cSO: 'ff7f50',
  cSnflowerXe: '6495ed',
  cSnsilk: 'fff8dc',
  crimson: 'dc143c',
  cyan: 'ffff',
  xXe: '8b',
  xcyan: '8b8b',
  xgTMnPd: 'b8860b',
  xWay: 'a9a9a9',
  xgYF: '6400',
  xgYy: 'a9a9a9',
  xkhaki: 'bdb76b',
  xmagFta: '8b008b',
  xTivegYF: '556b2f',
  xSange: 'ff8c00',
  xScEd: '9932cc',
  xYd: '8b0000',
  xsOmon: 'e9967a',
  xsHgYF: '8fbc8f',
  xUXe: '483d8b',
  xUWay: '2f4f4f',
  xUgYy: '2f4f4f',
  xQe: 'ced1',
  xviTet: '9400d3',
  dAppRk: 'ff1493',
  dApskyXe: 'bfff',
  dimWay: '696969',
  dimgYy: '696969',
  dodgerXe: '1e90ff',
  fiYbrick: 'b22222',
  flSOwEte: 'fffaf0',
  foYstWAn: '228b22',
  fuKsia: 'ff00ff',
  gaRsbSo: 'dcdcdc',
  ghostwEte: 'f8f8ff',
  gTd: 'ffd700',
  gTMnPd: 'daa520',
  Way: '808080',
  gYF: '8000',
  gYFLw: 'adff2f',
  gYy: '808080',
  honeyMw: 'f0fff0',
  hotpRk: 'ff69b4',
  RdianYd: 'cd5c5c',
  Rdigo: '4b0082',
  ivSy: 'fffff0',
  khaki: 'f0e68c',
  lavFMr: 'e6e6fa',
  lavFMrXsh: 'fff0f5',
  lawngYF: '7cfc00',
  NmoncEffon: 'fffacd',
  ZXe: 'add8e6',
  ZcSO: 'f08080',
  Zcyan: 'e0ffff',
  ZgTMnPdLw: 'fafad2',
  ZWay: 'd3d3d3',
  ZgYF: '90ee90',
  ZgYy: 'd3d3d3',
  ZpRk: 'ffb6c1',
  ZsOmon: 'ffa07a',
  ZsHgYF: '20b2aa',
  ZskyXe: '87cefa',
  ZUWay: '778899',
  ZUgYy: '778899',
  ZstAlXe: 'b0c4de',
  ZLw: 'ffffe0',
  lime: 'ff00',
  limegYF: '32cd32',
  lRF: 'faf0e6',
  magFta: 'ff00ff',
  maPon: '800000',
  VaquamarRe: '66cdaa',
  VXe: 'cd',
  VScEd: 'ba55d3',
  VpurpN: '9370db',
  VsHgYF: '3cb371',
  VUXe: '7b68ee',
  VsprRggYF: 'fa9a',
  VQe: '48d1cc',
  VviTetYd: 'c71585',
  midnightXe: '191970',
  mRtcYam: 'f5fffa',
  mistyPse: 'ffe4e1',
  moccasR: 'ffe4b5',
  navajowEte: 'ffdead',
  navy: '80',
  Tdlace: 'fdf5e6',
  Tive: '808000',
  TivedBb: '6b8e23',
  Sange: 'ffa500',
  SangeYd: 'ff4500',
  ScEd: 'da70d6',
  pOegTMnPd: 'eee8aa',
  pOegYF: '98fb98',
  pOeQe: 'afeeee',
  pOeviTetYd: 'db7093',
  papayawEp: 'ffefd5',
  pHKpuff: 'ffdab9',
  peru: 'cd853f',
  pRk: 'ffc0cb',
  plum: 'dda0dd',
  powMrXe: 'b0e0e6',
  purpN: '800080',
  YbeccapurpN: '663399',
  Yd: 'ff0000',
  Psybrown: 'bc8f8f',
  PyOXe: '4169e1',
  saddNbPwn: '8b4513',
  sOmon: 'fa8072',
  sandybPwn: 'f4a460',
  sHgYF: '2e8b57',
  sHshell: 'fff5ee',
  siFna: 'a0522d',
  silver: 'c0c0c0',
  skyXe: '87ceeb',
  UXe: '6a5acd',
  UWay: '708090',
  UgYy: '708090',
  snow: 'fffafa',
  sprRggYF: 'ff7f',
  stAlXe: '4682b4',
  tan: 'd2b48c',
  teO: '8080',
  tEstN: 'd8bfd8',
  tomato: 'ff6347',
  Qe: '40e0d0',
  viTet: 'ee82ee',
  JHt: 'f5deb3',
  wEte: 'ffffff',
  wEtesmoke: 'f5f5f5',
  Lw: 'ffff00',
  LwgYF: '9acd32'
};

function unpack() {
  const unpacked = {};
  const keys = Object.keys(names);
  const tkeys = Object.keys(map$1);
  let i, j, k, ok, nk;

  for (i = 0; i < keys.length; i++) {
    ok = nk = keys[i];

    for (j = 0; j < tkeys.length; j++) {
      k = tkeys[j];
      nk = nk.replace(k, map$1[k]);
    }

    k = parseInt(names[ok], 16);
    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];
  }

  return unpacked;
}

let names$1;

function nameParse(str) {
  if (!names$1) {
    names$1 = unpack();
    names$1.transparent = [0, 0, 0, 0];
  }

  const a = names$1[str.toLowerCase()];
  return a && {
    r: a[0],
    g: a[1],
    b: a[2],
    a: a.length === 4 ? a[3] : 255
  };
}

function modHSL(v, i, ratio) {
  if (v) {
    let tmp = rgb2hsl(v);
    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
    tmp = hsl2rgb(tmp);
    v.r = tmp[0];
    v.g = tmp[1];
    v.b = tmp[2];
  }
}

function clone(v, proto) {
  return v ? Object.assign(proto || {}, v) : v;
}

function fromObject(input) {
  var v = {
    r: 0,
    g: 0,
    b: 0,
    a: 255
  };

  if (Array.isArray(input)) {
    if (input.length >= 3) {
      v = {
        r: input[0],
        g: input[1],
        b: input[2],
        a: 255
      };

      if (input.length > 3) {
        v.a = n2b(input[3]);
      }
    }
  } else {
    v = clone(input, {
      r: 0,
      g: 0,
      b: 0,
      a: 1
    });
    v.a = n2b(v.a);
  }

  return v;
}

function functionParse(str) {
  if (str.charAt(0) === 'r') {
    return rgbParse(str);
  }

  return hueParse(str);
}

class Color {
  constructor(input) {
    if (input instanceof Color) {
      return input;
    }

    const type = typeof input;
    let v;

    if (type === 'object') {
      v = fromObject(input);
    } else if (type === 'string') {
      v = hexParse(input) || nameParse(input) || functionParse(input);
    }

    this._rgb = v;
    this._valid = !!v;
  }

  get valid() {
    return this._valid;
  }

  get rgb() {
    var v = clone(this._rgb);

    if (v) {
      v.a = b2n(v.a);
    }

    return v;
  }

  set rgb(obj) {
    this._rgb = fromObject(obj);
  }

  rgbString() {
    return this._valid ? rgbString(this._rgb) : this._rgb;
  }

  hexString() {
    return this._valid ? hexString(this._rgb) : this._rgb;
  }

  hslString() {
    return this._valid ? hslString(this._rgb) : this._rgb;
  }

  mix(color, weight) {
    const me = this;

    if (color) {
      const c1 = me.rgb;
      const c2 = color.rgb;
      let w2;
      const p = weight === w2 ? 0.5 : weight;
      const w = 2 * p - 1;
      const a = c1.a - c2.a;
      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
      w2 = 1 - w1;
      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
      c1.a = p * c1.a + (1 - p) * c2.a;
      me.rgb = c1;
    }

    return me;
  }

  clone() {
    return new Color(this.rgb);
  }

  alpha(a) {
    this._rgb.a = n2b(a);
    return this;
  }

  clearer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 - ratio;
    return this;
  }

  greyscale() {
    const rgb = this._rgb;
    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
    rgb.r = rgb.g = rgb.b = val;
    return this;
  }

  opaquer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 + ratio;
    return this;
  }

  negate() {
    const v = this._rgb;
    v.r = 255 - v.r;
    v.g = 255 - v.g;
    v.b = 255 - v.b;
    return this;
  }

  lighten(ratio) {
    modHSL(this._rgb, 2, ratio);
    return this;
  }

  darken(ratio) {
    modHSL(this._rgb, 2, -ratio);
    return this;
  }

  saturate(ratio) {
    modHSL(this._rgb, 1, ratio);
    return this;
  }

  desaturate(ratio) {
    modHSL(this._rgb, 1, -ratio);
    return this;
  }

  rotate(deg) {
    rotate(this._rgb, deg);
    return this;
  }

}

function index_esm(input) {
  return new Color(input);
}

const isPatternOrGradient = value => value instanceof CanvasGradient || value instanceof CanvasPattern;

function color(value) {
  return isPatternOrGradient(value) ? value : index_esm(value);
}

function getHoverColor(value) {
  return isPatternOrGradient(value) ? value : index_esm(value).saturate(0.5).darken(0.1).hexString();
}

const overrides = Object.create(null);
exports.$ = overrides;
const descriptors = Object.create(null);
exports.a2 = descriptors;

function getScope$1(node, key) {
  if (!key) {
    return node;
  }

  const keys = key.split('.');

  for (let i = 0, n = keys.length; i < n; ++i) {
    const k = keys[i];
    node = node[k] || (node[k] = Object.create(null));
  }

  return node;
}

function set(root, scope, values) {
  if (typeof scope === 'string') {
    return merge(getScope$1(root, scope), values);
  }

  return merge(getScope$1(root, ''), scope);
}

class Defaults {
  constructor(_descriptors) {
    this.animation = undefined;
    this.backgroundColor = 'rgba(0,0,0,0.1)';
    this.borderColor = 'rgba(0,0,0,0.1)';
    this.color = '#666';
    this.datasets = {};

    this.devicePixelRatio = context => context.chart.platform.getDevicePixelRatio();

    this.elements = {};
    this.events = ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'];
    this.font = {
      family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      size: 12,
      style: 'normal',
      lineHeight: 1.2,
      weight: null
    };
    this.hover = {};

    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);

    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);

    this.hoverColor = (ctx, options) => getHoverColor(options.color);

    this.indexAxis = 'x';
    this.interaction = {
      mode: 'nearest',
      intersect: true
    };
    this.maintainAspectRatio = true;
    this.onHover = null;
    this.onClick = null;
    this.parsing = true;
    this.plugins = {};
    this.responsive = true;
    this.scale = undefined;
    this.scales = {};
    this.showLine = true;
    this.describe(_descriptors);
  }

  set(scope, values) {
    return set(this, scope, values);
  }

  get(scope) {
    return getScope$1(this, scope);
  }

  describe(scope, values) {
    return set(descriptors, scope, values);
  }

  override(scope, values) {
    return set(overrides, scope, values);
  }

  route(scope, name, targetScope, targetName) {
    const scopeObject = getScope$1(this, scope);
    const targetScopeObject = getScope$1(this, targetScope);
    const privateName = '_' + name;
    Object.defineProperties(scopeObject, {
      [privateName]: {
        value: scopeObject[name],
        writable: true
      },
      [name]: {
        enumerable: true,

        get() {
          const local = this[privateName];
          const target = targetScopeObject[targetName];

          if (isObject(local)) {
            return Object.assign({}, target, local);
          }

          return valueOrDefault(local, target);
        },

        set(value) {
          this[privateName] = value;
        }

      }
    });
  }

}

var defaults = new Defaults({
  _scriptable: name => !name.startsWith('on'),
  _indexable: name => name !== 'events',
  hover: {
    _fallback: 'interaction'
  },
  interaction: {
    _scriptable: false,
    _indexable: false
  }
});
exports.d = defaults;

function toFontString(font) {
  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
    return null;
  }

  return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;
}

function _measureText(ctx, data, gc, longest, string) {
  let textWidth = data[string];

  if (!textWidth) {
    textWidth = data[string] = ctx.measureText(string).width;
    gc.push(string);
  }

  if (textWidth > longest) {
    longest = textWidth;
  }

  return longest;
}

function _longestText(ctx, font, arrayOfThings, cache) {
  cache = cache || {};
  let data = cache.data = cache.data || {};
  let gc = cache.garbageCollect = cache.garbageCollect || [];

  if (cache.font !== font) {
    data = cache.data = {};
    gc = cache.garbageCollect = [];
    cache.font = font;
  }

  ctx.save();
  ctx.font = font;
  let longest = 0;
  const ilen = arrayOfThings.length;
  let i, j, jlen, thing, nestedThing;

  for (i = 0; i < ilen; i++) {
    thing = arrayOfThings[i];

    if (thing !== undefined && thing !== null && isArray(thing) !== true) {
      longest = _measureText(ctx, data, gc, longest, thing);
    } else if (isArray(thing)) {
      for (j = 0, jlen = thing.length; j < jlen; j++) {
        nestedThing = thing[j];

        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {
          longest = _measureText(ctx, data, gc, longest, nestedThing);
        }
      }
    }
  }

  ctx.restore();
  const gcLen = gc.length / 2;

  if (gcLen > arrayOfThings.length) {
    for (i = 0; i < gcLen; i++) {
      delete data[gc[i]];
    }

    gc.splice(0, gcLen);
  }

  return longest;
}

function _alignPixel(chart, pixel, width) {
  const devicePixelRatio = chart.currentDevicePixelRatio;
  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}

function clearCanvas(canvas, ctx) {
  ctx = ctx || canvas.getContext('2d');
  ctx.save();
  ctx.resetTransform();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.restore();
}

function drawPoint(ctx, options, x, y) {
  let type, xOffset, yOffset, size, cornerRadius;
  const style = options.pointStyle;
  const rotation = options.rotation;
  const radius = options.radius;
  let rad = (rotation || 0) * RAD_PER_DEG;

  if (style && typeof style === 'object') {
    type = style.toString();

    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
      ctx.save();
      ctx.translate(x, y);
      ctx.rotate(rad);
      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
      ctx.restore();
      return;
    }
  }

  if (isNaN(radius) || radius <= 0) {
    return;
  }

  ctx.beginPath();

  switch (style) {
    default:
      ctx.arc(x, y, radius, 0, TAU);
      ctx.closePath();
      break;

    case 'triangle':
      ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
      ctx.closePath();
      break;

    case 'rectRounded':
      cornerRadius = radius * 0.516;
      size = radius - cornerRadius;
      xOffset = Math.cos(rad + QUARTER_PI) * size;
      yOffset = Math.sin(rad + QUARTER_PI) * size;
      ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
      ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
      ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
      ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
      ctx.closePath();
      break;

    case 'rect':
      if (!rotation) {
        size = Math.SQRT1_2 * radius;
        ctx.rect(x - size, y - size, 2 * size, 2 * size);
        break;
      }

      rad += QUARTER_PI;

    case 'rectRot':
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x - xOffset, y - yOffset);
      ctx.lineTo(x + yOffset, y - xOffset);
      ctx.lineTo(x + xOffset, y + yOffset);
      ctx.lineTo(x - yOffset, y + xOffset);
      ctx.closePath();
      break;

    case 'crossRot':
      rad += QUARTER_PI;

    case 'cross':
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x - xOffset, y - yOffset);
      ctx.lineTo(x + xOffset, y + yOffset);
      ctx.moveTo(x + yOffset, y - xOffset);
      ctx.lineTo(x - yOffset, y + xOffset);
      break;

    case 'star':
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x - xOffset, y - yOffset);
      ctx.lineTo(x + xOffset, y + yOffset);
      ctx.moveTo(x + yOffset, y - xOffset);
      ctx.lineTo(x - yOffset, y + xOffset);
      rad += QUARTER_PI;
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x - xOffset, y - yOffset);
      ctx.lineTo(x + xOffset, y + yOffset);
      ctx.moveTo(x + yOffset, y - xOffset);
      ctx.lineTo(x - yOffset, y + xOffset);
      break;

    case 'line':
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x - xOffset, y - yOffset);
      ctx.lineTo(x + xOffset, y + yOffset);
      break;

    case 'dash':
      ctx.moveTo(x, y);
      ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
      break;
  }

  ctx.fill();

  if (options.borderWidth > 0) {
    ctx.stroke();
  }
}

function _isPointInArea(point, area, margin) {
  margin = margin || 0.5;
  return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}

function clipArea(ctx, area) {
  ctx.save();
  ctx.beginPath();
  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
  ctx.clip();
}

function unclipArea(ctx) {
  ctx.restore();
}

function _steppedLineTo(ctx, previous, target, flip, mode) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }

  if (mode === 'middle') {
    const midpoint = (previous.x + target.x) / 2.0;
    ctx.lineTo(midpoint, previous.y);
    ctx.lineTo(midpoint, target.y);
  } else if (mode === 'after' !== !!flip) {
    ctx.lineTo(previous.x, target.y);
  } else {
    ctx.lineTo(target.x, previous.y);
  }

  ctx.lineTo(target.x, target.y);
}

function _bezierCurveTo(ctx, previous, target, flip) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }

  ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
}

function renderText(ctx, text, x, y, font, opts = {}) {
  const lines = isArray(text) ? text : [text];
  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';
  let i, line;
  ctx.save();
  ctx.font = font.string;
  setRenderOpts(ctx, opts);

  for (i = 0; i < lines.length; ++i) {
    line = lines[i];

    if (stroke) {
      if (opts.strokeColor) {
        ctx.strokeStyle = opts.strokeColor;
      }

      if (!isNullOrUndef(opts.strokeWidth)) {
        ctx.lineWidth = opts.strokeWidth;
      }

      ctx.strokeText(line, x, y, opts.maxWidth);
    }

    ctx.fillText(line, x, y, opts.maxWidth);
    decorateText(ctx, x, y, line, opts);
    y += font.lineHeight;
  }

  ctx.restore();
}

function setRenderOpts(ctx, opts) {
  if (opts.translation) {
    ctx.translate(opts.translation[0], opts.translation[1]);
  }

  if (!isNullOrUndef(opts.rotation)) {
    ctx.rotate(opts.rotation);
  }

  if (opts.color) {
    ctx.fillStyle = opts.color;
  }

  if (opts.textAlign) {
    ctx.textAlign = opts.textAlign;
  }

  if (opts.textBaseline) {
    ctx.textBaseline = opts.textBaseline;
  }
}

function decorateText(ctx, x, y, line, opts) {
  if (opts.strikethrough || opts.underline) {
    const metrics = ctx.measureText(line);
    const left = x - metrics.actualBoundingBoxLeft;
    const right = x + metrics.actualBoundingBoxRight;
    const top = y - metrics.actualBoundingBoxAscent;
    const bottom = y + metrics.actualBoundingBoxDescent;
    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
    ctx.strokeStyle = ctx.fillStyle;
    ctx.beginPath();
    ctx.lineWidth = opts.decorationWidth || 2;
    ctx.moveTo(left, yDecoration);
    ctx.lineTo(right, yDecoration);
    ctx.stroke();
  }
}

function addRoundedRectPath(ctx, rect) {
  const {
    x,
    y,
    w,
    h,
    radius
  } = rect;
  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);
  ctx.lineTo(x, y + h - radius.bottomLeft);
  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
  ctx.lineTo(x + w - radius.bottomRight, y + h);
  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
  ctx.lineTo(x + w, y + radius.topRight);
  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
  ctx.lineTo(x + radius.topLeft, y);
}

const LINE_HEIGHT = new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
const FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);

function toLineHeight(value, size) {
  const matches = ('' + value).match(LINE_HEIGHT);

  if (!matches || matches[1] === 'normal') {
    return size * 1.2;
  }

  value = +matches[2];

  switch (matches[3]) {
    case 'px':
      return value;

    case '%':
      value /= 100;
      break;
  }

  return size * value;
}

const numberOrZero = v => +v || 0;

function _readValueToProps(value, props) {
  const ret = {};
  const objProps = isObject(props);
  const keys = objProps ? Object.keys(props) : props;
  const read = isObject(value) ? objProps ? prop => valueOrDefault(value[prop], value[props[prop]]) : prop => value[prop] : () => value;

  for (const prop of keys) {
    ret[prop] = numberOrZero(read(prop));
  }

  return ret;
}

function toTRBL(value) {
  return _readValueToProps(value, {
    top: 'y',
    right: 'x',
    bottom: 'y',
    left: 'x'
  });
}

function toTRBLCorners(value) {
  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);
}

function toPadding(value) {
  const obj = toTRBL(value);
  obj.width = obj.left + obj.right;
  obj.height = obj.top + obj.bottom;
  return obj;
}

function toFont(options, fallback) {
  options = options || {};
  fallback = fallback || defaults.font;
  let size = valueOrDefault(options.size, fallback.size);

  if (typeof size === 'string') {
    size = parseInt(size, 10);
  }

  let style = valueOrDefault(options.style, fallback.style);

  if (style && !('' + style).match(FONT_STYLE)) {
    console.warn('Invalid font style specified: "' + style + '"');
    style = '';
  }

  const font = {
    family: valueOrDefault(options.family, fallback.family),
    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
    size,
    style,
    weight: valueOrDefault(options.weight, fallback.weight),
    string: ''
  };
  font.string = toFontString(font);
  return font;
}

function resolve(inputs, context, index, info) {
  let cacheable = true;
  let i, ilen, value;

  for (i = 0, ilen = inputs.length; i < ilen; ++i) {
    value = inputs[i];

    if (value === undefined) {
      continue;
    }

    if (context !== undefined && typeof value === 'function') {
      value = value(context);
      cacheable = false;
    }

    if (index !== undefined && isArray(value)) {
      value = value[index % value.length];
      cacheable = false;
    }

    if (value !== undefined) {
      if (info && !cacheable) {
        info.cacheable = false;
      }

      return value;
    }
  }
}

function _addGrace(minmax, grace) {
  const {
    min,
    max
  } = minmax;
  return {
    min: min - Math.abs(toDimension(grace, min)),
    max: max + toDimension(grace, max)
  };
}

function _lookup(table, value, cmp) {
  cmp = cmp || (index => table[index] < value);

  let hi = table.length - 1;
  let lo = 0;
  let mid;

  while (hi - lo > 1) {
    mid = lo + hi >> 1;

    if (cmp(mid)) {
      lo = mid;
    } else {
      hi = mid;
    }
  }

  return {
    lo,
    hi
  };
}

const _lookupByKey = (table, key, value) => _lookup(table, value, index => table[index][key] < value);

exports.w = _lookupByKey;

const _rlookupByKey = (table, key, value) => _lookup(table, value, index => table[index][key] >= value);

exports.z = _rlookupByKey;

function _filterBetween(values, min, max) {
  let start = 0;
  let end = values.length;

  while (start < end && values[start] < min) {
    start++;
  }

  while (end > start && values[end - 1] > max) {
    end--;
  }

  return start > 0 || end < values.length ? values.slice(start, end) : values;
}

const arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];

function listenArrayEvents(array, listener) {
  if (array._chartjs) {
    array._chartjs.listeners.push(listener);

    return;
  }

  Object.defineProperty(array, '_chartjs', {
    configurable: true,
    enumerable: false,
    value: {
      listeners: [listener]
    }
  });
  arrayEvents.forEach(key => {
    const method = '_onData' + _capitalize(key);

    const base = array[key];
    Object.defineProperty(array, key, {
      configurable: true,
      enumerable: false,

      value(...args) {
        const res = base.apply(this, args);

        array._chartjs.listeners.forEach(object => {
          if (typeof object[method] === 'function') {
            object[method](...args);
          }
        });

        return res;
      }

    });
  });
}

function unlistenArrayEvents(array, listener) {
  const stub = array._chartjs;

  if (!stub) {
    return;
  }

  const listeners = stub.listeners;
  const index = listeners.indexOf(listener);

  if (index !== -1) {
    listeners.splice(index, 1);
  }

  if (listeners.length > 0) {
    return;
  }

  arrayEvents.forEach(key => {
    delete array[key];
  });
  delete array._chartjs;
}

function _arrayUnique(items) {
  const set = new Set();
  let i, ilen;

  for (i = 0, ilen = items.length; i < ilen; ++i) {
    set.add(items[i]);
  }

  if (set.size === ilen) {
    return items;
  }

  return Array.from(set);
}

function _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {
  if (!defined(fallback)) {
    fallback = _resolve('_fallback', scopes);
  }

  const cache = {
    [Symbol.toStringTag]: 'Object',
    _cacheable: true,
    _scopes: scopes,
    _rootScopes: rootScopes,
    _fallback: fallback,
    _getTarget: getTarget,
    override: scope => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback)
  };
  return new Proxy(cache, {
    deleteProperty(target, prop) {
      delete target[prop];
      delete target._keys;
      delete scopes[0][prop];
      return true;
    },

    get(target, prop) {
      return _cached(target, prop, () => _resolveWithPrefixes(prop, prefixes, scopes, target));
    },

    getOwnPropertyDescriptor(target, prop) {
      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
    },

    getPrototypeOf() {
      return Reflect.getPrototypeOf(scopes[0]);
    },

    has(target, prop) {
      return getKeysFromAllScopes(target).includes(prop);
    },

    ownKeys(target) {
      return getKeysFromAllScopes(target);
    },

    set(target, prop, value) {
      const storage = target._storage || (target._storage = getTarget());
      storage[prop] = value;
      delete target[prop];
      delete target._keys;
      return true;
    }

  });
}

function _attachContext(proxy, context, subProxy, descriptorDefaults) {
  const cache = {
    _cacheable: false,
    _proxy: proxy,
    _context: context,
    _subProxy: subProxy,
    _stack: new Set(),
    _descriptors: _descriptors(proxy, descriptorDefaults),
    setContext: ctx => _attachContext(proxy, ctx, subProxy, descriptorDefaults),
    override: scope => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
  };
  return new Proxy(cache, {
    deleteProperty(target, prop) {
      delete target[prop];
      delete proxy[prop];
      return true;
    },

    get(target, prop, receiver) {
      return _cached(target, prop, () => _resolveWithContext(target, prop, receiver));
    },

    getOwnPropertyDescriptor(target, prop) {
      return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
        enumerable: true,
        configurable: true
      } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);
    },

    getPrototypeOf() {
      return Reflect.getPrototypeOf(proxy);
    },

    has(target, prop) {
      return Reflect.has(proxy, prop);
    },

    ownKeys() {
      return Reflect.ownKeys(proxy);
    },

    set(target, prop, value) {
      proxy[prop] = value;
      delete target[prop];
      return true;
    }

  });
}

function _descriptors(proxy, defaults = {
  scriptable: true,
  indexable: true
}) {
  const {
    _scriptable = defaults.scriptable,
    _indexable = defaults.indexable,
    _allKeys = defaults.allKeys
  } = proxy;
  return {
    allKeys: _allKeys,
    scriptable: _scriptable,
    indexable: _indexable,
    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,
    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable
  };
}

const readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;

const needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters';

function _cached(target, prop, resolve) {
  let value = target[prop];

  if (defined(value)) {
    return value;
  }

  value = resolve();

  if (defined(value)) {
    target[prop] = value;
  }

  return value;
}

function _resolveWithContext(target, prop, receiver) {
  const {
    _proxy,
    _context,
    _subProxy,
    _descriptors: descriptors
  } = target;
  let value = _proxy[prop];

  if (isFunction(value) && descriptors.isScriptable(prop)) {
    value = _resolveScriptable(prop, value, target, receiver);
  }

  if (isArray(value) && value.length) {
    value = _resolveArray(prop, value, target, descriptors.isIndexable);
  }

  if (needsSubResolver(prop, value)) {
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
  }

  return value;
}

function _resolveScriptable(prop, value, target, receiver) {
  const {
    _proxy,
    _context,
    _subProxy,
    _stack
  } = target;

  if (_stack.has(prop)) {
    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);
  }

  _stack.add(prop);

  value = value(_context, _subProxy || receiver);

  _stack.delete(prop);

  if (isObject(value)) {
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
  }

  return value;
}

function _resolveArray(prop, value, target, isIndexable) {
  const {
    _proxy,
    _context,
    _subProxy,
    _descriptors: descriptors
  } = target;

  if (defined(_context.index) && isIndexable(prop)) {
    value = value[_context.index % value.length];
  } else if (isObject(value[0])) {
    const arr = value;

    const scopes = _proxy._scopes.filter(s => s !== arr);

    value = [];

    for (const item of arr) {
      const resolver = createSubResolver(scopes, _proxy, prop, item);
      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
    }
  }

  return value;
}

function resolveFallback(fallback, prop, value) {
  return isFunction(fallback) ? fallback(prop, value) : fallback;
}

const getScope = (key, parent) => key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;

function addScopes(set, parentScopes, key, parentFallback) {
  for (const parent of parentScopes) {
    const scope = getScope(key, parent);

    if (scope) {
      set.add(scope);
      const fallback = resolveFallback(scope._fallback, key, scope);

      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {
        return fallback;
      }
    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {
      return null;
    }
  }

  return false;
}

function createSubResolver(parentScopes, resolver, prop, value) {
  const rootScopes = resolver._rootScopes;
  const fallback = resolveFallback(resolver._fallback, prop, value);
  const allScopes = [...parentScopes, ...rootScopes];
  const set = new Set();
  set.add(value);
  let key = addScopesFromKey(set, allScopes, prop, fallback || prop);

  if (key === null) {
    return false;
  }

  if (defined(fallback) && fallback !== prop) {
    key = addScopesFromKey(set, allScopes, fallback, key);

    if (key === null) {
      return false;
    }
  }

  return _createResolver(Array.from(set), [''], rootScopes, fallback, () => subGetTarget(resolver, prop, value));
}

function addScopesFromKey(set, allScopes, key, fallback) {
  while (key) {
    key = addScopes(set, allScopes, key, fallback);
  }

  return key;
}

function subGetTarget(resolver, prop, value) {
  const parent = resolver._getTarget();

  if (!(prop in parent)) {
    parent[prop] = {};
  }

  const target = parent[prop];

  if (isArray(target) && isObject(value)) {
    return value;
  }

  return target;
}

function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
  let value;

  for (const prefix of prefixes) {
    value = _resolve(readKey(prefix, prop), scopes);

    if (defined(value)) {
      return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
    }
  }
}

function _resolve(key, scopes) {
  for (const scope of scopes) {
    if (!scope) {
      continue;
    }

    const value = scope[key];

    if (defined(value)) {
      return value;
    }
  }
}

function getKeysFromAllScopes(target) {
  let keys = target._keys;

  if (!keys) {
    keys = target._keys = resolveKeysFromAllScopes(target._scopes);
  }

  return keys;
}

function resolveKeysFromAllScopes(scopes) {
  const set = new Set();

  for (const scope of scopes) {
    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {
      set.add(key);
    }
  }

  return Array.from(set);
}

const EPSILON = Number.EPSILON || 1e-14;

const getPoint = (points, i) => i < points.length && !points[i].skip && points[i];

const getValueAxis = indexAxis => indexAxis === 'x' ? 'y' : 'x';

function splineCurve(firstPoint, middlePoint, afterPoint, t) {
  const previous = firstPoint.skip ? middlePoint : firstPoint;
  const current = middlePoint;
  const next = afterPoint.skip ? middlePoint : afterPoint;
  const d01 = distanceBetweenPoints(current, previous);
  const d12 = distanceBetweenPoints(next, current);
  let s01 = d01 / (d01 + d12);
  let s12 = d12 / (d01 + d12);
  s01 = isNaN(s01) ? 0 : s01;
  s12 = isNaN(s12) ? 0 : s12;
  const fa = t * s01;
  const fb = t * s12;
  return {
    previous: {
      x: current.x - fa * (next.x - previous.x),
      y: current.y - fa * (next.y - previous.y)
    },
    next: {
      x: current.x + fb * (next.x - previous.x),
      y: current.y + fb * (next.y - previous.y)
    }
  };
}

function monotoneAdjust(points, deltaK, mK) {
  const pointsLen = points.length;
  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
  let pointAfter = getPoint(points, 0);

  for (let i = 0; i < pointsLen - 1; ++i) {
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);

    if (!pointCurrent || !pointAfter) {
      continue;
    }

    if (almostEquals(deltaK[i], 0, EPSILON)) {
      mK[i] = mK[i + 1] = 0;
      continue;
    }

    alphaK = mK[i] / deltaK[i];
    betaK = mK[i + 1] / deltaK[i];
    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);

    if (squaredMagnitude <= 9) {
      continue;
    }

    tauK = 3 / Math.sqrt(squaredMagnitude);
    mK[i] = alphaK * tauK * deltaK[i];
    mK[i + 1] = betaK * tauK * deltaK[i];
  }
}

function monotoneCompute(points, mK, indexAxis = 'x') {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  let delta, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);

  for (let i = 0; i < pointsLen; ++i) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);

    if (!pointCurrent) {
      continue;
    }

    const iPixel = pointCurrent[indexAxis];
    const vPixel = pointCurrent[valueAxis];

    if (pointBefore) {
      delta = (iPixel - pointBefore[indexAxis]) / 3;
      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
    }

    if (pointAfter) {
      delta = (pointAfter[indexAxis] - iPixel) / 3;
      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
    }
  }
}

function splineCurveMonotone(points, indexAxis = 'x') {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  const deltaK = Array(pointsLen).fill(0);
  const mK = Array(pointsLen);
  let i, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);

  for (i = 0; i < pointsLen; ++i) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);

    if (!pointCurrent) {
      continue;
    }

    if (pointAfter) {
      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
    }

    mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
  }

  monotoneAdjust(points, deltaK, mK);
  monotoneCompute(points, mK, indexAxis);
}

function capControlPoint(pt, min, max) {
  return Math.max(Math.min(pt, max), min);
}

function capBezierPoints(points, area) {
  let i, ilen, point, inArea, inAreaPrev;

  let inAreaNext = _isPointInArea(points[0], area);

  for (i = 0, ilen = points.length; i < ilen; ++i) {
    inAreaPrev = inArea;
    inArea = inAreaNext;
    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);

    if (!inArea) {
      continue;
    }

    point = points[i];

    if (inAreaPrev) {
      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
    }

    if (inAreaNext) {
      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
    }
  }
}

function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
  let i, ilen, point, controlPoints;

  if (options.spanGaps) {
    points = points.filter(pt => !pt.skip);
  }

  if (options.cubicInterpolationMode === 'monotone') {
    splineCurveMonotone(points, indexAxis);
  } else {
    let prev = loop ? points[points.length - 1] : points[0];

    for (i = 0, ilen = points.length; i < ilen; ++i) {
      point = points[i];
      controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
      point.cp1x = controlPoints.previous.x;
      point.cp1y = controlPoints.previous.y;
      point.cp2x = controlPoints.next.x;
      point.cp2y = controlPoints.next.y;
      prev = point;
    }
  }

  if (options.capBezierPoints) {
    capBezierPoints(points, area);
  }
}

function _isDomSupported() {
  return typeof window !== 'undefined' && typeof document !== 'undefined';
}

function _getParentNode(domNode) {
  let parent = domNode.parentNode;

  if (parent && parent.toString() === '[object ShadowRoot]') {
    parent = parent.host;
  }

  return parent;
}

function parseMaxStyle(styleValue, node, parentProperty) {
  let valueInPixels;

  if (typeof styleValue === 'string') {
    valueInPixels = parseInt(styleValue, 10);

    if (styleValue.indexOf('%') !== -1) {
      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    }
  } else {
    valueInPixels = styleValue;
  }

  return valueInPixels;
}

const getComputedStyle = element => window.getComputedStyle(element, null);

function getStyle(el, property) {
  return getComputedStyle(el).getPropertyValue(property);
}

const positions = ['top', 'right', 'bottom', 'left'];

function getPositionedStyle(styles, style, suffix) {
  const result = {};
  suffix = suffix ? '-' + suffix : '';

  for (let i = 0; i < 4; i++) {
    const pos = positions[i];
    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;
  }

  result.width = result.left + result.right;
  result.height = result.top + result.bottom;
  return result;
}

const useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);

function getCanvasPosition(evt, canvas) {
  const e = evt.native || evt;
  const touches = e.touches;
  const source = touches && touches.length ? touches[0] : e;
  const {
    offsetX,
    offsetY
  } = source;
  let box = false;
  let x, y;

  if (useOffsetPos(offsetX, offsetY, e.target)) {
    x = offsetX;
    y = offsetY;
  } else {
    const rect = canvas.getBoundingClientRect();
    x = source.clientX - rect.left;
    y = source.clientY - rect.top;
    box = true;
  }

  return {
    x,
    y,
    box
  };
}

function getRelativePosition(evt, chart) {
  const {
    canvas,
    currentDevicePixelRatio
  } = chart;
  const style = getComputedStyle(canvas);
  const borderBox = style.boxSizing === 'border-box';
  const paddings = getPositionedStyle(style, 'padding');
  const borders = getPositionedStyle(style, 'border', 'width');
  const {
    x,
    y,
    box
  } = getCanvasPosition(evt, canvas);
  const xOffset = paddings.left + (box && borders.left);
  const yOffset = paddings.top + (box && borders.top);
  let {
    width,
    height
  } = chart;

  if (borderBox) {
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }

  return {
    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
  };
}

function getContainerSize(canvas, width, height) {
  let maxWidth, maxHeight;

  if (width === undefined || height === undefined) {
    const container = _getParentNode(canvas);

    if (!container) {
      width = canvas.clientWidth;
      height = canvas.clientHeight;
    } else {
      const rect = container.getBoundingClientRect();
      const containerStyle = getComputedStyle(container);
      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');
      const containerPadding = getPositionedStyle(containerStyle, 'padding');
      width = rect.width - containerPadding.width - containerBorder.width;
      height = rect.height - containerPadding.height - containerBorder.height;
      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');
      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');
    }
  }

  return {
    width,
    height,
    maxWidth: maxWidth || INFINITY,
    maxHeight: maxHeight || INFINITY
  };
}

const round1 = v => Math.round(v * 10) / 10;

function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
  const style = getComputedStyle(canvas);
  const margins = getPositionedStyle(style, 'margin');
  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;
  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;
  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
  let {
    width,
    height
  } = containerSize;

  if (style.boxSizing === 'content-box') {
    const borders = getPositionedStyle(style, 'border', 'width');
    const paddings = getPositionedStyle(style, 'padding');
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }

  width = Math.max(0, width - margins.width);
  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);
  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));

  if (width && !height) {
    height = round1(width / 2);
  }

  return {
    width,
    height
  };
}

function retinaScale(chart, forceRatio, forceStyle) {
  const pixelRatio = forceRatio || 1;
  const deviceHeight = Math.floor(chart.height * pixelRatio);
  const deviceWidth = Math.floor(chart.width * pixelRatio);
  chart.height = deviceHeight / pixelRatio;
  chart.width = deviceWidth / pixelRatio;
  const canvas = chart.canvas;

  if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
    canvas.style.height = `${chart.height}px`;
    canvas.style.width = `${chart.width}px`;
  }

  if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
    chart.currentDevicePixelRatio = pixelRatio;
    canvas.height = deviceHeight;
    canvas.width = deviceWidth;
    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
    return true;
  }

  return false;
}

const supportsEventListenerOptions = function () {
  let passiveSupported = false;

  try {
    const options = {
      get passive() {
        passiveSupported = true;
        return false;
      }

    };
    window.addEventListener('test', null, options);
    window.removeEventListener('test', null, options);
  } catch (e) {}

  return passiveSupported;
}();

exports.G = supportsEventListenerOptions;

function readUsedSize(element, property) {
  const value = getStyle(element, property);
  const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
  return matches ? +matches[1] : undefined;
}

function _pointInLine(p1, p2, t, mode) {
  return {
    x: p1.x + t * (p2.x - p1.x),
    y: p1.y + t * (p2.y - p1.y)
  };
}

function _steppedInterpolation(p1, p2, t, mode) {
  return {
    x: p1.x + t * (p2.x - p1.x),
    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y
  };
}

function _bezierInterpolation(p1, p2, t, mode) {
  const cp1 = {
    x: p1.cp2x,
    y: p1.cp2y
  };
  const cp2 = {
    x: p2.cp1x,
    y: p2.cp1y
  };

  const a = _pointInLine(p1, cp1, t);

  const b = _pointInLine(cp1, cp2, t);

  const c = _pointInLine(cp2, p2, t);

  const d = _pointInLine(a, b, t);

  const e = _pointInLine(b, c, t);

  return _pointInLine(d, e, t);
}

const intlCache = new Map();

function getNumberFormat(locale, options) {
  options = options || {};
  const cacheKey = locale + JSON.stringify(options);
  let formatter = intlCache.get(cacheKey);

  if (!formatter) {
    formatter = new Intl.NumberFormat(locale, options);
    intlCache.set(cacheKey, formatter);
  }

  return formatter;
}

function formatNumber(num, locale, options) {
  return getNumberFormat(locale, options).format(num);
}

const getRightToLeftAdapter = function (rectX, width) {
  return {
    x(x) {
      return rectX + rectX + width - x;
    },

    setWidth(w) {
      width = w;
    },

    textAlign(align) {
      if (align === 'center') {
        return align;
      }

      return align === 'right' ? 'left' : 'right';
    },

    xPlus(x, value) {
      return x - value;
    },

    leftForLtr(x, itemWidth) {
      return x - itemWidth;
    }

  };
};

const getLeftToRightAdapter = function () {
  return {
    x(x) {
      return x;
    },

    setWidth(w) {},

    textAlign(align) {
      return align;
    },

    xPlus(x, value) {
      return x + value;
    },

    leftForLtr(x, _itemWidth) {
      return x;
    }

  };
};

function getRtlAdapter(rtl, rectX, width) {
  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}

function overrideTextDirection(ctx, direction) {
  let style, original;

  if (direction === 'ltr' || direction === 'rtl') {
    style = ctx.canvas.style;
    original = [style.getPropertyValue('direction'), style.getPropertyPriority('direction')];
    style.setProperty('direction', direction, 'important');
    ctx.prevTextDirection = original;
  }
}

function restoreTextDirection(ctx, original) {
  if (original !== undefined) {
    delete ctx.prevTextDirection;
    ctx.canvas.style.setProperty('direction', original[0], original[1]);
  }
}

function propertyFn(property) {
  if (property === 'angle') {
    return {
      between: _angleBetween,
      compare: _angleDiff,
      normalize: _normalizeAngle
    };
  }

  return {
    between: (n, s, e) => n >= Math.min(s, e) && n <= Math.max(e, s),
    compare: (a, b) => a - b,
    normalize: x => x
  };
}

function normalizeSegment({
  start,
  end,
  count,
  loop,
  style
}) {
  return {
    start: start % count,
    end: end % count,
    loop: loop && (end - start + 1) % count === 0,
    style
  };
}

function getSegment(segment, points, bounds) {
  const {
    property,
    start: startBound,
    end: endBound
  } = bounds;
  const {
    between,
    normalize
  } = propertyFn(property);
  const count = points.length;
  let {
    start,
    end,
    loop
  } = segment;
  let i, ilen;

  if (loop) {
    start += count;
    end += count;

    for (i = 0, ilen = count; i < ilen; ++i) {
      if (!between(normalize(points[start % count][property]), startBound, endBound)) {
        break;
      }

      start--;
      end--;
    }

    start %= count;
    end %= count;
  }

  if (end < start) {
    end += count;
  }

  return {
    start,
    end,
    loop,
    style: segment.style
  };
}

function _boundSegment(segment, points, bounds) {
  if (!bounds) {
    return [segment];
  }

  const {
    property,
    start: startBound,
    end: endBound
  } = bounds;
  const count = points.length;
  const {
    compare,
    between,
    normalize
  } = propertyFn(property);
  const {
    start,
    end,
    loop,
    style
  } = getSegment(segment, points, bounds);
  const result = [];
  let inside = false;
  let subStart = null;
  let value, point, prevValue;

  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;

  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);

  const shouldStart = () => inside || startIsBefore();

  const shouldStop = () => !inside || endIsBefore();

  for (let i = start, prev = start; i <= end; ++i) {
    point = points[i % count];

    if (point.skip) {
      continue;
    }

    value = normalize(point[property]);

    if (value === prevValue) {
      continue;
    }

    inside = between(value, startBound, endBound);

    if (subStart === null && shouldStart()) {
      subStart = compare(value, startBound) === 0 ? i : prev;
    }

    if (subStart !== null && shouldStop()) {
      result.push(normalizeSegment({
        start: subStart,
        end: i,
        loop,
        count,
        style
      }));
      subStart = null;
    }

    prev = i;
    prevValue = value;
  }

  if (subStart !== null) {
    result.push(normalizeSegment({
      start: subStart,
      end,
      loop,
      count,
      style
    }));
  }

  return result;
}

function _boundSegments(line, bounds) {
  const result = [];
  const segments = line.segments;

  for (let i = 0; i < segments.length; i++) {
    const sub = _boundSegment(segments[i], line.points, bounds);

    if (sub.length) {
      result.push(...sub);
    }
  }

  return result;
}

function findStartAndEnd(points, count, loop, spanGaps) {
  let start = 0;
  let end = count - 1;

  if (loop && !spanGaps) {
    while (start < count && !points[start].skip) {
      start++;
    }
  }

  while (start < count && points[start].skip) {
    start++;
  }

  start %= count;

  if (loop) {
    end += start;
  }

  while (end > start && points[end % count].skip) {
    end--;
  }

  end %= count;
  return {
    start,
    end
  };
}

function solidSegments(points, start, max, loop) {
  const count = points.length;
  const result = [];
  let last = start;
  let prev = points[start];
  let end;

  for (end = start + 1; end <= max; ++end) {
    const cur = points[end % count];

    if (cur.skip || cur.stop) {
      if (!prev.skip) {
        loop = false;
        result.push({
          start: start % count,
          end: (end - 1) % count,
          loop
        });
        start = last = cur.stop ? end : null;
      }
    } else {
      last = end;

      if (prev.skip) {
        start = end;
      }
    }

    prev = cur;
  }

  if (last !== null) {
    result.push({
      start: start % count,
      end: last % count,
      loop
    });
  }

  return result;
}

function _computeSegments(line, segmentOptions) {
  const points = line.points;
  const spanGaps = line.options.spanGaps;
  const count = points.length;

  if (!count) {
    return [];
  }

  const loop = !!line._loop;
  const {
    start,
    end
  } = findStartAndEnd(points, count, loop, spanGaps);

  if (spanGaps === true) {
    return splitByStyles(line, [{
      start,
      end,
      loop
    }], points, segmentOptions);
  }

  const max = end < start ? end + count : end;
  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
}

function splitByStyles(line, segments, points, segmentOptions) {
  if (!segmentOptions || !segmentOptions.setContext || !points) {
    return segments;
  }

  return doSplitByStyles(line, segments, points, segmentOptions);
}

function doSplitByStyles(line, segments, points, segmentOptions) {
  const baseStyle = readStyle(line.options);
  const count = points.length;
  const result = [];
  let start = segments[0].start;
  let i = start;

  for (const segment of segments) {
    let prevStyle = baseStyle;
    let prev = points[start % count];
    let style;

    for (i = start + 1; i <= segment.end; i++) {
      const pt = points[i % count];
      style = readStyle(segmentOptions.setContext({
        type: 'segment',
        p0: prev,
        p1: pt,
        p0DataIndex: (i - 1) % count,
        p1DataIndex: i % count,
        datasetIndex: line._datasetIndex
      }));

      if (styleChanged(style, prevStyle)) {
        result.push({
          start: start,
          end: i - 1,
          loop: segment.loop,
          style: prevStyle
        });
        prevStyle = style;
        start = i - 1;
      }

      prev = pt;
      prevStyle = style;
    }

    if (start < i - 1) {
      result.push({
        start,
        end: i - 1,
        loop: segment.loop,
        style
      });
      start = i - 1;
    }
  }

  return result;
}

function readStyle(options) {
  return {
    backgroundColor: options.backgroundColor,
    borderCapStyle: options.borderCapStyle,
    borderDash: options.borderDash,
    borderDashOffset: options.borderDashOffset,
    borderJoinStyle: options.borderJoinStyle,
    borderWidth: options.borderWidth,
    borderColor: options.borderColor
  };
}

function styleChanged(style, prevStyle) {
  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);
}
},{}],"../../node_modules/chart.js/dist/chart.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._detectPlatform = _detectPlatform;
Object.defineProperty(exports, "defaults", {
  enumerable: true,
  get: function () {
    return _helpersSegment.d;
  }
});
exports.scales = exports.registry = exports.registerables = exports.plugins = exports.layouts = exports.elements = exports.controllers = exports.animator = exports._adapters = exports.Tooltip = exports.Title = exports.TimeSeriesScale = exports.TimeScale = exports.Ticks = exports.SubTitle = exports.ScatterController = exports.Scale = exports.RadialLinearScale = exports.RadarController = exports.PolarAreaController = exports.PointElement = exports.PieController = exports.LogarithmicScale = exports.LinearScale = exports.LineElement = exports.LineController = exports.Legend = exports.Interaction = exports.Filler = exports.Element = exports.DoughnutController = exports.DomPlatform = exports.Decimation = exports.DatasetController = exports.Chart = exports.CategoryScale = exports.BubbleController = exports.BasicPlatform = exports.BasePlatform = exports.BarElement = exports.BarController = exports.ArcElement = exports.Animations = exports.Animation = void 0;

var _helpersSegment = require("./chunks/helpers.segment.js");

/*!
 * Chart.js v3.5.1
 * https://www.chartjs.org
 * (c) 2021 Chart.js Contributors
 * Released under the MIT License
 */
class Animator {
  constructor() {
    this._request = null;
    this._charts = new Map();
    this._running = false;
    this._lastDate = undefined;
  }

  _notify(chart, anims, date, type) {
    const callbacks = anims.listeners[type];
    const numSteps = anims.duration;
    callbacks.forEach(fn => fn({
      chart,
      initial: anims.initial,
      numSteps,
      currentStep: Math.min(date - anims.start, numSteps)
    }));
  }

  _refresh() {
    const me = this;

    if (me._request) {
      return;
    }

    me._running = true;
    me._request = _helpersSegment.r.call(window, () => {
      me._update();

      me._request = null;

      if (me._running) {
        me._refresh();
      }
    });
  }

  _update(date = Date.now()) {
    const me = this;
    let remaining = 0;

    me._charts.forEach((anims, chart) => {
      if (!anims.running || !anims.items.length) {
        return;
      }

      const items = anims.items;
      let i = items.length - 1;
      let draw = false;
      let item;

      for (; i >= 0; --i) {
        item = items[i];

        if (item._active) {
          if (item._total > anims.duration) {
            anims.duration = item._total;
          }

          item.tick(date);
          draw = true;
        } else {
          items[i] = items[items.length - 1];
          items.pop();
        }
      }

      if (draw) {
        chart.draw();

        me._notify(chart, anims, date, 'progress');
      }

      if (!items.length) {
        anims.running = false;

        me._notify(chart, anims, date, 'complete');

        anims.initial = false;
      }

      remaining += items.length;
    });

    me._lastDate = date;

    if (remaining === 0) {
      me._running = false;
    }
  }

  _getAnims(chart) {
    const charts = this._charts;
    let anims = charts.get(chart);

    if (!anims) {
      anims = {
        running: false,
        initial: true,
        items: [],
        listeners: {
          complete: [],
          progress: []
        }
      };
      charts.set(chart, anims);
    }

    return anims;
  }

  listen(chart, event, cb) {
    this._getAnims(chart).listeners[event].push(cb);
  }

  add(chart, items) {
    if (!items || !items.length) {
      return;
    }

    this._getAnims(chart).items.push(...items);
  }

  has(chart) {
    return this._getAnims(chart).items.length > 0;
  }

  start(chart) {
    const anims = this._charts.get(chart);

    if (!anims) {
      return;
    }

    anims.running = true;
    anims.start = Date.now();
    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);

    this._refresh();
  }

  running(chart) {
    if (!this._running) {
      return false;
    }

    const anims = this._charts.get(chart);

    if (!anims || !anims.running || !anims.items.length) {
      return false;
    }

    return true;
  }

  stop(chart) {
    const anims = this._charts.get(chart);

    if (!anims || !anims.items.length) {
      return;
    }

    const items = anims.items;
    let i = items.length - 1;

    for (; i >= 0; --i) {
      items[i].cancel();
    }

    anims.items = [];

    this._notify(chart, anims, Date.now(), 'complete');
  }

  remove(chart) {
    return this._charts.delete(chart);
  }

}

var animator = new Animator();
exports.animator = animator;
const transparent = 'transparent';
const interpolators = {
  boolean(from, to, factor) {
    return factor > 0.5 ? to : from;
  },

  color(from, to, factor) {
    const c0 = (0, _helpersSegment.c)(from || transparent);
    const c1 = c0.valid && (0, _helpersSegment.c)(to || transparent);
    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;
  },

  number(from, to, factor) {
    return from + (to - from) * factor;
  }

};

class Animation {
  constructor(cfg, target, prop, to) {
    const currentValue = target[prop];
    to = (0, _helpersSegment.a)([cfg.to, to, currentValue, cfg.from]);
    const from = (0, _helpersSegment.a)([cfg.from, currentValue, to]);
    this._active = true;
    this._fn = cfg.fn || interpolators[cfg.type || typeof from];
    this._easing = _helpersSegment.e[cfg.easing] || _helpersSegment.e.linear;
    this._start = Math.floor(Date.now() + (cfg.delay || 0));
    this._duration = this._total = Math.floor(cfg.duration);
    this._loop = !!cfg.loop;
    this._target = target;
    this._prop = prop;
    this._from = from;
    this._to = to;
    this._promises = undefined;
  }

  active() {
    return this._active;
  }

  update(cfg, to, date) {
    const me = this;

    if (me._active) {
      me._notify(false);

      const currentValue = me._target[me._prop];
      const elapsed = date - me._start;
      const remain = me._duration - elapsed;
      me._start = date;
      me._duration = Math.floor(Math.max(remain, cfg.duration));
      me._total += elapsed;
      me._loop = !!cfg.loop;
      me._to = (0, _helpersSegment.a)([cfg.to, to, currentValue, cfg.from]);
      me._from = (0, _helpersSegment.a)([cfg.from, currentValue, to]);
    }
  }

  cancel() {
    const me = this;

    if (me._active) {
      me.tick(Date.now());
      me._active = false;

      me._notify(false);
    }
  }

  tick(date) {
    const me = this;
    const elapsed = date - me._start;
    const duration = me._duration;
    const prop = me._prop;
    const from = me._from;
    const loop = me._loop;
    const to = me._to;
    let factor;
    me._active = from !== to && (loop || elapsed < duration);

    if (!me._active) {
      me._target[prop] = to;

      me._notify(true);

      return;
    }

    if (elapsed < 0) {
      me._target[prop] = from;
      return;
    }

    factor = elapsed / duration % 2;
    factor = loop && factor > 1 ? 2 - factor : factor;
    factor = me._easing(Math.min(1, Math.max(0, factor)));
    me._target[prop] = me._fn(from, to, factor);
  }

  wait() {
    const promises = this._promises || (this._promises = []);
    return new Promise((res, rej) => {
      promises.push({
        res,
        rej
      });
    });
  }

  _notify(resolved) {
    const method = resolved ? 'res' : 'rej';
    const promises = this._promises || [];

    for (let i = 0; i < promises.length; i++) {
      promises[i][method]();
    }
  }

}

exports.Animation = Animation;
const numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];
const colors = ['color', 'borderColor', 'backgroundColor'];

_helpersSegment.d.set('animation', {
  delay: undefined,
  duration: 1000,
  easing: 'easeOutQuart',
  fn: undefined,
  from: undefined,
  loop: undefined,
  to: undefined,
  type: undefined
});

const animationOptions = Object.keys(_helpersSegment.d.animation);

_helpersSegment.d.describe('animation', {
  _fallback: false,
  _indexable: false,
  _scriptable: name => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'
});

_helpersSegment.d.set('animations', {
  colors: {
    type: 'color',
    properties: colors
  },
  numbers: {
    type: 'number',
    properties: numbers
  }
});

_helpersSegment.d.describe('animations', {
  _fallback: 'animation'
});

_helpersSegment.d.set('transitions', {
  active: {
    animation: {
      duration: 400
    }
  },
  resize: {
    animation: {
      duration: 0
    }
  },
  show: {
    animations: {
      colors: {
        from: 'transparent'
      },
      visible: {
        type: 'boolean',
        duration: 0
      }
    }
  },
  hide: {
    animations: {
      colors: {
        to: 'transparent'
      },
      visible: {
        type: 'boolean',
        easing: 'linear',
        fn: v => v | 0
      }
    }
  }
});

class Animations {
  constructor(chart, config) {
    this._chart = chart;
    this._properties = new Map();
    this.configure(config);
  }

  configure(config) {
    if (!(0, _helpersSegment.i)(config)) {
      return;
    }

    const animatedProps = this._properties;
    Object.getOwnPropertyNames(config).forEach(key => {
      const cfg = config[key];

      if (!(0, _helpersSegment.i)(cfg)) {
        return;
      }

      const resolved = {};

      for (const option of animationOptions) {
        resolved[option] = cfg[option];
      }

      ((0, _helpersSegment.b)(cfg.properties) && cfg.properties || [key]).forEach(prop => {
        if (prop === key || !animatedProps.has(prop)) {
          animatedProps.set(prop, resolved);
        }
      });
    });
  }

  _animateOptions(target, values) {
    const newOptions = values.options;
    const options = resolveTargetOptions(target, newOptions);

    if (!options) {
      return [];
    }

    const animations = this._createAnimations(options, newOptions);

    if (newOptions.$shared) {
      awaitAll(target.options.$animations, newOptions).then(() => {
        target.options = newOptions;
      }, () => {});
    }

    return animations;
  }

  _createAnimations(target, values) {
    const animatedProps = this._properties;
    const animations = [];
    const running = target.$animations || (target.$animations = {});
    const props = Object.keys(values);
    const date = Date.now();
    let i;

    for (i = props.length - 1; i >= 0; --i) {
      const prop = props[i];

      if (prop.charAt(0) === '$') {
        continue;
      }

      if (prop === 'options') {
        animations.push(...this._animateOptions(target, values));
        continue;
      }

      const value = values[prop];
      let animation = running[prop];
      const cfg = animatedProps.get(prop);

      if (animation) {
        if (cfg && animation.active()) {
          animation.update(cfg, value, date);
          continue;
        } else {
          animation.cancel();
        }
      }

      if (!cfg || !cfg.duration) {
        target[prop] = value;
        continue;
      }

      running[prop] = animation = new Animation(cfg, target, prop, value);
      animations.push(animation);
    }

    return animations;
  }

  update(target, values) {
    if (this._properties.size === 0) {
      Object.assign(target, values);
      return;
    }

    const animations = this._createAnimations(target, values);

    if (animations.length) {
      animator.add(this._chart, animations);
      return true;
    }
  }

}

exports.Animations = Animations;

function awaitAll(animations, properties) {
  const running = [];
  const keys = Object.keys(properties);

  for (let i = 0; i < keys.length; i++) {
    const anim = animations[keys[i]];

    if (anim && anim.active()) {
      running.push(anim.wait());
    }
  }

  return Promise.all(running);
}

function resolveTargetOptions(target, newOptions) {
  if (!newOptions) {
    return;
  }

  let options = target.options;

  if (!options) {
    target.options = newOptions;
    return;
  }

  if (options.$shared) {
    target.options = options = Object.assign({}, options, {
      $shared: false,
      $animations: {}
    });
  }

  return options;
}

function scaleClip(scale, allowedOverflow) {
  const opts = scale && scale.options || {};
  const reverse = opts.reverse;
  const min = opts.min === undefined ? allowedOverflow : 0;
  const max = opts.max === undefined ? allowedOverflow : 0;
  return {
    start: reverse ? max : min,
    end: reverse ? min : max
  };
}

function defaultClip(xScale, yScale, allowedOverflow) {
  if (allowedOverflow === false) {
    return false;
  }

  const x = scaleClip(xScale, allowedOverflow);
  const y = scaleClip(yScale, allowedOverflow);
  return {
    top: y.end,
    right: x.end,
    bottom: y.start,
    left: x.start
  };
}

function toClip(value) {
  let t, r, b, l;

  if ((0, _helpersSegment.i)(value)) {
    t = value.top;
    r = value.right;
    b = value.bottom;
    l = value.left;
  } else {
    t = r = b = l = value;
  }

  return {
    top: t,
    right: r,
    bottom: b,
    left: l,
    disabled: value === false
  };
}

function getSortedDatasetIndices(chart, filterVisible) {
  const keys = [];

  const metasets = chart._getSortedDatasetMetas(filterVisible);

  let i, ilen;

  for (i = 0, ilen = metasets.length; i < ilen; ++i) {
    keys.push(metasets[i].index);
  }

  return keys;
}

function applyStack(stack, value, dsIndex, options) {
  const keys = stack.keys;
  const singleMode = options.mode === 'single';
  let i, ilen, datasetIndex, otherValue;

  if (value === null) {
    return;
  }

  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    datasetIndex = +keys[i];

    if (datasetIndex === dsIndex) {
      if (options.all) {
        continue;
      }

      break;
    }

    otherValue = stack.values[datasetIndex];

    if ((0, _helpersSegment.g)(otherValue) && (singleMode || value === 0 || (0, _helpersSegment.s)(value) === (0, _helpersSegment.s)(otherValue))) {
      value += otherValue;
    }
  }

  return value;
}

function convertObjectDataToArray(data) {
  const keys = Object.keys(data);
  const adata = new Array(keys.length);
  let i, ilen, key;

  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    key = keys[i];
    adata[i] = {
      x: key,
      y: data[key]
    };
  }

  return adata;
}

function isStacked(scale, meta) {
  const stacked = scale && scale.options.stacked;
  return stacked || stacked === undefined && meta.stack !== undefined;
}

function getStackKey(indexScale, valueScale, meta) {
  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}

function getUserBounds(scale) {
  const {
    min,
    max,
    minDefined,
    maxDefined
  } = scale.getUserBounds();
  return {
    min: minDefined ? min : Number.NEGATIVE_INFINITY,
    max: maxDefined ? max : Number.POSITIVE_INFINITY
  };
}

function getOrCreateStack(stacks, stackKey, indexValue) {
  const subStack = stacks[stackKey] || (stacks[stackKey] = {});
  return subStack[indexValue] || (subStack[indexValue] = {});
}

function getLastIndexInStack(stack, vScale, positive) {
  for (const meta of vScale.getMatchingVisibleMetas('bar').reverse()) {
    const value = stack[meta.index];

    if (positive && value > 0 || !positive && value < 0) {
      return meta.index;
    }
  }

  return null;
}

function updateStacks(controller, parsed) {
  const {
    chart,
    _cachedMeta: meta
  } = controller;
  const stacks = chart._stacks || (chart._stacks = {});
  const {
    iScale,
    vScale,
    index: datasetIndex
  } = meta;
  const iAxis = iScale.axis;
  const vAxis = vScale.axis;
  const key = getStackKey(iScale, vScale, meta);
  const ilen = parsed.length;
  let stack;

  for (let i = 0; i < ilen; ++i) {
    const item = parsed[i];
    const {
      [iAxis]: index,
      [vAxis]: value
    } = item;
    const itemStacks = item._stacks || (item._stacks = {});
    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
    stack[datasetIndex] = value;
    stack._top = getLastIndexInStack(stack, vScale, true);
    stack._bottom = getLastIndexInStack(stack, vScale, false);
  }
}

function getFirstScaleId(chart, axis) {
  const scales = chart.scales;
  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();
}

function createDatasetContext(parent, index) {
  return Object.assign(Object.create(parent), {
    active: false,
    dataset: undefined,
    datasetIndex: index,
    index,
    mode: 'default',
    type: 'dataset'
  });
}

function createDataContext(parent, index, element) {
  return Object.assign(Object.create(parent), {
    active: false,
    dataIndex: index,
    parsed: undefined,
    raw: undefined,
    element,
    index,
    mode: 'default',
    type: 'data'
  });
}

function clearStacks(meta, items) {
  const datasetIndex = meta.controller.index;
  const axis = meta.vScale && meta.vScale.axis;

  if (!axis) {
    return;
  }

  items = items || meta._parsed;

  for (const parsed of items) {
    const stacks = parsed._stacks;

    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {
      return;
    }

    delete stacks[axis][datasetIndex];
  }
}

const isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';

const cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);

class DatasetController {
  constructor(chart, datasetIndex) {
    this.chart = chart;
    this._ctx = chart.ctx;
    this.index = datasetIndex;
    this._cachedDataOpts = {};
    this._cachedMeta = this.getMeta();
    this._type = this._cachedMeta.type;
    this.options = undefined;
    this._parsing = false;
    this._data = undefined;
    this._objectData = undefined;
    this._sharedOptions = undefined;
    this._drawStart = undefined;
    this._drawCount = undefined;
    this.enableOptionSharing = false;
    this.$context = undefined;
    this._syncList = [];
    this.initialize();
  }

  initialize() {
    const me = this;
    const meta = me._cachedMeta;
    me.configure();
    me.linkScales();
    meta._stacked = isStacked(meta.vScale, meta);
    me.addElements();
  }

  updateIndex(datasetIndex) {
    if (this.index !== datasetIndex) {
      clearStacks(this._cachedMeta);
    }

    this.index = datasetIndex;
  }

  linkScales() {
    const me = this;
    const chart = me.chart;
    const meta = me._cachedMeta;
    const dataset = me.getDataset();

    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;

    const xid = meta.xAxisID = (0, _helpersSegment.v)(dataset.xAxisID, getFirstScaleId(chart, 'x'));
    const yid = meta.yAxisID = (0, _helpersSegment.v)(dataset.yAxisID, getFirstScaleId(chart, 'y'));
    const rid = meta.rAxisID = (0, _helpersSegment.v)(dataset.rAxisID, getFirstScaleId(chart, 'r'));
    const indexAxis = meta.indexAxis;
    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
    meta.xScale = me.getScaleForId(xid);
    meta.yScale = me.getScaleForId(yid);
    meta.rScale = me.getScaleForId(rid);
    meta.iScale = me.getScaleForId(iid);
    meta.vScale = me.getScaleForId(vid);
  }

  getDataset() {
    return this.chart.data.datasets[this.index];
  }

  getMeta() {
    return this.chart.getDatasetMeta(this.index);
  }

  getScaleForId(scaleID) {
    return this.chart.scales[scaleID];
  }

  _getOtherScale(scale) {
    const meta = this._cachedMeta;
    return scale === meta.iScale ? meta.vScale : meta.iScale;
  }

  reset() {
    this._update('reset');
  }

  _destroy() {
    const meta = this._cachedMeta;

    if (this._data) {
      (0, _helpersSegment.u)(this._data, this);
    }

    if (meta._stacked) {
      clearStacks(meta);
    }
  }

  _dataCheck() {
    const me = this;
    const dataset = me.getDataset();
    const data = dataset.data || (dataset.data = []);
    const _data = me._data;

    if ((0, _helpersSegment.i)(data)) {
      me._data = convertObjectDataToArray(data);
    } else if (_data !== data) {
      if (_data) {
        (0, _helpersSegment.u)(_data, me);
        const meta = me._cachedMeta;
        clearStacks(meta);
        meta._parsed = [];
      }

      if (data && Object.isExtensible(data)) {
        (0, _helpersSegment.l)(data, me);
      }

      me._syncList = [];
      me._data = data;
    }
  }

  addElements() {
    const me = this;
    const meta = me._cachedMeta;

    me._dataCheck();

    if (me.datasetElementType) {
      meta.dataset = new me.datasetElementType();
    }
  }

  buildOrUpdateElements(resetNewElements) {
    const me = this;
    const meta = me._cachedMeta;
    const dataset = me.getDataset();
    let stackChanged = false;

    me._dataCheck();

    const oldStacked = meta._stacked;
    meta._stacked = isStacked(meta.vScale, meta);

    if (meta.stack !== dataset.stack) {
      stackChanged = true;
      clearStacks(meta);
      meta.stack = dataset.stack;
    }

    me._resyncElements(resetNewElements);

    if (stackChanged || oldStacked !== meta._stacked) {
      updateStacks(me, meta._parsed);
    }
  }

  configure() {
    const me = this;
    const config = me.chart.config;
    const scopeKeys = config.datasetScopeKeys(me._type);
    const scopes = config.getOptionScopes(me.getDataset(), scopeKeys, true);
    me.options = config.createResolver(scopes, me.getContext());
    me._parsing = me.options.parsing;
  }

  parse(start, count) {
    const me = this;
    const {
      _cachedMeta: meta,
      _data: data
    } = me;
    const {
      iScale,
      _stacked
    } = meta;
    const iAxis = iScale.axis;
    let sorted = start === 0 && count === data.length ? true : meta._sorted;
    let prev = start > 0 && meta._parsed[start - 1];
    let i, cur, parsed;

    if (me._parsing === false) {
      meta._parsed = data;
      meta._sorted = true;
      parsed = data;
    } else {
      if ((0, _helpersSegment.b)(data[start])) {
        parsed = me.parseArrayData(meta, data, start, count);
      } else if ((0, _helpersSegment.i)(data[start])) {
        parsed = me.parseObjectData(meta, data, start, count);
      } else {
        parsed = me.parsePrimitiveData(meta, data, start, count);
      }

      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];

      for (i = 0; i < count; ++i) {
        meta._parsed[i + start] = cur = parsed[i];

        if (sorted) {
          if (isNotInOrderComparedToPrev()) {
            sorted = false;
          }

          prev = cur;
        }
      }

      meta._sorted = sorted;
    }

    if (_stacked) {
      updateStacks(me, parsed);
    }
  }

  parsePrimitiveData(meta, data, start, count) {
    const {
      iScale,
      vScale
    } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = new Array(count);
    let i, ilen, index;

    for (i = 0, ilen = count; i < ilen; ++i) {
      index = i + start;
      parsed[i] = {
        [iAxis]: singleScale || iScale.parse(labels[index], index),
        [vAxis]: vScale.parse(data[index], index)
      };
    }

    return parsed;
  }

  parseArrayData(meta, data, start, count) {
    const {
      xScale,
      yScale
    } = meta;
    const parsed = new Array(count);
    let i, ilen, index, item;

    for (i = 0, ilen = count; i < ilen; ++i) {
      index = i + start;
      item = data[index];
      parsed[i] = {
        x: xScale.parse(item[0], index),
        y: yScale.parse(item[1], index)
      };
    }

    return parsed;
  }

  parseObjectData(meta, data, start, count) {
    const {
      xScale,
      yScale
    } = meta;
    const {
      xAxisKey = 'x',
      yAxisKey = 'y'
    } = this._parsing;
    const parsed = new Array(count);
    let i, ilen, index, item;

    for (i = 0, ilen = count; i < ilen; ++i) {
      index = i + start;
      item = data[index];
      parsed[i] = {
        x: xScale.parse((0, _helpersSegment.f)(item, xAxisKey), index),
        y: yScale.parse((0, _helpersSegment.f)(item, yAxisKey), index)
      };
    }

    return parsed;
  }

  getParsed(index) {
    return this._cachedMeta._parsed[index];
  }

  getDataElement(index) {
    return this._cachedMeta.data[index];
  }

  applyStack(scale, parsed, mode) {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const value = parsed[scale.axis];
    const stack = {
      keys: getSortedDatasetIndices(chart, true),
      values: parsed._stacks[scale.axis]
    };
    return applyStack(stack, value, meta.index, {
      mode
    });
  }

  updateRangeFromParsed(range, scale, parsed, stack) {
    const parsedValue = parsed[scale.axis];
    let value = parsedValue === null ? NaN : parsedValue;
    const values = stack && parsed._stacks[scale.axis];

    if (stack && values) {
      stack.values = values;
      range.min = Math.min(range.min, value);
      range.max = Math.max(range.max, value);
      value = applyStack(stack, parsedValue, this._cachedMeta.index, {
        all: true
      });
    }

    range.min = Math.min(range.min, value);
    range.max = Math.max(range.max, value);
  }

  getMinMax(scale, canStack) {
    const me = this;
    const meta = me._cachedMeta;
    const _parsed = meta._parsed;
    const sorted = meta._sorted && scale === meta.iScale;
    const ilen = _parsed.length;

    const otherScale = me._getOtherScale(scale);

    const stack = canStack && meta._stacked && {
      keys: getSortedDatasetIndices(me.chart, true),
      values: null
    };
    const range = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    };
    const {
      min: otherMin,
      max: otherMax
    } = getUserBounds(otherScale);
    let i, value, parsed, otherValue;

    function _skip() {
      parsed = _parsed[i];
      value = parsed[scale.axis];
      otherValue = parsed[otherScale.axis];
      return !(0, _helpersSegment.g)(value) || otherMin > otherValue || otherMax < otherValue;
    }

    for (i = 0; i < ilen; ++i) {
      if (_skip()) {
        continue;
      }

      me.updateRangeFromParsed(range, scale, parsed, stack);

      if (sorted) {
        break;
      }
    }

    if (sorted) {
      for (i = ilen - 1; i >= 0; --i) {
        if (_skip()) {
          continue;
        }

        me.updateRangeFromParsed(range, scale, parsed, stack);
        break;
      }
    }

    return range;
  }

  getAllParsedValues(scale) {
    const parsed = this._cachedMeta._parsed;
    const values = [];
    let i, ilen, value;

    for (i = 0, ilen = parsed.length; i < ilen; ++i) {
      value = parsed[i][scale.axis];

      if ((0, _helpersSegment.g)(value)) {
        values.push(value);
      }
    }

    return values;
  }

  getMaxOverflow() {
    return false;
  }

  getLabelAndValue(index) {
    const me = this;
    const meta = me._cachedMeta;
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const parsed = me.getParsed(index);
    return {
      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',
      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''
    };
  }

  _update(mode) {
    const me = this;
    const meta = me._cachedMeta;
    me.configure();
    me._cachedDataOpts = {};
    me.update(mode || 'default');
    meta._clip = toClip((0, _helpersSegment.v)(me.options.clip, defaultClip(meta.xScale, meta.yScale, me.getMaxOverflow())));
  }

  update(mode) {}

  draw() {
    const me = this;
    const ctx = me._ctx;
    const chart = me.chart;
    const meta = me._cachedMeta;
    const elements = meta.data || [];
    const area = chart.chartArea;
    const active = [];
    const start = me._drawStart || 0;
    const count = me._drawCount || elements.length - start;
    let i;

    if (meta.dataset) {
      meta.dataset.draw(ctx, area, start, count);
    }

    for (i = start; i < start + count; ++i) {
      const element = elements[i];

      if (element.hidden) {
        continue;
      }

      if (element.active) {
        active.push(element);
      } else {
        element.draw(ctx, area);
      }
    }

    for (i = 0; i < active.length; ++i) {
      active[i].draw(ctx, area);
    }
  }

  getStyle(index, active) {
    const mode = active ? 'active' : 'default';
    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);
  }

  getContext(index, active, mode) {
    const me = this;
    const dataset = me.getDataset();
    let context;

    if (index >= 0 && index < me._cachedMeta.data.length) {
      const element = me._cachedMeta.data[index];
      context = element.$context || (element.$context = createDataContext(me.getContext(), index, element));
      context.parsed = me.getParsed(index);
      context.raw = dataset.data[index];
      context.index = context.dataIndex = index;
    } else {
      context = me.$context || (me.$context = createDatasetContext(me.chart.getContext(), me.index));
      context.dataset = dataset;
      context.index = context.datasetIndex = me.index;
    }

    context.active = !!active;
    context.mode = mode;
    return context;
  }

  resolveDatasetElementOptions(mode) {
    return this._resolveElementOptions(this.datasetElementType.id, mode);
  }

  resolveDataElementOptions(index, mode) {
    return this._resolveElementOptions(this.dataElementType.id, mode, index);
  }

  _resolveElementOptions(elementType, mode = 'default', index) {
    const me = this;
    const active = mode === 'active';
    const cache = me._cachedDataOpts;
    const cacheKey = elementType + '-' + mode;
    const cached = cache[cacheKey];
    const sharing = me.enableOptionSharing && (0, _helpersSegment.h)(index);

    if (cached) {
      return cloneIfNotShared(cached, sharing);
    }

    const config = me.chart.config;
    const scopeKeys = config.datasetElementScopeKeys(me._type, elementType);
    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];
    const scopes = config.getOptionScopes(me.getDataset(), scopeKeys);
    const names = Object.keys(_helpersSegment.d.elements[elementType]);

    const context = () => me.getContext(index, active);

    const values = config.resolveNamedOptions(scopes, names, context, prefixes);

    if (values.$shared) {
      values.$shared = sharing;
      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
    }

    return values;
  }

  _resolveAnimations(index, transition, active) {
    const me = this;
    const chart = me.chart;
    const cache = me._cachedDataOpts;
    const cacheKey = `animation-${transition}`;
    const cached = cache[cacheKey];

    if (cached) {
      return cached;
    }

    let options;

    if (chart.options.animation !== false) {
      const config = me.chart.config;
      const scopeKeys = config.datasetAnimationScopeKeys(me._type, transition);
      const scopes = config.getOptionScopes(me.getDataset(), scopeKeys);
      options = config.createResolver(scopes, me.getContext(index, active, transition));
    }

    const animations = new Animations(chart, options && options.animations);

    if (options && options._cacheable) {
      cache[cacheKey] = Object.freeze(animations);
    }

    return animations;
  }

  getSharedOptions(options) {
    if (!options.$shared) {
      return;
    }

    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
  }

  includeOptions(mode, sharedOptions) {
    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
  }

  updateElement(element, index, properties, mode) {
    if (isDirectUpdateMode(mode)) {
      Object.assign(element, properties);
    } else {
      this._resolveAnimations(index, mode).update(element, properties);
    }
  }

  updateSharedOptions(sharedOptions, mode, newOptions) {
    if (sharedOptions && !isDirectUpdateMode(mode)) {
      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
    }
  }

  _setStyle(element, index, mode, active) {
    element.active = active;
    const options = this.getStyle(index, active);

    this._resolveAnimations(index, mode, active).update(element, {
      options: !active && this.getSharedOptions(options) || options
    });
  }

  removeHoverStyle(element, datasetIndex, index) {
    this._setStyle(element, index, 'active', false);
  }

  setHoverStyle(element, datasetIndex, index) {
    this._setStyle(element, index, 'active', true);
  }

  _removeDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;

    if (element) {
      this._setStyle(element, undefined, 'active', false);
    }
  }

  _setDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;

    if (element) {
      this._setStyle(element, undefined, 'active', true);
    }
  }

  _resyncElements(resetNewElements) {
    const me = this;
    const data = me._data;
    const elements = me._cachedMeta.data;

    for (const [method, arg1, arg2] of me._syncList) {
      me[method](arg1, arg2);
    }

    me._syncList = [];
    const numMeta = elements.length;
    const numData = data.length;
    const count = Math.min(numData, numMeta);

    if (count) {
      me.parse(0, count);
    }

    if (numData > numMeta) {
      me._insertElements(numMeta, numData - numMeta, resetNewElements);
    } else if (numData < numMeta) {
      me._removeElements(numData, numMeta - numData);
    }
  }

  _insertElements(start, count, resetNewElements = true) {
    const me = this;
    const meta = me._cachedMeta;
    const data = meta.data;
    const end = start + count;
    let i;

    const move = arr => {
      arr.length += count;

      for (i = arr.length - 1; i >= end; i--) {
        arr[i] = arr[i - count];
      }
    };

    move(data);

    for (i = start; i < end; ++i) {
      data[i] = new me.dataElementType();
    }

    if (me._parsing) {
      move(meta._parsed);
    }

    me.parse(start, count);

    if (resetNewElements) {
      me.updateElements(data, start, count, 'reset');
    }
  }

  updateElements(element, start, count, mode) {}

  _removeElements(start, count) {
    const me = this;
    const meta = me._cachedMeta;

    if (me._parsing) {
      const removed = meta._parsed.splice(start, count);

      if (meta._stacked) {
        clearStacks(meta, removed);
      }
    }

    meta.data.splice(start, count);
  }

  _sync(args) {
    if (this._parsing) {
      this._syncList.push(args);
    } else {
      const [method, arg1, arg2] = args;
      this[method](arg1, arg2);
    }
  }

  _onDataPush() {
    const count = arguments.length;

    this._sync(['_insertElements', this.getDataset().data.length - count, count]);
  }

  _onDataPop() {
    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);
  }

  _onDataShift() {
    this._sync(['_removeElements', 0, 1]);
  }

  _onDataSplice(start, count) {
    this._sync(['_removeElements', start, count]);

    this._sync(['_insertElements', start, arguments.length - 2]);
  }

  _onDataUnshift() {
    this._sync(['_insertElements', 0, arguments.length]);
  }

}

exports.DatasetController = DatasetController;
DatasetController.defaults = {};
DatasetController.prototype.datasetElementType = null;
DatasetController.prototype.dataElementType = null;

function getAllScaleValues(scale) {
  if (!scale._cache.$bar) {
    const metas = scale.getMatchingVisibleMetas('bar');
    let values = [];

    for (let i = 0, ilen = metas.length; i < ilen; i++) {
      values = values.concat(metas[i].controller.getAllParsedValues(scale));
    }

    scale._cache.$bar = (0, _helpersSegment._)(values.sort((a, b) => a - b));
  }

  return scale._cache.$bar;
}

function computeMinSampleSize(scale) {
  const values = getAllScaleValues(scale);
  let min = scale._length;
  let i, ilen, curr, prev;

  const updateMinAndPrev = () => {
    if (curr === 32767 || curr === -32768) {
      return;
    }

    if ((0, _helpersSegment.h)(prev)) {
      min = Math.min(min, Math.abs(curr - prev) || min);
    }

    prev = curr;
  };

  for (i = 0, ilen = values.length; i < ilen; ++i) {
    curr = scale.getPixelForValue(values[i]);
    updateMinAndPrev();
  }

  prev = undefined;

  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {
    curr = scale.getPixelForTick(i);
    updateMinAndPrev();
  }

  return min;
}

function computeFitCategoryTraits(index, ruler, options, stackCount) {
  const thickness = options.barThickness;
  let size, ratio;

  if ((0, _helpersSegment.j)(thickness)) {
    size = ruler.min * options.categoryPercentage;
    ratio = options.barPercentage;
  } else {
    size = thickness * stackCount;
    ratio = 1;
  }

  return {
    chunk: size / stackCount,
    ratio,
    start: ruler.pixels[index] - size / 2
  };
}

function computeFlexCategoryTraits(index, ruler, options, stackCount) {
  const pixels = ruler.pixels;
  const curr = pixels[index];
  let prev = index > 0 ? pixels[index - 1] : null;
  let next = index < pixels.length - 1 ? pixels[index + 1] : null;
  const percent = options.categoryPercentage;

  if (prev === null) {
    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
  }

  if (next === null) {
    next = curr + curr - prev;
  }

  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
  const size = Math.abs(next - prev) / 2 * percent;
  return {
    chunk: size / stackCount,
    ratio: options.barPercentage,
    start
  };
}

function parseFloatBar(entry, item, vScale, i) {
  const startValue = vScale.parse(entry[0], i);
  const endValue = vScale.parse(entry[1], i);
  const min = Math.min(startValue, endValue);
  const max = Math.max(startValue, endValue);
  let barStart = min;
  let barEnd = max;

  if (Math.abs(min) > Math.abs(max)) {
    barStart = max;
    barEnd = min;
  }

  item[vScale.axis] = barEnd;
  item._custom = {
    barStart,
    barEnd,
    start: startValue,
    end: endValue,
    min,
    max
  };
}

function parseValue(entry, item, vScale, i) {
  if ((0, _helpersSegment.b)(entry)) {
    parseFloatBar(entry, item, vScale, i);
  } else {
    item[vScale.axis] = vScale.parse(entry, i);
  }

  return item;
}

function parseArrayOrPrimitive(meta, data, start, count) {
  const iScale = meta.iScale;
  const vScale = meta.vScale;
  const labels = iScale.getLabels();
  const singleScale = iScale === vScale;
  const parsed = [];
  let i, ilen, item, entry;

  for (i = start, ilen = start + count; i < ilen; ++i) {
    entry = data[i];
    item = {};
    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
    parsed.push(parseValue(entry, item, vScale, i));
  }

  return parsed;
}

function isFloatBar(custom) {
  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
}

function barSign(size, vScale, actualBase) {
  if (size !== 0) {
    return (0, _helpersSegment.s)(size);
  }

  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}

function borderProps(properties) {
  let reverse, start, end, top, bottom;

  if (properties.horizontal) {
    reverse = properties.base > properties.x;
    start = 'left';
    end = 'right';
  } else {
    reverse = properties.base < properties.y;
    start = 'bottom';
    end = 'top';
  }

  if (reverse) {
    top = 'end';
    bottom = 'start';
  } else {
    top = 'start';
    bottom = 'end';
  }

  return {
    start,
    end,
    reverse,
    top,
    bottom
  };
}

function setBorderSkipped(properties, options, stack, index) {
  let edge = options.borderSkipped;
  const res = {};

  if (!edge) {
    properties.borderSkipped = res;
    return;
  }

  const {
    start,
    end,
    reverse,
    top,
    bottom
  } = borderProps(properties);

  if (edge === 'middle' && stack) {
    properties.enableBorderRadius = true;

    if ((stack._top || 0) === index) {
      edge = top;
    } else if ((stack._bottom || 0) === index) {
      edge = bottom;
    } else {
      res[parseEdge(bottom, start, end, reverse)] = true;
      edge = top;
    }
  }

  res[parseEdge(edge, start, end, reverse)] = true;
  properties.borderSkipped = res;
}

function parseEdge(edge, a, b, reverse) {
  if (reverse) {
    edge = swap(edge, a, b);
    edge = startEnd(edge, b, a);
  } else {
    edge = startEnd(edge, a, b);
  }

  return edge;
}

function swap(orig, v1, v2) {
  return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}

function startEnd(v, start, end) {
  return v === 'start' ? start : v === 'end' ? end : v;
}

class BarController extends DatasetController {
  parsePrimitiveData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }

  parseArrayData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }

  parseObjectData(meta, data, start, count) {
    const {
      iScale,
      vScale
    } = meta;
    const {
      xAxisKey = 'x',
      yAxisKey = 'y'
    } = this._parsing;
    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;
    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;
    const parsed = [];
    let i, ilen, item, obj;

    for (i = start, ilen = start + count; i < ilen; ++i) {
      obj = data[i];
      item = {};
      item[iScale.axis] = iScale.parse((0, _helpersSegment.f)(obj, iAxisKey), i);
      parsed.push(parseValue((0, _helpersSegment.f)(obj, vAxisKey), item, vScale, i));
    }

    return parsed;
  }

  updateRangeFromParsed(range, scale, parsed, stack) {
    super.updateRangeFromParsed(range, scale, parsed, stack);
    const custom = parsed._custom;

    if (custom && scale === this._cachedMeta.vScale) {
      range.min = Math.min(range.min, custom.min);
      range.max = Math.max(range.max, custom.max);
    }
  }

  getMaxOverflow() {
    return 0;
  }

  getLabelAndValue(index) {
    const me = this;
    const meta = me._cachedMeta;
    const {
      iScale,
      vScale
    } = meta;
    const parsed = me.getParsed(index);
    const custom = parsed._custom;
    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);
    return {
      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),
      value
    };
  }

  initialize() {
    const me = this;
    me.enableOptionSharing = true;
    super.initialize();
    const meta = me._cachedMeta;
    meta.stack = me.getDataset().stack;
  }

  update(mode) {
    const me = this;
    const meta = me._cachedMeta;
    me.updateElements(meta.data, 0, meta.data.length, mode);
  }

  updateElements(bars, start, count, mode) {
    const me = this;
    const reset = mode === 'reset';
    const {
      index,
      _cachedMeta: {
        vScale
      }
    } = me;
    const base = vScale.getBasePixel();
    const horizontal = vScale.isHorizontal();

    const ruler = me._getRuler();

    const firstOpts = me.resolveDataElementOptions(start, mode);
    const sharedOptions = me.getSharedOptions(firstOpts);
    const includeOptions = me.includeOptions(mode, sharedOptions);
    me.updateSharedOptions(sharedOptions, mode, firstOpts);

    for (let i = start; i < start + count; i++) {
      const parsed = me.getParsed(i);
      const vpixels = reset || (0, _helpersSegment.j)(parsed[vScale.axis]) ? {
        base,
        head: base
      } : me._calculateBarValuePixels(i);

      const ipixels = me._calculateBarIndexPixels(i, ruler);

      const stack = (parsed._stacks || {})[vScale.axis];
      const properties = {
        horizontal,
        base: vpixels.base,
        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,
        x: horizontal ? vpixels.head : ipixels.center,
        y: horizontal ? ipixels.center : vpixels.head,
        height: horizontal ? ipixels.size : Math.abs(vpixels.size),
        width: horizontal ? Math.abs(vpixels.size) : ipixels.size
      };

      if (includeOptions) {
        properties.options = sharedOptions || me.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);
      }

      setBorderSkipped(properties, properties.options || bars[i].options, stack, index);
      me.updateElement(bars[i], i, properties, mode);
    }
  }

  _getStacks(last, dataIndex) {
    const me = this;
    const meta = me._cachedMeta;
    const iScale = meta.iScale;
    const metasets = iScale.getMatchingVisibleMetas(me._type);
    const stacked = iScale.options.stacked;
    const ilen = metasets.length;
    const stacks = [];
    let i, item;

    for (i = 0; i < ilen; ++i) {
      item = metasets[i];

      if (!item.controller.options.grouped) {
        continue;
      }

      if (typeof dataIndex !== 'undefined') {
        const val = item.controller.getParsed(dataIndex)[item.controller._cachedMeta.vScale.axis];

        if ((0, _helpersSegment.j)(val) || isNaN(val)) {
          continue;
        }
      }

      if (stacked === false || stacks.indexOf(item.stack) === -1 || stacked === undefined && item.stack === undefined) {
        stacks.push(item.stack);
      }

      if (item.index === last) {
        break;
      }
    }

    if (!stacks.length) {
      stacks.push(undefined);
    }

    return stacks;
  }

  _getStackCount(index) {
    return this._getStacks(undefined, index).length;
  }

  _getStackIndex(datasetIndex, name, dataIndex) {
    const stacks = this._getStacks(datasetIndex, dataIndex);

    const index = name !== undefined ? stacks.indexOf(name) : -1;
    return index === -1 ? stacks.length - 1 : index;
  }

  _getRuler() {
    const me = this;
    const opts = me.options;
    const meta = me._cachedMeta;
    const iScale = meta.iScale;
    const pixels = [];
    let i, ilen;

    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {
      pixels.push(iScale.getPixelForValue(me.getParsed(i)[iScale.axis], i));
    }

    const barThickness = opts.barThickness;
    const min = barThickness || computeMinSampleSize(iScale);
    return {
      min,
      pixels,
      start: iScale._startPixel,
      end: iScale._endPixel,
      stackCount: me._getStackCount(),
      scale: iScale,
      grouped: opts.grouped,
      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
    };
  }

  _calculateBarValuePixels(index) {
    const me = this;
    const {
      _cachedMeta: {
        vScale,
        _stacked
      },
      options: {
        base: baseValue,
        minBarLength
      }
    } = me;
    const actualBase = baseValue || 0;
    const parsed = me.getParsed(index);
    const custom = parsed._custom;
    const floating = isFloatBar(custom);
    let value = parsed[vScale.axis];
    let start = 0;
    let length = _stacked ? me.applyStack(vScale, parsed, _stacked) : value;
    let head, size;

    if (length !== value) {
      start = length - value;
      length = value;
    }

    if (floating) {
      value = custom.barStart;
      length = custom.barEnd - custom.barStart;

      if (value !== 0 && (0, _helpersSegment.s)(value) !== (0, _helpersSegment.s)(custom.barEnd)) {
        start = 0;
      }

      start += value;
    }

    const startValue = !(0, _helpersSegment.j)(baseValue) && !floating ? baseValue : start;
    let base = vScale.getPixelForValue(startValue);

    if (me.chart.getDataVisibility(index)) {
      head = vScale.getPixelForValue(start + length);
    } else {
      head = base;
    }

    size = head - base;

    if (Math.abs(size) < minBarLength) {
      size = barSign(size, vScale, actualBase) * minBarLength;

      if (value === actualBase) {
        base -= size / 2;
      }

      head = base + size;
    }

    if (base === vScale.getPixelForValue(actualBase)) {
      const halfGrid = (0, _helpersSegment.s)(size) * vScale.getLineWidthForValue(actualBase) / 2;
      base += halfGrid;
      size -= halfGrid;
    }

    return {
      size,
      base,
      head,
      center: head + size / 2
    };
  }

  _calculateBarIndexPixels(index, ruler) {
    const me = this;
    const scale = ruler.scale;
    const options = me.options;
    const skipNull = options.skipNull;
    const maxBarThickness = (0, _helpersSegment.v)(options.maxBarThickness, Infinity);
    let center, size;

    if (ruler.grouped) {
      const stackCount = skipNull ? me._getStackCount(index) : ruler.stackCount;
      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);

      const stackIndex = me._getStackIndex(me.index, me._cachedMeta.stack, skipNull ? index : undefined);

      center = range.start + range.chunk * stackIndex + range.chunk / 2;
      size = Math.min(maxBarThickness, range.chunk * range.ratio);
    } else {
      center = scale.getPixelForValue(me.getParsed(index)[scale.axis], index);
      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
    }

    return {
      base: center - size / 2,
      head: center + size / 2,
      center,
      size
    };
  }

  draw() {
    const me = this;
    const meta = me._cachedMeta;
    const vScale = meta.vScale;
    const rects = meta.data;
    const ilen = rects.length;
    let i = 0;

    for (; i < ilen; ++i) {
      if (me.getParsed(i)[vScale.axis] !== null) {
        rects[i].draw(me._ctx);
      }
    }
  }

}

exports.BarController = BarController;
BarController.id = 'bar';
BarController.defaults = {
  datasetElementType: false,
  dataElementType: 'bar',
  categoryPercentage: 0.8,
  barPercentage: 0.9,
  grouped: true,
  animations: {
    numbers: {
      type: 'number',
      properties: ['x', 'y', 'base', 'width', 'height']
    }
  }
};
BarController.overrides = {
  scales: {
    _index_: {
      type: 'category',
      offset: true,
      grid: {
        offset: true
      }
    },
    _value_: {
      type: 'linear',
      beginAtZero: true
    }
  }
};

class BubbleController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
  }

  parseObjectData(meta, data, start, count) {
    const {
      xScale,
      yScale
    } = meta;
    const {
      xAxisKey = 'x',
      yAxisKey = 'y'
    } = this._parsing;
    const parsed = [];
    let i, ilen, item;

    for (i = start, ilen = start + count; i < ilen; ++i) {
      item = data[i];
      parsed.push({
        x: xScale.parse((0, _helpersSegment.f)(item, xAxisKey), i),
        y: yScale.parse((0, _helpersSegment.f)(item, yAxisKey), i),
        _custom: item && item.r && +item.r
      });
    }

    return parsed;
  }

  getMaxOverflow() {
    const {
      data,
      _parsed
    } = this._cachedMeta;
    let max = 0;

    for (let i = data.length - 1; i >= 0; --i) {
      max = Math.max(max, data[i].size() / 2, _parsed[i]._custom);
    }

    return max > 0 && max;
  }

  getLabelAndValue(index) {
    const me = this;
    const meta = me._cachedMeta;
    const {
      xScale,
      yScale
    } = meta;
    const parsed = me.getParsed(index);
    const x = xScale.getLabelForValue(parsed.x);
    const y = yScale.getLabelForValue(parsed.y);
    const r = parsed._custom;
    return {
      label: meta.label,
      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'
    };
  }

  update(mode) {
    const me = this;
    const points = me._cachedMeta.data;
    me.updateElements(points, 0, points.length, mode);
  }

  updateElements(points, start, count, mode) {
    const me = this;
    const reset = mode === 'reset';
    const {
      iScale,
      vScale
    } = me._cachedMeta;
    const firstOpts = me.resolveDataElementOptions(start, mode);
    const sharedOptions = me.getSharedOptions(firstOpts);
    const includeOptions = me.includeOptions(mode, sharedOptions);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;

    for (let i = start; i < start + count; i++) {
      const point = points[i];
      const parsed = !reset && me.getParsed(i);
      const properties = {};
      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
      properties.skip = isNaN(iPixel) || isNaN(vPixel);

      if (includeOptions) {
        properties.options = me.resolveDataElementOptions(i, point.active ? 'active' : mode);

        if (reset) {
          properties.options.radius = 0;
        }
      }

      me.updateElement(point, i, properties, mode);
    }

    me.updateSharedOptions(sharedOptions, mode, firstOpts);
  }

  resolveDataElementOptions(index, mode) {
    const parsed = this.getParsed(index);
    let values = super.resolveDataElementOptions(index, mode);

    if (values.$shared) {
      values = Object.assign({}, values, {
        $shared: false
      });
    }

    const radius = values.radius;

    if (mode !== 'active') {
      values.radius = 0;
    }

    values.radius += (0, _helpersSegment.v)(parsed && parsed._custom, radius);
    return values;
  }

}

exports.BubbleController = BubbleController;
BubbleController.id = 'bubble';
BubbleController.defaults = {
  datasetElementType: false,
  dataElementType: 'point',
  animations: {
    numbers: {
      type: 'number',
      properties: ['x', 'y', 'borderWidth', 'radius']
    }
  }
};
BubbleController.overrides = {
  scales: {
    x: {
      type: 'linear'
    },
    y: {
      type: 'linear'
    }
  },
  plugins: {
    tooltip: {
      callbacks: {
        title() {
          return '';
        }

      }
    }
  }
};

function getRatioAndOffset(rotation, circumference, cutout) {
  let ratioX = 1;
  let ratioY = 1;
  let offsetX = 0;
  let offsetY = 0;

  if (circumference < _helpersSegment.T) {
    const startAngle = rotation;
    const endAngle = startAngle + circumference;
    const startX = Math.cos(startAngle);
    const startY = Math.sin(startAngle);
    const endX = Math.cos(endAngle);
    const endY = Math.sin(endAngle);

    const calcMax = (angle, a, b) => (0, _helpersSegment.o)(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);

    const calcMin = (angle, a, b) => (0, _helpersSegment.o)(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);

    const maxX = calcMax(0, startX, endX);
    const maxY = calcMax(_helpersSegment.H, startY, endY);
    const minX = calcMin(_helpersSegment.P, startX, endX);
    const minY = calcMin(_helpersSegment.P + _helpersSegment.H, startY, endY);
    ratioX = (maxX - minX) / 2;
    ratioY = (maxY - minY) / 2;
    offsetX = -(maxX + minX) / 2;
    offsetY = -(maxY + minY) / 2;
  }

  return {
    ratioX,
    ratioY,
    offsetX,
    offsetY
  };
}

class DoughnutController extends DatasetController {
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.enableOptionSharing = true;
    this.innerRadius = undefined;
    this.outerRadius = undefined;
    this.offsetX = undefined;
    this.offsetY = undefined;
  }

  linkScales() {}

  parse(start, count) {
    const data = this.getDataset().data;
    const meta = this._cachedMeta;
    let i, ilen;

    for (i = start, ilen = start + count; i < ilen; ++i) {
      meta._parsed[i] = +data[i];
    }
  }

  _getRotation() {
    return (0, _helpersSegment.t)(this.options.rotation - 90);
  }

  _getCircumference() {
    return (0, _helpersSegment.t)(this.options.circumference);
  }

  _getRotationExtents() {
    let min = _helpersSegment.T;
    let max = -_helpersSegment.T;
    const me = this;

    for (let i = 0; i < me.chart.data.datasets.length; ++i) {
      if (me.chart.isDatasetVisible(i)) {
        const controller = me.chart.getDatasetMeta(i).controller;

        const rotation = controller._getRotation();

        const circumference = controller._getCircumference();

        min = Math.min(min, rotation);
        max = Math.max(max, rotation + circumference);
      }
    }

    return {
      rotation: min,
      circumference: max - min
    };
  }

  update(mode) {
    const me = this;
    const chart = me.chart;
    const {
      chartArea
    } = chart;
    const meta = me._cachedMeta;
    const arcs = meta.data;
    const spacing = me.getMaxBorderWidth() + me.getMaxOffset(arcs) + me.options.spacing;
    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
    const cutout = Math.min((0, _helpersSegment.k)(me.options.cutout, maxSize), 1);

    const chartWeight = me._getRingWeight(me.index);

    const {
      circumference,
      rotation
    } = me._getRotationExtents();

    const {
      ratioX,
      ratioY,
      offsetX,
      offsetY
    } = getRatioAndOffset(rotation, circumference, cutout);
    const maxWidth = (chartArea.width - spacing) / ratioX;
    const maxHeight = (chartArea.height - spacing) / ratioY;
    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
    const outerRadius = (0, _helpersSegment.m)(me.options.radius, maxRadius);
    const innerRadius = Math.max(outerRadius * cutout, 0);

    const radiusLength = (outerRadius - innerRadius) / me._getVisibleDatasetWeightTotal();

    me.offsetX = offsetX * outerRadius;
    me.offsetY = offsetY * outerRadius;
    meta.total = me.calculateTotal();
    me.outerRadius = outerRadius - radiusLength * me._getRingWeightOffset(me.index);
    me.innerRadius = Math.max(me.outerRadius - radiusLength * chartWeight, 0);
    me.updateElements(arcs, 0, arcs.length, mode);
  }

  _circumference(i, reset) {
    const me = this;
    const opts = me.options;
    const meta = me._cachedMeta;

    const circumference = me._getCircumference();

    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {
      return 0;
    }

    return me.calculateCircumference(meta._parsed[i] * circumference / _helpersSegment.T);
  }

  updateElements(arcs, start, count, mode) {
    const me = this;
    const reset = mode === 'reset';
    const chart = me.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const animationOpts = opts.animation;
    const centerX = (chartArea.left + chartArea.right) / 2;
    const centerY = (chartArea.top + chartArea.bottom) / 2;
    const animateScale = reset && animationOpts.animateScale;
    const innerRadius = animateScale ? 0 : me.innerRadius;
    const outerRadius = animateScale ? 0 : me.outerRadius;
    const firstOpts = me.resolveDataElementOptions(start, mode);
    const sharedOptions = me.getSharedOptions(firstOpts);
    const includeOptions = me.includeOptions(mode, sharedOptions);

    let startAngle = me._getRotation();

    let i;

    for (i = 0; i < start; ++i) {
      startAngle += me._circumference(i, reset);
    }

    for (i = start; i < start + count; ++i) {
      const circumference = me._circumference(i, reset);

      const arc = arcs[i];
      const properties = {
        x: centerX + me.offsetX,
        y: centerY + me.offsetY,
        startAngle,
        endAngle: startAngle + circumference,
        circumference,
        outerRadius,
        innerRadius
      };

      if (includeOptions) {
        properties.options = sharedOptions || me.resolveDataElementOptions(i, arc.active ? 'active' : mode);
      }

      startAngle += circumference;
      me.updateElement(arc, i, properties, mode);
    }

    me.updateSharedOptions(sharedOptions, mode, firstOpts);
  }

  calculateTotal() {
    const meta = this._cachedMeta;
    const metaData = meta.data;
    let total = 0;
    let i;

    for (i = 0; i < metaData.length; i++) {
      const value = meta._parsed[i];

      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {
        total += Math.abs(value);
      }
    }

    return total;
  }

  calculateCircumference(value) {
    const total = this._cachedMeta.total;

    if (total > 0 && !isNaN(value)) {
      return _helpersSegment.T * (Math.abs(value) / total);
    }

    return 0;
  }

  getLabelAndValue(index) {
    const me = this;
    const meta = me._cachedMeta;
    const chart = me.chart;
    const labels = chart.data.labels || [];
    const value = (0, _helpersSegment.n)(meta._parsed[index], chart.options.locale);
    return {
      label: labels[index] || '',
      value
    };
  }

  getMaxBorderWidth(arcs) {
    const me = this;
    let max = 0;
    const chart = me.chart;
    let i, ilen, meta, controller, options;

    if (!arcs) {
      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
        if (chart.isDatasetVisible(i)) {
          meta = chart.getDatasetMeta(i);
          arcs = meta.data;
          controller = meta.controller;

          if (controller !== me) {
            controller.configure();
          }

          break;
        }
      }
    }

    if (!arcs) {
      return 0;
    }

    for (i = 0, ilen = arcs.length; i < ilen; ++i) {
      options = controller.resolveDataElementOptions(i);

      if (options.borderAlign !== 'inner') {
        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
      }
    }

    return max;
  }

  getMaxOffset(arcs) {
    let max = 0;

    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {
      const options = this.resolveDataElementOptions(i);
      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
    }

    return max;
  }

  _getRingWeightOffset(datasetIndex) {
    let ringWeightOffset = 0;

    for (let i = 0; i < datasetIndex; ++i) {
      if (this.chart.isDatasetVisible(i)) {
        ringWeightOffset += this._getRingWeight(i);
      }
    }

    return ringWeightOffset;
  }

  _getRingWeight(datasetIndex) {
    return Math.max((0, _helpersSegment.v)(this.chart.data.datasets[datasetIndex].weight, 1), 0);
  }

  _getVisibleDatasetWeightTotal() {
    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
  }

}

exports.DoughnutController = DoughnutController;
DoughnutController.id = 'doughnut';
DoughnutController.defaults = {
  datasetElementType: false,
  dataElementType: 'arc',
  animation: {
    animateRotate: true,
    animateScale: false
  },
  animations: {
    numbers: {
      type: 'number',
      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']
    }
  },
  cutout: '50%',
  rotation: 0,
  circumference: 360,
  radius: '100%',
  spacing: 0,
  indexAxis: 'r'
};
DoughnutController.descriptors = {
  _scriptable: name => name !== 'spacing',
  _indexable: name => name !== 'spacing'
};
DoughnutController.overrides = {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(chart) {
          const data = chart.data;

          if (data.labels.length && data.datasets.length) {
            const {
              labels: {
                pointStyle
              }
            } = chart.legend.options;
            return data.labels.map((label, i) => {
              const meta = chart.getDatasetMeta(0);
              const style = meta.controller.getStyle(i);
              return {
                text: label,
                fillStyle: style.backgroundColor,
                strokeStyle: style.borderColor,
                lineWidth: style.borderWidth,
                pointStyle: pointStyle,
                hidden: !chart.getDataVisibility(i),
                index: i
              };
            });
          }

          return [];
        }

      },

      onClick(e, legendItem, legend) {
        legend.chart.toggleDataVisibility(legendItem.index);
        legend.chart.update();
      }

    },
    tooltip: {
      callbacks: {
        title() {
          return '';
        },

        label(tooltipItem) {
          let dataLabel = tooltipItem.label;
          const value = ': ' + tooltipItem.formattedValue;

          if ((0, _helpersSegment.b)(dataLabel)) {
            dataLabel = dataLabel.slice();
            dataLabel[0] += value;
          } else {
            dataLabel += value;
          }

          return dataLabel;
        }

      }
    }
  }
};

class LineController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
  }

  update(mode) {
    const me = this;
    const meta = me._cachedMeta;
    const {
      dataset: line,
      data: points = [],
      _dataset
    } = meta;
    const animationsDisabled = me.chart._animationsDisabled;
    let {
      start,
      count
    } = getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
    me._drawStart = start;
    me._drawCount = count;

    if (scaleRangesChanged(meta)) {
      start = 0;
      count = points.length;
    }

    line._datasetIndex = me.index;
    line._decimated = !!_dataset._decimated;
    line.points = points;
    const options = me.resolveDatasetElementOptions(mode);

    if (!me.options.showLine) {
      options.borderWidth = 0;
    }

    options.segment = me.options.segment;
    me.updateElement(line, undefined, {
      animated: !animationsDisabled,
      options
    }, mode);
    me.updateElements(points, start, count, mode);
  }

  updateElements(points, start, count, mode) {
    const me = this;
    const reset = mode === 'reset';
    const {
      iScale,
      vScale,
      _stacked
    } = me._cachedMeta;
    const firstOpts = me.resolveDataElementOptions(start, mode);
    const sharedOptions = me.getSharedOptions(firstOpts);
    const includeOptions = me.includeOptions(mode, sharedOptions);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const spanGaps = me.options.spanGaps;
    const maxGapLength = (0, _helpersSegment.p)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = me.chart._animationsDisabled || reset || mode === 'none';
    let prevParsed = start > 0 && me.getParsed(start - 1);

    for (let i = start; i < start + count; ++i) {
      const point = points[i];
      const parsed = me.getParsed(i);
      const properties = directUpdate ? point : {};
      const nullData = (0, _helpersSegment.j)(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? me.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i > 0 && parsed[iAxis] - prevParsed[iAxis] > maxGapLength;
      properties.parsed = parsed;

      if (includeOptions) {
        properties.options = sharedOptions || me.resolveDataElementOptions(i, point.active ? 'active' : mode);
      }

      if (!directUpdate) {
        me.updateElement(point, i, properties, mode);
      }

      prevParsed = parsed;
    }

    me.updateSharedOptions(sharedOptions, mode, firstOpts);
  }

  getMaxOverflow() {
    const me = this;
    const meta = me._cachedMeta;
    const dataset = meta.dataset;
    const border = dataset.options && dataset.options.borderWidth || 0;
    const data = meta.data || [];

    if (!data.length) {
      return border;
    }

    const firstPoint = data[0].size(me.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(me.resolveDataElementOptions(data.length - 1));
    return Math.max(border, firstPoint, lastPoint) / 2;
  }

  draw() {
    const meta = this._cachedMeta;
    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
    super.draw();
  }

}

exports.LineController = LineController;
LineController.id = 'line';
LineController.defaults = {
  datasetElementType: 'line',
  dataElementType: 'point',
  showLine: true,
  spanGaps: false
};
LineController.overrides = {
  scales: {
    _index_: {
      type: 'category'
    },
    _value_: {
      type: 'linear'
    }
  }
};

function getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
  const pointCount = points.length;
  let start = 0;
  let count = pointCount;

  if (meta._sorted) {
    const {
      iScale,
      _parsed
    } = meta;
    const axis = iScale.axis;
    const {
      min,
      max,
      minDefined,
      maxDefined
    } = iScale.getUserBounds();

    if (minDefined) {
      start = (0, _helpersSegment.q)(Math.min((0, _helpersSegment.w)(_parsed, iScale.axis, min).lo, animationsDisabled ? pointCount : (0, _helpersSegment.w)(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);
    }

    if (maxDefined) {
      count = (0, _helpersSegment.q)(Math.max((0, _helpersSegment.w)(_parsed, iScale.axis, max).hi + 1, animationsDisabled ? 0 : (0, _helpersSegment.w)(points, axis, iScale.getPixelForValue(max)).hi + 1), start, pointCount) - start;
    } else {
      count = pointCount - start;
    }
  }

  return {
    start,
    count
  };
}

function scaleRangesChanged(meta) {
  const {
    xScale,
    yScale,
    _scaleRanges
  } = meta;
  const newRanges = {
    xmin: xScale.min,
    xmax: xScale.max,
    ymin: yScale.min,
    ymax: yScale.max
  };

  if (!_scaleRanges) {
    meta._scaleRanges = newRanges;
    return true;
  }

  const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
  Object.assign(_scaleRanges, newRanges);
  return changed;
}

class PolarAreaController extends DatasetController {
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.innerRadius = undefined;
    this.outerRadius = undefined;
  }

  getLabelAndValue(index) {
    const me = this;
    const meta = me._cachedMeta;
    const chart = me.chart;
    const labels = chart.data.labels || [];
    const value = (0, _helpersSegment.n)(meta._parsed[index].r, chart.options.locale);
    return {
      label: labels[index] || '',
      value
    };
  }

  update(mode) {
    const arcs = this._cachedMeta.data;

    this._updateRadius();

    this.updateElements(arcs, 0, arcs.length, mode);
  }

  _updateRadius() {
    const me = this;
    const chart = me.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
    const outerRadius = Math.max(minSize / 2, 0);
    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
    me.outerRadius = outerRadius - radiusLength * me.index;
    me.innerRadius = me.outerRadius - radiusLength;
  }

  updateElements(arcs, start, count, mode) {
    const me = this;
    const reset = mode === 'reset';
    const chart = me.chart;
    const dataset = me.getDataset();
    const opts = chart.options;
    const animationOpts = opts.animation;
    const scale = me._cachedMeta.rScale;
    const centerX = scale.xCenter;
    const centerY = scale.yCenter;

    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * _helpersSegment.P;

    let angle = datasetStartAngle;
    let i;
    const defaultAngle = 360 / me.countVisibleElements();

    for (i = 0; i < start; ++i) {
      angle += me._computeAngle(i, mode, defaultAngle);
    }

    for (i = start; i < start + count; i++) {
      const arc = arcs[i];
      let startAngle = angle;

      let endAngle = angle + me._computeAngle(i, mode, defaultAngle);

      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(dataset.data[i]) : 0;
      angle = endAngle;

      if (reset) {
        if (animationOpts.animateScale) {
          outerRadius = 0;
        }

        if (animationOpts.animateRotate) {
          startAngle = endAngle = datasetStartAngle;
        }
      }

      const properties = {
        x: centerX,
        y: centerY,
        innerRadius: 0,
        outerRadius,
        startAngle,
        endAngle,
        options: me.resolveDataElementOptions(i, arc.active ? 'active' : mode)
      };
      me.updateElement(arc, i, properties, mode);
    }
  }

  countVisibleElements() {
    const dataset = this.getDataset();
    const meta = this._cachedMeta;
    let count = 0;
    meta.data.forEach((element, index) => {
      if (!isNaN(dataset.data[index]) && this.chart.getDataVisibility(index)) {
        count++;
      }
    });
    return count;
  }

  _computeAngle(index, mode, defaultAngle) {
    return this.chart.getDataVisibility(index) ? (0, _helpersSegment.t)(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;
  }

}

exports.PolarAreaController = PolarAreaController;
PolarAreaController.id = 'polarArea';
PolarAreaController.defaults = {
  dataElementType: 'arc',
  animation: {
    animateRotate: true,
    animateScale: true
  },
  animations: {
    numbers: {
      type: 'number',
      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']
    }
  },
  indexAxis: 'r',
  startAngle: 0
};
PolarAreaController.overrides = {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(chart) {
          const data = chart.data;

          if (data.labels.length && data.datasets.length) {
            const {
              labels: {
                pointStyle
              }
            } = chart.legend.options;
            return data.labels.map((label, i) => {
              const meta = chart.getDatasetMeta(0);
              const style = meta.controller.getStyle(i);
              return {
                text: label,
                fillStyle: style.backgroundColor,
                strokeStyle: style.borderColor,
                lineWidth: style.borderWidth,
                pointStyle: pointStyle,
                hidden: !chart.getDataVisibility(i),
                index: i
              };
            });
          }

          return [];
        }

      },

      onClick(e, legendItem, legend) {
        legend.chart.toggleDataVisibility(legendItem.index);
        legend.chart.update();
      }

    },
    tooltip: {
      callbacks: {
        title() {
          return '';
        },

        label(context) {
          return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;
        }

      }
    }
  },
  scales: {
    r: {
      type: 'radialLinear',
      angleLines: {
        display: false
      },
      beginAtZero: true,
      grid: {
        circular: true
      },
      pointLabels: {
        display: false
      },
      startAngle: 0
    }
  }
};

class PieController extends DoughnutController {}

exports.PieController = PieController;
PieController.id = 'pie';
PieController.defaults = {
  cutout: 0,
  rotation: 0,
  circumference: 360,
  radius: '100%'
};

class RadarController extends DatasetController {
  getLabelAndValue(index) {
    const me = this;
    const vScale = me._cachedMeta.vScale;
    const parsed = me.getParsed(index);
    return {
      label: vScale.getLabels()[index],
      value: '' + vScale.getLabelForValue(parsed[vScale.axis])
    };
  }

  update(mode) {
    const me = this;
    const meta = me._cachedMeta;
    const line = meta.dataset;
    const points = meta.data || [];
    const labels = meta.iScale.getLabels();
    line.points = points;

    if (mode !== 'resize') {
      const options = me.resolveDatasetElementOptions(mode);

      if (!me.options.showLine) {
        options.borderWidth = 0;
      }

      const properties = {
        _loop: true,
        _fullLoop: labels.length === points.length,
        options
      };
      me.updateElement(line, undefined, properties, mode);
    }

    me.updateElements(points, 0, points.length, mode);
  }

  updateElements(points, start, count, mode) {
    const me = this;
    const dataset = me.getDataset();
    const scale = me._cachedMeta.rScale;
    const reset = mode === 'reset';

    for (let i = start; i < start + count; i++) {
      const point = points[i];
      const options = me.resolveDataElementOptions(i, point.active ? 'active' : mode);
      const pointPosition = scale.getPointPositionForValue(i, dataset.data[i]);
      const x = reset ? scale.xCenter : pointPosition.x;
      const y = reset ? scale.yCenter : pointPosition.y;
      const properties = {
        x,
        y,
        angle: pointPosition.angle,
        skip: isNaN(x) || isNaN(y),
        options
      };
      me.updateElement(point, i, properties, mode);
    }
  }

}

exports.RadarController = RadarController;
RadarController.id = 'radar';
RadarController.defaults = {
  datasetElementType: 'line',
  dataElementType: 'point',
  indexAxis: 'r',
  showLine: true,
  elements: {
    line: {
      fill: 'start'
    }
  }
};
RadarController.overrides = {
  aspectRatio: 1,
  scales: {
    r: {
      type: 'radialLinear'
    }
  }
};

class ScatterController extends LineController {}

exports.ScatterController = ScatterController;
ScatterController.id = 'scatter';
ScatterController.defaults = {
  showLine: false,
  fill: false
};
ScatterController.overrides = {
  interaction: {
    mode: 'point'
  },
  plugins: {
    tooltip: {
      callbacks: {
        title() {
          return '';
        },

        label(item) {
          return '(' + item.label + ', ' + item.formattedValue + ')';
        }

      }
    }
  },
  scales: {
    x: {
      type: 'linear'
    },
    y: {
      type: 'linear'
    }
  }
};
var controllers = /*#__PURE__*/Object.freeze({
  __proto__: null,
  BarController: BarController,
  BubbleController: BubbleController,
  DoughnutController: DoughnutController,
  LineController: LineController,
  PolarAreaController: PolarAreaController,
  PieController: PieController,
  RadarController: RadarController,
  ScatterController: ScatterController
});
exports.controllers = controllers;

function abstract() {
  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');
}

class DateAdapter {
  constructor(options) {
    this.options = options || {};
  }

  formats() {
    return abstract();
  }

  parse(value, format) {
    return abstract();
  }

  format(timestamp, format) {
    return abstract();
  }

  add(timestamp, amount, unit) {
    return abstract();
  }

  diff(a, b, unit) {
    return abstract();
  }

  startOf(timestamp, unit, weekday) {
    return abstract();
  }

  endOf(timestamp, unit) {
    return abstract();
  }

}

DateAdapter.override = function (members) {
  Object.assign(DateAdapter.prototype, members);
};

var adapters = {
  _date: DateAdapter
};
exports._adapters = adapters;

function getRelativePosition(e, chart) {
  if ('native' in e) {
    return {
      x: e.x,
      y: e.y
    };
  }

  return (0, _helpersSegment.x)(e, chart);
}

function evaluateAllVisibleItems(chart, handler) {
  const metasets = chart.getSortedVisibleDatasetMetas();
  let index, data, element;

  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {
    ({
      index,
      data
    } = metasets[i]);

    for (let j = 0, jlen = data.length; j < jlen; ++j) {
      element = data[j];

      if (!element.skip) {
        handler(element, index, j);
      }
    }
  }
}

function binarySearch(metaset, axis, value, intersect) {
  const {
    controller,
    data,
    _sorted
  } = metaset;
  const iScale = controller._cachedMeta.iScale;

  if (iScale && axis === iScale.axis && _sorted && data.length) {
    const lookupMethod = iScale._reversePixels ? _helpersSegment.z : _helpersSegment.w;

    if (!intersect) {
      return lookupMethod(data, axis, value);
    } else if (controller._sharedOptions) {
      const el = data[0];
      const range = typeof el.getRange === 'function' && el.getRange(axis);

      if (range) {
        const start = lookupMethod(data, axis, value - range);
        const end = lookupMethod(data, axis, value + range);
        return {
          lo: start.lo,
          hi: end.hi
        };
      }
    }
  }

  return {
    lo: 0,
    hi: data.length - 1
  };
}

function optimizedEvaluateItems(chart, axis, position, handler, intersect) {
  const metasets = chart.getSortedVisibleDatasetMetas();
  const value = position[axis];

  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {
    const {
      index,
      data
    } = metasets[i];
    const {
      lo,
      hi
    } = binarySearch(metasets[i], axis, value, intersect);

    for (let j = lo; j <= hi; ++j) {
      const element = data[j];

      if (!element.skip) {
        handler(element, index, j);
      }
    }
  }
}

function getDistanceMetricForAxis(axis) {
  const useX = axis.indexOf('x') !== -1;
  const useY = axis.indexOf('y') !== -1;
  return function (pt1, pt2) {
    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
  };
}

function getIntersectItems(chart, position, axis, useFinalPosition) {
  const items = [];

  if (!(0, _helpersSegment.y)(position, chart.chartArea, chart._minPadding)) {
    return items;
  }

  const evaluationFunc = function (element, datasetIndex, index) {
    if (element.inRange(position.x, position.y, useFinalPosition)) {
      items.push({
        element,
        datasetIndex,
        index
      });
    }
  };

  optimizedEvaluateItems(chart, axis, position, evaluationFunc, true);
  return items;
}

function getNearestItems(chart, position, axis, intersect, useFinalPosition) {
  const distanceMetric = getDistanceMetricForAxis(axis);
  let minDistance = Number.POSITIVE_INFINITY;
  let items = [];

  if (!(0, _helpersSegment.y)(position, chart.chartArea, chart._minPadding)) {
    return items;
  }

  const evaluationFunc = function (element, datasetIndex, index) {
    if (intersect && !element.inRange(position.x, position.y, useFinalPosition)) {
      return;
    }

    const center = element.getCenterPoint(useFinalPosition);

    if (!(0, _helpersSegment.y)(center, chart.chartArea, chart._minPadding) && !element.inRange(position.x, position.y, useFinalPosition)) {
      return;
    }

    const distance = distanceMetric(position, center);

    if (distance < minDistance) {
      items = [{
        element,
        datasetIndex,
        index
      }];
      minDistance = distance;
    } else if (distance === minDistance) {
      items.push({
        element,
        datasetIndex,
        index
      });
    }
  };

  optimizedEvaluateItems(chart, axis, position, evaluationFunc);
  return items;
}

function getAxisItems(chart, e, options, useFinalPosition) {
  const position = getRelativePosition(e, chart);
  const items = [];
  const axis = options.axis;
  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';
  let intersectsItem = false;
  evaluateAllVisibleItems(chart, (element, datasetIndex, index) => {
    if (element[rangeMethod](position[axis], useFinalPosition)) {
      items.push({
        element,
        datasetIndex,
        index
      });
    }

    if (element.inRange(position.x, position.y, useFinalPosition)) {
      intersectsItem = true;
    }
  });

  if (options.intersect && !intersectsItem) {
    return [];
  }

  return items;
}

var Interaction = {
  modes: {
    index(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || 'x';
      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition) : getNearestItems(chart, position, axis, false, useFinalPosition);
      const elements = [];

      if (!items.length) {
        return [];
      }

      chart.getSortedVisibleDatasetMetas().forEach(meta => {
        const index = items[0].index;
        const element = meta.data[index];

        if (element && !element.skip) {
          elements.push({
            element,
            datasetIndex: meta.index,
            index
          });
        }
      });
      return elements;
    },

    dataset(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || 'xy';
      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition) : getNearestItems(chart, position, axis, false, useFinalPosition);

      if (items.length > 0) {
        const datasetIndex = items[0].datasetIndex;
        const data = chart.getDatasetMeta(datasetIndex).data;
        items = [];

        for (let i = 0; i < data.length; ++i) {
          items.push({
            element: data[i],
            datasetIndex,
            index: i
          });
        }
      }

      return items;
    },

    point(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || 'xy';
      return getIntersectItems(chart, position, axis, useFinalPosition);
    },

    nearest(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || 'xy';
      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition);
    },

    x(chart, e, options, useFinalPosition) {
      options.axis = 'x';
      return getAxisItems(chart, e, options, useFinalPosition);
    },

    y(chart, e, options, useFinalPosition) {
      options.axis = 'y';
      return getAxisItems(chart, e, options, useFinalPosition);
    }

  }
};
exports.Interaction = Interaction;
const STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];

function filterByPosition(array, position) {
  return array.filter(v => v.pos === position);
}

function filterDynamicPositionByAxis(array, axis) {
  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
}

function sortByWeight(array, reverse) {
  return array.sort((a, b) => {
    const v0 = reverse ? b : a;
    const v1 = reverse ? a : b;
    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
  });
}

function wrapBoxes(boxes) {
  const layoutBoxes = [];
  let i, ilen, box, pos, stack, stackWeight;

  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
    box = boxes[i];
    ({
      position: pos,
      options: {
        stack,
        stackWeight = 1
      }
    } = box);
    layoutBoxes.push({
      index: i,
      box,
      pos,
      horizontal: box.isHorizontal(),
      weight: box.weight,
      stack: stack && pos + stack,
      stackWeight
    });
  }

  return layoutBoxes;
}

function buildStacks(layouts) {
  const stacks = {};

  for (const wrap of layouts) {
    const {
      stack,
      pos,
      stackWeight
    } = wrap;

    if (!stack || !STATIC_POSITIONS.includes(pos)) {
      continue;
    }

    const _stack = stacks[stack] || (stacks[stack] = {
      count: 0,
      placed: 0,
      weight: 0,
      size: 0
    });

    _stack.count++;
    _stack.weight += stackWeight;
  }

  return stacks;
}

function setLayoutDims(layouts, params) {
  const stacks = buildStacks(layouts);
  const {
    vBoxMaxWidth,
    hBoxMaxHeight
  } = params;
  let i, ilen, layout;

  for (i = 0, ilen = layouts.length; i < ilen; ++i) {
    layout = layouts[i];
    const {
      fullSize
    } = layout.box;
    const stack = stacks[layout.stack];
    const factor = stack && layout.stackWeight / stack.weight;

    if (layout.horizontal) {
      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
      layout.height = hBoxMaxHeight;
    } else {
      layout.width = vBoxMaxWidth;
      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
    }
  }

  return stacks;
}

function buildLayoutBoxes(boxes) {
  const layoutBoxes = wrapBoxes(boxes);
  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);
  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');
  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');
  return {
    fullSize,
    leftAndTop: left.concat(top),
    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
    chartArea: filterByPosition(layoutBoxes, 'chartArea'),
    vertical: left.concat(right).concat(centerVertical),
    horizontal: top.concat(bottom).concat(centerHorizontal)
  };
}

function getCombinedMax(maxPadding, chartArea, a, b) {
  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}

function updateMaxPadding(maxPadding, boxPadding) {
  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}

function updateDims(chartArea, params, layout, stacks) {
  const {
    pos,
    box
  } = layout;
  const maxPadding = chartArea.maxPadding;

  if (!(0, _helpersSegment.i)(pos)) {
    if (layout.size) {
      chartArea[pos] -= layout.size;
    }

    const stack = stacks[layout.stack] || {
      size: 0,
      count: 1
    };
    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
    layout.size = stack.size / stack.count;
    chartArea[pos] += layout.size;
  }

  if (box.getPadding) {
    updateMaxPadding(maxPadding, box.getPadding());
  }

  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));
  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));
  const widthChanged = newWidth !== chartArea.w;
  const heightChanged = newHeight !== chartArea.h;
  chartArea.w = newWidth;
  chartArea.h = newHeight;
  return layout.horizontal ? {
    same: widthChanged,
    other: heightChanged
  } : {
    same: heightChanged,
    other: widthChanged
  };
}

function handleMaxPadding(chartArea) {
  const maxPadding = chartArea.maxPadding;

  function updatePos(pos) {
    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    chartArea[pos] += change;
    return change;
  }

  chartArea.y += updatePos('top');
  chartArea.x += updatePos('left');
  updatePos('right');
  updatePos('bottom');
}

function getMargins(horizontal, chartArea) {
  const maxPadding = chartArea.maxPadding;

  function marginForPositions(positions) {
    const margin = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    positions.forEach(pos => {
      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    });
    return margin;
  }

  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);
}

function fitBoxes(boxes, chartArea, params, stacks) {
  const refitBoxes = [];
  let i, ilen, layout, box, refit, changed;

  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {
    layout = boxes[i];
    box = layout.box;
    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
    const {
      same,
      other
    } = updateDims(chartArea, params, layout, stacks);
    refit |= same && refitBoxes.length;
    changed = changed || other;

    if (!box.fullSize) {
      refitBoxes.push(layout);
    }
  }

  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}

function setBoxDims(box, left, top, width, height) {
  box.top = top;
  box.left = left;
  box.right = left + width;
  box.bottom = top + height;
  box.width = width;
  box.height = height;
}

function placeBoxes(boxes, chartArea, params, stacks) {
  const userPadding = params.padding;
  let {
    x,
    y
  } = chartArea;

  for (const layout of boxes) {
    const box = layout.box;
    const stack = stacks[layout.stack] || {
      count: 1,
      placed: 0,
      weight: 1
    };
    const weight = layout.stackWeight / stack.weight || 1;

    if (layout.horizontal) {
      const width = chartArea.w * weight;
      const height = stack.size || box.height;

      if ((0, _helpersSegment.h)(stack.start)) {
        y = stack.start;
      }

      if (box.fullSize) {
        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
      } else {
        setBoxDims(box, chartArea.left + stack.placed, y, width, height);
      }

      stack.start = y;
      stack.placed += width;
      y = box.bottom;
    } else {
      const height = chartArea.h * weight;
      const width = stack.size || box.width;

      if ((0, _helpersSegment.h)(stack.start)) {
        x = stack.start;
      }

      if (box.fullSize) {
        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
      } else {
        setBoxDims(box, x, chartArea.top + stack.placed, width, height);
      }

      stack.start = x;
      stack.placed += height;
      x = box.right;
    }
  }

  chartArea.x = x;
  chartArea.y = y;
}

_helpersSegment.d.set('layout', {
  padding: {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }
});

var layouts = {
  addBox(chart, item) {
    if (!chart.boxes) {
      chart.boxes = [];
    }

    item.fullSize = item.fullSize || false;
    item.position = item.position || 'top';
    item.weight = item.weight || 0;

    item._layers = item._layers || function () {
      return [{
        z: 0,

        draw(chartArea) {
          item.draw(chartArea);
        }

      }];
    };

    chart.boxes.push(item);
  },

  removeBox(chart, layoutItem) {
    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;

    if (index !== -1) {
      chart.boxes.splice(index, 1);
    }
  },

  configure(chart, item, options) {
    item.fullSize = options.fullSize;
    item.position = options.position;
    item.weight = options.weight;
  },

  update(chart, width, height, minPadding) {
    if (!chart) {
      return;
    }

    const padding = (0, _helpersSegment.A)(chart.options.layout.padding);
    const availableWidth = Math.max(width - padding.width, 0);
    const availableHeight = Math.max(height - padding.height, 0);
    const boxes = buildLayoutBoxes(chart.boxes);
    const verticalBoxes = boxes.vertical;
    const horizontalBoxes = boxes.horizontal;
    (0, _helpersSegment.B)(chart.boxes, box => {
      if (typeof box.beforeLayout === 'function') {
        box.beforeLayout();
      }
    });
    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
    const params = Object.freeze({
      outerWidth: width,
      outerHeight: height,
      padding,
      availableWidth,
      availableHeight,
      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
      hBoxMaxHeight: availableHeight / 2
    });
    const maxPadding = Object.assign({}, padding);
    updateMaxPadding(maxPadding, (0, _helpersSegment.A)(minPadding));
    const chartArea = Object.assign({
      maxPadding,
      w: availableWidth,
      h: availableHeight,
      x: padding.left,
      y: padding.top
    }, padding);
    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
    fitBoxes(boxes.fullSize, chartArea, params, stacks);
    fitBoxes(verticalBoxes, chartArea, params, stacks);

    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
      fitBoxes(verticalBoxes, chartArea, params, stacks);
    }

    handleMaxPadding(chartArea);
    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
    chartArea.x += chartArea.w;
    chartArea.y += chartArea.h;
    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
    chart.chartArea = {
      left: chartArea.left,
      top: chartArea.top,
      right: chartArea.left + chartArea.w,
      bottom: chartArea.top + chartArea.h,
      height: chartArea.h,
      width: chartArea.w
    };
    (0, _helpersSegment.B)(boxes.chartArea, layout => {
      const box = layout.box;
      Object.assign(box, chart.chartArea);
      box.update(chartArea.w, chartArea.h);
    });
  }

};
exports.layouts = layouts;

class BasePlatform {
  acquireContext(canvas, aspectRatio) {}

  releaseContext(context) {
    return false;
  }

  addEventListener(chart, type, listener) {}

  removeEventListener(chart, type, listener) {}

  getDevicePixelRatio() {
    return 1;
  }

  getMaximumSize(element, width, height, aspectRatio) {
    width = Math.max(0, width || element.width);
    height = height || element.height;
    return {
      width,
      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
    };
  }

  isAttached(canvas) {
    return true;
  }

}

exports.BasePlatform = BasePlatform;

class BasicPlatform extends BasePlatform {
  acquireContext(item) {
    return item && item.getContext && item.getContext('2d') || null;
  }

}

exports.BasicPlatform = BasicPlatform;
const EXPANDO_KEY = '$chartjs';
const EVENT_TYPES = {
  touchstart: 'mousedown',
  touchmove: 'mousemove',
  touchend: 'mouseup',
  pointerenter: 'mouseenter',
  pointerdown: 'mousedown',
  pointermove: 'mousemove',
  pointerup: 'mouseup',
  pointerleave: 'mouseout',
  pointerout: 'mouseout'
};

const isNullOrEmpty = value => value === null || value === '';

function initCanvas(canvas, aspectRatio) {
  const style = canvas.style;
  const renderHeight = canvas.getAttribute('height');
  const renderWidth = canvas.getAttribute('width');
  canvas[EXPANDO_KEY] = {
    initial: {
      height: renderHeight,
      width: renderWidth,
      style: {
        display: style.display,
        height: style.height,
        width: style.width
      }
    }
  };
  style.display = style.display || 'block';
  style.boxSizing = style.boxSizing || 'border-box';

  if (isNullOrEmpty(renderWidth)) {
    const displayWidth = (0, _helpersSegment.E)(canvas, 'width');

    if (displayWidth !== undefined) {
      canvas.width = displayWidth;
    }
  }

  if (isNullOrEmpty(renderHeight)) {
    if (canvas.style.height === '') {
      canvas.height = canvas.width / (aspectRatio || 2);
    } else {
      const displayHeight = (0, _helpersSegment.E)(canvas, 'height');

      if (displayHeight !== undefined) {
        canvas.height = displayHeight;
      }
    }
  }

  return canvas;
}

const eventListenerOptions = _helpersSegment.G ? {
  passive: true
} : false;

function addListener(node, type, listener) {
  node.addEventListener(type, listener, eventListenerOptions);
}

function removeListener(chart, type, listener) {
  chart.canvas.removeEventListener(type, listener, eventListenerOptions);
}

function fromNativeEvent(event, chart) {
  const type = EVENT_TYPES[event.type] || event.type;
  const {
    x,
    y
  } = (0, _helpersSegment.x)(event, chart);
  return {
    type,
    chart,
    native: event,
    x: x !== undefined ? x : null,
    y: y !== undefined ? y : null
  };
}

function createAttachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && (0, _helpersSegment.D)(canvas);
  const element = container || canvas;
  const observer = new MutationObserver(entries => {
    const parent = (0, _helpersSegment.D)(element);
    entries.forEach(entry => {
      for (let i = 0; i < entry.addedNodes.length; i++) {
        const added = entry.addedNodes[i];

        if (added === element || added === parent) {
          listener(entry.target);
        }
      }
    });
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}

function createDetachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && (0, _helpersSegment.D)(canvas);

  if (!container) {
    return;
  }

  const observer = new MutationObserver(entries => {
    entries.forEach(entry => {
      for (let i = 0; i < entry.removedNodes.length; i++) {
        if (entry.removedNodes[i] === canvas) {
          listener();
          break;
        }
      }
    });
  });
  observer.observe(container, {
    childList: true
  });
  return observer;
}

const drpListeningCharts = new Map();
let oldDevicePixelRatio = 0;

function onWindowResize() {
  const dpr = window.devicePixelRatio;

  if (dpr === oldDevicePixelRatio) {
    return;
  }

  oldDevicePixelRatio = dpr;
  drpListeningCharts.forEach((resize, chart) => {
    if (chart.currentDevicePixelRatio !== dpr) {
      resize();
    }
  });
}

function listenDevicePixelRatioChanges(chart, resize) {
  if (!drpListeningCharts.size) {
    window.addEventListener('resize', onWindowResize);
  }

  drpListeningCharts.set(chart, resize);
}

function unlistenDevicePixelRatioChanges(chart) {
  drpListeningCharts.delete(chart);

  if (!drpListeningCharts.size) {
    window.removeEventListener('resize', onWindowResize);
  }
}

function createResizeObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && (0, _helpersSegment.D)(canvas);

  if (!container) {
    return;
  }

  const resize = (0, _helpersSegment.F)((width, height) => {
    const w = container.clientWidth;
    listener(width, height);

    if (w < container.clientWidth) {
      listener();
    }
  }, window);
  const observer = new ResizeObserver(entries => {
    const entry = entries[0];
    const width = entry.contentRect.width;
    const height = entry.contentRect.height;

    if (width === 0 && height === 0) {
      return;
    }

    resize(width, height);
  });
  observer.observe(container);
  listenDevicePixelRatioChanges(chart, resize);
  return observer;
}

function releaseObserver(chart, type, observer) {
  if (observer) {
    observer.disconnect();
  }

  if (type === 'resize') {
    unlistenDevicePixelRatioChanges(chart);
  }
}

function createProxyAndListen(chart, type, listener) {
  const canvas = chart.canvas;
  const proxy = (0, _helpersSegment.F)(event => {
    if (chart.ctx !== null) {
      listener(fromNativeEvent(event, chart));
    }
  }, chart, args => {
    const event = args[0];
    return [event, event.offsetX, event.offsetY];
  });
  addListener(canvas, type, proxy);
  return proxy;
}

class DomPlatform extends BasePlatform {
  acquireContext(canvas, aspectRatio) {
    const context = canvas && canvas.getContext && canvas.getContext('2d');

    if (context && context.canvas === canvas) {
      initCanvas(canvas, aspectRatio);
      return context;
    }

    return null;
  }

  releaseContext(context) {
    const canvas = context.canvas;

    if (!canvas[EXPANDO_KEY]) {
      return false;
    }

    const initial = canvas[EXPANDO_KEY].initial;
    ['height', 'width'].forEach(prop => {
      const value = initial[prop];

      if ((0, _helpersSegment.j)(value)) {
        canvas.removeAttribute(prop);
      } else {
        canvas.setAttribute(prop, value);
      }
    });
    const style = initial.style || {};
    Object.keys(style).forEach(key => {
      canvas.style[key] = style[key];
    });
    canvas.width = canvas.width;
    delete canvas[EXPANDO_KEY];
    return true;
  }

  addEventListener(chart, type, listener) {
    this.removeEventListener(chart, type);
    const proxies = chart.$proxies || (chart.$proxies = {});
    const handlers = {
      attach: createAttachObserver,
      detach: createDetachObserver,
      resize: createResizeObserver
    };
    const handler = handlers[type] || createProxyAndListen;
    proxies[type] = handler(chart, type, listener);
  }

  removeEventListener(chart, type) {
    const proxies = chart.$proxies || (chart.$proxies = {});
    const proxy = proxies[type];

    if (!proxy) {
      return;
    }

    const handlers = {
      attach: releaseObserver,
      detach: releaseObserver,
      resize: releaseObserver
    };
    const handler = handlers[type] || removeListener;
    handler(chart, type, proxy);
    proxies[type] = undefined;
  }

  getDevicePixelRatio() {
    return window.devicePixelRatio;
  }

  getMaximumSize(canvas, width, height, aspectRatio) {
    return (0, _helpersSegment.C)(canvas, width, height, aspectRatio);
  }

  isAttached(canvas) {
    const container = (0, _helpersSegment.D)(canvas);
    return !!(container && container.isConnected);
  }

}

exports.DomPlatform = DomPlatform;

function _detectPlatform(canvas) {
  if (!(0, _helpersSegment.I)() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {
    return BasicPlatform;
  }

  return DomPlatform;
}

class Element {
  constructor() {
    this.x = undefined;
    this.y = undefined;
    this.active = false;
    this.options = undefined;
    this.$animations = undefined;
  }

  tooltipPosition(useFinalPosition) {
    const {
      x,
      y
    } = this.getProps(['x', 'y'], useFinalPosition);
    return {
      x,
      y
    };
  }

  hasValue() {
    return (0, _helpersSegment.p)(this.x) && (0, _helpersSegment.p)(this.y);
  }

  getProps(props, final) {
    const me = this;
    const anims = this.$animations;

    if (!final || !anims) {
      return me;
    }

    const ret = {};
    props.forEach(prop => {
      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : me[prop];
    });
    return ret;
  }

}

exports.Element = Element;
Element.defaults = {};
Element.defaultRoutes = undefined;
const formatters = {
  values(value) {
    return (0, _helpersSegment.b)(value) ? value : '' + value;
  },

  numeric(tickValue, index, ticks) {
    if (tickValue === 0) {
      return '0';
    }

    const locale = this.chart.options.locale;
    let notation;
    let delta = tickValue;

    if (ticks.length > 1) {
      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));

      if (maxTick < 1e-4 || maxTick > 1e+15) {
        notation = 'scientific';
      }

      delta = calculateDelta(tickValue, ticks);
    }

    const logDelta = (0, _helpersSegment.J)(Math.abs(delta));
    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
    const options = {
      notation,
      minimumFractionDigits: numDecimal,
      maximumFractionDigits: numDecimal
    };
    Object.assign(options, this.options.ticks.format);
    return (0, _helpersSegment.n)(tickValue, locale, options);
  },

  logarithmic(tickValue, index, ticks) {
    if (tickValue === 0) {
      return '0';
    }

    const remain = tickValue / Math.pow(10, Math.floor((0, _helpersSegment.J)(tickValue)));

    if (remain === 1 || remain === 2 || remain === 5) {
      return formatters.numeric.call(this, tickValue, index, ticks);
    }

    return '';
  }

};

function calculateDelta(tickValue, ticks) {
  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;

  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
    delta = tickValue - Math.floor(tickValue);
  }

  return delta;
}

var Ticks = {
  formatters
};
exports.Ticks = Ticks;

_helpersSegment.d.set('scale', {
  display: true,
  offset: false,
  reverse: false,
  beginAtZero: false,
  bounds: 'ticks',
  grace: 0,
  grid: {
    display: true,
    lineWidth: 1,
    drawBorder: true,
    drawOnChartArea: true,
    drawTicks: true,
    tickLength: 8,
    tickWidth: (_ctx, options) => options.lineWidth,
    tickColor: (_ctx, options) => options.color,
    offset: false,
    borderDash: [],
    borderDashOffset: 0.0,
    borderWidth: 1
  },
  title: {
    display: false,
    text: '',
    padding: {
      top: 4,
      bottom: 4
    }
  },
  ticks: {
    minRotation: 0,
    maxRotation: 50,
    mirror: false,
    textStrokeWidth: 0,
    textStrokeColor: '',
    padding: 3,
    display: true,
    autoSkip: true,
    autoSkipPadding: 3,
    labelOffset: 0,
    callback: Ticks.formatters.values,
    minor: {},
    major: {},
    align: 'center',
    crossAlign: 'near',
    showLabelBackdrop: false,
    backdropColor: 'rgba(255, 255, 255, 0.75)',
    backdropPadding: 2
  }
});

_helpersSegment.d.route('scale.ticks', 'color', '', 'color');

_helpersSegment.d.route('scale.grid', 'color', '', 'borderColor');

_helpersSegment.d.route('scale.grid', 'borderColor', '', 'borderColor');

_helpersSegment.d.route('scale.title', 'color', '', 'color');

_helpersSegment.d.describe('scale', {
  _fallback: false,
  _scriptable: name => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',
  _indexable: name => name !== 'borderDash' && name !== 'tickBorderDash'
});

_helpersSegment.d.describe('scales', {
  _fallback: 'scale'
});

_helpersSegment.d.describe('scale.ticks', {
  _scriptable: name => name !== 'backdropPadding' && name !== 'callback',
  _indexable: name => name !== 'backdropPadding'
});

function autoSkip(scale, ticks) {
  const tickOpts = scale.options.ticks;
  const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);
  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
  const numMajorIndices = majorIndices.length;
  const first = majorIndices[0];
  const last = majorIndices[numMajorIndices - 1];
  const newTicks = [];

  if (numMajorIndices > ticksLimit) {
    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
    return newTicks;
  }

  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);

  if (numMajorIndices > 0) {
    let i, ilen;
    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
    skip(ticks, newTicks, spacing, (0, _helpersSegment.j)(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);

    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
    }

    skip(ticks, newTicks, spacing, last, (0, _helpersSegment.j)(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
    return newTicks;
  }

  skip(ticks, newTicks, spacing);
  return newTicks;
}

function determineMaxTicks(scale) {
  const offset = scale.options.offset;

  const tickLength = scale._tickSize();

  const maxScale = scale._length / tickLength + (offset ? 0 : 1);
  const maxChart = scale._maxLength / tickLength;
  return Math.floor(Math.min(maxScale, maxChart));
}

function calculateSpacing(majorIndices, ticks, ticksLimit) {
  const evenMajorSpacing = getEvenSpacing(majorIndices);
  const spacing = ticks.length / ticksLimit;

  if (!evenMajorSpacing) {
    return Math.max(spacing, 1);
  }

  const factors = (0, _helpersSegment.K)(evenMajorSpacing);

  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {
    const factor = factors[i];

    if (factor > spacing) {
      return factor;
    }
  }

  return Math.max(spacing, 1);
}

function getMajorIndices(ticks) {
  const result = [];
  let i, ilen;

  for (i = 0, ilen = ticks.length; i < ilen; i++) {
    if (ticks[i].major) {
      result.push(i);
    }
  }

  return result;
}

function skipMajors(ticks, newTicks, majorIndices, spacing) {
  let count = 0;
  let next = majorIndices[0];
  let i;
  spacing = Math.ceil(spacing);

  for (i = 0; i < ticks.length; i++) {
    if (i === next) {
      newTicks.push(ticks[i]);
      count++;
      next = majorIndices[count * spacing];
    }
  }
}

function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
  const start = (0, _helpersSegment.v)(majorStart, 0);
  const end = Math.min((0, _helpersSegment.v)(majorEnd, ticks.length), ticks.length);
  let count = 0;
  let length, i, next;
  spacing = Math.ceil(spacing);

  if (majorEnd) {
    length = majorEnd - majorStart;
    spacing = length / Math.floor(length / spacing);
  }

  next = start;

  while (next < 0) {
    count++;
    next = Math.round(start + count * spacing);
  }

  for (i = Math.max(start, 0); i < end; i++) {
    if (i === next) {
      newTicks.push(ticks[i]);
      count++;
      next = Math.round(start + count * spacing);
    }
  }
}

function getEvenSpacing(arr) {
  const len = arr.length;
  let i, diff;

  if (len < 2) {
    return false;
  }

  for (diff = arr[0], i = 1; i < len; ++i) {
    if (arr[i] - arr[i - 1] !== diff) {
      return false;
    }
  }

  return diff;
}

const reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;

const offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;

function sample(arr, numItems) {
  const result = [];
  const increment = arr.length / numItems;
  const len = arr.length;
  let i = 0;

  for (; i < len; i += increment) {
    result.push(arr[Math.floor(i)]);
  }

  return result;
}

function getPixelForGridLine(scale, index, offsetGridLines) {
  const length = scale.ticks.length;
  const validIndex = Math.min(index, length - 1);
  const start = scale._startPixel;
  const end = scale._endPixel;
  const epsilon = 1e-6;
  let lineValue = scale.getPixelForTick(validIndex);
  let offset;

  if (offsetGridLines) {
    if (length === 1) {
      offset = Math.max(lineValue - start, end - lineValue);
    } else if (index === 0) {
      offset = (scale.getPixelForTick(1) - lineValue) / 2;
    } else {
      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
    }

    lineValue += validIndex < index ? offset : -offset;

    if (lineValue < start - epsilon || lineValue > end + epsilon) {
      return;
    }
  }

  return lineValue;
}

function garbageCollect(caches, length) {
  (0, _helpersSegment.B)(caches, cache => {
    const gc = cache.gc;
    const gcLen = gc.length / 2;
    let i;

    if (gcLen > length) {
      for (i = 0; i < gcLen; ++i) {
        delete cache.data[gc[i]];
      }

      gc.splice(0, gcLen);
    }
  });
}

function getTickMarkLength(options) {
  return options.drawTicks ? options.tickLength : 0;
}

function getTitleHeight(options, fallback) {
  if (!options.display) {
    return 0;
  }

  const font = (0, _helpersSegment.X)(options.font, fallback);
  const padding = (0, _helpersSegment.A)(options.padding);
  const lines = (0, _helpersSegment.b)(options.text) ? options.text.length : 1;
  return lines * font.lineHeight + padding.height;
}

function createScaleContext(parent, scale) {
  return Object.assign(Object.create(parent), {
    scale,
    type: 'scale'
  });
}

function createTickContext(parent, index, tick) {
  return Object.assign(Object.create(parent), {
    tick,
    index,
    type: 'tick'
  });
}

function titleAlign(align, position, reverse) {
  let ret = (0, _helpersSegment.Y)(align);

  if (reverse && position !== 'right' || !reverse && position === 'right') {
    ret = reverseAlign(ret);
  }

  return ret;
}

function titleArgs(scale, offset, position, align) {
  const {
    top,
    left,
    bottom,
    right,
    chart
  } = scale;
  const {
    chartArea,
    scales
  } = chart;
  let rotation = 0;
  let maxWidth, titleX, titleY;
  const height = bottom - top;
  const width = right - left;

  if (scale.isHorizontal()) {
    titleX = (0, _helpersSegment.Z)(align, left, right);

    if ((0, _helpersSegment.i)(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
    } else if (position === 'center') {
      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
    } else {
      titleY = offsetFromEdge(scale, position, offset);
    }

    maxWidth = right - left;
  } else {
    if ((0, _helpersSegment.i)(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
    } else if (position === 'center') {
      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
    } else {
      titleX = offsetFromEdge(scale, position, offset);
    }

    titleY = (0, _helpersSegment.Z)(align, bottom, top);
    rotation = position === 'left' ? -_helpersSegment.H : _helpersSegment.H;
  }

  return {
    titleX,
    titleY,
    maxWidth,
    rotation
  };
}

class Scale extends Element {
  constructor(cfg) {
    super();
    this.id = cfg.id;
    this.type = cfg.type;
    this.options = undefined;
    this.ctx = cfg.ctx;
    this.chart = cfg.chart;
    this.top = undefined;
    this.bottom = undefined;
    this.left = undefined;
    this.right = undefined;
    this.width = undefined;
    this.height = undefined;
    this._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    this.maxWidth = undefined;
    this.maxHeight = undefined;
    this.paddingTop = undefined;
    this.paddingBottom = undefined;
    this.paddingLeft = undefined;
    this.paddingRight = undefined;
    this.axis = undefined;
    this.labelRotation = undefined;
    this.min = undefined;
    this.max = undefined;
    this._range = undefined;
    this.ticks = [];
    this._gridLineItems = null;
    this._labelItems = null;
    this._labelSizes = null;
    this._length = 0;
    this._maxLength = 0;
    this._longestTextCache = {};
    this._startPixel = undefined;
    this._endPixel = undefined;
    this._reversePixels = false;
    this._userMax = undefined;
    this._userMin = undefined;
    this._suggestedMax = undefined;
    this._suggestedMin = undefined;
    this._ticksLength = 0;
    this._borderValue = 0;
    this._cache = {};
    this._dataLimitsCached = false;
    this.$context = undefined;
  }

  init(options) {
    const me = this;
    me.options = options.setContext(me.getContext());
    me.axis = options.axis;
    me._userMin = me.parse(options.min);
    me._userMax = me.parse(options.max);
    me._suggestedMin = me.parse(options.suggestedMin);
    me._suggestedMax = me.parse(options.suggestedMax);
  }

  parse(raw, index) {
    return raw;
  }

  getUserBounds() {
    let {
      _userMin,
      _userMax,
      _suggestedMin,
      _suggestedMax
    } = this;
    _userMin = (0, _helpersSegment.L)(_userMin, Number.POSITIVE_INFINITY);
    _userMax = (0, _helpersSegment.L)(_userMax, Number.NEGATIVE_INFINITY);
    _suggestedMin = (0, _helpersSegment.L)(_suggestedMin, Number.POSITIVE_INFINITY);
    _suggestedMax = (0, _helpersSegment.L)(_suggestedMax, Number.NEGATIVE_INFINITY);
    return {
      min: (0, _helpersSegment.L)(_userMin, _suggestedMin),
      max: (0, _helpersSegment.L)(_userMax, _suggestedMax),
      minDefined: (0, _helpersSegment.g)(_userMin),
      maxDefined: (0, _helpersSegment.g)(_userMax)
    };
  }

  getMinMax(canStack) {
    const me = this;
    let {
      min,
      max,
      minDefined,
      maxDefined
    } = me.getUserBounds();
    let range;

    if (minDefined && maxDefined) {
      return {
        min,
        max
      };
    }

    const metas = me.getMatchingVisibleMetas();

    for (let i = 0, ilen = metas.length; i < ilen; ++i) {
      range = metas[i].controller.getMinMax(me, canStack);

      if (!minDefined) {
        min = Math.min(min, range.min);
      }

      if (!maxDefined) {
        max = Math.max(max, range.max);
      }
    }

    return {
      min: (0, _helpersSegment.L)(min, (0, _helpersSegment.L)(max, min)),
      max: (0, _helpersSegment.L)(max, (0, _helpersSegment.L)(min, max))
    };
  }

  getPadding() {
    const me = this;
    return {
      left: me.paddingLeft || 0,
      top: me.paddingTop || 0,
      right: me.paddingRight || 0,
      bottom: me.paddingBottom || 0
    };
  }

  getTicks() {
    return this.ticks;
  }

  getLabels() {
    const data = this.chart.data;
    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
  }

  beforeLayout() {
    this._cache = {};
    this._dataLimitsCached = false;
  }

  beforeUpdate() {
    (0, _helpersSegment.M)(this.options.beforeUpdate, [this]);
  }

  update(maxWidth, maxHeight, margins) {
    const me = this;
    const tickOpts = me.options.ticks;
    const sampleSize = tickOpts.sampleSize;
    me.beforeUpdate();
    me.maxWidth = maxWidth;
    me.maxHeight = maxHeight;
    me._margins = margins = Object.assign({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, margins);
    me.ticks = null;
    me._labelSizes = null;
    me._gridLineItems = null;
    me._labelItems = null;
    me.beforeSetDimensions();
    me.setDimensions();
    me.afterSetDimensions();
    me._maxLength = me.isHorizontal() ? me.width + margins.left + margins.right : me.height + margins.top + margins.bottom;

    if (!me._dataLimitsCached) {
      me.beforeDataLimits();
      me.determineDataLimits();
      me.afterDataLimits();
      me._range = (0, _helpersSegment.N)(me, me.options.grace);
      me._dataLimitsCached = true;
    }

    me.beforeBuildTicks();
    me.ticks = me.buildTicks() || [];
    me.afterBuildTicks();
    const samplingEnabled = sampleSize < me.ticks.length;

    me._convertTicksToLabels(samplingEnabled ? sample(me.ticks, sampleSize) : me.ticks);

    me.configure();
    me.beforeCalculateLabelRotation();
    me.calculateLabelRotation();
    me.afterCalculateLabelRotation();

    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {
      me.ticks = autoSkip(me, me.ticks);
      me._labelSizes = null;
    }

    if (samplingEnabled) {
      me._convertTicksToLabels(me.ticks);
    }

    me.beforeFit();
    me.fit();
    me.afterFit();
    me.afterUpdate();
  }

  configure() {
    const me = this;
    let reversePixels = me.options.reverse;
    let startPixel, endPixel;

    if (me.isHorizontal()) {
      startPixel = me.left;
      endPixel = me.right;
    } else {
      startPixel = me.top;
      endPixel = me.bottom;
      reversePixels = !reversePixels;
    }

    me._startPixel = startPixel;
    me._endPixel = endPixel;
    me._reversePixels = reversePixels;
    me._length = endPixel - startPixel;
    me._alignToPixels = me.options.alignToPixels;
  }

  afterUpdate() {
    (0, _helpersSegment.M)(this.options.afterUpdate, [this]);
  }

  beforeSetDimensions() {
    (0, _helpersSegment.M)(this.options.beforeSetDimensions, [this]);
  }

  setDimensions() {
    const me = this;

    if (me.isHorizontal()) {
      me.width = me.maxWidth;
      me.left = 0;
      me.right = me.width;
    } else {
      me.height = me.maxHeight;
      me.top = 0;
      me.bottom = me.height;
    }

    me.paddingLeft = 0;
    me.paddingTop = 0;
    me.paddingRight = 0;
    me.paddingBottom = 0;
  }

  afterSetDimensions() {
    (0, _helpersSegment.M)(this.options.afterSetDimensions, [this]);
  }

  _callHooks(name) {
    const me = this;
    me.chart.notifyPlugins(name, me.getContext());
    (0, _helpersSegment.M)(me.options[name], [me]);
  }

  beforeDataLimits() {
    this._callHooks('beforeDataLimits');
  }

  determineDataLimits() {}

  afterDataLimits() {
    this._callHooks('afterDataLimits');
  }

  beforeBuildTicks() {
    this._callHooks('beforeBuildTicks');
  }

  buildTicks() {
    return [];
  }

  afterBuildTicks() {
    this._callHooks('afterBuildTicks');
  }

  beforeTickToLabelConversion() {
    (0, _helpersSegment.M)(this.options.beforeTickToLabelConversion, [this]);
  }

  generateTickLabels(ticks) {
    const me = this;
    const tickOpts = me.options.ticks;
    let i, ilen, tick;

    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      tick = ticks[i];
      tick.label = (0, _helpersSegment.M)(tickOpts.callback, [tick.value, i, ticks], me);
    }
  }

  afterTickToLabelConversion() {
    (0, _helpersSegment.M)(this.options.afterTickToLabelConversion, [this]);
  }

  beforeCalculateLabelRotation() {
    (0, _helpersSegment.M)(this.options.beforeCalculateLabelRotation, [this]);
  }

  calculateLabelRotation() {
    const me = this;
    const options = me.options;
    const tickOpts = options.ticks;
    const numTicks = me.ticks.length;
    const minRotation = tickOpts.minRotation || 0;
    const maxRotation = tickOpts.maxRotation;
    let labelRotation = minRotation;
    let tickWidth, maxHeight, maxLabelDiagonal;

    if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
      me.labelRotation = minRotation;
      return;
    }

    const labelSizes = me._getLabelSizes();

    const maxLabelWidth = labelSizes.widest.width;
    const maxLabelHeight = labelSizes.highest.height;
    const maxWidth = (0, _helpersSegment.q)(me.chart.width - maxLabelWidth, 0, me.maxWidth);
    tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);

    if (maxLabelWidth + 6 > tickWidth) {
      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
      maxHeight = me.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, me.chart.options.font);
      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
      labelRotation = (0, _helpersSegment.O)(Math.min(Math.asin((0, _helpersSegment.q)((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin((0, _helpersSegment.q)(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin((0, _helpersSegment.q)(maxLabelHeight / maxLabelDiagonal, -1, 1))));
      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
    }

    me.labelRotation = labelRotation;
  }

  afterCalculateLabelRotation() {
    (0, _helpersSegment.M)(this.options.afterCalculateLabelRotation, [this]);
  }

  beforeFit() {
    (0, _helpersSegment.M)(this.options.beforeFit, [this]);
  }

  fit() {
    const me = this;
    const minSize = {
      width: 0,
      height: 0
    };
    const {
      chart,
      options: {
        ticks: tickOpts,
        title: titleOpts,
        grid: gridOpts
      }
    } = me;

    const display = me._isVisible();

    const isHorizontal = me.isHorizontal();

    if (display) {
      const titleHeight = getTitleHeight(titleOpts, chart.options.font);

      if (isHorizontal) {
        minSize.width = me.maxWidth;
        minSize.height = getTickMarkLength(gridOpts) + titleHeight;
      } else {
        minSize.height = me.maxHeight;
        minSize.width = getTickMarkLength(gridOpts) + titleHeight;
      }

      if (tickOpts.display && me.ticks.length) {
        const {
          first,
          last,
          widest,
          highest
        } = me._getLabelSizes();

        const tickPadding = tickOpts.padding * 2;
        const angleRadians = (0, _helpersSegment.t)(me.labelRotation);
        const cos = Math.cos(angleRadians);
        const sin = Math.sin(angleRadians);

        if (isHorizontal) {
          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
          minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);
        } else {
          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
          minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth + tickPadding);
        }

        me._calculatePadding(first, last, sin, cos);
      }
    }

    me._handleMargins();

    if (isHorizontal) {
      me.width = me._length = chart.width - me._margins.left - me._margins.right;
      me.height = minSize.height;
    } else {
      me.width = minSize.width;
      me.height = me._length = chart.height - me._margins.top - me._margins.bottom;
    }
  }

  _calculatePadding(first, last, sin, cos) {
    const me = this;
    const {
      ticks: {
        align,
        padding
      },
      position
    } = me.options;
    const isRotated = me.labelRotation !== 0;
    const labelsBelowTicks = position !== 'top' && me.axis === 'x';

    if (me.isHorizontal()) {
      const offsetLeft = me.getPixelForTick(0) - me.left;
      const offsetRight = me.right - me.getPixelForTick(me.ticks.length - 1);
      let paddingLeft = 0;
      let paddingRight = 0;

      if (isRotated) {
        if (labelsBelowTicks) {
          paddingLeft = cos * first.width;
          paddingRight = sin * last.height;
        } else {
          paddingLeft = sin * first.height;
          paddingRight = cos * last.width;
        }
      } else if (align === 'start') {
        paddingRight = last.width;
      } else if (align === 'end') {
        paddingLeft = first.width;
      } else {
        paddingLeft = first.width / 2;
        paddingRight = last.width / 2;
      }

      me.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * me.width / (me.width - offsetLeft), 0);
      me.paddingRight = Math.max((paddingRight - offsetRight + padding) * me.width / (me.width - offsetRight), 0);
    } else {
      let paddingTop = last.height / 2;
      let paddingBottom = first.height / 2;

      if (align === 'start') {
        paddingTop = 0;
        paddingBottom = first.height;
      } else if (align === 'end') {
        paddingTop = last.height;
        paddingBottom = 0;
      }

      me.paddingTop = paddingTop + padding;
      me.paddingBottom = paddingBottom + padding;
    }
  }

  _handleMargins() {
    const me = this;

    if (me._margins) {
      me._margins.left = Math.max(me.paddingLeft, me._margins.left);
      me._margins.top = Math.max(me.paddingTop, me._margins.top);
      me._margins.right = Math.max(me.paddingRight, me._margins.right);
      me._margins.bottom = Math.max(me.paddingBottom, me._margins.bottom);
    }
  }

  afterFit() {
    (0, _helpersSegment.M)(this.options.afterFit, [this]);
  }

  isHorizontal() {
    const {
      axis,
      position
    } = this.options;
    return position === 'top' || position === 'bottom' || axis === 'x';
  }

  isFullSize() {
    return this.options.fullSize;
  }

  _convertTicksToLabels(ticks) {
    const me = this;
    me.beforeTickToLabelConversion();
    me.generateTickLabels(ticks);
    let i, ilen;

    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      if ((0, _helpersSegment.j)(ticks[i].label)) {
        ticks.splice(i, 1);
        ilen--;
        i--;
      }
    }

    me.afterTickToLabelConversion();
  }

  _getLabelSizes() {
    const me = this;
    let labelSizes = me._labelSizes;

    if (!labelSizes) {
      const sampleSize = me.options.ticks.sampleSize;
      let ticks = me.ticks;

      if (sampleSize < ticks.length) {
        ticks = sample(ticks, sampleSize);
      }

      me._labelSizes = labelSizes = me._computeLabelSizes(ticks, ticks.length);
    }

    return labelSizes;
  }

  _computeLabelSizes(ticks, length) {
    const {
      ctx,
      _longestTextCache: caches
    } = this;
    const widths = [];
    const heights = [];
    let widestLabelSize = 0;
    let highestLabelSize = 0;
    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;

    for (i = 0; i < length; ++i) {
      label = ticks[i].label;
      tickFont = this._resolveTickFontOptions(i);
      ctx.font = fontString = tickFont.string;
      cache = caches[fontString] = caches[fontString] || {
        data: {},
        gc: []
      };
      lineHeight = tickFont.lineHeight;
      width = height = 0;

      if (!(0, _helpersSegment.j)(label) && !(0, _helpersSegment.b)(label)) {
        width = (0, _helpersSegment.Q)(ctx, cache.data, cache.gc, width, label);
        height = lineHeight;
      } else if ((0, _helpersSegment.b)(label)) {
        for (j = 0, jlen = label.length; j < jlen; ++j) {
          nestedLabel = label[j];

          if (!(0, _helpersSegment.j)(nestedLabel) && !(0, _helpersSegment.b)(nestedLabel)) {
            width = (0, _helpersSegment.Q)(ctx, cache.data, cache.gc, width, nestedLabel);
            height += lineHeight;
          }
        }
      }

      widths.push(width);
      heights.push(height);
      widestLabelSize = Math.max(width, widestLabelSize);
      highestLabelSize = Math.max(height, highestLabelSize);
    }

    garbageCollect(caches, length);
    const widest = widths.indexOf(widestLabelSize);
    const highest = heights.indexOf(highestLabelSize);

    const valueAt = idx => ({
      width: widths[idx] || 0,
      height: heights[idx] || 0
    });

    return {
      first: valueAt(0),
      last: valueAt(length - 1),
      widest: valueAt(widest),
      highest: valueAt(highest),
      widths,
      heights
    };
  }

  getLabelForValue(value) {
    return value;
  }

  getPixelForValue(value, index) {
    return NaN;
  }

  getValueForPixel(pixel) {}

  getPixelForTick(index) {
    const ticks = this.ticks;

    if (index < 0 || index > ticks.length - 1) {
      return null;
    }

    return this.getPixelForValue(ticks[index].value);
  }

  getPixelForDecimal(decimal) {
    const me = this;

    if (me._reversePixels) {
      decimal = 1 - decimal;
    }

    const pixel = me._startPixel + decimal * me._length;
    return (0, _helpersSegment.R)(me._alignToPixels ? (0, _helpersSegment.S)(me.chart, pixel, 0) : pixel);
  }

  getDecimalForPixel(pixel) {
    const decimal = (pixel - this._startPixel) / this._length;
    return this._reversePixels ? 1 - decimal : decimal;
  }

  getBasePixel() {
    return this.getPixelForValue(this.getBaseValue());
  }

  getBaseValue() {
    const {
      min,
      max
    } = this;
    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
  }

  getContext(index) {
    const me = this;
    const ticks = me.ticks || [];

    if (index >= 0 && index < ticks.length) {
      const tick = ticks[index];
      return tick.$context || (tick.$context = createTickContext(me.getContext(), index, tick));
    }

    return me.$context || (me.$context = createScaleContext(me.chart.getContext(), me));
  }

  _tickSize() {
    const me = this;
    const optionTicks = me.options.ticks;
    const rot = (0, _helpersSegment.t)(me.labelRotation);
    const cos = Math.abs(Math.cos(rot));
    const sin = Math.abs(Math.sin(rot));

    const labelSizes = me._getLabelSizes();

    const padding = optionTicks.autoSkipPadding || 0;
    const w = labelSizes ? labelSizes.widest.width + padding : 0;
    const h = labelSizes ? labelSizes.highest.height + padding : 0;
    return me.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
  }

  _isVisible() {
    const display = this.options.display;

    if (display !== 'auto') {
      return !!display;
    }

    return this.getMatchingVisibleMetas().length > 0;
  }

  _computeGridLineItems(chartArea) {
    const me = this;
    const axis = me.axis;
    const chart = me.chart;
    const options = me.options;
    const {
      grid,
      position
    } = options;
    const offset = grid.offset;
    const isHorizontal = me.isHorizontal();
    const ticks = me.ticks;
    const ticksLength = ticks.length + (offset ? 1 : 0);
    const tl = getTickMarkLength(grid);
    const items = [];
    const borderOpts = grid.setContext(me.getContext());
    const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;
    const axisHalfWidth = axisWidth / 2;

    const alignBorderValue = function (pixel) {
      return (0, _helpersSegment.S)(chart, pixel, axisWidth);
    };

    let borderValue, i, lineValue, alignedLineValue;
    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;

    if (position === 'top') {
      borderValue = alignBorderValue(me.bottom);
      ty1 = me.bottom - tl;
      ty2 = borderValue - axisHalfWidth;
      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
      y2 = chartArea.bottom;
    } else if (position === 'bottom') {
      borderValue = alignBorderValue(me.top);
      y1 = chartArea.top;
      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
      ty1 = borderValue + axisHalfWidth;
      ty2 = me.top + tl;
    } else if (position === 'left') {
      borderValue = alignBorderValue(me.right);
      tx1 = me.right - tl;
      tx2 = borderValue - axisHalfWidth;
      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
      x2 = chartArea.right;
    } else if (position === 'right') {
      borderValue = alignBorderValue(me.left);
      x1 = chartArea.left;
      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
      tx1 = borderValue + axisHalfWidth;
      tx2 = me.left + tl;
    } else if (axis === 'x') {
      if (position === 'center') {
        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
      } else if ((0, _helpersSegment.i)(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(me.chart.scales[positionAxisID].getPixelForValue(value));
      }

      y1 = chartArea.top;
      y2 = chartArea.bottom;
      ty1 = borderValue + axisHalfWidth;
      ty2 = ty1 + tl;
    } else if (axis === 'y') {
      if (position === 'center') {
        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
      } else if ((0, _helpersSegment.i)(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(me.chart.scales[positionAxisID].getPixelForValue(value));
      }

      tx1 = borderValue - axisHalfWidth;
      tx2 = tx1 - tl;
      x1 = chartArea.left;
      x2 = chartArea.right;
    }

    const limit = (0, _helpersSegment.v)(options.ticks.maxTicksLimit, ticksLength);
    const step = Math.max(1, Math.ceil(ticksLength / limit));

    for (i = 0; i < ticksLength; i += step) {
      const optsAtIndex = grid.setContext(me.getContext(i));
      const lineWidth = optsAtIndex.lineWidth;
      const lineColor = optsAtIndex.color;
      const borderDash = grid.borderDash || [];
      const borderDashOffset = optsAtIndex.borderDashOffset;
      const tickWidth = optsAtIndex.tickWidth;
      const tickColor = optsAtIndex.tickColor;
      const tickBorderDash = optsAtIndex.tickBorderDash || [];
      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
      lineValue = getPixelForGridLine(me, i, offset);

      if (lineValue === undefined) {
        continue;
      }

      alignedLineValue = (0, _helpersSegment.S)(chart, lineValue, lineWidth);

      if (isHorizontal) {
        tx1 = tx2 = x1 = x2 = alignedLineValue;
      } else {
        ty1 = ty2 = y1 = y2 = alignedLineValue;
      }

      items.push({
        tx1,
        ty1,
        tx2,
        ty2,
        x1,
        y1,
        x2,
        y2,
        width: lineWidth,
        color: lineColor,
        borderDash,
        borderDashOffset,
        tickWidth,
        tickColor,
        tickBorderDash,
        tickBorderDashOffset
      });
    }

    me._ticksLength = ticksLength;
    me._borderValue = borderValue;
    return items;
  }

  _computeLabelItems(chartArea) {
    const me = this;
    const axis = me.axis;
    const options = me.options;
    const {
      position,
      ticks: optionTicks
    } = options;
    const isHorizontal = me.isHorizontal();
    const ticks = me.ticks;
    const {
      align,
      crossAlign,
      padding,
      mirror
    } = optionTicks;
    const tl = getTickMarkLength(options.grid);
    const tickAndPadding = tl + padding;
    const hTickAndPadding = mirror ? -padding : tickAndPadding;
    const rotation = -(0, _helpersSegment.t)(me.labelRotation);
    const items = [];
    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
    let textBaseline = 'middle';

    if (position === 'top') {
      y = me.bottom - hTickAndPadding;
      textAlign = me._getXAxisLabelAlignment();
    } else if (position === 'bottom') {
      y = me.top + hTickAndPadding;
      textAlign = me._getXAxisLabelAlignment();
    } else if (position === 'left') {
      const ret = me._getYAxisLabelAlignment(tl);

      textAlign = ret.textAlign;
      x = ret.x;
    } else if (position === 'right') {
      const ret = me._getYAxisLabelAlignment(tl);

      textAlign = ret.textAlign;
      x = ret.x;
    } else if (axis === 'x') {
      if (position === 'center') {
        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
      } else if ((0, _helpersSegment.i)(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        y = me.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
      }

      textAlign = me._getXAxisLabelAlignment();
    } else if (axis === 'y') {
      if (position === 'center') {
        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
      } else if ((0, _helpersSegment.i)(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        x = me.chart.scales[positionAxisID].getPixelForValue(value);
      }

      textAlign = me._getYAxisLabelAlignment(tl).textAlign;
    }

    if (axis === 'y') {
      if (align === 'start') {
        textBaseline = 'top';
      } else if (align === 'end') {
        textBaseline = 'bottom';
      }
    }

    const labelSizes = me._getLabelSizes();

    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      label = tick.label;
      const optsAtIndex = optionTicks.setContext(me.getContext(i));
      pixel = me.getPixelForTick(i) + optionTicks.labelOffset;
      font = me._resolveTickFontOptions(i);
      lineHeight = font.lineHeight;
      lineCount = (0, _helpersSegment.b)(label) ? label.length : 1;
      const halfCount = lineCount / 2;
      const color = optsAtIndex.color;
      const strokeColor = optsAtIndex.textStrokeColor;
      const strokeWidth = optsAtIndex.textStrokeWidth;

      if (isHorizontal) {
        x = pixel;

        if (position === 'top') {
          if (crossAlign === 'near' || rotation !== 0) {
            textOffset = -lineCount * lineHeight + lineHeight / 2;
          } else if (crossAlign === 'center') {
            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
          } else {
            textOffset = -labelSizes.highest.height + lineHeight / 2;
          }
        } else {
          if (crossAlign === 'near' || rotation !== 0) {
            textOffset = lineHeight / 2;
          } else if (crossAlign === 'center') {
            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
          } else {
            textOffset = labelSizes.highest.height - lineCount * lineHeight;
          }
        }

        if (mirror) {
          textOffset *= -1;
        }
      } else {
        y = pixel;
        textOffset = (1 - lineCount) * lineHeight / 2;
      }

      let backdrop;

      if (optsAtIndex.showLabelBackdrop) {
        const labelPadding = (0, _helpersSegment.A)(optsAtIndex.backdropPadding);
        const height = labelSizes.heights[i];
        const width = labelSizes.widths[i];
        let top = y + textOffset - labelPadding.top;
        let left = x - labelPadding.left;

        switch (textBaseline) {
          case 'middle':
            top -= height / 2;
            break;

          case 'bottom':
            top -= height;
            break;
        }

        switch (textAlign) {
          case 'center':
            left -= width / 2;
            break;

          case 'right':
            left -= width;
            break;
        }

        backdrop = {
          left,
          top,
          width: width + labelPadding.width,
          height: height + labelPadding.height,
          color: optsAtIndex.backdropColor
        };
      }

      items.push({
        rotation,
        label,
        font,
        color,
        strokeColor,
        strokeWidth,
        textOffset,
        textAlign,
        textBaseline,
        translation: [x, y],
        backdrop
      });
    }

    return items;
  }

  _getXAxisLabelAlignment() {
    const me = this;
    const {
      position,
      ticks
    } = me.options;
    const rotation = -(0, _helpersSegment.t)(me.labelRotation);

    if (rotation) {
      return position === 'top' ? 'left' : 'right';
    }

    let align = 'center';

    if (ticks.align === 'start') {
      align = 'left';
    } else if (ticks.align === 'end') {
      align = 'right';
    }

    return align;
  }

  _getYAxisLabelAlignment(tl) {
    const me = this;
    const {
      position,
      ticks: {
        crossAlign,
        mirror,
        padding
      }
    } = me.options;

    const labelSizes = me._getLabelSizes();

    const tickAndPadding = tl + padding;
    const widest = labelSizes.widest.width;
    let textAlign;
    let x;

    if (position === 'left') {
      if (mirror) {
        x = me.right + padding;

        if (crossAlign === 'near') {
          textAlign = 'left';
        } else if (crossAlign === 'center') {
          textAlign = 'center';
          x += widest / 2;
        } else {
          textAlign = 'right';
          x += widest;
        }
      } else {
        x = me.right - tickAndPadding;

        if (crossAlign === 'near') {
          textAlign = 'right';
        } else if (crossAlign === 'center') {
          textAlign = 'center';
          x -= widest / 2;
        } else {
          textAlign = 'left';
          x = me.left;
        }
      }
    } else if (position === 'right') {
      if (mirror) {
        x = me.left + padding;

        if (crossAlign === 'near') {
          textAlign = 'right';
        } else if (crossAlign === 'center') {
          textAlign = 'center';
          x -= widest / 2;
        } else {
          textAlign = 'left';
          x -= widest;
        }
      } else {
        x = me.left + tickAndPadding;

        if (crossAlign === 'near') {
          textAlign = 'left';
        } else if (crossAlign === 'center') {
          textAlign = 'center';
          x += widest / 2;
        } else {
          textAlign = 'right';
          x = me.right;
        }
      }
    } else {
      textAlign = 'right';
    }

    return {
      textAlign,
      x
    };
  }

  _computeLabelArea() {
    const me = this;

    if (me.options.ticks.mirror) {
      return;
    }

    const chart = me.chart;
    const position = me.options.position;

    if (position === 'left' || position === 'right') {
      return {
        top: 0,
        left: me.left,
        bottom: chart.height,
        right: me.right
      };
    }

    if (position === 'top' || position === 'bottom') {
      return {
        top: me.top,
        left: 0,
        bottom: me.bottom,
        right: chart.width
      };
    }
  }

  drawBackground() {
    const {
      ctx,
      options: {
        backgroundColor
      },
      left,
      top,
      width,
      height
    } = this;

    if (backgroundColor) {
      ctx.save();
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(left, top, width, height);
      ctx.restore();
    }
  }

  getLineWidthForValue(value) {
    const me = this;
    const grid = me.options.grid;

    if (!me._isVisible() || !grid.display) {
      return 0;
    }

    const ticks = me.ticks;
    const index = ticks.findIndex(t => t.value === value);

    if (index >= 0) {
      const opts = grid.setContext(me.getContext(index));
      return opts.lineWidth;
    }

    return 0;
  }

  drawGrid(chartArea) {
    const me = this;
    const grid = me.options.grid;
    const ctx = me.ctx;

    const items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));

    let i, ilen;

    const drawLine = (p1, p2, style) => {
      if (!style.width || !style.color) {
        return;
      }

      ctx.save();
      ctx.lineWidth = style.width;
      ctx.strokeStyle = style.color;
      ctx.setLineDash(style.borderDash || []);
      ctx.lineDashOffset = style.borderDashOffset;
      ctx.beginPath();
      ctx.moveTo(p1.x, p1.y);
      ctx.lineTo(p2.x, p2.y);
      ctx.stroke();
      ctx.restore();
    };

    if (grid.display) {
      for (i = 0, ilen = items.length; i < ilen; ++i) {
        const item = items[i];

        if (grid.drawOnChartArea) {
          drawLine({
            x: item.x1,
            y: item.y1
          }, {
            x: item.x2,
            y: item.y2
          }, item);
        }

        if (grid.drawTicks) {
          drawLine({
            x: item.tx1,
            y: item.ty1
          }, {
            x: item.tx2,
            y: item.ty2
          }, {
            color: item.tickColor,
            width: item.tickWidth,
            borderDash: item.tickBorderDash,
            borderDashOffset: item.tickBorderDashOffset
          });
        }
      }
    }
  }

  drawBorder() {
    const me = this;
    const {
      chart,
      ctx,
      options: {
        grid
      }
    } = me;
    const borderOpts = grid.setContext(me.getContext());
    const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;

    if (!axisWidth) {
      return;
    }

    const lastLineWidth = grid.setContext(me.getContext(0)).lineWidth;
    const borderValue = me._borderValue;
    let x1, x2, y1, y2;

    if (me.isHorizontal()) {
      x1 = (0, _helpersSegment.S)(chart, me.left, axisWidth) - axisWidth / 2;
      x2 = (0, _helpersSegment.S)(chart, me.right, lastLineWidth) + lastLineWidth / 2;
      y1 = y2 = borderValue;
    } else {
      y1 = (0, _helpersSegment.S)(chart, me.top, axisWidth) - axisWidth / 2;
      y2 = (0, _helpersSegment.S)(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
      x1 = x2 = borderValue;
    }

    ctx.save();
    ctx.lineWidth = borderOpts.borderWidth;
    ctx.strokeStyle = borderOpts.borderColor;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
    ctx.restore();
  }

  drawLabels(chartArea) {
    const me = this;
    const optionTicks = me.options.ticks;

    if (!optionTicks.display) {
      return;
    }

    const ctx = me.ctx;

    const area = me._computeLabelArea();

    if (area) {
      (0, _helpersSegment.U)(ctx, area);
    }

    const items = me._labelItems || (me._labelItems = me._computeLabelItems(chartArea));

    let i, ilen;

    for (i = 0, ilen = items.length; i < ilen; ++i) {
      const item = items[i];
      const tickFont = item.font;
      const label = item.label;

      if (item.backdrop) {
        ctx.fillStyle = item.backdrop.color;
        ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);
      }

      let y = item.textOffset;
      (0, _helpersSegment.V)(ctx, label, 0, y, tickFont, item);
    }

    if (area) {
      (0, _helpersSegment.W)(ctx);
    }
  }

  drawTitle() {
    const {
      ctx,
      options: {
        position,
        title,
        reverse
      }
    } = this;

    if (!title.display) {
      return;
    }

    const font = (0, _helpersSegment.X)(title.font);
    const padding = (0, _helpersSegment.A)(title.padding);
    const align = title.align;
    let offset = font.lineHeight / 2;

    if (position === 'bottom' || position === 'center' || (0, _helpersSegment.i)(position)) {
      offset += padding.bottom;

      if ((0, _helpersSegment.b)(title.text)) {
        offset += font.lineHeight * (title.text.length - 1);
      }
    } else {
      offset += padding.top;
    }

    const {
      titleX,
      titleY,
      maxWidth,
      rotation
    } = titleArgs(this, offset, position, align);
    (0, _helpersSegment.V)(ctx, title.text, 0, 0, font, {
      color: title.color,
      maxWidth,
      rotation,
      textAlign: titleAlign(align, position, reverse),
      textBaseline: 'middle',
      translation: [titleX, titleY]
    });
  }

  draw(chartArea) {
    const me = this;

    if (!me._isVisible()) {
      return;
    }

    me.drawBackground();
    me.drawGrid(chartArea);
    me.drawBorder();
    me.drawTitle();
    me.drawLabels(chartArea);
  }

  _layers() {
    const me = this;
    const opts = me.options;
    const tz = opts.ticks && opts.ticks.z || 0;
    const gz = (0, _helpersSegment.v)(opts.grid && opts.grid.z, -1);

    if (!me._isVisible() || me.draw !== Scale.prototype.draw) {
      return [{
        z: tz,

        draw(chartArea) {
          me.draw(chartArea);
        }

      }];
    }

    return [{
      z: gz,

      draw(chartArea) {
        me.drawBackground();
        me.drawGrid(chartArea);
        me.drawTitle();
      }

    }, {
      z: gz + 1,

      draw() {
        me.drawBorder();
      }

    }, {
      z: tz,

      draw(chartArea) {
        me.drawLabels(chartArea);
      }

    }];
  }

  getMatchingVisibleMetas(type) {
    const me = this;
    const metas = me.chart.getSortedVisibleDatasetMetas();
    const axisID = me.axis + 'AxisID';
    const result = [];
    let i, ilen;

    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      const meta = metas[i];

      if (meta[axisID] === me.id && (!type || meta.type === type)) {
        result.push(meta);
      }
    }

    return result;
  }

  _resolveTickFontOptions(index) {
    const opts = this.options.ticks.setContext(this.getContext(index));
    return (0, _helpersSegment.X)(opts.font);
  }

  _maxDigits() {
    const me = this;

    const fontSize = me._resolveTickFontOptions(0).lineHeight;

    return (me.isHorizontal() ? me.width : me.height) / fontSize;
  }

}

exports.Scale = Scale;

class TypedRegistry {
  constructor(type, scope, override) {
    this.type = type;
    this.scope = scope;
    this.override = override;
    this.items = Object.create(null);
  }

  isForType(type) {
    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
  }

  register(item) {
    const me = this;
    const proto = Object.getPrototypeOf(item);
    let parentScope;

    if (isIChartComponent(proto)) {
      parentScope = me.register(proto);
    }

    const items = me.items;
    const id = item.id;
    const scope = me.scope + '.' + id;

    if (!id) {
      throw new Error('class does not have id: ' + item);
    }

    if (id in items) {
      return scope;
    }

    items[id] = item;
    registerDefaults(item, scope, parentScope);

    if (me.override) {
      _helpersSegment.d.override(item.id, item.overrides);
    }

    return scope;
  }

  get(id) {
    return this.items[id];
  }

  unregister(item) {
    const items = this.items;
    const id = item.id;
    const scope = this.scope;

    if (id in items) {
      delete items[id];
    }

    if (scope && id in _helpersSegment.d[scope]) {
      delete _helpersSegment.d[scope][id];

      if (this.override) {
        delete _helpersSegment.$[id];
      }
    }
  }

}

function registerDefaults(item, scope, parentScope) {
  const itemDefaults = (0, _helpersSegment.a0)(Object.create(null), [parentScope ? _helpersSegment.d.get(parentScope) : {}, _helpersSegment.d.get(scope), item.defaults]);

  _helpersSegment.d.set(scope, itemDefaults);

  if (item.defaultRoutes) {
    routeDefaults(scope, item.defaultRoutes);
  }

  if (item.descriptors) {
    _helpersSegment.d.describe(scope, item.descriptors);
  }
}

function routeDefaults(scope, routes) {
  Object.keys(routes).forEach(property => {
    const propertyParts = property.split('.');
    const sourceName = propertyParts.pop();
    const sourceScope = [scope].concat(propertyParts).join('.');
    const parts = routes[property].split('.');
    const targetName = parts.pop();
    const targetScope = parts.join('.');

    _helpersSegment.d.route(sourceScope, sourceName, targetScope, targetName);
  });
}

function isIChartComponent(proto) {
  return 'id' in proto && 'defaults' in proto;
}

class Registry {
  constructor() {
    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);
    this.elements = new TypedRegistry(Element, 'elements');
    this.plugins = new TypedRegistry(Object, 'plugins');
    this.scales = new TypedRegistry(Scale, 'scales');
    this._typedRegistries = [this.controllers, this.scales, this.elements];
  }

  add(...args) {
    this._each('register', args);
  }

  remove(...args) {
    this._each('unregister', args);
  }

  addControllers(...args) {
    this._each('register', args, this.controllers);
  }

  addElements(...args) {
    this._each('register', args, this.elements);
  }

  addPlugins(...args) {
    this._each('register', args, this.plugins);
  }

  addScales(...args) {
    this._each('register', args, this.scales);
  }

  getController(id) {
    return this._get(id, this.controllers, 'controller');
  }

  getElement(id) {
    return this._get(id, this.elements, 'element');
  }

  getPlugin(id) {
    return this._get(id, this.plugins, 'plugin');
  }

  getScale(id) {
    return this._get(id, this.scales, 'scale');
  }

  removeControllers(...args) {
    this._each('unregister', args, this.controllers);
  }

  removeElements(...args) {
    this._each('unregister', args, this.elements);
  }

  removePlugins(...args) {
    this._each('unregister', args, this.plugins);
  }

  removeScales(...args) {
    this._each('unregister', args, this.scales);
  }

  _each(method, args, typedRegistry) {
    const me = this;
    [...args].forEach(arg => {
      const reg = typedRegistry || me._getRegistryForType(arg);

      if (typedRegistry || reg.isForType(arg) || reg === me.plugins && arg.id) {
        me._exec(method, reg, arg);
      } else {
        (0, _helpersSegment.B)(arg, item => {
          const itemReg = typedRegistry || me._getRegistryForType(item);

          me._exec(method, itemReg, item);
        });
      }
    });
  }

  _exec(method, registry, component) {
    const camelMethod = (0, _helpersSegment.a1)(method);
    (0, _helpersSegment.M)(component['before' + camelMethod], [], component);
    registry[method](component);
    (0, _helpersSegment.M)(component['after' + camelMethod], [], component);
  }

  _getRegistryForType(type) {
    for (let i = 0; i < this._typedRegistries.length; i++) {
      const reg = this._typedRegistries[i];

      if (reg.isForType(type)) {
        return reg;
      }
    }

    return this.plugins;
  }

  _get(id, typedRegistry, type) {
    const item = typedRegistry.get(id);

    if (item === undefined) {
      throw new Error('"' + id + '" is not a registered ' + type + '.');
    }

    return item;
  }

}

var registry = new Registry();
exports.registry = registry;

class PluginService {
  constructor() {
    this._init = [];
  }

  notify(chart, hook, args, filter) {
    const me = this;

    if (hook === 'beforeInit') {
      me._init = me._createDescriptors(chart, true);

      me._notify(me._init, chart, 'install');
    }

    const descriptors = filter ? me._descriptors(chart).filter(filter) : me._descriptors(chart);

    const result = me._notify(descriptors, chart, hook, args);

    if (hook === 'destroy') {
      me._notify(descriptors, chart, 'stop');

      me._notify(me._init, chart, 'uninstall');
    }

    return result;
  }

  _notify(descriptors, chart, hook, args) {
    args = args || {};

    for (const descriptor of descriptors) {
      const plugin = descriptor.plugin;
      const method = plugin[hook];
      const params = [chart, args, descriptor.options];

      if ((0, _helpersSegment.M)(method, params, plugin) === false && args.cancelable) {
        return false;
      }
    }

    return true;
  }

  invalidate() {
    if (!(0, _helpersSegment.j)(this._cache)) {
      this._oldCache = this._cache;
      this._cache = undefined;
    }
  }

  _descriptors(chart) {
    if (this._cache) {
      return this._cache;
    }

    const descriptors = this._cache = this._createDescriptors(chart);

    this._notifyStateChanges(chart);

    return descriptors;
  }

  _createDescriptors(chart, all) {
    const config = chart && chart.config;
    const options = (0, _helpersSegment.v)(config.options && config.options.plugins, {});
    const plugins = allPlugins(config);
    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
  }

  _notifyStateChanges(chart) {
    const previousDescriptors = this._oldCache || [];
    const descriptors = this._cache;

    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));

    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');

    this._notify(diff(descriptors, previousDescriptors), chart, 'start');
  }

}

function allPlugins(config) {
  const plugins = [];
  const keys = Object.keys(registry.plugins.items);

  for (let i = 0; i < keys.length; i++) {
    plugins.push(registry.getPlugin(keys[i]));
  }

  const local = config.plugins || [];

  for (let i = 0; i < local.length; i++) {
    const plugin = local[i];

    if (plugins.indexOf(plugin) === -1) {
      plugins.push(plugin);
    }
  }

  return plugins;
}

function getOpts(options, all) {
  if (!all && options === false) {
    return null;
  }

  if (options === true) {
    return {};
  }

  return options;
}

function createDescriptors(chart, plugins, options, all) {
  const result = [];
  const context = chart.getContext();

  for (let i = 0; i < plugins.length; i++) {
    const plugin = plugins[i];
    const id = plugin.id;
    const opts = getOpts(options[id], all);

    if (opts === null) {
      continue;
    }

    result.push({
      plugin,
      options: pluginOpts(chart.config, plugin, opts, context)
    });
  }

  return result;
}

function pluginOpts(config, plugin, opts, context) {
  const keys = config.pluginScopeKeys(plugin);
  const scopes = config.getOptionScopes(opts, keys);
  return config.createResolver(scopes, context, [''], {
    scriptable: false,
    indexable: false,
    allKeys: true
  });
}

function getIndexAxis(type, options) {
  const datasetDefaults = _helpersSegment.d.datasets[type] || {};
  const datasetOptions = (options.datasets || {})[type] || {};
  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';
}

function getAxisFromDefaultScaleID(id, indexAxis) {
  let axis = id;

  if (id === '_index_') {
    axis = indexAxis;
  } else if (id === '_value_') {
    axis = indexAxis === 'x' ? 'y' : 'x';
  }

  return axis;
}

function getDefaultScaleIDFromAxis(axis, indexAxis) {
  return axis === indexAxis ? '_index_' : '_value_';
}

function axisFromPosition(position) {
  if (position === 'top' || position === 'bottom') {
    return 'x';
  }

  if (position === 'left' || position === 'right') {
    return 'y';
  }
}

function determineAxis(id, scaleOptions) {
  if (id === 'x' || id === 'y') {
    return id;
  }

  return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();
}

function mergeScaleConfig(config, options) {
  const chartDefaults = _helpersSegment.$[config.type] || {
    scales: {}
  };
  const configScales = options.scales || {};
  const chartIndexAxis = getIndexAxis(config.type, options);
  const firstIDs = Object.create(null);
  const scales = Object.create(null);
  Object.keys(configScales).forEach(id => {
    const scaleConf = configScales[id];
    const axis = determineAxis(id, scaleConf);
    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
    const defaultScaleOptions = chartDefaults.scales || {};
    firstIDs[axis] = firstIDs[axis] || id;
    scales[id] = (0, _helpersSegment.a7)(Object.create(null), [{
      axis
    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);
  });
  config.data.datasets.forEach(dataset => {
    const type = dataset.type || config.type;
    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
    const datasetDefaults = _helpersSegment.$[type] || {};
    const defaultScaleOptions = datasetDefaults.scales || {};
    Object.keys(defaultScaleOptions).forEach(defaultID => {
      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
      const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;
      scales[id] = scales[id] || Object.create(null);
      (0, _helpersSegment.a7)(scales[id], [{
        axis
      }, configScales[id], defaultScaleOptions[defaultID]]);
    });
  });
  Object.keys(scales).forEach(key => {
    const scale = scales[key];
    (0, _helpersSegment.a7)(scale, [_helpersSegment.d.scales[scale.type], _helpersSegment.d.scale]);
  });
  return scales;
}

function initOptions(config) {
  const options = config.options || (config.options = {});
  options.plugins = (0, _helpersSegment.v)(options.plugins, {});
  options.scales = mergeScaleConfig(config, options);
}

function initData(data) {
  data = data || {};
  data.datasets = data.datasets || [];
  data.labels = data.labels || [];
  return data;
}

function initConfig(config) {
  config = config || {};
  config.data = initData(config.data);
  initOptions(config);
  return config;
}

const keyCache = new Map();
const keysCached = new Set();

function cachedKeys(cacheKey, generate) {
  let keys = keyCache.get(cacheKey);

  if (!keys) {
    keys = generate();
    keyCache.set(cacheKey, keys);
    keysCached.add(keys);
  }

  return keys;
}

const addIfFound = (set, obj, key) => {
  const opts = (0, _helpersSegment.f)(obj, key);

  if (opts !== undefined) {
    set.add(opts);
  }
};

class Config {
  constructor(config) {
    this._config = initConfig(config);
    this._scopeCache = new Map();
    this._resolverCache = new Map();
  }

  get platform() {
    return this._config.platform;
  }

  get type() {
    return this._config.type;
  }

  set type(type) {
    this._config.type = type;
  }

  get data() {
    return this._config.data;
  }

  set data(data) {
    this._config.data = initData(data);
  }

  get options() {
    return this._config.options;
  }

  set options(options) {
    this._config.options = options;
  }

  get plugins() {
    return this._config.plugins;
  }

  update() {
    const config = this._config;
    this.clearCache();
    initOptions(config);
  }

  clearCache() {
    this._scopeCache.clear();

    this._resolverCache.clear();
  }

  datasetScopeKeys(datasetType) {
    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);
  }

  datasetAnimationScopeKeys(datasetType, transition) {
    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);
  }

  datasetElementScopeKeys(datasetType, elementType) {
    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);
  }

  pluginScopeKeys(plugin) {
    const id = plugin.id;
    const type = this.type;
    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);
  }

  _cachedScopes(mainScope, resetCache) {
    const _scopeCache = this._scopeCache;

    let cache = _scopeCache.get(mainScope);

    if (!cache || resetCache) {
      cache = new Map();

      _scopeCache.set(mainScope, cache);
    }

    return cache;
  }

  getOptionScopes(mainScope, keyLists, resetCache) {
    const {
      options,
      type
    } = this;

    const cache = this._cachedScopes(mainScope, resetCache);

    const cached = cache.get(keyLists);

    if (cached) {
      return cached;
    }

    const scopes = new Set();
    keyLists.forEach(keys => {
      if (mainScope) {
        scopes.add(mainScope);
        keys.forEach(key => addIfFound(scopes, mainScope, key));
      }

      keys.forEach(key => addIfFound(scopes, options, key));
      keys.forEach(key => addIfFound(scopes, _helpersSegment.$[type] || {}, key));
      keys.forEach(key => addIfFound(scopes, _helpersSegment.d, key));
      keys.forEach(key => addIfFound(scopes, _helpersSegment.a2, key));
    });
    const array = Array.from(scopes);

    if (array.length === 0) {
      array.push(Object.create(null));
    }

    if (keysCached.has(keyLists)) {
      cache.set(keyLists, array);
    }

    return array;
  }

  chartOptionScopes() {
    const {
      options,
      type
    } = this;
    return [options, _helpersSegment.$[type] || {}, _helpersSegment.d.datasets[type] || {}, {
      type
    }, _helpersSegment.d, _helpersSegment.a2];
  }

  resolveNamedOptions(scopes, names, context, prefixes = ['']) {
    const result = {
      $shared: true
    };
    const {
      resolver,
      subPrefixes
    } = getResolver(this._resolverCache, scopes, prefixes);
    let options = resolver;

    if (needContext(resolver, names)) {
      result.$shared = false;
      context = (0, _helpersSegment.a3)(context) ? context() : context;
      const subResolver = this.createResolver(scopes, context, subPrefixes);
      options = (0, _helpersSegment.a4)(resolver, context, subResolver);
    }

    for (const prop of names) {
      result[prop] = options[prop];
    }

    return result;
  }

  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {
    const {
      resolver
    } = getResolver(this._resolverCache, scopes, prefixes);
    return (0, _helpersSegment.i)(context) ? (0, _helpersSegment.a4)(resolver, context, undefined, descriptorDefaults) : resolver;
  }

}

function getResolver(resolverCache, scopes, prefixes) {
  let cache = resolverCache.get(scopes);

  if (!cache) {
    cache = new Map();
    resolverCache.set(scopes, cache);
  }

  const cacheKey = prefixes.join();
  let cached = cache.get(cacheKey);

  if (!cached) {
    const resolver = (0, _helpersSegment.a5)(scopes, prefixes);
    cached = {
      resolver,
      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))
    };
    cache.set(cacheKey, cached);
  }

  return cached;
}

function needContext(proxy, names) {
  const {
    isScriptable,
    isIndexable
  } = (0, _helpersSegment.a6)(proxy);

  for (const prop of names) {
    if (isScriptable(prop) && (0, _helpersSegment.a3)(proxy[prop]) || isIndexable(prop) && (0, _helpersSegment.b)(proxy[prop])) {
      return true;
    }
  }

  return false;
}

var version = "3.5.1";
const KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];

function positionIsHorizontal(position, axis) {
  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';
}

function compare2Level(l1, l2) {
  return function (a, b) {
    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
  };
}

function onAnimationsComplete(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  chart.notifyPlugins('afterRender');
  (0, _helpersSegment.M)(animationOptions && animationOptions.onComplete, [context], chart);
}

function onAnimationProgress(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  (0, _helpersSegment.M)(animationOptions && animationOptions.onProgress, [context], chart);
}

function getCanvas(item) {
  if ((0, _helpersSegment.I)() && typeof item === 'string') {
    item = document.getElementById(item);
  } else if (item && item.length) {
    item = item[0];
  }

  if (item && item.canvas) {
    item = item.canvas;
  }

  return item;
}

const instances = {};

const getChart = key => {
  const canvas = getCanvas(key);
  return Object.values(instances).filter(c => c.canvas === canvas).pop();
};

class Chart {
  constructor(item, userConfig) {
    const me = this;
    const config = this.config = new Config(userConfig);
    const initialCanvas = getCanvas(item);
    const existingChart = getChart(initialCanvas);

    if (existingChart) {
      throw new Error('Canvas is already in use. Chart with ID \'' + existingChart.id + '\'' + ' must be destroyed before the canvas can be reused.');
    }

    const options = config.createResolver(config.chartOptionScopes(), me.getContext());
    this.platform = new (config.platform || _detectPlatform(initialCanvas))();
    const context = me.platform.acquireContext(initialCanvas, options.aspectRatio);
    const canvas = context && context.canvas;
    const height = canvas && canvas.height;
    const width = canvas && canvas.width;
    this.id = (0, _helpersSegment.a8)();
    this.ctx = context;
    this.canvas = canvas;
    this.width = width;
    this.height = height;
    this._options = options;
    this._aspectRatio = this.aspectRatio;
    this._layers = [];
    this._metasets = [];
    this._stacks = undefined;
    this.boxes = [];
    this.currentDevicePixelRatio = undefined;
    this.chartArea = undefined;
    this._active = [];
    this._lastEvent = undefined;
    this._listeners = {};
    this._responsiveListeners = undefined;
    this._sortedMetasets = [];
    this.scales = {};
    this._plugins = new PluginService();
    this.$proxies = {};
    this._hiddenIndices = {};
    this.attached = false;
    this._animationsDisabled = undefined;
    this.$context = undefined;
    this._doResize = (0, _helpersSegment.a9)(() => this.update('resize'), options.resizeDelay || 0);
    instances[me.id] = me;

    if (!context || !canvas) {
      console.error("Failed to create chart: can't acquire context from the given item");
      return;
    }

    animator.listen(me, 'complete', onAnimationsComplete);
    animator.listen(me, 'progress', onAnimationProgress);

    me._initialize();

    if (me.attached) {
      me.update();
    }
  }

  get aspectRatio() {
    const {
      options: {
        aspectRatio,
        maintainAspectRatio
      },
      width,
      height,
      _aspectRatio
    } = this;

    if (!(0, _helpersSegment.j)(aspectRatio)) {
      return aspectRatio;
    }

    if (maintainAspectRatio && _aspectRatio) {
      return _aspectRatio;
    }

    return height ? width / height : null;
  }

  get data() {
    return this.config.data;
  }

  set data(data) {
    this.config.data = data;
  }

  get options() {
    return this._options;
  }

  set options(options) {
    this.config.options = options;
  }

  _initialize() {
    const me = this;
    me.notifyPlugins('beforeInit');

    if (me.options.responsive) {
      me.resize();
    } else {
      (0, _helpersSegment.aa)(me, me.options.devicePixelRatio);
    }

    me.bindEvents();
    me.notifyPlugins('afterInit');
    return me;
  }

  clear() {
    (0, _helpersSegment.ab)(this.canvas, this.ctx);
    return this;
  }

  stop() {
    animator.stop(this);
    return this;
  }

  resize(width, height) {
    if (!animator.running(this)) {
      this._resize(width, height);
    } else {
      this._resizeBeforeDraw = {
        width,
        height
      };
    }
  }

  _resize(width, height) {
    const me = this;
    const options = me.options;
    const canvas = me.canvas;
    const aspectRatio = options.maintainAspectRatio && me.aspectRatio;
    const newSize = me.platform.getMaximumSize(canvas, width, height, aspectRatio);
    const newRatio = options.devicePixelRatio || me.platform.getDevicePixelRatio();
    me.width = newSize.width;
    me.height = newSize.height;
    me._aspectRatio = me.aspectRatio;

    if (!(0, _helpersSegment.aa)(me, newRatio, true)) {
      return;
    }

    me.notifyPlugins('resize', {
      size: newSize
    });
    (0, _helpersSegment.M)(options.onResize, [me, newSize], me);

    if (me.attached) {
      if (me._doResize()) {
        me.render();
      }
    }
  }

  ensureScalesHaveIDs() {
    const options = this.options;
    const scalesOptions = options.scales || {};
    (0, _helpersSegment.B)(scalesOptions, (axisOptions, axisID) => {
      axisOptions.id = axisID;
    });
  }

  buildOrUpdateScales() {
    const me = this;
    const options = me.options;
    const scaleOpts = options.scales;
    const scales = me.scales;
    const updated = Object.keys(scales).reduce((obj, id) => {
      obj[id] = false;
      return obj;
    }, {});
    let items = [];

    if (scaleOpts) {
      items = items.concat(Object.keys(scaleOpts).map(id => {
        const scaleOptions = scaleOpts[id];
        const axis = determineAxis(id, scaleOptions);
        const isRadial = axis === 'r';
        const isHorizontal = axis === 'x';
        return {
          options: scaleOptions,
          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',
          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'
        };
      }));
    }

    (0, _helpersSegment.B)(items, item => {
      const scaleOptions = item.options;
      const id = scaleOptions.id;
      const axis = determineAxis(id, scaleOptions);
      const scaleType = (0, _helpersSegment.v)(scaleOptions.type, item.dtype);

      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
        scaleOptions.position = item.dposition;
      }

      updated[id] = true;
      let scale = null;

      if (id in scales && scales[id].type === scaleType) {
        scale = scales[id];
      } else {
        const scaleClass = registry.getScale(scaleType);
        scale = new scaleClass({
          id,
          type: scaleType,
          ctx: me.ctx,
          chart: me
        });
        scales[scale.id] = scale;
      }

      scale.init(scaleOptions, options);
    });
    (0, _helpersSegment.B)(updated, (hasUpdated, id) => {
      if (!hasUpdated) {
        delete scales[id];
      }
    });
    (0, _helpersSegment.B)(scales, scale => {
      layouts.configure(me, scale, scale.options);
      layouts.addBox(me, scale);
    });
  }

  _updateMetasets() {
    const me = this;
    const metasets = me._metasets;
    const numData = me.data.datasets.length;
    const numMeta = metasets.length;
    metasets.sort((a, b) => a.index - b.index);

    if (numMeta > numData) {
      for (let i = numData; i < numMeta; ++i) {
        me._destroyDatasetMeta(i);
      }

      metasets.splice(numData, numMeta - numData);
    }

    me._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));
  }

  _removeUnreferencedMetasets() {
    const me = this;
    const {
      _metasets: metasets,
      data: {
        datasets
      }
    } = me;

    if (metasets.length > datasets.length) {
      delete me._stacks;
    }

    metasets.forEach((meta, index) => {
      if (datasets.filter(x => x === meta._dataset).length === 0) {
        me._destroyDatasetMeta(index);
      }
    });
  }

  buildOrUpdateControllers() {
    const me = this;
    const newControllers = [];
    const datasets = me.data.datasets;
    let i, ilen;

    me._removeUnreferencedMetasets();

    for (i = 0, ilen = datasets.length; i < ilen; i++) {
      const dataset = datasets[i];
      let meta = me.getDatasetMeta(i);
      const type = dataset.type || me.config.type;

      if (meta.type && meta.type !== type) {
        me._destroyDatasetMeta(i);

        meta = me.getDatasetMeta(i);
      }

      meta.type = type;
      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, me.options);
      meta.order = dataset.order || 0;
      meta.index = i;
      meta.label = '' + dataset.label;
      meta.visible = me.isDatasetVisible(i);

      if (meta.controller) {
        meta.controller.updateIndex(i);
        meta.controller.linkScales();
      } else {
        const ControllerClass = registry.getController(type);
        const {
          datasetElementType,
          dataElementType
        } = _helpersSegment.d.datasets[type];
        Object.assign(ControllerClass.prototype, {
          dataElementType: registry.getElement(dataElementType),
          datasetElementType: datasetElementType && registry.getElement(datasetElementType)
        });
        meta.controller = new ControllerClass(me, i);
        newControllers.push(meta.controller);
      }
    }

    me._updateMetasets();

    return newControllers;
  }

  _resetElements() {
    const me = this;
    (0, _helpersSegment.B)(me.data.datasets, (dataset, datasetIndex) => {
      me.getDatasetMeta(datasetIndex).controller.reset();
    }, me);
  }

  reset() {
    this._resetElements();

    this.notifyPlugins('reset');
  }

  update(mode) {
    const me = this;
    const config = me.config;
    config.update();
    me._options = config.createResolver(config.chartOptionScopes(), me.getContext());
    (0, _helpersSegment.B)(me.scales, scale => {
      layouts.removeBox(me, scale);
    });
    const animsDisabled = me._animationsDisabled = !me.options.animation;
    me.ensureScalesHaveIDs();
    me.buildOrUpdateScales();
    const existingEvents = new Set(Object.keys(me._listeners));
    const newEvents = new Set(me.options.events);

    if (!(0, _helpersSegment.ac)(existingEvents, newEvents) || !!this._responsiveListeners !== me.options.responsive) {
      me.unbindEvents();
      me.bindEvents();
    }

    me._plugins.invalidate();

    if (me.notifyPlugins('beforeUpdate', {
      mode,
      cancelable: true
    }) === false) {
      return;
    }

    const newControllers = me.buildOrUpdateControllers();
    me.notifyPlugins('beforeElementsUpdate');
    let minPadding = 0;

    for (let i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
      const {
        controller
      } = me.getDatasetMeta(i);
      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
      controller.buildOrUpdateElements(reset);
      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
    }

    me._minPadding = minPadding;

    me._updateLayout(minPadding);

    if (!animsDisabled) {
      (0, _helpersSegment.B)(newControllers, controller => {
        controller.reset();
      });
    }

    me._updateDatasets(mode);

    me.notifyPlugins('afterUpdate', {
      mode
    });

    me._layers.sort(compare2Level('z', '_idx'));

    if (me._lastEvent) {
      me._eventHandler(me._lastEvent, true);
    }

    me.render();
  }

  _updateLayout(minPadding) {
    const me = this;

    if (me.notifyPlugins('beforeLayout', {
      cancelable: true
    }) === false) {
      return;
    }

    layouts.update(me, me.width, me.height, minPadding);
    const area = me.chartArea;
    const noArea = area.width <= 0 || area.height <= 0;
    me._layers = [];
    (0, _helpersSegment.B)(me.boxes, box => {
      if (noArea && box.position === 'chartArea') {
        return;
      }

      if (box.configure) {
        box.configure();
      }

      me._layers.push(...box._layers());
    }, me);

    me._layers.forEach((item, index) => {
      item._idx = index;
    });

    me.notifyPlugins('afterLayout');
  }

  _updateDatasets(mode) {
    const me = this;
    const isFunction = typeof mode === 'function';

    if (me.notifyPlugins('beforeDatasetsUpdate', {
      mode,
      cancelable: true
    }) === false) {
      return;
    }

    for (let i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
      me._updateDataset(i, isFunction ? mode({
        datasetIndex: i
      }) : mode);
    }

    me.notifyPlugins('afterDatasetsUpdate', {
      mode
    });
  }

  _updateDataset(index, mode) {
    const me = this;
    const meta = me.getDatasetMeta(index);
    const args = {
      meta,
      index,
      mode,
      cancelable: true
    };

    if (me.notifyPlugins('beforeDatasetUpdate', args) === false) {
      return;
    }

    meta.controller._update(mode);

    args.cancelable = false;
    me.notifyPlugins('afterDatasetUpdate', args);
  }

  render() {
    const me = this;

    if (me.notifyPlugins('beforeRender', {
      cancelable: true
    }) === false) {
      return;
    }

    if (animator.has(me)) {
      if (me.attached && !animator.running(me)) {
        animator.start(me);
      }
    } else {
      me.draw();
      onAnimationsComplete({
        chart: me
      });
    }
  }

  draw() {
    const me = this;
    let i;

    if (me._resizeBeforeDraw) {
      const {
        width,
        height
      } = me._resizeBeforeDraw;

      me._resize(width, height);

      me._resizeBeforeDraw = null;
    }

    me.clear();

    if (me.width <= 0 || me.height <= 0) {
      return;
    }

    if (me.notifyPlugins('beforeDraw', {
      cancelable: true
    }) === false) {
      return;
    }

    const layers = me._layers;

    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
      layers[i].draw(me.chartArea);
    }

    me._drawDatasets();

    for (; i < layers.length; ++i) {
      layers[i].draw(me.chartArea);
    }

    me.notifyPlugins('afterDraw');
  }

  _getSortedDatasetMetas(filterVisible) {
    const me = this;
    const metasets = me._sortedMetasets;
    const result = [];
    let i, ilen;

    for (i = 0, ilen = metasets.length; i < ilen; ++i) {
      const meta = metasets[i];

      if (!filterVisible || meta.visible) {
        result.push(meta);
      }
    }

    return result;
  }

  getSortedVisibleDatasetMetas() {
    return this._getSortedDatasetMetas(true);
  }

  _drawDatasets() {
    const me = this;

    if (me.notifyPlugins('beforeDatasetsDraw', {
      cancelable: true
    }) === false) {
      return;
    }

    const metasets = me.getSortedVisibleDatasetMetas();

    for (let i = metasets.length - 1; i >= 0; --i) {
      me._drawDataset(metasets[i]);
    }

    me.notifyPlugins('afterDatasetsDraw');
  }

  _drawDataset(meta) {
    const me = this;
    const ctx = me.ctx;
    const clip = meta._clip;
    const useClip = !clip.disabled;
    const area = me.chartArea;
    const args = {
      meta,
      index: meta.index,
      cancelable: true
    };

    if (me.notifyPlugins('beforeDatasetDraw', args) === false) {
      return;
    }

    if (useClip) {
      (0, _helpersSegment.U)(ctx, {
        left: clip.left === false ? 0 : area.left - clip.left,
        right: clip.right === false ? me.width : area.right + clip.right,
        top: clip.top === false ? 0 : area.top - clip.top,
        bottom: clip.bottom === false ? me.height : area.bottom + clip.bottom
      });
    }

    meta.controller.draw();

    if (useClip) {
      (0, _helpersSegment.W)(ctx);
    }

    args.cancelable = false;
    me.notifyPlugins('afterDatasetDraw', args);
  }

  getElementsAtEventForMode(e, mode, options, useFinalPosition) {
    const method = Interaction.modes[mode];

    if (typeof method === 'function') {
      return method(this, e, options, useFinalPosition);
    }

    return [];
  }

  getDatasetMeta(datasetIndex) {
    const me = this;
    const dataset = me.data.datasets[datasetIndex];
    const metasets = me._metasets;
    let meta = metasets.filter(x => x && x._dataset === dataset).pop();

    if (!meta) {
      meta = {
        type: null,
        data: [],
        dataset: null,
        controller: null,
        hidden: null,
        xAxisID: null,
        yAxisID: null,
        order: dataset && dataset.order || 0,
        index: datasetIndex,
        _dataset: dataset,
        _parsed: [],
        _sorted: false
      };
      metasets.push(meta);
    }

    return meta;
  }

  getContext() {
    return this.$context || (this.$context = {
      chart: this,
      type: 'chart'
    });
  }

  getVisibleDatasetCount() {
    return this.getSortedVisibleDatasetMetas().length;
  }

  isDatasetVisible(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];

    if (!dataset) {
      return false;
    }

    const meta = this.getDatasetMeta(datasetIndex);
    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;
  }

  setDatasetVisibility(datasetIndex, visible) {
    const meta = this.getDatasetMeta(datasetIndex);
    meta.hidden = !visible;
  }

  toggleDataVisibility(index) {
    this._hiddenIndices[index] = !this._hiddenIndices[index];
  }

  getDataVisibility(index) {
    return !this._hiddenIndices[index];
  }

  _updateVisibility(datasetIndex, dataIndex, visible) {
    const me = this;
    const mode = visible ? 'show' : 'hide';
    const meta = me.getDatasetMeta(datasetIndex);

    const anims = meta.controller._resolveAnimations(undefined, mode);

    if ((0, _helpersSegment.h)(dataIndex)) {
      meta.data[dataIndex].hidden = !visible;
      me.update();
    } else {
      me.setDatasetVisibility(datasetIndex, visible);
      anims.update(meta, {
        visible
      });
      me.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);
    }
  }

  hide(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, false);
  }

  show(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, true);
  }

  _destroyDatasetMeta(datasetIndex) {
    const me = this;
    const meta = me._metasets && me._metasets[datasetIndex];

    if (meta && meta.controller) {
      meta.controller._destroy();

      delete me._metasets[datasetIndex];
    }
  }

  destroy() {
    const me = this;
    const {
      canvas,
      ctx
    } = me;
    let i, ilen;
    me.stop();
    animator.remove(me);

    for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
      me._destroyDatasetMeta(i);
    }

    me.config.clearCache();

    if (canvas) {
      me.unbindEvents();
      (0, _helpersSegment.ab)(canvas, ctx);
      me.platform.releaseContext(ctx);
      me.canvas = null;
      me.ctx = null;
    }

    me.notifyPlugins('destroy');
    delete instances[me.id];
  }

  toBase64Image(...args) {
    return this.canvas.toDataURL(...args);
  }

  bindEvents() {
    this.bindUserEvents();

    if (this.options.responsive) {
      this.bindResponsiveEvents();
    } else {
      this.attached = true;
    }
  }

  bindUserEvents() {
    const me = this;
    const listeners = me._listeners;
    const platform = me.platform;

    const _add = (type, listener) => {
      platform.addEventListener(me, type, listener);
      listeners[type] = listener;
    };

    const listener = function (e, x, y) {
      e.offsetX = x;
      e.offsetY = y;

      me._eventHandler(e);
    };

    (0, _helpersSegment.B)(me.options.events, type => _add(type, listener));
  }

  bindResponsiveEvents() {
    const me = this;

    if (!me._responsiveListeners) {
      me._responsiveListeners = {};
    }

    const listeners = me._responsiveListeners;
    const platform = me.platform;

    const _add = (type, listener) => {
      platform.addEventListener(me, type, listener);
      listeners[type] = listener;
    };

    const _remove = (type, listener) => {
      if (listeners[type]) {
        platform.removeEventListener(me, type, listener);
        delete listeners[type];
      }
    };

    const listener = (width, height) => {
      if (me.canvas) {
        me.resize(width, height);
      }
    };

    let detached;

    const attached = () => {
      _remove('attach', attached);

      me.attached = true;
      me.resize();

      _add('resize', listener);

      _add('detach', detached);
    };

    detached = () => {
      me.attached = false;

      _remove('resize', listener);

      _add('attach', attached);
    };

    if (platform.isAttached(me.canvas)) {
      attached();
    } else {
      detached();
    }
  }

  unbindEvents() {
    const me = this;
    (0, _helpersSegment.B)(me._listeners, (listener, type) => {
      me.platform.removeEventListener(me, type, listener);
    });
    me._listeners = {};
    (0, _helpersSegment.B)(me._responsiveListeners, (listener, type) => {
      me.platform.removeEventListener(me, type, listener);
    });
    me._responsiveListeners = undefined;
  }

  updateHoverStyle(items, mode, enabled) {
    const prefix = enabled ? 'set' : 'remove';
    let meta, item, i, ilen;

    if (mode === 'dataset') {
      meta = this.getDatasetMeta(items[0].datasetIndex);
      meta.controller['_' + prefix + 'DatasetHoverStyle']();
    }

    for (i = 0, ilen = items.length; i < ilen; ++i) {
      item = items[i];
      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;

      if (controller) {
        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);
      }
    }
  }

  getActiveElements() {
    return this._active || [];
  }

  setActiveElements(activeElements) {
    const me = this;
    const lastActive = me._active || [];
    const active = activeElements.map(({
      datasetIndex,
      index
    }) => {
      const meta = me.getDatasetMeta(datasetIndex);

      if (!meta) {
        throw new Error('No dataset found at index ' + datasetIndex);
      }

      return {
        datasetIndex,
        element: meta.data[index],
        index
      };
    });
    const changed = !(0, _helpersSegment.ad)(active, lastActive);

    if (changed) {
      me._active = active;

      me._updateHoverStyles(active, lastActive);
    }
  }

  notifyPlugins(hook, args, filter) {
    return this._plugins.notify(this, hook, args, filter);
  }

  _updateHoverStyles(active, lastActive, replay) {
    const me = this;
    const hoverOptions = me.options.hover;

    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));

    const deactivated = diff(lastActive, active);
    const activated = replay ? active : diff(active, lastActive);

    if (deactivated.length) {
      me.updateHoverStyle(deactivated, hoverOptions.mode, false);
    }

    if (activated.length && hoverOptions.mode) {
      me.updateHoverStyle(activated, hoverOptions.mode, true);
    }
  }

  _eventHandler(e, replay) {
    const me = this;
    const args = {
      event: e,
      replay,
      cancelable: true
    };

    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.type);

    if (me.notifyPlugins('beforeEvent', args, eventFilter) === false) {
      return;
    }

    const changed = me._handleEvent(e, replay);

    args.cancelable = false;
    me.notifyPlugins('afterEvent', args, eventFilter);

    if (changed || args.changed) {
      me.render();
    }

    return me;
  }

  _handleEvent(e, replay) {
    const me = this;
    const {
      _active: lastActive = [],
      options
    } = me;
    const hoverOptions = options.hover;
    const useFinalPosition = replay;
    let active = [];
    let changed = false;
    let lastEvent = null;

    if (e.type !== 'mouseout') {
      active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
      lastEvent = e.type === 'click' ? me._lastEvent : e;
    }

    me._lastEvent = null;

    if ((0, _helpersSegment.y)(e, me.chartArea, me._minPadding)) {
      (0, _helpersSegment.M)(options.onHover, [e, active, me], me);

      if (e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu') {
        (0, _helpersSegment.M)(options.onClick, [e, active, me], me);
      }
    }

    changed = !(0, _helpersSegment.ad)(active, lastActive);

    if (changed || replay) {
      me._active = active;

      me._updateHoverStyles(active, lastActive, replay);
    }

    me._lastEvent = lastEvent;
    return changed;
  }

}

exports.Chart = Chart;

const invalidatePlugins = () => (0, _helpersSegment.B)(Chart.instances, chart => chart._plugins.invalidate());

const enumerable = true;
Object.defineProperties(Chart, {
  defaults: {
    enumerable,
    value: _helpersSegment.d
  },
  instances: {
    enumerable,
    value: instances
  },
  overrides: {
    enumerable,
    value: _helpersSegment.$
  },
  registry: {
    enumerable,
    value: registry
  },
  version: {
    enumerable,
    value: version
  },
  getChart: {
    enumerable,
    value: getChart
  },
  register: {
    enumerable,
    value: (...items) => {
      registry.add(...items);
      invalidatePlugins();
    }
  },
  unregister: {
    enumerable,
    value: (...items) => {
      registry.remove(...items);
      invalidatePlugins();
    }
  }
});

function clipArc(ctx, element, endAngle) {
  const {
    startAngle,
    pixelMargin,
    x,
    y,
    outerRadius,
    innerRadius
  } = element;
  let angleMargin = pixelMargin / outerRadius;
  ctx.beginPath();
  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);

  if (innerRadius > pixelMargin) {
    angleMargin = pixelMargin / innerRadius;
    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
  } else {
    ctx.arc(x, y, pixelMargin, endAngle + _helpersSegment.H, startAngle - _helpersSegment.H);
  }

  ctx.closePath();
  ctx.clip();
}

function toRadiusCorners(value) {
  return (0, _helpersSegment.af)(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);
}

function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
  const o = toRadiusCorners(arc.options.borderRadius);
  const halfThickness = (outerRadius - innerRadius) / 2;
  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);

  const computeOuterLimit = val => {
    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
    return (0, _helpersSegment.q)(val, 0, Math.min(halfThickness, outerArcLimit));
  };

  return {
    outerStart: computeOuterLimit(o.outerStart),
    outerEnd: computeOuterLimit(o.outerEnd),
    innerStart: (0, _helpersSegment.q)(o.innerStart, 0, innerLimit),
    innerEnd: (0, _helpersSegment.q)(o.innerEnd, 0, innerLimit)
  };
}

function rThetaToXY(r, theta, x, y) {
  return {
    x: x + r * Math.cos(theta),
    y: y + r * Math.sin(theta)
  };
}

function pathArc(ctx, element, offset, spacing, end) {
  const {
    x,
    y,
    startAngle: start,
    pixelMargin,
    innerRadius: innerR
  } = element;
  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
  let spacingOffset = 0;
  const alpha = end - start;

  if (spacing) {
    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;
    spacingOffset = (alpha - adjustedAngle) / 2;
  }

  const beta = Math.max(0.001, alpha * outerRadius - offset / _helpersSegment.P) / outerRadius;
  const angleOffset = (alpha - beta) / 2;
  const startAngle = start + angleOffset + spacingOffset;
  const endAngle = end - angleOffset - spacingOffset;
  const {
    outerStart,
    outerEnd,
    innerStart,
    innerEnd
  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
  const outerStartAdjustedRadius = outerRadius - outerStart;
  const outerEndAdjustedRadius = outerRadius - outerEnd;
  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
  const innerStartAdjustedRadius = innerRadius + innerStart;
  const innerEndAdjustedRadius = innerRadius + innerEnd;
  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
  ctx.beginPath();
  ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);

  if (outerEnd > 0) {
    const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
    ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + _helpersSegment.H);
  }

  const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
  ctx.lineTo(p4.x, p4.y);

  if (innerEnd > 0) {
    const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
    ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + _helpersSegment.H, innerEndAdjustedAngle + Math.PI);
  }

  ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, startAngle + innerStart / innerRadius, true);

  if (innerStart > 0) {
    const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
    ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - _helpersSegment.H);
  }

  const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
  ctx.lineTo(p8.x, p8.y);

  if (outerStart > 0) {
    const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
    ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - _helpersSegment.H, outerStartAdjustedAngle);
  }

  ctx.closePath();
}

function drawArc(ctx, element, offset, spacing) {
  const {
    fullCircles,
    startAngle,
    circumference
  } = element;
  let endAngle = element.endAngle;

  if (fullCircles) {
    pathArc(ctx, element, offset, spacing, startAngle + _helpersSegment.T);

    for (let i = 0; i < fullCircles; ++i) {
      ctx.fill();
    }

    if (!isNaN(circumference)) {
      endAngle = startAngle + circumference % _helpersSegment.T;

      if (circumference % _helpersSegment.T === 0) {
        endAngle += _helpersSegment.T;
      }
    }
  }

  pathArc(ctx, element, offset, spacing, endAngle);
  ctx.fill();
  return endAngle;
}

function drawFullCircleBorders(ctx, element, inner) {
  const {
    x,
    y,
    startAngle,
    pixelMargin,
    fullCircles
  } = element;
  const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);
  const innerRadius = element.innerRadius + pixelMargin;
  let i;

  if (inner) {
    clipArc(ctx, element, startAngle + _helpersSegment.T);
  }

  ctx.beginPath();
  ctx.arc(x, y, innerRadius, startAngle + _helpersSegment.T, startAngle, true);

  for (i = 0; i < fullCircles; ++i) {
    ctx.stroke();
  }

  ctx.beginPath();
  ctx.arc(x, y, outerRadius, startAngle, startAngle + _helpersSegment.T);

  for (i = 0; i < fullCircles; ++i) {
    ctx.stroke();
  }
}

function drawBorder(ctx, element, offset, spacing, endAngle) {
  const {
    options
  } = element;
  const inner = options.borderAlign === 'inner';

  if (!options.borderWidth) {
    return;
  }

  if (inner) {
    ctx.lineWidth = options.borderWidth * 2;
    ctx.lineJoin = 'round';
  } else {
    ctx.lineWidth = options.borderWidth;
    ctx.lineJoin = 'bevel';
  }

  if (element.fullCircles) {
    drawFullCircleBorders(ctx, element, inner);
  }

  if (inner) {
    clipArc(ctx, element, endAngle);
  }

  pathArc(ctx, element, offset, spacing, endAngle);
  ctx.stroke();
}

class ArcElement extends Element {
  constructor(cfg) {
    super();
    this.options = undefined;
    this.circumference = undefined;
    this.startAngle = undefined;
    this.endAngle = undefined;
    this.innerRadius = undefined;
    this.outerRadius = undefined;
    this.pixelMargin = 0;
    this.fullCircles = 0;

    if (cfg) {
      Object.assign(this, cfg);
    }
  }

  inRange(chartX, chartY, useFinalPosition) {
    const point = this.getProps(['x', 'y'], useFinalPosition);
    const {
      angle,
      distance
    } = (0, _helpersSegment.ae)(point, {
      x: chartX,
      y: chartY
    });
    const {
      startAngle,
      endAngle,
      innerRadius,
      outerRadius,
      circumference
    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);
    const rAdjust = this.options.spacing / 2;
    const betweenAngles = circumference >= _helpersSegment.T || (0, _helpersSegment.o)(angle, startAngle, endAngle);
    const withinRadius = distance >= innerRadius + rAdjust && distance <= outerRadius + rAdjust;
    return betweenAngles && withinRadius;
  }

  getCenterPoint(useFinalPosition) {
    const {
      x,
      y,
      startAngle,
      endAngle,
      innerRadius,
      outerRadius
    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);
    const {
      offset,
      spacing
    } = this.options;
    const halfAngle = (startAngle + endAngle) / 2;
    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
    return {
      x: x + Math.cos(halfAngle) * halfRadius,
      y: y + Math.sin(halfAngle) * halfRadius
    };
  }

  tooltipPosition(useFinalPosition) {
    return this.getCenterPoint(useFinalPosition);
  }

  draw(ctx) {
    const me = this;
    const {
      options,
      circumference
    } = me;
    const offset = (options.offset || 0) / 2;
    const spacing = (options.spacing || 0) / 2;
    me.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;
    me.fullCircles = circumference > _helpersSegment.T ? Math.floor(circumference / _helpersSegment.T) : 0;

    if (circumference === 0 || me.innerRadius < 0 || me.outerRadius < 0) {
      return;
    }

    ctx.save();
    let radiusOffset = 0;

    if (offset) {
      radiusOffset = offset / 2;
      const halfAngle = (me.startAngle + me.endAngle) / 2;
      ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);

      if (me.circumference >= _helpersSegment.P) {
        radiusOffset = offset;
      }
    }

    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    const endAngle = drawArc(ctx, me, radiusOffset, spacing);
    drawBorder(ctx, me, radiusOffset, spacing, endAngle);
    ctx.restore();
  }

}

exports.ArcElement = ArcElement;
ArcElement.id = 'arc';
ArcElement.defaults = {
  borderAlign: 'center',
  borderColor: '#fff',
  borderRadius: 0,
  borderWidth: 2,
  offset: 0,
  spacing: 0,
  angle: undefined
};
ArcElement.defaultRoutes = {
  backgroundColor: 'backgroundColor'
};

function setStyle(ctx, options, style = options) {
  ctx.lineCap = (0, _helpersSegment.v)(style.borderCapStyle, options.borderCapStyle);
  ctx.setLineDash((0, _helpersSegment.v)(style.borderDash, options.borderDash));
  ctx.lineDashOffset = (0, _helpersSegment.v)(style.borderDashOffset, options.borderDashOffset);
  ctx.lineJoin = (0, _helpersSegment.v)(style.borderJoinStyle, options.borderJoinStyle);
  ctx.lineWidth = (0, _helpersSegment.v)(style.borderWidth, options.borderWidth);
  ctx.strokeStyle = (0, _helpersSegment.v)(style.borderColor, options.borderColor);
}

function lineTo(ctx, previous, target) {
  ctx.lineTo(target.x, target.y);
}

function getLineMethod(options) {
  if (options.stepped) {
    return _helpersSegment.am;
  }

  if (options.tension || options.cubicInterpolationMode === 'monotone') {
    return _helpersSegment.an;
  }

  return lineTo;
}

function pathVars(points, segment, params = {}) {
  const count = points.length;
  const {
    start: paramsStart = 0,
    end: paramsEnd = count - 1
  } = params;
  const {
    start: segmentStart,
    end: segmentEnd
  } = segment;
  const start = Math.max(paramsStart, segmentStart);
  const end = Math.min(paramsEnd, segmentEnd);
  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
  return {
    count,
    start,
    loop: segment.loop,
    ilen: end < start && !outside ? count + end - start : end - start
  };
}

function pathSegment(ctx, line, segment, params) {
  const {
    points,
    options
  } = line;
  const {
    count,
    start,
    loop,
    ilen
  } = pathVars(points, segment, params);
  const lineMethod = getLineMethod(options);
  let {
    move = true,
    reverse
  } = params || {};
  let i, point, prev;

  for (i = 0; i <= ilen; ++i) {
    point = points[(start + (reverse ? ilen - i : i)) % count];

    if (point.skip) {
      continue;
    } else if (move) {
      ctx.moveTo(point.x, point.y);
      move = false;
    } else {
      lineMethod(ctx, prev, point, reverse, options.stepped);
    }

    prev = point;
  }

  if (loop) {
    point = points[(start + (reverse ? ilen : 0)) % count];
    lineMethod(ctx, prev, point, reverse, options.stepped);
  }

  return !!loop;
}

function fastPathSegment(ctx, line, segment, params) {
  const points = line.points;
  const {
    count,
    start,
    ilen
  } = pathVars(points, segment, params);
  const {
    move = true,
    reverse
  } = params || {};
  let avgX = 0;
  let countX = 0;
  let i, point, prevX, minY, maxY, lastY;

  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;

  const drawX = () => {
    if (minY !== maxY) {
      ctx.lineTo(avgX, maxY);
      ctx.lineTo(avgX, minY);
      ctx.lineTo(avgX, lastY);
    }
  };

  if (move) {
    point = points[pointIndex(0)];
    ctx.moveTo(point.x, point.y);
  }

  for (i = 0; i <= ilen; ++i) {
    point = points[pointIndex(i)];

    if (point.skip) {
      continue;
    }

    const x = point.x;
    const y = point.y;
    const truncX = x | 0;

    if (truncX === prevX) {
      if (y < minY) {
        minY = y;
      } else if (y > maxY) {
        maxY = y;
      }

      avgX = (countX * avgX + x) / ++countX;
    } else {
      drawX();
      ctx.lineTo(x, y);
      prevX = truncX;
      countX = 0;
      minY = maxY = y;
    }

    lastY = y;
  }

  drawX();
}

function _getSegmentMethod(line) {
  const opts = line.options;
  const borderDash = opts.borderDash && opts.borderDash.length;
  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;
  return useFastPath ? fastPathSegment : pathSegment;
}

function _getInterpolationMethod(options) {
  if (options.stepped) {
    return _helpersSegment.aj;
  }

  if (options.tension || options.cubicInterpolationMode === 'monotone') {
    return _helpersSegment.ak;
  }

  return _helpersSegment.al;
}

function strokePathWithCache(ctx, line, start, count) {
  let path = line._path;

  if (!path) {
    path = line._path = new Path2D();

    if (line.path(path, start, count)) {
      path.closePath();
    }
  }

  setStyle(ctx, line.options);
  ctx.stroke(path);
}

function strokePathDirect(ctx, line, start, count) {
  const {
    segments,
    options
  } = line;

  const segmentMethod = _getSegmentMethod(line);

  for (const segment of segments) {
    setStyle(ctx, options, segment.style);
    ctx.beginPath();

    if (segmentMethod(ctx, line, segment, {
      start,
      end: start + count - 1
    })) {
      ctx.closePath();
    }

    ctx.stroke();
  }
}

const usePath2D = typeof Path2D === 'function';

function draw(ctx, line, start, count) {
  if (usePath2D && line.segments.length === 1) {
    strokePathWithCache(ctx, line, start, count);
  } else {
    strokePathDirect(ctx, line, start, count);
  }
}

class LineElement extends Element {
  constructor(cfg) {
    super();
    this.animated = true;
    this.options = undefined;
    this._loop = undefined;
    this._fullLoop = undefined;
    this._path = undefined;
    this._points = undefined;
    this._segments = undefined;
    this._decimated = false;
    this._pointsUpdated = false;
    this._datasetIndex = undefined;

    if (cfg) {
      Object.assign(this, cfg);
    }
  }

  updateControlPoints(chartArea, indexAxis) {
    const me = this;
    const options = me.options;

    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !me._pointsUpdated) {
      const loop = options.spanGaps ? me._loop : me._fullLoop;
      (0, _helpersSegment.ag)(me._points, options, chartArea, loop, indexAxis);
      me._pointsUpdated = true;
    }
  }

  set points(points) {
    const me = this;
    me._points = points;
    delete me._segments;
    delete me._path;
    me._pointsUpdated = false;
  }

  get points() {
    return this._points;
  }

  get segments() {
    return this._segments || (this._segments = (0, _helpersSegment.ah)(this, this.options.segment));
  }

  first() {
    const segments = this.segments;
    const points = this.points;
    return segments.length && points[segments[0].start];
  }

  last() {
    const segments = this.segments;
    const points = this.points;
    const count = segments.length;
    return count && points[segments[count - 1].end];
  }

  interpolate(point, property) {
    const me = this;
    const options = me.options;
    const value = point[property];
    const points = me.points;
    const segments = (0, _helpersSegment.ai)(me, {
      property,
      start: value,
      end: value
    });

    if (!segments.length) {
      return;
    }

    const result = [];

    const _interpolate = _getInterpolationMethod(options);

    let i, ilen;

    for (i = 0, ilen = segments.length; i < ilen; ++i) {
      const {
        start,
        end
      } = segments[i];
      const p1 = points[start];
      const p2 = points[end];

      if (p1 === p2) {
        result.push(p1);
        continue;
      }

      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));

      const interpolated = _interpolate(p1, p2, t, options.stepped);

      interpolated[property] = point[property];
      result.push(interpolated);
    }

    return result.length === 1 ? result[0] : result;
  }

  pathSegment(ctx, segment, params) {
    const segmentMethod = _getSegmentMethod(this);

    return segmentMethod(ctx, this, segment, params);
  }

  path(ctx, start, count) {
    const me = this;
    const segments = me.segments;

    const segmentMethod = _getSegmentMethod(me);

    let loop = me._loop;
    start = start || 0;
    count = count || me.points.length - start;

    for (const segment of segments) {
      loop &= segmentMethod(ctx, me, segment, {
        start,
        end: start + count - 1
      });
    }

    return !!loop;
  }

  draw(ctx, chartArea, start, count) {
    const me = this;
    const options = me.options || {};
    const points = me.points || [];

    if (!points.length || !options.borderWidth) {
      return;
    }

    ctx.save();
    draw(ctx, me, start, count);
    ctx.restore();

    if (me.animated) {
      me._pointsUpdated = false;
      me._path = undefined;
    }
  }

}

exports.LineElement = LineElement;
LineElement.id = 'line';
LineElement.defaults = {
  borderCapStyle: 'butt',
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: 'miter',
  borderWidth: 3,
  capBezierPoints: true,
  cubicInterpolationMode: 'default',
  fill: false,
  spanGaps: false,
  stepped: false,
  tension: 0
};
LineElement.defaultRoutes = {
  backgroundColor: 'backgroundColor',
  borderColor: 'borderColor'
};
LineElement.descriptors = {
  _scriptable: true,
  _indexable: name => name !== 'borderDash' && name !== 'fill'
};

function inRange$1(el, pos, axis, useFinalPosition) {
  const options = el.options;
  const {
    [axis]: value
  } = el.getProps([axis], useFinalPosition);
  return Math.abs(pos - value) < options.radius + options.hitRadius;
}

class PointElement extends Element {
  constructor(cfg) {
    super();
    this.options = undefined;
    this.parsed = undefined;
    this.skip = undefined;
    this.stop = undefined;

    if (cfg) {
      Object.assign(this, cfg);
    }
  }

  inRange(mouseX, mouseY, useFinalPosition) {
    const options = this.options;
    const {
      x,
      y
    } = this.getProps(['x', 'y'], useFinalPosition);
    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
  }

  inXRange(mouseX, useFinalPosition) {
    return inRange$1(this, mouseX, 'x', useFinalPosition);
  }

  inYRange(mouseY, useFinalPosition) {
    return inRange$1(this, mouseY, 'y', useFinalPosition);
  }

  getCenterPoint(useFinalPosition) {
    const {
      x,
      y
    } = this.getProps(['x', 'y'], useFinalPosition);
    return {
      x,
      y
    };
  }

  size(options) {
    options = options || this.options || {};
    let radius = options.radius || 0;
    radius = Math.max(radius, radius && options.hoverRadius || 0);
    const borderWidth = radius && options.borderWidth || 0;
    return (radius + borderWidth) * 2;
  }

  draw(ctx, area) {
    const me = this;
    const options = me.options;

    if (me.skip || options.radius < 0.1 || !(0, _helpersSegment.y)(me, area, me.size(options) / 2)) {
      return;
    }

    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.fillStyle = options.backgroundColor;
    (0, _helpersSegment.ao)(ctx, options, me.x, me.y);
  }

  getRange() {
    const options = this.options || {};
    return options.radius + options.hitRadius;
  }

}

exports.PointElement = PointElement;
PointElement.id = 'point';
PointElement.defaults = {
  borderWidth: 1,
  hitRadius: 1,
  hoverBorderWidth: 1,
  hoverRadius: 4,
  pointStyle: 'circle',
  radius: 3,
  rotation: 0
};
PointElement.defaultRoutes = {
  backgroundColor: 'backgroundColor',
  borderColor: 'borderColor'
};

function getBarBounds(bar, useFinalPosition) {
  const {
    x,
    y,
    base,
    width,
    height
  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);
  let left, right, top, bottom, half;

  if (bar.horizontal) {
    half = height / 2;
    left = Math.min(x, base);
    right = Math.max(x, base);
    top = y - half;
    bottom = y + half;
  } else {
    half = width / 2;
    left = x - half;
    right = x + half;
    top = Math.min(y, base);
    bottom = Math.max(y, base);
  }

  return {
    left,
    top,
    right,
    bottom
  };
}

function skipOrLimit(skip, value, min, max) {
  return skip ? 0 : (0, _helpersSegment.q)(value, min, max);
}

function parseBorderWidth(bar, maxW, maxH) {
  const value = bar.options.borderWidth;
  const skip = bar.borderSkipped;
  const o = (0, _helpersSegment.aq)(value);
  return {
    t: skipOrLimit(skip.top, o.top, 0, maxH),
    r: skipOrLimit(skip.right, o.right, 0, maxW),
    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
    l: skipOrLimit(skip.left, o.left, 0, maxW)
  };
}

function parseBorderRadius(bar, maxW, maxH) {
  const {
    enableBorderRadius
  } = bar.getProps(['enableBorderRadius']);
  const value = bar.options.borderRadius;
  const o = (0, _helpersSegment.ar)(value);
  const maxR = Math.min(maxW, maxH);
  const skip = bar.borderSkipped;
  const enableBorder = enableBorderRadius || (0, _helpersSegment.i)(value);
  return {
    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
  };
}

function boundingRects(bar) {
  const bounds = getBarBounds(bar);
  const width = bounds.right - bounds.left;
  const height = bounds.bottom - bounds.top;
  const border = parseBorderWidth(bar, width / 2, height / 2);
  const radius = parseBorderRadius(bar, width / 2, height / 2);
  return {
    outer: {
      x: bounds.left,
      y: bounds.top,
      w: width,
      h: height,
      radius
    },
    inner: {
      x: bounds.left + border.l,
      y: bounds.top + border.t,
      w: width - border.l - border.r,
      h: height - border.t - border.b,
      radius: {
        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
      }
    }
  };
}

function inRange(bar, x, y, useFinalPosition) {
  const skipX = x === null;
  const skipY = y === null;
  const skipBoth = skipX && skipY;
  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
  return bounds && (skipX || x >= bounds.left && x <= bounds.right) && (skipY || y >= bounds.top && y <= bounds.bottom);
}

function hasRadius(radius) {
  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}

function addNormalRectPath(ctx, rect) {
  ctx.rect(rect.x, rect.y, rect.w, rect.h);
}

function inflateRect(rect, amount, refRect = {}) {
  const x = rect.x !== refRect.x ? -amount : 0;
  const y = rect.y !== refRect.y ? -amount : 0;
  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
  return {
    x: rect.x + x,
    y: rect.y + y,
    w: rect.w + w,
    h: rect.h + h,
    radius: rect.radius
  };
}

class BarElement extends Element {
  constructor(cfg) {
    super();
    this.options = undefined;
    this.horizontal = undefined;
    this.base = undefined;
    this.width = undefined;
    this.height = undefined;

    if (cfg) {
      Object.assign(this, cfg);
    }
  }

  draw(ctx) {
    const options = this.options;
    const {
      inner,
      outer
    } = boundingRects(this);
    const addRectPath = hasRadius(outer.radius) ? _helpersSegment.ap : addNormalRectPath;
    const inflateAmount = 0.33;
    ctx.save();

    if (outer.w !== inner.w || outer.h !== inner.h) {
      ctx.beginPath();
      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
      ctx.clip();
      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
      ctx.fillStyle = options.borderColor;
      ctx.fill('evenodd');
    }

    ctx.beginPath();
    addRectPath(ctx, inflateRect(inner, inflateAmount, outer));
    ctx.fillStyle = options.backgroundColor;
    ctx.fill();
    ctx.restore();
  }

  inRange(mouseX, mouseY, useFinalPosition) {
    return inRange(this, mouseX, mouseY, useFinalPosition);
  }

  inXRange(mouseX, useFinalPosition) {
    return inRange(this, mouseX, null, useFinalPosition);
  }

  inYRange(mouseY, useFinalPosition) {
    return inRange(this, null, mouseY, useFinalPosition);
  }

  getCenterPoint(useFinalPosition) {
    const {
      x,
      y,
      base,
      horizontal
    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);
    return {
      x: horizontal ? (x + base) / 2 : x,
      y: horizontal ? y : (y + base) / 2
    };
  }

  getRange(axis) {
    return axis === 'x' ? this.width / 2 : this.height / 2;
  }

}

exports.BarElement = BarElement;
BarElement.id = 'bar';
BarElement.defaults = {
  borderSkipped: 'start',
  borderWidth: 0,
  borderRadius: 0,
  enableBorderRadius: true,
  pointStyle: undefined
};
BarElement.defaultRoutes = {
  backgroundColor: 'backgroundColor',
  borderColor: 'borderColor'
};
var elements = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ArcElement: ArcElement,
  LineElement: LineElement,
  PointElement: PointElement,
  BarElement: BarElement
});
exports.elements = elements;

function lttbDecimation(data, start, count, availableWidth, options) {
  const samples = options.samples || availableWidth;

  if (samples >= count) {
    return data.slice(start, start + count);
  }

  const decimated = [];
  const bucketWidth = (count - 2) / (samples - 2);
  let sampledIndex = 0;
  const endIndex = start + count - 1;
  let a = start;
  let i, maxAreaPoint, maxArea, area, nextA;
  decimated[sampledIndex++] = data[a];

  for (i = 0; i < samples - 2; i++) {
    let avgX = 0;
    let avgY = 0;
    let j;
    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
    const avgRangeLength = avgRangeEnd - avgRangeStart;

    for (j = avgRangeStart; j < avgRangeEnd; j++) {
      avgX += data[j].x;
      avgY += data[j].y;
    }

    avgX /= avgRangeLength;
    avgY /= avgRangeLength;
    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
    const {
      x: pointAx,
      y: pointAy
    } = data[a];
    maxArea = area = -1;

    for (j = rangeOffs; j < rangeTo; j++) {
      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));

      if (area > maxArea) {
        maxArea = area;
        maxAreaPoint = data[j];
        nextA = j;
      }
    }

    decimated[sampledIndex++] = maxAreaPoint;
    a = nextA;
  }

  decimated[sampledIndex++] = data[endIndex];
  return decimated;
}

function minMaxDecimation(data, start, count, availableWidth) {
  let avgX = 0;
  let countX = 0;
  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
  const decimated = [];
  const endIndex = start + count - 1;
  const xMin = data[start].x;
  const xMax = data[endIndex].x;
  const dx = xMax - xMin;

  for (i = start; i < start + count; ++i) {
    point = data[i];
    x = (point.x - xMin) / dx * availableWidth;
    y = point.y;
    const truncX = x | 0;

    if (truncX === prevX) {
      if (y < minY) {
        minY = y;
        minIndex = i;
      } else if (y > maxY) {
        maxY = y;
        maxIndex = i;
      }

      avgX = (countX * avgX + point.x) / ++countX;
    } else {
      const lastIndex = i - 1;

      if (!(0, _helpersSegment.j)(minIndex) && !(0, _helpersSegment.j)(maxIndex)) {
        const intermediateIndex1 = Math.min(minIndex, maxIndex);
        const intermediateIndex2 = Math.max(minIndex, maxIndex);

        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {
          decimated.push({ ...data[intermediateIndex1],
            x: avgX
          });
        }

        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {
          decimated.push({ ...data[intermediateIndex2],
            x: avgX
          });
        }
      }

      if (i > 0 && lastIndex !== startIndex) {
        decimated.push(data[lastIndex]);
      }

      decimated.push(point);
      prevX = truncX;
      countX = 0;
      minY = maxY = y;
      minIndex = maxIndex = startIndex = i;
    }
  }

  return decimated;
}

function cleanDecimatedDataset(dataset) {
  if (dataset._decimated) {
    const data = dataset._data;
    delete dataset._decimated;
    delete dataset._data;
    Object.defineProperty(dataset, 'data', {
      value: data
    });
  }
}

function cleanDecimatedData(chart) {
  chart.data.datasets.forEach(dataset => {
    cleanDecimatedDataset(dataset);
  });
}

function getStartAndCountOfVisiblePointsSimplified(meta, points) {
  const pointCount = points.length;
  let start = 0;
  let count;
  const {
    iScale
  } = meta;
  const {
    min,
    max,
    minDefined,
    maxDefined
  } = iScale.getUserBounds();

  if (minDefined) {
    start = (0, _helpersSegment.q)((0, _helpersSegment.w)(points, iScale.axis, min).lo, 0, pointCount - 1);
  }

  if (maxDefined) {
    count = (0, _helpersSegment.q)((0, _helpersSegment.w)(points, iScale.axis, max).hi + 1, start, pointCount) - start;
  } else {
    count = pointCount - start;
  }

  return {
    start,
    count
  };
}

var plugin_decimation = {
  id: 'decimation',
  defaults: {
    algorithm: 'min-max',
    enabled: false
  },
  beforeElementsUpdate: (chart, args, options) => {
    if (!options.enabled) {
      cleanDecimatedData(chart);
      return;
    }

    const availableWidth = chart.width;
    chart.data.datasets.forEach((dataset, datasetIndex) => {
      const {
        _data,
        indexAxis
      } = dataset;
      const meta = chart.getDatasetMeta(datasetIndex);
      const data = _data || dataset.data;

      if ((0, _helpersSegment.a)([indexAxis, chart.options.indexAxis]) === 'y') {
        return;
      }

      if (meta.type !== 'line') {
        return;
      }

      const xAxis = chart.scales[meta.xAxisID];

      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {
        return;
      }

      if (chart.options.parsing) {
        return;
      }

      let {
        start,
        count
      } = getStartAndCountOfVisiblePointsSimplified(meta, data);
      const threshold = options.threshold || 4 * availableWidth;

      if (count <= threshold) {
        cleanDecimatedDataset(dataset);
        return;
      }

      if ((0, _helpersSegment.j)(_data)) {
        dataset._data = data;
        delete dataset.data;
        Object.defineProperty(dataset, 'data', {
          configurable: true,
          enumerable: true,
          get: function () {
            return this._decimated;
          },
          set: function (d) {
            this._data = d;
          }
        });
      }

      let decimated;

      switch (options.algorithm) {
        case 'lttb':
          decimated = lttbDecimation(data, start, count, availableWidth, options);
          break;

        case 'min-max':
          decimated = minMaxDecimation(data, start, count, availableWidth);
          break;

        default:
          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
      }

      dataset._decimated = decimated;
    });
  },

  destroy(chart) {
    cleanDecimatedData(chart);
  }

};
exports.Decimation = plugin_decimation;

function getLineByIndex(chart, index) {
  const meta = chart.getDatasetMeta(index);
  const visible = meta && chart.isDatasetVisible(index);
  return visible ? meta.dataset : null;
}

function parseFillOption(line) {
  const options = line.options;
  const fillOption = options.fill;
  let fill = (0, _helpersSegment.v)(fillOption && fillOption.target, fillOption);

  if (fill === undefined) {
    fill = !!options.backgroundColor;
  }

  if (fill === false || fill === null) {
    return false;
  }

  if (fill === true) {
    return 'origin';
  }

  return fill;
}

function decodeFill(line, index, count) {
  const fill = parseFillOption(line);

  if ((0, _helpersSegment.i)(fill)) {
    return isNaN(fill.value) ? false : fill;
  }

  let target = parseFloat(fill);

  if ((0, _helpersSegment.g)(target) && Math.floor(target) === target) {
    if (fill[0] === '-' || fill[0] === '+') {
      target = index + target;
    }

    if (target === index || target < 0 || target >= count) {
      return false;
    }

    return target;
  }

  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;
}

function computeLinearBoundary(source) {
  const {
    scale = {},
    fill
  } = source;
  let target = null;
  let horizontal;

  if (fill === 'start') {
    target = scale.bottom;
  } else if (fill === 'end') {
    target = scale.top;
  } else if ((0, _helpersSegment.i)(fill)) {
    target = scale.getPixelForValue(fill.value);
  } else if (scale.getBasePixel) {
    target = scale.getBasePixel();
  }

  if ((0, _helpersSegment.g)(target)) {
    horizontal = scale.isHorizontal();
    return {
      x: horizontal ? target : null,
      y: horizontal ? null : target
    };
  }

  return null;
}

class simpleArc {
  constructor(opts) {
    this.x = opts.x;
    this.y = opts.y;
    this.radius = opts.radius;
  }

  pathSegment(ctx, bounds, opts) {
    const {
      x,
      y,
      radius
    } = this;
    bounds = bounds || {
      start: 0,
      end: _helpersSegment.T
    };
    ctx.arc(x, y, radius, bounds.end, bounds.start, true);
    return !opts.bounds;
  }

  interpolate(point) {
    const {
      x,
      y,
      radius
    } = this;
    const angle = point.angle;
    return {
      x: x + Math.cos(angle) * radius,
      y: y + Math.sin(angle) * radius,
      angle
    };
  }

}

function computeCircularBoundary(source) {
  const {
    scale,
    fill
  } = source;
  const options = scale.options;
  const length = scale.getLabels().length;
  const target = [];
  const start = options.reverse ? scale.max : scale.min;
  const end = options.reverse ? scale.min : scale.max;
  let i, center, value;

  if (fill === 'start') {
    value = start;
  } else if (fill === 'end') {
    value = end;
  } else if ((0, _helpersSegment.i)(fill)) {
    value = fill.value;
  } else {
    value = scale.getBaseValue();
  }

  if (options.grid.circular) {
    center = scale.getPointPositionForValue(0, start);
    return new simpleArc({
      x: center.x,
      y: center.y,
      radius: scale.getDistanceFromCenterForValue(value)
    });
  }

  for (i = 0; i < length; ++i) {
    target.push(scale.getPointPositionForValue(i, value));
  }

  return target;
}

function computeBoundary(source) {
  const scale = source.scale || {};

  if (scale.getPointPositionForValue) {
    return computeCircularBoundary(source);
  }

  return computeLinearBoundary(source);
}

function findSegmentEnd(start, end, points) {
  for (; end > start; end--) {
    const point = points[end];

    if (!isNaN(point.x) && !isNaN(point.y)) {
      break;
    }
  }

  return end;
}

function pointsFromSegments(boundary, line) {
  const {
    x = null,
    y = null
  } = boundary || {};
  const linePoints = line.points;
  const points = [];
  line.segments.forEach(({
    start,
    end
  }) => {
    end = findSegmentEnd(start, end, linePoints);
    const first = linePoints[start];
    const last = linePoints[end];

    if (y !== null) {
      points.push({
        x: first.x,
        y
      });
      points.push({
        x: last.x,
        y
      });
    } else if (x !== null) {
      points.push({
        x,
        y: first.y
      });
      points.push({
        x,
        y: last.y
      });
    }
  });
  return points;
}

function buildStackLine(source) {
  const {
    chart,
    scale,
    index,
    line
  } = source;
  const points = [];
  const segments = line.segments;
  const sourcePoints = line.points;
  const linesBelow = getLinesBelow(chart, index);
  linesBelow.push(createBoundaryLine({
    x: null,
    y: scale.bottom
  }, line));

  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];

    for (let j = segment.start; j <= segment.end; j++) {
      addPointsBelow(points, sourcePoints[j], linesBelow);
    }
  }

  return new LineElement({
    points,
    options: {}
  });
}

const isLineAndNotInHideAnimation = meta => meta.type === 'line' && !meta.hidden;

function getLinesBelow(chart, index) {
  const below = [];
  const metas = chart.getSortedVisibleDatasetMetas();

  for (let i = 0; i < metas.length; i++) {
    const meta = metas[i];

    if (meta.index === index) {
      break;
    }

    if (isLineAndNotInHideAnimation(meta)) {
      below.unshift(meta.dataset);
    }
  }

  return below;
}

function addPointsBelow(points, sourcePoint, linesBelow) {
  const postponed = [];

  for (let j = 0; j < linesBelow.length; j++) {
    const line = linesBelow[j];
    const {
      first,
      last,
      point
    } = findPoint(line, sourcePoint, 'x');

    if (!point || first && last) {
      continue;
    }

    if (first) {
      postponed.unshift(point);
    } else {
      points.push(point);

      if (!last) {
        break;
      }
    }
  }

  points.push(...postponed);
}

function findPoint(line, sourcePoint, property) {
  const point = line.interpolate(sourcePoint, property);

  if (!point) {
    return {};
  }

  const pointValue = point[property];
  const segments = line.segments;
  const linePoints = line.points;
  let first = false;
  let last = false;

  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    const firstValue = linePoints[segment.start][property];
    const lastValue = linePoints[segment.end][property];

    if (pointValue >= firstValue && pointValue <= lastValue) {
      first = pointValue === firstValue;
      last = pointValue === lastValue;
      break;
    }
  }

  return {
    first,
    last,
    point
  };
}

function getTarget(source) {
  const {
    chart,
    fill,
    line
  } = source;

  if ((0, _helpersSegment.g)(fill)) {
    return getLineByIndex(chart, fill);
  }

  if (fill === 'stack') {
    return buildStackLine(source);
  }

  if (fill === 'shape') {
    return true;
  }

  const boundary = computeBoundary(source);

  if (boundary instanceof simpleArc) {
    return boundary;
  }

  return createBoundaryLine(boundary, line);
}

function createBoundaryLine(boundary, line) {
  let points = [];
  let _loop = false;

  if ((0, _helpersSegment.b)(boundary)) {
    _loop = true;
    points = boundary;
  } else {
    points = pointsFromSegments(boundary, line);
  }

  return points.length ? new LineElement({
    points,
    options: {
      tension: 0
    },
    _loop,
    _fullLoop: _loop
  }) : null;
}

function resolveTarget(sources, index, propagate) {
  const source = sources[index];
  let fill = source.fill;
  const visited = [index];
  let target;

  if (!propagate) {
    return fill;
  }

  while (fill !== false && visited.indexOf(fill) === -1) {
    if (!(0, _helpersSegment.g)(fill)) {
      return fill;
    }

    target = sources[fill];

    if (!target) {
      return false;
    }

    if (target.visible) {
      return fill;
    }

    visited.push(fill);
    fill = target.fill;
  }

  return false;
}

function _clip(ctx, target, clipY) {
  ctx.beginPath();
  target.path(ctx);
  ctx.lineTo(target.last().x, clipY);
  ctx.lineTo(target.first().x, clipY);
  ctx.closePath();
  ctx.clip();
}

function getBounds(property, first, last, loop) {
  if (loop) {
    return;
  }

  let start = first[property];
  let end = last[property];

  if (property === 'angle') {
    start = (0, _helpersSegment.at)(start);
    end = (0, _helpersSegment.at)(end);
  }

  return {
    property,
    start,
    end
  };
}

function _getEdge(a, b, prop, fn) {
  if (a && b) {
    return fn(a[prop], b[prop]);
  }

  return a ? a[prop] : b ? b[prop] : 0;
}

function _segments(line, target, property) {
  const segments = line.segments;
  const points = line.points;
  const tpoints = target.points;
  const parts = [];

  for (const segment of segments) {
    let {
      start,
      end
    } = segment;
    end = findSegmentEnd(start, end, points);
    const bounds = getBounds(property, points[start], points[end], segment.loop);

    if (!target.segments) {
      parts.push({
        source: segment,
        target: bounds,
        start: points[start],
        end: points[end]
      });
      continue;
    }

    const targetSegments = (0, _helpersSegment.ai)(target, bounds);

    for (const tgt of targetSegments) {
      const subBounds = getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
      const fillSources = (0, _helpersSegment.as)(segment, points, subBounds);

      for (const fillSource of fillSources) {
        parts.push({
          source: fillSource,
          target: tgt,
          start: {
            [property]: _getEdge(bounds, subBounds, 'start', Math.max)
          },
          end: {
            [property]: _getEdge(bounds, subBounds, 'end', Math.min)
          }
        });
      }
    }
  }

  return parts;
}

function clipBounds(ctx, scale, bounds) {
  const {
    top,
    bottom
  } = scale.chart.chartArea;
  const {
    property,
    start,
    end
  } = bounds || {};

  if (property === 'x') {
    ctx.beginPath();
    ctx.rect(start, top, end - start, bottom - top);
    ctx.clip();
  }
}

function interpolatedLineTo(ctx, target, point, property) {
  const interpolatedPoint = target.interpolate(point, property);

  if (interpolatedPoint) {
    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
  }
}

function _fill(ctx, cfg) {
  const {
    line,
    target,
    property,
    color,
    scale
  } = cfg;

  const segments = _segments(line, target, property);

  for (const {
    source: src,
    target: tgt,
    start,
    end
  } of segments) {
    const {
      style: {
        backgroundColor = color
      } = {}
    } = src;
    const notShape = target !== true;
    ctx.save();
    ctx.fillStyle = backgroundColor;
    clipBounds(ctx, scale, notShape && getBounds(property, start, end));
    ctx.beginPath();
    const lineLoop = !!line.pathSegment(ctx, src);
    let loop;

    if (notShape) {
      if (lineLoop) {
        ctx.closePath();
      } else {
        interpolatedLineTo(ctx, target, end, property);
      }

      const targetLoop = !!target.pathSegment(ctx, tgt, {
        move: lineLoop,
        reverse: true
      });
      loop = lineLoop && targetLoop;

      if (!loop) {
        interpolatedLineTo(ctx, target, start, property);
      }
    }

    ctx.closePath();
    ctx.fill(loop ? 'evenodd' : 'nonzero');
    ctx.restore();
  }
}

function doFill(ctx, cfg) {
  const {
    line,
    target,
    above,
    below,
    area,
    scale
  } = cfg;
  const property = line._loop ? 'angle' : cfg.axis;
  ctx.save();

  if (property === 'x' && below !== above) {
    _clip(ctx, target, area.top);

    _fill(ctx, {
      line,
      target,
      color: above,
      scale,
      property
    });

    ctx.restore();
    ctx.save();

    _clip(ctx, target, area.bottom);
  }

  _fill(ctx, {
    line,
    target,
    color: below,
    scale,
    property
  });

  ctx.restore();
}

function drawfill(ctx, source, area) {
  const target = getTarget(source);
  const {
    line,
    scale,
    axis
  } = source;
  const lineOpts = line.options;
  const fillOption = lineOpts.fill;
  const color = lineOpts.backgroundColor;
  const {
    above = color,
    below = color
  } = fillOption || {};

  if (target && line.points.length) {
    (0, _helpersSegment.U)(ctx, area);
    doFill(ctx, {
      line,
      target,
      above,
      below,
      area,
      scale,
      axis
    });
    (0, _helpersSegment.W)(ctx);
  }
}

var plugin_filler = {
  id: 'filler',

  afterDatasetsUpdate(chart, _args, options) {
    const count = (chart.data.datasets || []).length;
    const sources = [];
    let meta, i, line, source;

    for (i = 0; i < count; ++i) {
      meta = chart.getDatasetMeta(i);
      line = meta.dataset;
      source = null;

      if (line && line.options && line instanceof LineElement) {
        source = {
          visible: chart.isDatasetVisible(i),
          index: i,
          fill: decodeFill(line, i, count),
          chart,
          axis: meta.controller.options.indexAxis,
          scale: meta.vScale,
          line
        };
      }

      meta.$filler = source;
      sources.push(source);
    }

    for (i = 0; i < count; ++i) {
      source = sources[i];

      if (!source || source.fill === false) {
        continue;
      }

      source.fill = resolveTarget(sources, i, options.propagate);
    }
  },

  beforeDraw(chart, _args, options) {
    const draw = options.drawTime === 'beforeDraw';
    const metasets = chart.getSortedVisibleDatasetMetas();
    const area = chart.chartArea;

    for (let i = metasets.length - 1; i >= 0; --i) {
      const source = metasets[i].$filler;

      if (!source) {
        continue;
      }

      source.line.updateControlPoints(area, source.axis);

      if (draw) {
        drawfill(chart.ctx, source, area);
      }
    }
  },

  beforeDatasetsDraw(chart, _args, options) {
    if (options.drawTime !== 'beforeDatasetsDraw') {
      return;
    }

    const metasets = chart.getSortedVisibleDatasetMetas();

    for (let i = metasets.length - 1; i >= 0; --i) {
      const source = metasets[i].$filler;

      if (source) {
        drawfill(chart.ctx, source, chart.chartArea);
      }
    }
  },

  beforeDatasetDraw(chart, args, options) {
    const source = args.meta.$filler;

    if (!source || source.fill === false || options.drawTime !== 'beforeDatasetDraw') {
      return;
    }

    drawfill(chart.ctx, source, chart.chartArea);
  },

  defaults: {
    propagate: true,
    drawTime: 'beforeDatasetDraw'
  }
};
exports.Filler = plugin_filler;

const getBoxSize = (labelOpts, fontSize) => {
  let {
    boxHeight = fontSize,
    boxWidth = fontSize
  } = labelOpts;

  if (labelOpts.usePointStyle) {
    boxHeight = Math.min(boxHeight, fontSize);
    boxWidth = Math.min(boxWidth, fontSize);
  }

  return {
    boxWidth,
    boxHeight,
    itemHeight: Math.max(fontSize, boxHeight)
  };
};

const itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;

class Legend extends Element {
  constructor(config) {
    super();
    this._added = false;
    this.legendHitBoxes = [];
    this._hoveredItem = null;
    this.doughnutMode = false;
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this.legendItems = undefined;
    this.columnSizes = undefined;
    this.lineWidths = undefined;
    this.maxHeight = undefined;
    this.maxWidth = undefined;
    this.top = undefined;
    this.bottom = undefined;
    this.left = undefined;
    this.right = undefined;
    this.height = undefined;
    this.width = undefined;
    this._margins = undefined;
    this.position = undefined;
    this.weight = undefined;
    this.fullSize = undefined;
  }

  update(maxWidth, maxHeight, margins) {
    const me = this;
    me.maxWidth = maxWidth;
    me.maxHeight = maxHeight;
    me._margins = margins;
    me.setDimensions();
    me.buildLabels();
    me.fit();
  }

  setDimensions() {
    const me = this;

    if (me.isHorizontal()) {
      me.width = me.maxWidth;
      me.left = me._margins.left;
      me.right = me.width;
    } else {
      me.height = me.maxHeight;
      me.top = me._margins.top;
      me.bottom = me.height;
    }
  }

  buildLabels() {
    const me = this;
    const labelOpts = me.options.labels || {};
    let legendItems = (0, _helpersSegment.M)(labelOpts.generateLabels, [me.chart], me) || [];

    if (labelOpts.filter) {
      legendItems = legendItems.filter(item => labelOpts.filter(item, me.chart.data));
    }

    if (labelOpts.sort) {
      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, me.chart.data));
    }

    if (me.options.reverse) {
      legendItems.reverse();
    }

    me.legendItems = legendItems;
  }

  fit() {
    const me = this;
    const {
      options,
      ctx
    } = me;

    if (!options.display) {
      me.width = me.height = 0;
      return;
    }

    const labelOpts = options.labels;
    const labelFont = (0, _helpersSegment.X)(labelOpts.font);
    const fontSize = labelFont.size;

    const titleHeight = me._computeTitleHeight();

    const {
      boxWidth,
      itemHeight
    } = getBoxSize(labelOpts, fontSize);
    let width, height;
    ctx.font = labelFont.string;

    if (me.isHorizontal()) {
      width = me.maxWidth;
      height = me._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
    } else {
      height = me.maxHeight;
      width = me._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;
    }

    me.width = Math.min(width, options.maxWidth || me.maxWidth);
    me.height = Math.min(height, options.maxHeight || me.maxHeight);
  }

  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
    const me = this;
    const {
      ctx,
      maxWidth,
      options: {
        labels: {
          padding
        }
      }
    } = me;
    const hitboxes = me.legendHitBoxes = [];
    const lineWidths = me.lineWidths = [0];
    const lineHeight = itemHeight + padding;
    let totalHeight = titleHeight;
    ctx.textAlign = 'left';
    ctx.textBaseline = 'middle';
    let row = -1;
    let top = -lineHeight;
    me.legendItems.forEach((legendItem, i) => {
      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;

      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
        totalHeight += lineHeight;
        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
        top += lineHeight;
        row++;
      }

      hitboxes[i] = {
        left: 0,
        top,
        row,
        width: itemWidth,
        height: itemHeight
      };
      lineWidths[lineWidths.length - 1] += itemWidth + padding;
    });
    return totalHeight;
  }

  _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {
    const me = this;
    const {
      ctx,
      maxHeight,
      options: {
        labels: {
          padding
        }
      }
    } = me;
    const hitboxes = me.legendHitBoxes = [];
    const columnSizes = me.columnSizes = [];
    const heightLimit = maxHeight - titleHeight;
    let totalWidth = padding;
    let currentColWidth = 0;
    let currentColHeight = 0;
    let left = 0;
    let col = 0;
    me.legendItems.forEach((legendItem, i) => {
      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;

      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
        totalWidth += currentColWidth + padding;
        columnSizes.push({
          width: currentColWidth,
          height: currentColHeight
        });
        left += currentColWidth + padding;
        col++;
        currentColWidth = currentColHeight = 0;
      }

      hitboxes[i] = {
        left,
        top: currentColHeight,
        col,
        width: itemWidth,
        height: itemHeight
      };
      currentColWidth = Math.max(currentColWidth, itemWidth);
      currentColHeight += itemHeight + padding;
    });
    totalWidth += currentColWidth;
    columnSizes.push({
      width: currentColWidth,
      height: currentColHeight
    });
    return totalWidth;
  }

  adjustHitBoxes() {
    const me = this;

    if (!me.options.display) {
      return;
    }

    const titleHeight = me._computeTitleHeight();

    const {
      legendHitBoxes: hitboxes,
      options: {
        align,
        labels: {
          padding
        },
        rtl
      }
    } = me;
    const rtlHelper = (0, _helpersSegment.au)(rtl, me.left, me.width);

    if (this.isHorizontal()) {
      let row = 0;
      let left = (0, _helpersSegment.Z)(align, me.left + padding, me.right - me.lineWidths[row]);

      for (const hitbox of hitboxes) {
        if (row !== hitbox.row) {
          row = hitbox.row;
          left = (0, _helpersSegment.Z)(align, me.left + padding, me.right - me.lineWidths[row]);
        }

        hitbox.top += me.top + titleHeight + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
        left += hitbox.width + padding;
      }
    } else {
      let col = 0;
      let top = (0, _helpersSegment.Z)(align, me.top + titleHeight + padding, me.bottom - me.columnSizes[col].height);

      for (const hitbox of hitboxes) {
        if (hitbox.col !== col) {
          col = hitbox.col;
          top = (0, _helpersSegment.Z)(align, me.top + titleHeight + padding, me.bottom - me.columnSizes[col].height);
        }

        hitbox.top = top;
        hitbox.left += me.left + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
        top += hitbox.height + padding;
      }
    }
  }

  isHorizontal() {
    return this.options.position === 'top' || this.options.position === 'bottom';
  }

  draw() {
    const me = this;

    if (me.options.display) {
      const ctx = me.ctx;
      (0, _helpersSegment.U)(ctx, me);

      me._draw();

      (0, _helpersSegment.W)(ctx);
    }
  }

  _draw() {
    const me = this;
    const {
      options: opts,
      columnSizes,
      lineWidths,
      ctx
    } = me;
    const {
      align,
      labels: labelOpts
    } = opts;
    const defaultColor = _helpersSegment.d.color;
    const rtlHelper = (0, _helpersSegment.au)(opts.rtl, me.left, me.width);
    const labelFont = (0, _helpersSegment.X)(labelOpts.font);
    const {
      color: fontColor,
      padding
    } = labelOpts;
    const fontSize = labelFont.size;
    const halfFontSize = fontSize / 2;
    let cursor;
    me.drawTitle();
    ctx.textAlign = rtlHelper.textAlign('left');
    ctx.textBaseline = 'middle';
    ctx.lineWidth = 0.5;
    ctx.font = labelFont.string;
    const {
      boxWidth,
      boxHeight,
      itemHeight
    } = getBoxSize(labelOpts, fontSize);

    const drawLegendBox = function (x, y, legendItem) {
      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
        return;
      }

      ctx.save();
      const lineWidth = (0, _helpersSegment.v)(legendItem.lineWidth, 1);
      ctx.fillStyle = (0, _helpersSegment.v)(legendItem.fillStyle, defaultColor);
      ctx.lineCap = (0, _helpersSegment.v)(legendItem.lineCap, 'butt');
      ctx.lineDashOffset = (0, _helpersSegment.v)(legendItem.lineDashOffset, 0);
      ctx.lineJoin = (0, _helpersSegment.v)(legendItem.lineJoin, 'miter');
      ctx.lineWidth = lineWidth;
      ctx.strokeStyle = (0, _helpersSegment.v)(legendItem.strokeStyle, defaultColor);
      ctx.setLineDash((0, _helpersSegment.v)(legendItem.lineDash, []));

      if (labelOpts.usePointStyle) {
        const drawOptions = {
          radius: boxWidth * Math.SQRT2 / 2,
          pointStyle: legendItem.pointStyle,
          rotation: legendItem.rotation,
          borderWidth: lineWidth
        };
        const centerX = rtlHelper.xPlus(x, boxWidth / 2);
        const centerY = y + halfFontSize;
        (0, _helpersSegment.ao)(ctx, drawOptions, centerX, centerY);
      } else {
        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
        const borderRadius = (0, _helpersSegment.ar)(legendItem.borderRadius);
        ctx.beginPath();

        if (Object.values(borderRadius).some(v => v !== 0)) {
          (0, _helpersSegment.ap)(ctx, {
            x: xBoxLeft,
            y: yBoxTop,
            w: boxWidth,
            h: boxHeight,
            radius: borderRadius
          });
        } else {
          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
        }

        ctx.fill();

        if (lineWidth !== 0) {
          ctx.stroke();
        }
      }

      ctx.restore();
    };

    const fillText = function (x, y, legendItem) {
      (0, _helpersSegment.V)(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {
        strikethrough: legendItem.hidden,
        textAlign: rtlHelper.textAlign(legendItem.textAlign)
      });
    };

    const isHorizontal = me.isHorizontal();

    const titleHeight = this._computeTitleHeight();

    if (isHorizontal) {
      cursor = {
        x: (0, _helpersSegment.Z)(align, me.left + padding, me.right - lineWidths[0]),
        y: me.top + padding + titleHeight,
        line: 0
      };
    } else {
      cursor = {
        x: me.left + padding,
        y: (0, _helpersSegment.Z)(align, me.top + titleHeight + padding, me.bottom - columnSizes[0].height),
        line: 0
      };
    }

    (0, _helpersSegment.av)(me.ctx, opts.textDirection);
    const lineHeight = itemHeight + padding;
    me.legendItems.forEach((legendItem, i) => {
      ctx.strokeStyle = legendItem.fontColor || fontColor;
      ctx.fillStyle = legendItem.fontColor || fontColor;
      const textWidth = ctx.measureText(legendItem.text).width;
      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
      const width = boxWidth + halfFontSize + textWidth;
      let x = cursor.x;
      let y = cursor.y;
      rtlHelper.setWidth(me.width);

      if (isHorizontal) {
        if (i > 0 && x + width + padding > me.right) {
          y = cursor.y += lineHeight;
          cursor.line++;
          x = cursor.x = (0, _helpersSegment.Z)(align, me.left + padding, me.right - lineWidths[cursor.line]);
        }
      } else if (i > 0 && y + lineHeight > me.bottom) {
        x = cursor.x = x + columnSizes[cursor.line].width + padding;
        cursor.line++;
        y = cursor.y = (0, _helpersSegment.Z)(align, me.top + titleHeight + padding, me.bottom - columnSizes[cursor.line].height);
      }

      const realX = rtlHelper.x(x);
      drawLegendBox(realX, y, legendItem);
      x = (0, _helpersSegment.aw)(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : me.right, opts.rtl);
      fillText(rtlHelper.x(x), y, legendItem);

      if (isHorizontal) {
        cursor.x += width + padding;
      } else {
        cursor.y += lineHeight;
      }
    });
    (0, _helpersSegment.ax)(me.ctx, opts.textDirection);
  }

  drawTitle() {
    const me = this;
    const opts = me.options;
    const titleOpts = opts.title;
    const titleFont = (0, _helpersSegment.X)(titleOpts.font);
    const titlePadding = (0, _helpersSegment.A)(titleOpts.padding);

    if (!titleOpts.display) {
      return;
    }

    const rtlHelper = (0, _helpersSegment.au)(opts.rtl, me.left, me.width);
    const ctx = me.ctx;
    const position = titleOpts.position;
    const halfFontSize = titleFont.size / 2;
    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
    let y;
    let left = me.left;
    let maxWidth = me.width;

    if (this.isHorizontal()) {
      maxWidth = Math.max(...me.lineWidths);
      y = me.top + topPaddingPlusHalfFontSize;
      left = (0, _helpersSegment.Z)(opts.align, left, me.right - maxWidth);
    } else {
      const maxHeight = me.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);
      y = topPaddingPlusHalfFontSize + (0, _helpersSegment.Z)(opts.align, me.top, me.bottom - maxHeight - opts.labels.padding - me._computeTitleHeight());
    }

    const x = (0, _helpersSegment.Z)(position, left, left + maxWidth);
    ctx.textAlign = rtlHelper.textAlign((0, _helpersSegment.Y)(position));
    ctx.textBaseline = 'middle';
    ctx.strokeStyle = titleOpts.color;
    ctx.fillStyle = titleOpts.color;
    ctx.font = titleFont.string;
    (0, _helpersSegment.V)(ctx, titleOpts.text, x, y, titleFont);
  }

  _computeTitleHeight() {
    const titleOpts = this.options.title;
    const titleFont = (0, _helpersSegment.X)(titleOpts.font);
    const titlePadding = (0, _helpersSegment.A)(titleOpts.padding);
    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
  }

  _getLegendItemAt(x, y) {
    const me = this;
    let i, hitBox, lh;

    if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
      lh = me.legendHitBoxes;

      for (i = 0; i < lh.length; ++i) {
        hitBox = lh[i];

        if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
          return me.legendItems[i];
        }
      }
    }

    return null;
  }

  handleEvent(e) {
    const me = this;
    const opts = me.options;

    if (!isListened(e.type, opts)) {
      return;
    }

    const hoveredItem = me._getLegendItemAt(e.x, e.y);

    if (e.type === 'mousemove') {
      const previous = me._hoveredItem;
      const sameItem = itemsEqual(previous, hoveredItem);

      if (previous && !sameItem) {
        (0, _helpersSegment.M)(opts.onLeave, [e, previous, me], me);
      }

      me._hoveredItem = hoveredItem;

      if (hoveredItem && !sameItem) {
        (0, _helpersSegment.M)(opts.onHover, [e, hoveredItem, me], me);
      }
    } else if (hoveredItem) {
      (0, _helpersSegment.M)(opts.onClick, [e, hoveredItem, me], me);
    }
  }

}

function isListened(type, opts) {
  if (type === 'mousemove' && (opts.onHover || opts.onLeave)) {
    return true;
  }

  if (opts.onClick && (type === 'click' || type === 'mouseup')) {
    return true;
  }

  return false;
}

var plugin_legend = {
  id: 'legend',
  _element: Legend,

  start(chart, _args, options) {
    const legend = chart.legend = new Legend({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, legend, options);
    layouts.addBox(chart, legend);
  },

  stop(chart) {
    layouts.removeBox(chart, chart.legend);
    delete chart.legend;
  },

  beforeUpdate(chart, _args, options) {
    const legend = chart.legend;
    layouts.configure(chart, legend, options);
    legend.options = options;
  },

  afterUpdate(chart) {
    const legend = chart.legend;
    legend.buildLabels();
    legend.adjustHitBoxes();
  },

  afterEvent(chart, args) {
    if (!args.replay) {
      chart.legend.handleEvent(args.event);
    }
  },

  defaults: {
    display: true,
    position: 'top',
    align: 'center',
    fullSize: true,
    reverse: false,
    weight: 1000,

    onClick(e, legendItem, legend) {
      const index = legendItem.datasetIndex;
      const ci = legend.chart;

      if (ci.isDatasetVisible(index)) {
        ci.hide(index);
        legendItem.hidden = true;
      } else {
        ci.show(index);
        legendItem.hidden = false;
      }
    },

    onHover: null,
    onLeave: null,
    labels: {
      color: ctx => ctx.chart.options.color,
      boxWidth: 40,
      padding: 10,

      generateLabels(chart) {
        const datasets = chart.data.datasets;
        const {
          labels: {
            usePointStyle,
            pointStyle,
            textAlign,
            color
          }
        } = chart.legend.options;
        return chart._getSortedDatasetMetas().map(meta => {
          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
          const borderWidth = (0, _helpersSegment.A)(style.borderWidth);
          return {
            text: datasets[meta.index].label,
            fillStyle: style.backgroundColor,
            fontColor: color,
            hidden: !meta.visible,
            lineCap: style.borderCapStyle,
            lineDash: style.borderDash,
            lineDashOffset: style.borderDashOffset,
            lineJoin: style.borderJoinStyle,
            lineWidth: (borderWidth.width + borderWidth.height) / 4,
            strokeStyle: style.borderColor,
            pointStyle: pointStyle || style.pointStyle,
            rotation: style.rotation,
            textAlign: textAlign || style.textAlign,
            borderRadius: 0,
            datasetIndex: meta.index
          };
        }, this);
      }

    },
    title: {
      color: ctx => ctx.chart.options.color,
      display: false,
      position: 'center',
      text: ''
    }
  },
  descriptors: {
    _scriptable: name => !name.startsWith('on'),
    labels: {
      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)
    }
  }
};
exports.Legend = plugin_legend;

class Title extends Element {
  constructor(config) {
    super();
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this._padding = undefined;
    this.top = undefined;
    this.bottom = undefined;
    this.left = undefined;
    this.right = undefined;
    this.width = undefined;
    this.height = undefined;
    this.position = undefined;
    this.weight = undefined;
    this.fullSize = undefined;
  }

  update(maxWidth, maxHeight) {
    const me = this;
    const opts = me.options;
    me.left = 0;
    me.top = 0;

    if (!opts.display) {
      me.width = me.height = me.right = me.bottom = 0;
      return;
    }

    me.width = me.right = maxWidth;
    me.height = me.bottom = maxHeight;
    const lineCount = (0, _helpersSegment.b)(opts.text) ? opts.text.length : 1;
    me._padding = (0, _helpersSegment.A)(opts.padding);

    const textSize = lineCount * (0, _helpersSegment.X)(opts.font).lineHeight + me._padding.height;

    if (me.isHorizontal()) {
      me.height = textSize;
    } else {
      me.width = textSize;
    }
  }

  isHorizontal() {
    const pos = this.options.position;
    return pos === 'top' || pos === 'bottom';
  }

  _drawArgs(offset) {
    const {
      top,
      left,
      bottom,
      right,
      options
    } = this;
    const align = options.align;
    let rotation = 0;
    let maxWidth, titleX, titleY;

    if (this.isHorizontal()) {
      titleX = (0, _helpersSegment.Z)(align, left, right);
      titleY = top + offset;
      maxWidth = right - left;
    } else {
      if (options.position === 'left') {
        titleX = left + offset;
        titleY = (0, _helpersSegment.Z)(align, bottom, top);
        rotation = _helpersSegment.P * -0.5;
      } else {
        titleX = right - offset;
        titleY = (0, _helpersSegment.Z)(align, top, bottom);
        rotation = _helpersSegment.P * 0.5;
      }

      maxWidth = bottom - top;
    }

    return {
      titleX,
      titleY,
      maxWidth,
      rotation
    };
  }

  draw() {
    const me = this;
    const ctx = me.ctx;
    const opts = me.options;

    if (!opts.display) {
      return;
    }

    const fontOpts = (0, _helpersSegment.X)(opts.font);
    const lineHeight = fontOpts.lineHeight;
    const offset = lineHeight / 2 + me._padding.top;

    const {
      titleX,
      titleY,
      maxWidth,
      rotation
    } = me._drawArgs(offset);

    (0, _helpersSegment.V)(ctx, opts.text, 0, 0, fontOpts, {
      color: opts.color,
      maxWidth,
      rotation,
      textAlign: (0, _helpersSegment.Y)(opts.align),
      textBaseline: 'middle',
      translation: [titleX, titleY]
    });
  }

}

function createTitle(chart, titleOpts) {
  const title = new Title({
    ctx: chart.ctx,
    options: titleOpts,
    chart
  });
  layouts.configure(chart, title, titleOpts);
  layouts.addBox(chart, title);
  chart.titleBlock = title;
}

var plugin_title = {
  id: 'title',
  _element: Title,

  start(chart, _args, options) {
    createTitle(chart, options);
  },

  stop(chart) {
    const titleBlock = chart.titleBlock;
    layouts.removeBox(chart, titleBlock);
    delete chart.titleBlock;
  },

  beforeUpdate(chart, _args, options) {
    const title = chart.titleBlock;
    layouts.configure(chart, title, options);
    title.options = options;
  },

  defaults: {
    align: 'center',
    display: false,
    font: {
      weight: 'bold'
    },
    fullSize: true,
    padding: 10,
    position: 'top',
    text: '',
    weight: 2000
  },
  defaultRoutes: {
    color: 'color'
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
exports.Title = plugin_title;
const map = new WeakMap();
var plugin_subtitle = {
  id: 'subtitle',

  start(chart, _args, options) {
    const title = new Title({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, title, options);
    layouts.addBox(chart, title);
    map.set(chart, title);
  },

  stop(chart) {
    layouts.removeBox(chart, map.get(chart));
    map.delete(chart);
  },

  beforeUpdate(chart, _args, options) {
    const title = map.get(chart);
    layouts.configure(chart, title, options);
    title.options = options;
  },

  defaults: {
    align: 'center',
    display: false,
    font: {
      weight: 'normal'
    },
    fullSize: true,
    padding: 0,
    position: 'top',
    text: '',
    weight: 1500
  },
  defaultRoutes: {
    color: 'color'
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
exports.SubTitle = plugin_subtitle;
const positioners = {
  average(items) {
    if (!items.length) {
      return false;
    }

    let i, len;
    let x = 0;
    let y = 0;
    let count = 0;

    for (i = 0, len = items.length; i < len; ++i) {
      const el = items[i].element;

      if (el && el.hasValue()) {
        const pos = el.tooltipPosition();
        x += pos.x;
        y += pos.y;
        ++count;
      }
    }

    return {
      x: x / count,
      y: y / count
    };
  },

  nearest(items, eventPosition) {
    if (!items.length) {
      return false;
    }

    let x = eventPosition.x;
    let y = eventPosition.y;
    let minDistance = Number.POSITIVE_INFINITY;
    let i, len, nearestElement;

    for (i = 0, len = items.length; i < len; ++i) {
      const el = items[i].element;

      if (el && el.hasValue()) {
        const center = el.getCenterPoint();
        const d = (0, _helpersSegment.az)(eventPosition, center);

        if (d < minDistance) {
          minDistance = d;
          nearestElement = el;
        }
      }
    }

    if (nearestElement) {
      const tp = nearestElement.tooltipPosition();
      x = tp.x;
      y = tp.y;
    }

    return {
      x,
      y
    };
  }

};

function pushOrConcat(base, toPush) {
  if (toPush) {
    if ((0, _helpersSegment.b)(toPush)) {
      Array.prototype.push.apply(base, toPush);
    } else {
      base.push(toPush);
    }
  }

  return base;
}

function splitNewlines(str) {
  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
    return str.split('\n');
  }

  return str;
}

function createTooltipItem(chart, item) {
  const {
    element,
    datasetIndex,
    index
  } = item;
  const controller = chart.getDatasetMeta(datasetIndex).controller;
  const {
    label,
    value
  } = controller.getLabelAndValue(index);
  return {
    chart,
    label,
    parsed: controller.getParsed(index),
    raw: chart.data.datasets[datasetIndex].data[index],
    formattedValue: value,
    dataset: controller.getDataset(),
    dataIndex: index,
    datasetIndex,
    element
  };
}

function getTooltipSize(tooltip, options) {
  const ctx = tooltip._chart.ctx;
  const {
    body,
    footer,
    title
  } = tooltip;
  const {
    boxWidth,
    boxHeight
  } = options;
  const bodyFont = (0, _helpersSegment.X)(options.bodyFont);
  const titleFont = (0, _helpersSegment.X)(options.titleFont);
  const footerFont = (0, _helpersSegment.X)(options.footerFont);
  const titleLineCount = title.length;
  const footerLineCount = footer.length;
  const bodyLineItemCount = body.length;
  const padding = (0, _helpersSegment.A)(options.padding);
  let height = padding.height;
  let width = 0;
  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;

  if (titleLineCount) {
    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
  }

  if (combinedBodyLength) {
    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
  }

  if (footerLineCount) {
    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
  }

  let widthPadding = 0;

  const maxLineWidth = function (line) {
    width = Math.max(width, ctx.measureText(line).width + widthPadding);
  };

  ctx.save();
  ctx.font = titleFont.string;
  (0, _helpersSegment.B)(tooltip.title, maxLineWidth);
  ctx.font = bodyFont.string;
  (0, _helpersSegment.B)(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
  widthPadding = options.displayColors ? boxWidth + 2 : 0;
  (0, _helpersSegment.B)(body, bodyItem => {
    (0, _helpersSegment.B)(bodyItem.before, maxLineWidth);
    (0, _helpersSegment.B)(bodyItem.lines, maxLineWidth);
    (0, _helpersSegment.B)(bodyItem.after, maxLineWidth);
  });
  widthPadding = 0;
  ctx.font = footerFont.string;
  (0, _helpersSegment.B)(tooltip.footer, maxLineWidth);
  ctx.restore();
  width += padding.width;
  return {
    width,
    height
  };
}

function determineYAlign(chart, size) {
  const {
    y,
    height
  } = size;

  if (y < height / 2) {
    return 'top';
  } else if (y > chart.height - height / 2) {
    return 'bottom';
  }

  return 'center';
}

function doesNotFitWithAlign(xAlign, chart, options, size) {
  const {
    x,
    width
  } = size;
  const caret = options.caretSize + options.caretPadding;

  if (xAlign === 'left' && x + width + caret > chart.width) {
    return true;
  }

  if (xAlign === 'right' && x - width - caret < 0) {
    return true;
  }
}

function determineXAlign(chart, options, size, yAlign) {
  const {
    x,
    width
  } = size;
  const {
    width: chartWidth,
    chartArea: {
      left,
      right
    }
  } = chart;
  let xAlign = 'center';

  if (yAlign === 'center') {
    xAlign = x <= (left + right) / 2 ? 'left' : 'right';
  } else if (x <= width / 2) {
    xAlign = 'left';
  } else if (x >= chartWidth - width / 2) {
    xAlign = 'right';
  }

  if (doesNotFitWithAlign(xAlign, chart, options, size)) {
    xAlign = 'center';
  }

  return xAlign;
}

function determineAlignment(chart, options, size) {
  const yAlign = options.yAlign || determineYAlign(chart, size);
  return {
    xAlign: options.xAlign || determineXAlign(chart, options, size, yAlign),
    yAlign
  };
}

function alignX(size, xAlign) {
  let {
    x,
    width
  } = size;

  if (xAlign === 'right') {
    x -= width;
  } else if (xAlign === 'center') {
    x -= width / 2;
  }

  return x;
}

function alignY(size, yAlign, paddingAndSize) {
  let {
    y,
    height
  } = size;

  if (yAlign === 'top') {
    y += paddingAndSize;
  } else if (yAlign === 'bottom') {
    y -= height + paddingAndSize;
  } else {
    y -= height / 2;
  }

  return y;
}

function getBackgroundPoint(options, size, alignment, chart) {
  const {
    caretSize,
    caretPadding,
    cornerRadius
  } = options;
  const {
    xAlign,
    yAlign
  } = alignment;
  const paddingAndSize = caretSize + caretPadding;
  const radiusAndPadding = cornerRadius + caretPadding;
  let x = alignX(size, xAlign);
  const y = alignY(size, yAlign, paddingAndSize);

  if (yAlign === 'center') {
    if (xAlign === 'left') {
      x += paddingAndSize;
    } else if (xAlign === 'right') {
      x -= paddingAndSize;
    }
  } else if (xAlign === 'left') {
    x -= radiusAndPadding;
  } else if (xAlign === 'right') {
    x += radiusAndPadding;
  }

  return {
    x: (0, _helpersSegment.q)(x, 0, chart.width - size.width),
    y: (0, _helpersSegment.q)(y, 0, chart.height - size.height)
  };
}

function getAlignedX(tooltip, align, options) {
  const padding = (0, _helpersSegment.A)(options.padding);
  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}

function getBeforeAfterBodyLines(callback) {
  return pushOrConcat([], splitNewlines(callback));
}

function createTooltipContext(parent, tooltip, tooltipItems) {
  return Object.assign(Object.create(parent), {
    tooltip,
    tooltipItems,
    type: 'tooltip'
  });
}

function overrideCallbacks(callbacks, context) {
  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
  return override ? callbacks.override(override) : callbacks;
}

class Tooltip extends Element {
  constructor(config) {
    super();
    this.opacity = 0;
    this._active = [];
    this._chart = config._chart;
    this._eventPosition = undefined;
    this._size = undefined;
    this._cachedAnimations = undefined;
    this._tooltipItems = [];
    this.$animations = undefined;
    this.$context = undefined;
    this.options = config.options;
    this.dataPoints = undefined;
    this.title = undefined;
    this.beforeBody = undefined;
    this.body = undefined;
    this.afterBody = undefined;
    this.footer = undefined;
    this.xAlign = undefined;
    this.yAlign = undefined;
    this.x = undefined;
    this.y = undefined;
    this.height = undefined;
    this.width = undefined;
    this.caretX = undefined;
    this.caretY = undefined;
    this.labelColors = undefined;
    this.labelPointStyles = undefined;
    this.labelTextColors = undefined;
  }

  initialize(options) {
    this.options = options;
    this._cachedAnimations = undefined;
    this.$context = undefined;
  }

  _resolveAnimations() {
    const me = this;
    const cached = me._cachedAnimations;

    if (cached) {
      return cached;
    }

    const chart = me._chart;
    const options = me.options.setContext(me.getContext());
    const opts = options.enabled && chart.options.animation && options.animations;
    const animations = new Animations(me._chart, opts);

    if (opts._cacheable) {
      me._cachedAnimations = Object.freeze(animations);
    }

    return animations;
  }

  getContext() {
    const me = this;
    return me.$context || (me.$context = createTooltipContext(me._chart.getContext(), me, me._tooltipItems));
  }

  getTitle(context, options) {
    const me = this;
    const {
      callbacks
    } = options;
    const beforeTitle = callbacks.beforeTitle.apply(me, [context]);
    const title = callbacks.title.apply(me, [context]);
    const afterTitle = callbacks.afterTitle.apply(me, [context]);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    lines = pushOrConcat(lines, splitNewlines(title));
    lines = pushOrConcat(lines, splitNewlines(afterTitle));
    return lines;
  }

  getBeforeBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));
  }

  getBody(tooltipItems, options) {
    const me = this;
    const {
      callbacks
    } = options;
    const bodyItems = [];
    (0, _helpersSegment.B)(tooltipItems, context => {
      const bodyItem = {
        before: [],
        lines: [],
        after: []
      };
      const scoped = overrideCallbacks(callbacks, context);
      pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(me, context)));
      pushOrConcat(bodyItem.lines, scoped.label.call(me, context));
      pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(me, context)));
      bodyItems.push(bodyItem);
    });
    return bodyItems;
  }

  getAfterBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));
  }

  getFooter(tooltipItems, options) {
    const me = this;
    const {
      callbacks
    } = options;
    const beforeFooter = callbacks.beforeFooter.apply(me, [tooltipItems]);
    const footer = callbacks.footer.apply(me, [tooltipItems]);
    const afterFooter = callbacks.afterFooter.apply(me, [tooltipItems]);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    lines = pushOrConcat(lines, splitNewlines(footer));
    lines = pushOrConcat(lines, splitNewlines(afterFooter));
    return lines;
  }

  _createItems(options) {
    const me = this;
    const active = me._active;
    const data = me._chart.data;
    const labelColors = [];
    const labelPointStyles = [];
    const labelTextColors = [];
    let tooltipItems = [];
    let i, len;

    for (i = 0, len = active.length; i < len; ++i) {
      tooltipItems.push(createTooltipItem(me._chart, active[i]));
    }

    if (options.filter) {
      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));
    }

    if (options.itemSort) {
      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));
    }

    (0, _helpersSegment.B)(tooltipItems, context => {
      const scoped = overrideCallbacks(options.callbacks, context);
      labelColors.push(scoped.labelColor.call(me, context));
      labelPointStyles.push(scoped.labelPointStyle.call(me, context));
      labelTextColors.push(scoped.labelTextColor.call(me, context));
    });
    me.labelColors = labelColors;
    me.labelPointStyles = labelPointStyles;
    me.labelTextColors = labelTextColors;
    me.dataPoints = tooltipItems;
    return tooltipItems;
  }

  update(changed, replay) {
    const me = this;
    const options = me.options.setContext(me.getContext());
    const active = me._active;
    let properties;
    let tooltipItems = [];

    if (!active.length) {
      if (me.opacity !== 0) {
        properties = {
          opacity: 0
        };
      }
    } else {
      const position = positioners[options.position].call(me, active, me._eventPosition);
      tooltipItems = me._createItems(options);
      me.title = me.getTitle(tooltipItems, options);
      me.beforeBody = me.getBeforeBody(tooltipItems, options);
      me.body = me.getBody(tooltipItems, options);
      me.afterBody = me.getAfterBody(tooltipItems, options);
      me.footer = me.getFooter(tooltipItems, options);
      const size = me._size = getTooltipSize(me, options);
      const positionAndSize = Object.assign({}, position, size);
      const alignment = determineAlignment(me._chart, options, positionAndSize);
      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, me._chart);
      me.xAlign = alignment.xAlign;
      me.yAlign = alignment.yAlign;
      properties = {
        opacity: 1,
        x: backgroundPoint.x,
        y: backgroundPoint.y,
        width: size.width,
        height: size.height,
        caretX: position.x,
        caretY: position.y
      };
    }

    me._tooltipItems = tooltipItems;
    me.$context = undefined;

    if (properties) {
      me._resolveAnimations().update(me, properties);
    }

    if (changed && options.external) {
      options.external.call(me, {
        chart: me._chart,
        tooltip: me,
        replay
      });
    }
  }

  drawCaret(tooltipPoint, ctx, size, options) {
    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
    ctx.lineTo(caretPosition.x1, caretPosition.y1);
    ctx.lineTo(caretPosition.x2, caretPosition.y2);
    ctx.lineTo(caretPosition.x3, caretPosition.y3);
  }

  getCaretPosition(tooltipPoint, size, options) {
    const {
      xAlign,
      yAlign
    } = this;
    const {
      cornerRadius,
      caretSize
    } = options;
    const {
      x: ptX,
      y: ptY
    } = tooltipPoint;
    const {
      width,
      height
    } = size;
    let x1, x2, x3, y1, y2, y3;

    if (yAlign === 'center') {
      y2 = ptY + height / 2;

      if (xAlign === 'left') {
        x1 = ptX;
        x2 = x1 - caretSize;
        y1 = y2 + caretSize;
        y3 = y2 - caretSize;
      } else {
        x1 = ptX + width;
        x2 = x1 + caretSize;
        y1 = y2 - caretSize;
        y3 = y2 + caretSize;
      }

      x3 = x1;
    } else {
      if (xAlign === 'left') {
        x2 = ptX + cornerRadius + caretSize;
      } else if (xAlign === 'right') {
        x2 = ptX + width - cornerRadius - caretSize;
      } else {
        x2 = this.caretX;
      }

      if (yAlign === 'top') {
        y1 = ptY;
        y2 = y1 - caretSize;
        x1 = x2 - caretSize;
        x3 = x2 + caretSize;
      } else {
        y1 = ptY + height;
        y2 = y1 + caretSize;
        x1 = x2 + caretSize;
        x3 = x2 - caretSize;
      }

      y3 = y1;
    }

    return {
      x1,
      x2,
      x3,
      y1,
      y2,
      y3
    };
  }

  drawTitle(pt, ctx, options) {
    const me = this;
    const title = me.title;
    const length = title.length;
    let titleFont, titleSpacing, i;

    if (length) {
      const rtlHelper = (0, _helpersSegment.au)(options.rtl, me.x, me.width);
      pt.x = getAlignedX(me, options.titleAlign, options);
      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
      ctx.textBaseline = 'middle';
      titleFont = (0, _helpersSegment.X)(options.titleFont);
      titleSpacing = options.titleSpacing;
      ctx.fillStyle = options.titleColor;
      ctx.font = titleFont.string;

      for (i = 0; i < length; ++i) {
        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
        pt.y += titleFont.lineHeight + titleSpacing;

        if (i + 1 === length) {
          pt.y += options.titleMarginBottom - titleSpacing;
        }
      }
    }
  }

  _drawColorBox(ctx, pt, i, rtlHelper, options) {
    const me = this;
    const labelColors = me.labelColors[i];
    const labelPointStyle = me.labelPointStyles[i];
    const {
      boxHeight,
      boxWidth
    } = options;
    const bodyFont = (0, _helpersSegment.X)(options.bodyFont);
    const colorX = getAlignedX(me, 'left', options);
    const rtlColorX = rtlHelper.x(colorX);
    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
    const colorY = pt.y + yOffSet;

    if (options.usePointStyle) {
      const drawOptions = {
        radius: Math.min(boxWidth, boxHeight) / 2,
        pointStyle: labelPointStyle.pointStyle,
        rotation: labelPointStyle.rotation,
        borderWidth: 1
      };
      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
      const centerY = colorY + boxHeight / 2;
      ctx.strokeStyle = options.multiKeyBackground;
      ctx.fillStyle = options.multiKeyBackground;
      (0, _helpersSegment.ao)(ctx, drawOptions, centerX, centerY);
      ctx.strokeStyle = labelColors.borderColor;
      ctx.fillStyle = labelColors.backgroundColor;
      (0, _helpersSegment.ao)(ctx, drawOptions, centerX, centerY);
    } else {
      ctx.lineWidth = labelColors.borderWidth || 1;
      ctx.strokeStyle = labelColors.borderColor;
      ctx.setLineDash(labelColors.borderDash || []);
      ctx.lineDashOffset = labelColors.borderDashOffset || 0;
      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
      const borderRadius = (0, _helpersSegment.ar)(labelColors.borderRadius);

      if (Object.values(borderRadius).some(v => v !== 0)) {
        ctx.beginPath();
        ctx.fillStyle = options.multiKeyBackground;
        (0, _helpersSegment.ap)(ctx, {
          x: outerX,
          y: colorY,
          w: boxWidth,
          h: boxHeight,
          radius: borderRadius
        });
        ctx.fill();
        ctx.stroke();
        ctx.fillStyle = labelColors.backgroundColor;
        ctx.beginPath();
        (0, _helpersSegment.ap)(ctx, {
          x: innerX,
          y: colorY + 1,
          w: boxWidth - 2,
          h: boxHeight - 2,
          radius: borderRadius
        });
        ctx.fill();
      } else {
        ctx.fillStyle = options.multiKeyBackground;
        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
        ctx.fillStyle = labelColors.backgroundColor;
        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
      }
    }

    ctx.fillStyle = me.labelTextColors[i];
  }

  drawBody(pt, ctx, options) {
    const me = this;
    const {
      body
    } = me;
    const {
      bodySpacing,
      bodyAlign,
      displayColors,
      boxHeight,
      boxWidth
    } = options;
    const bodyFont = (0, _helpersSegment.X)(options.bodyFont);
    let bodyLineHeight = bodyFont.lineHeight;
    let xLinePadding = 0;
    const rtlHelper = (0, _helpersSegment.au)(options.rtl, me.x, me.width);

    const fillLineOfText = function (line) {
      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
      pt.y += bodyLineHeight + bodySpacing;
    };

    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
    let bodyItem, textColor, lines, i, j, ilen, jlen;
    ctx.textAlign = bodyAlign;
    ctx.textBaseline = 'middle';
    ctx.font = bodyFont.string;
    pt.x = getAlignedX(me, bodyAlignForCalculation, options);
    ctx.fillStyle = options.bodyColor;
    (0, _helpersSegment.B)(me.beforeBody, fillLineOfText);
    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + 1 : boxWidth + 2 : 0;

    for (i = 0, ilen = body.length; i < ilen; ++i) {
      bodyItem = body[i];
      textColor = me.labelTextColors[i];
      ctx.fillStyle = textColor;
      (0, _helpersSegment.B)(bodyItem.before, fillLineOfText);
      lines = bodyItem.lines;

      if (displayColors && lines.length) {
        me._drawColorBox(ctx, pt, i, rtlHelper, options);

        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
      }

      for (j = 0, jlen = lines.length; j < jlen; ++j) {
        fillLineOfText(lines[j]);
        bodyLineHeight = bodyFont.lineHeight;
      }

      (0, _helpersSegment.B)(bodyItem.after, fillLineOfText);
    }

    xLinePadding = 0;
    bodyLineHeight = bodyFont.lineHeight;
    (0, _helpersSegment.B)(me.afterBody, fillLineOfText);
    pt.y -= bodySpacing;
  }

  drawFooter(pt, ctx, options) {
    const me = this;
    const footer = me.footer;
    const length = footer.length;
    let footerFont, i;

    if (length) {
      const rtlHelper = (0, _helpersSegment.au)(options.rtl, me.x, me.width);
      pt.x = getAlignedX(me, options.footerAlign, options);
      pt.y += options.footerMarginTop;
      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
      ctx.textBaseline = 'middle';
      footerFont = (0, _helpersSegment.X)(options.footerFont);
      ctx.fillStyle = options.footerColor;
      ctx.font = footerFont.string;

      for (i = 0; i < length; ++i) {
        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
        pt.y += footerFont.lineHeight + options.footerSpacing;
      }
    }
  }

  drawBackground(pt, ctx, tooltipSize, options) {
    const {
      xAlign,
      yAlign
    } = this;
    const {
      x,
      y
    } = pt;
    const {
      width,
      height
    } = tooltipSize;
    const radius = options.cornerRadius;
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.beginPath();
    ctx.moveTo(x + radius, y);

    if (yAlign === 'top') {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }

    ctx.lineTo(x + width - radius, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);

    if (yAlign === 'center' && xAlign === 'right') {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }

    ctx.lineTo(x + width, y + height - radius);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);

    if (yAlign === 'bottom') {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }

    ctx.lineTo(x + radius, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);

    if (yAlign === 'center' && xAlign === 'left') {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }

    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
    ctx.closePath();
    ctx.fill();

    if (options.borderWidth > 0) {
      ctx.stroke();
    }
  }

  _updateAnimationTarget(options) {
    const me = this;
    const chart = me._chart;
    const anims = me.$animations;
    const animX = anims && anims.x;
    const animY = anims && anims.y;

    if (animX || animY) {
      const position = positioners[options.position].call(me, me._active, me._eventPosition);

      if (!position) {
        return;
      }

      const size = me._size = getTooltipSize(me, options);
      const positionAndSize = Object.assign({}, position, me._size);
      const alignment = determineAlignment(chart, options, positionAndSize);
      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);

      if (animX._to !== point.x || animY._to !== point.y) {
        me.xAlign = alignment.xAlign;
        me.yAlign = alignment.yAlign;
        me.width = size.width;
        me.height = size.height;
        me.caretX = position.x;
        me.caretY = position.y;

        me._resolveAnimations().update(me, point);
      }
    }
  }

  draw(ctx) {
    const me = this;
    const options = me.options.setContext(me.getContext());
    let opacity = me.opacity;

    if (!opacity) {
      return;
    }

    me._updateAnimationTarget(options);

    const tooltipSize = {
      width: me.width,
      height: me.height
    };
    const pt = {
      x: me.x,
      y: me.y
    };
    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
    const padding = (0, _helpersSegment.A)(options.padding);
    const hasTooltipContent = me.title.length || me.beforeBody.length || me.body.length || me.afterBody.length || me.footer.length;

    if (options.enabled && hasTooltipContent) {
      ctx.save();
      ctx.globalAlpha = opacity;
      me.drawBackground(pt, ctx, tooltipSize, options);
      (0, _helpersSegment.av)(ctx, options.textDirection);
      pt.y += padding.top;
      me.drawTitle(pt, ctx, options);
      me.drawBody(pt, ctx, options);
      me.drawFooter(pt, ctx, options);
      (0, _helpersSegment.ax)(ctx, options.textDirection);
      ctx.restore();
    }
  }

  getActiveElements() {
    return this._active || [];
  }

  setActiveElements(activeElements, eventPosition) {
    const me = this;
    const lastActive = me._active;
    const active = activeElements.map(({
      datasetIndex,
      index
    }) => {
      const meta = me._chart.getDatasetMeta(datasetIndex);

      if (!meta) {
        throw new Error('Cannot find a dataset at index ' + datasetIndex);
      }

      return {
        datasetIndex,
        element: meta.data[index],
        index
      };
    });
    const changed = !(0, _helpersSegment.ad)(lastActive, active);

    const positionChanged = me._positionChanged(active, eventPosition);

    if (changed || positionChanged) {
      me._active = active;
      me._eventPosition = eventPosition;
      me.update(true);
    }
  }

  handleEvent(e, replay) {
    const me = this;
    const options = me.options;
    const lastActive = me._active || [];
    let changed = false;
    let active = [];

    if (e.type !== 'mouseout') {
      active = me._chart.getElementsAtEventForMode(e, options.mode, options, replay);

      if (options.reverse) {
        active.reverse();
      }
    }

    const positionChanged = me._positionChanged(active, e);

    changed = replay || !(0, _helpersSegment.ad)(active, lastActive) || positionChanged;

    if (changed) {
      me._active = active;

      if (options.enabled || options.external) {
        me._eventPosition = {
          x: e.x,
          y: e.y
        };
        me.update(true, replay);
      }
    }

    return changed;
  }

  _positionChanged(active, e) {
    const {
      caretX,
      caretY,
      options
    } = this;
    const position = positioners[options.position].call(this, active, e);
    return position !== false && (caretX !== position.x || caretY !== position.y);
  }

}

Tooltip.positioners = positioners;
var plugin_tooltip = {
  id: 'tooltip',
  _element: Tooltip,
  positioners,

  afterInit(chart, _args, options) {
    if (options) {
      chart.tooltip = new Tooltip({
        _chart: chart,
        options
      });
    }
  },

  beforeUpdate(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },

  reset(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },

  afterDraw(chart) {
    const tooltip = chart.tooltip;
    const args = {
      tooltip
    };

    if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {
      return;
    }

    if (tooltip) {
      tooltip.draw(chart.ctx);
    }

    chart.notifyPlugins('afterTooltipDraw', args);
  },

  afterEvent(chart, args) {
    if (chart.tooltip) {
      const useFinalPosition = args.replay;

      if (chart.tooltip.handleEvent(args.event, useFinalPosition)) {
        args.changed = true;
      }
    }
  },

  defaults: {
    enabled: true,
    external: null,
    position: 'average',
    backgroundColor: 'rgba(0,0,0,0.8)',
    titleColor: '#fff',
    titleFont: {
      weight: 'bold'
    },
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleAlign: 'left',
    bodyColor: '#fff',
    bodySpacing: 2,
    bodyFont: {},
    bodyAlign: 'left',
    footerColor: '#fff',
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFont: {
      weight: 'bold'
    },
    footerAlign: 'left',
    padding: 6,
    caretPadding: 2,
    caretSize: 5,
    cornerRadius: 6,
    boxHeight: (ctx, opts) => opts.bodyFont.size,
    boxWidth: (ctx, opts) => opts.bodyFont.size,
    multiKeyBackground: '#fff',
    displayColors: true,
    borderColor: 'rgba(0,0,0,0)',
    borderWidth: 0,
    animation: {
      duration: 400,
      easing: 'easeOutQuart'
    },
    animations: {
      numbers: {
        type: 'number',
        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']
      },
      opacity: {
        easing: 'linear',
        duration: 200
      }
    },
    callbacks: {
      beforeTitle: _helpersSegment.ay,

      title(tooltipItems) {
        if (tooltipItems.length > 0) {
          const item = tooltipItems[0];
          const labels = item.chart.data.labels;
          const labelCount = labels ? labels.length : 0;

          if (this && this.options && this.options.mode === 'dataset') {
            return item.dataset.label || '';
          } else if (item.label) {
            return item.label;
          } else if (labelCount > 0 && item.dataIndex < labelCount) {
            return labels[item.dataIndex];
          }
        }

        return '';
      },

      afterTitle: _helpersSegment.ay,
      beforeBody: _helpersSegment.ay,
      beforeLabel: _helpersSegment.ay,

      label(tooltipItem) {
        if (this && this.options && this.options.mode === 'dataset') {
          return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;
        }

        let label = tooltipItem.dataset.label || '';

        if (label) {
          label += ': ';
        }

        const value = tooltipItem.formattedValue;

        if (!(0, _helpersSegment.j)(value)) {
          label += value;
        }

        return label;
      },

      labelColor(tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
          borderColor: options.borderColor,
          backgroundColor: options.backgroundColor,
          borderWidth: options.borderWidth,
          borderDash: options.borderDash,
          borderDashOffset: options.borderDashOffset,
          borderRadius: 0
        };
      },

      labelTextColor() {
        return this.options.bodyColor;
      },

      labelPointStyle(tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
          pointStyle: options.pointStyle,
          rotation: options.rotation
        };
      },

      afterLabel: _helpersSegment.ay,
      afterBody: _helpersSegment.ay,
      beforeFooter: _helpersSegment.ay,
      footer: _helpersSegment.ay,
      afterFooter: _helpersSegment.ay
    }
  },
  defaultRoutes: {
    bodyFont: 'font',
    footerFont: 'font',
    titleFont: 'font'
  },
  descriptors: {
    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',
    _indexable: false,
    callbacks: {
      _scriptable: false,
      _indexable: false
    },
    animation: {
      _fallback: false
    },
    animations: {
      _fallback: 'animation'
    }
  },
  additionalOptionScopes: ['interaction']
};
exports.Tooltip = plugin_tooltip;
var plugins = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Decimation: plugin_decimation,
  Filler: plugin_filler,
  Legend: plugin_legend,
  SubTitle: plugin_subtitle,
  Title: plugin_title,
  Tooltip: plugin_tooltip
});
exports.plugins = plugins;

const addIfString = (labels, raw, index) => typeof raw === 'string' ? labels.push(raw) - 1 : isNaN(raw) ? null : index;

function findOrAddLabel(labels, raw, index) {
  const first = labels.indexOf(raw);

  if (first === -1) {
    return addIfString(labels, raw, index);
  }

  const last = labels.lastIndexOf(raw);
  return first !== last ? index : first;
}

const validIndex = (index, max) => index === null ? null : (0, _helpersSegment.q)(Math.round(index), 0, max);

class CategoryScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this._startValue = undefined;
    this._valueRange = 0;
  }

  parse(raw, index) {
    if ((0, _helpersSegment.j)(raw)) {
      return null;
    }

    const labels = this.getLabels();
    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, (0, _helpersSegment.v)(index, raw));
    return validIndex(index, labels.length - 1);
  }

  determineDataLimits() {
    const me = this;
    const {
      minDefined,
      maxDefined
    } = me.getUserBounds();
    let {
      min,
      max
    } = me.getMinMax(true);

    if (me.options.bounds === 'ticks') {
      if (!minDefined) {
        min = 0;
      }

      if (!maxDefined) {
        max = me.getLabels().length - 1;
      }
    }

    me.min = min;
    me.max = max;
  }

  buildTicks() {
    const me = this;
    const min = me.min;
    const max = me.max;
    const offset = me.options.offset;
    const ticks = [];
    let labels = me.getLabels();
    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
    me._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
    me._startValue = me.min - (offset ? 0.5 : 0);

    for (let value = min; value <= max; value++) {
      ticks.push({
        value
      });
    }

    return ticks;
  }

  getLabelForValue(value) {
    const me = this;
    const labels = me.getLabels();

    if (value >= 0 && value < labels.length) {
      return labels[value];
    }

    return value;
  }

  configure() {
    const me = this;
    super.configure();

    if (!me.isHorizontal()) {
      me._reversePixels = !me._reversePixels;
    }
  }

  getPixelForValue(value) {
    const me = this;

    if (typeof value !== 'number') {
      value = me.parse(value);
    }

    return value === null ? NaN : me.getPixelForDecimal((value - me._startValue) / me._valueRange);
  }

  getPixelForTick(index) {
    const me = this;
    const ticks = me.ticks;

    if (index < 0 || index > ticks.length - 1) {
      return null;
    }

    return me.getPixelForValue(ticks[index].value);
  }

  getValueForPixel(pixel) {
    const me = this;
    return Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
  }

  getBasePixel() {
    return this.bottom;
  }

}

exports.CategoryScale = CategoryScale;
CategoryScale.id = 'category';
CategoryScale.defaults = {
  ticks: {
    callback: CategoryScale.prototype.getLabelForValue
  }
};

function generateTicks$1(generationOptions, dataRange) {
  const ticks = [];
  const MIN_SPACING = 1e-14;
  const {
    bounds,
    step,
    min,
    max,
    precision,
    count,
    maxTicks,
    maxDigits,
    includeBounds
  } = generationOptions;
  const unit = step || 1;
  const maxSpaces = maxTicks - 1;
  const {
    min: rmin,
    max: rmax
  } = dataRange;
  const minDefined = !(0, _helpersSegment.j)(min);
  const maxDefined = !(0, _helpersSegment.j)(max);
  const countDefined = !(0, _helpersSegment.j)(count);
  const minSpacing = (rmax - rmin) / (maxDigits + 1);
  let spacing = (0, _helpersSegment.aB)((rmax - rmin) / maxSpaces / unit) * unit;
  let factor, niceMin, niceMax, numSpaces;

  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
    return [{
      value: rmin
    }, {
      value: rmax
    }];
  }

  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);

  if (numSpaces > maxSpaces) {
    spacing = (0, _helpersSegment.aB)(numSpaces * spacing / maxSpaces / unit) * unit;
  }

  if (!(0, _helpersSegment.j)(precision)) {
    factor = Math.pow(10, precision);
    spacing = Math.ceil(spacing * factor) / factor;
  }

  if (bounds === 'ticks') {
    niceMin = Math.floor(rmin / spacing) * spacing;
    niceMax = Math.ceil(rmax / spacing) * spacing;
  } else {
    niceMin = rmin;
    niceMax = rmax;
  }

  if (minDefined && maxDefined && step && (0, _helpersSegment.aC)((max - min) / step, spacing / 1000)) {
    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
    spacing = (max - min) / numSpaces;
    niceMin = min;
    niceMax = max;
  } else if (countDefined) {
    niceMin = minDefined ? min : niceMin;
    niceMax = maxDefined ? max : niceMax;
    numSpaces = count - 1;
    spacing = (niceMax - niceMin) / numSpaces;
  } else {
    numSpaces = (niceMax - niceMin) / spacing;

    if ((0, _helpersSegment.aD)(numSpaces, Math.round(numSpaces), spacing / 1000)) {
      numSpaces = Math.round(numSpaces);
    } else {
      numSpaces = Math.ceil(numSpaces);
    }
  }

  const decimalPlaces = Math.max((0, _helpersSegment.aE)(spacing), (0, _helpersSegment.aE)(niceMin));
  factor = Math.pow(10, (0, _helpersSegment.j)(precision) ? decimalPlaces : precision);
  niceMin = Math.round(niceMin * factor) / factor;
  niceMax = Math.round(niceMax * factor) / factor;
  let j = 0;

  if (minDefined) {
    if (includeBounds && niceMin !== min) {
      ticks.push({
        value: min
      });

      if (niceMin < min) {
        j++;
      }

      if ((0, _helpersSegment.aD)(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
        j++;
      }
    } else if (niceMin < min) {
      j++;
    }
  }

  for (; j < numSpaces; ++j) {
    ticks.push({
      value: Math.round((niceMin + j * spacing) * factor) / factor
    });
  }

  if (maxDefined && includeBounds && niceMax !== max) {
    if ((0, _helpersSegment.aD)(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
      ticks[ticks.length - 1].value = max;
    } else {
      ticks.push({
        value: max
      });
    }
  } else if (!maxDefined || niceMax === max) {
    ticks.push({
      value: niceMax
    });
  }

  return ticks;
}

function relativeLabelSize(value, minSpacing, {
  horizontal,
  minRotation
}) {
  const rad = (0, _helpersSegment.t)(minRotation);
  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
  const length = 0.75 * minSpacing * ('' + value).length;
  return Math.min(minSpacing / ratio, length);
}

class LinearScaleBase extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = undefined;
    this.end = undefined;
    this._startValue = undefined;
    this._endValue = undefined;
    this._valueRange = 0;
  }

  parse(raw, index) {
    if ((0, _helpersSegment.j)(raw)) {
      return null;
    }

    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {
      return null;
    }

    return +raw;
  }

  handleTickRangeOptions() {
    const me = this;
    const {
      beginAtZero
    } = me.options;
    const {
      minDefined,
      maxDefined
    } = me.getUserBounds();
    let {
      min,
      max
    } = me;

    const setMin = v => min = minDefined ? min : v;

    const setMax = v => max = maxDefined ? max : v;

    if (beginAtZero) {
      const minSign = (0, _helpersSegment.s)(min);
      const maxSign = (0, _helpersSegment.s)(max);

      if (minSign < 0 && maxSign < 0) {
        setMax(0);
      } else if (minSign > 0 && maxSign > 0) {
        setMin(0);
      }
    }

    if (min === max) {
      let offset = 1;

      if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) {
        offset = Math.abs(max * 0.05);
      }

      setMax(max + offset);

      if (!beginAtZero) {
        setMin(min - offset);
      }
    }

    me.min = min;
    me.max = max;
  }

  getTickLimit() {
    const me = this;
    const tickOpts = me.options.ticks;
    let {
      maxTicksLimit,
      stepSize
    } = tickOpts;
    let maxTicks;

    if (stepSize) {
      maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
    } else {
      maxTicks = me.computeTickLimit();
      maxTicksLimit = maxTicksLimit || 11;
    }

    if (maxTicksLimit) {
      maxTicks = Math.min(maxTicksLimit, maxTicks);
    }

    return maxTicks;
  }

  computeTickLimit() {
    return Number.POSITIVE_INFINITY;
  }

  buildTicks() {
    const me = this;
    const opts = me.options;
    const tickOpts = opts.ticks;
    let maxTicks = me.getTickLimit();
    maxTicks = Math.max(2, maxTicks);
    const numericGeneratorOptions = {
      maxTicks,
      bounds: opts.bounds,
      min: opts.min,
      max: opts.max,
      precision: tickOpts.precision,
      step: tickOpts.stepSize,
      count: tickOpts.count,
      maxDigits: me._maxDigits(),
      horizontal: me.isHorizontal(),
      minRotation: tickOpts.minRotation || 0,
      includeBounds: tickOpts.includeBounds !== false
    };
    const dataRange = me._range || me;
    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);

    if (opts.bounds === 'ticks') {
      (0, _helpersSegment.aA)(ticks, me, 'value');
    }

    if (opts.reverse) {
      ticks.reverse();
      me.start = me.max;
      me.end = me.min;
    } else {
      me.start = me.min;
      me.end = me.max;
    }

    return ticks;
  }

  configure() {
    const me = this;
    const ticks = me.ticks;
    let start = me.min;
    let end = me.max;
    super.configure();

    if (me.options.offset && ticks.length) {
      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
      start -= offset;
      end += offset;
    }

    me._startValue = start;
    me._endValue = end;
    me._valueRange = end - start;
  }

  getLabelForValue(value) {
    return (0, _helpersSegment.n)(value, this.chart.options.locale);
  }

}

class LinearScale extends LinearScaleBase {
  determineDataLimits() {
    const me = this;
    const {
      min,
      max
    } = me.getMinMax(true);
    me.min = (0, _helpersSegment.g)(min) ? min : 0;
    me.max = (0, _helpersSegment.g)(max) ? max : 1;
    me.handleTickRangeOptions();
  }

  computeTickLimit() {
    const me = this;
    const horizontal = me.isHorizontal();
    const length = horizontal ? me.width : me.height;
    const minRotation = (0, _helpersSegment.t)(me.options.ticks.minRotation);
    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;

    const tickFont = me._resolveTickFontOptions(0);

    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
  }

  getPixelForValue(value) {
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }

  getValueForPixel(pixel) {
    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
  }

}

exports.LinearScale = LinearScale;
LinearScale.id = 'linear';
LinearScale.defaults = {
  ticks: {
    callback: Ticks.formatters.numeric
  }
};

function isMajor(tickVal) {
  const remain = tickVal / Math.pow(10, Math.floor((0, _helpersSegment.J)(tickVal)));
  return remain === 1;
}

function generateTicks(generationOptions, dataRange) {
  const endExp = Math.floor((0, _helpersSegment.J)(dataRange.max));
  const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
  const ticks = [];
  let tickVal = (0, _helpersSegment.L)(generationOptions.min, Math.pow(10, Math.floor((0, _helpersSegment.J)(dataRange.min))));
  let exp = Math.floor((0, _helpersSegment.J)(tickVal));
  let significand = Math.floor(tickVal / Math.pow(10, exp));
  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;

  do {
    ticks.push({
      value: tickVal,
      major: isMajor(tickVal)
    });
    ++significand;

    if (significand === 10) {
      significand = 1;
      ++exp;
      precision = exp >= 0 ? 1 : precision;
    }

    tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
  } while (exp < endExp || exp === endExp && significand < endSignificand);

  const lastTick = (0, _helpersSegment.L)(generationOptions.max, tickVal);
  ticks.push({
    value: lastTick,
    major: isMajor(tickVal)
  });
  return ticks;
}

class LogarithmicScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = undefined;
    this.end = undefined;
    this._startValue = undefined;
    this._valueRange = 0;
  }

  parse(raw, index) {
    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);

    if (value === 0) {
      this._zero = true;
      return undefined;
    }

    return (0, _helpersSegment.g)(value) && value > 0 ? value : null;
  }

  determineDataLimits() {
    const me = this;
    const {
      min,
      max
    } = me.getMinMax(true);
    me.min = (0, _helpersSegment.g)(min) ? Math.max(0, min) : null;
    me.max = (0, _helpersSegment.g)(max) ? Math.max(0, max) : null;

    if (me.options.beginAtZero) {
      me._zero = true;
    }

    me.handleTickRangeOptions();
  }

  handleTickRangeOptions() {
    const me = this;
    const {
      minDefined,
      maxDefined
    } = me.getUserBounds();
    let min = me.min;
    let max = me.max;

    const setMin = v => min = minDefined ? min : v;

    const setMax = v => max = maxDefined ? max : v;

    const exp = (v, m) => Math.pow(10, Math.floor((0, _helpersSegment.J)(v)) + m);

    if (min === max) {
      if (min <= 0) {
        setMin(1);
        setMax(10);
      } else {
        setMin(exp(min, -1));
        setMax(exp(max, +1));
      }
    }

    if (min <= 0) {
      setMin(exp(max, -1));
    }

    if (max <= 0) {
      setMax(exp(min, +1));
    }

    if (me._zero && me.min !== me._suggestedMin && min === exp(me.min, 0)) {
      setMin(exp(min, -1));
    }

    me.min = min;
    me.max = max;
  }

  buildTicks() {
    const me = this;
    const opts = me.options;
    const generationOptions = {
      min: me._userMin,
      max: me._userMax
    };
    const ticks = generateTicks(generationOptions, me);

    if (opts.bounds === 'ticks') {
      (0, _helpersSegment.aA)(ticks, me, 'value');
    }

    if (opts.reverse) {
      ticks.reverse();
      me.start = me.max;
      me.end = me.min;
    } else {
      me.start = me.min;
      me.end = me.max;
    }

    return ticks;
  }

  getLabelForValue(value) {
    return value === undefined ? '0' : (0, _helpersSegment.n)(value, this.chart.options.locale);
  }

  configure() {
    const me = this;
    const start = me.min;
    super.configure();
    me._startValue = (0, _helpersSegment.J)(start);
    me._valueRange = (0, _helpersSegment.J)(me.max) - (0, _helpersSegment.J)(start);
  }

  getPixelForValue(value) {
    const me = this;

    if (value === undefined || value === 0) {
      value = me.min;
    }

    if (value === null || isNaN(value)) {
      return NaN;
    }

    return me.getPixelForDecimal(value === me.min ? 0 : ((0, _helpersSegment.J)(value) - me._startValue) / me._valueRange);
  }

  getValueForPixel(pixel) {
    const me = this;
    const decimal = me.getDecimalForPixel(pixel);
    return Math.pow(10, me._startValue + decimal * me._valueRange);
  }

}

exports.LogarithmicScale = LogarithmicScale;
LogarithmicScale.id = 'logarithmic';
LogarithmicScale.defaults = {
  ticks: {
    callback: Ticks.formatters.logarithmic,
    major: {
      enabled: true
    }
  }
};

function getTickBackdropHeight(opts) {
  const tickOpts = opts.ticks;

  if (tickOpts.display && opts.display) {
    const padding = (0, _helpersSegment.A)(tickOpts.backdropPadding);
    return (0, _helpersSegment.v)(tickOpts.font && tickOpts.font.size, _helpersSegment.d.font.size) + padding.height;
  }

  return 0;
}

function measureLabelSize(ctx, font, label) {
  label = (0, _helpersSegment.b)(label) ? label : [label];
  return {
    w: (0, _helpersSegment.aF)(ctx, font.string, label),
    h: label.length * font.lineHeight
  };
}

function determineLimits(angle, pos, size, min, max) {
  if (angle === min || angle === max) {
    return {
      start: pos - size / 2,
      end: pos + size / 2
    };
  } else if (angle < min || angle > max) {
    return {
      start: pos - size,
      end: pos
    };
  }

  return {
    start: pos,
    end: pos + size
  };
}

function fitWithPointLabels(scale) {
  const furthestLimits = {
    l: 0,
    r: scale.width,
    t: 0,
    b: scale.height - scale.paddingTop
  };
  const furthestAngles = {};
  const labelSizes = [];
  const padding = [];
  const valueCount = scale.getLabels().length;

  for (let i = 0; i < valueCount; i++) {
    const opts = scale.options.pointLabels.setContext(scale.getPointLabelContext(i));
    padding[i] = opts.padding;
    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i]);
    const plFont = (0, _helpersSegment.X)(opts.font);
    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
    labelSizes[i] = textSize;
    const angleRadians = scale.getIndexAngle(i);
    const angle = (0, _helpersSegment.O)(angleRadians);
    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);

    if (hLimits.start < furthestLimits.l) {
      furthestLimits.l = hLimits.start;
      furthestAngles.l = angleRadians;
    }

    if (hLimits.end > furthestLimits.r) {
      furthestLimits.r = hLimits.end;
      furthestAngles.r = angleRadians;
    }

    if (vLimits.start < furthestLimits.t) {
      furthestLimits.t = vLimits.start;
      furthestAngles.t = angleRadians;
    }

    if (vLimits.end > furthestLimits.b) {
      furthestLimits.b = vLimits.end;
      furthestAngles.b = angleRadians;
    }
  }

  scale._setReductions(scale.drawingArea, furthestLimits, furthestAngles);

  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}

function buildPointLabelItems(scale, labelSizes, padding) {
  const items = [];
  const valueCount = scale.getLabels().length;
  const opts = scale.options;
  const tickBackdropHeight = getTickBackdropHeight(opts);
  const outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);

  for (let i = 0; i < valueCount; i++) {
    const extra = i === 0 ? tickBackdropHeight / 2 : 0;
    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i]);
    const angle = (0, _helpersSegment.O)(scale.getIndexAngle(i));
    const size = labelSizes[i];
    const y = yForAngle(pointLabelPosition.y, size.h, angle);
    const textAlign = getTextAlignForAngle(angle);
    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
    items.push({
      x: pointLabelPosition.x,
      y,
      textAlign,
      left,
      top: y,
      right: left + size.w,
      bottom: y + size.h
    });
  }

  return items;
}

function getTextAlignForAngle(angle) {
  if (angle === 0 || angle === 180) {
    return 'center';
  } else if (angle < 180) {
    return 'left';
  }

  return 'right';
}

function leftForTextAlign(x, w, align) {
  if (align === 'right') {
    x -= w;
  } else if (align === 'center') {
    x -= w / 2;
  }

  return x;
}

function yForAngle(y, h, angle) {
  if (angle === 90 || angle === 270) {
    y -= h / 2;
  } else if (angle > 270 || angle < 90) {
    y -= h;
  }

  return y;
}

function drawPointLabels(scale, labelCount) {
  const {
    ctx,
    options: {
      pointLabels
    }
  } = scale;

  for (let i = labelCount - 1; i >= 0; i--) {
    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
    const plFont = (0, _helpersSegment.X)(optsAtIndex.font);
    const {
      x,
      y,
      textAlign,
      left,
      top,
      right,
      bottom
    } = scale._pointLabelItems[i];
    const {
      backdropColor
    } = optsAtIndex;

    if (!(0, _helpersSegment.j)(backdropColor)) {
      const padding = (0, _helpersSegment.A)(optsAtIndex.backdropPadding);
      ctx.fillStyle = backdropColor;
      ctx.fillRect(left - padding.left, top - padding.top, right - left + padding.width, bottom - top + padding.height);
    }

    (0, _helpersSegment.V)(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {
      color: optsAtIndex.color,
      textAlign: textAlign,
      textBaseline: 'middle'
    });
  }
}

function pathRadiusLine(scale, radius, circular, labelCount) {
  const {
    ctx
  } = scale;

  if (circular) {
    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, _helpersSegment.T);
  } else {
    let pointPosition = scale.getPointPosition(0, radius);
    ctx.moveTo(pointPosition.x, pointPosition.y);

    for (let i = 1; i < labelCount; i++) {
      pointPosition = scale.getPointPosition(i, radius);
      ctx.lineTo(pointPosition.x, pointPosition.y);
    }
  }
}

function drawRadiusLine(scale, gridLineOpts, radius, labelCount) {
  const ctx = scale.ctx;
  const circular = gridLineOpts.circular;
  const {
    color,
    lineWidth
  } = gridLineOpts;

  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {
    return;
  }

  ctx.save();
  ctx.strokeStyle = color;
  ctx.lineWidth = lineWidth;
  ctx.setLineDash(gridLineOpts.borderDash);
  ctx.lineDashOffset = gridLineOpts.borderDashOffset;
  ctx.beginPath();
  pathRadiusLine(scale, radius, circular, labelCount);
  ctx.closePath();
  ctx.stroke();
  ctx.restore();
}

function numberOrZero(param) {
  return (0, _helpersSegment.p)(param) ? param : 0;
}

function createPointLabelContext(parent, index, label) {
  return Object.assign(Object.create(parent), {
    label,
    index,
    type: 'pointLabel'
  });
}

class RadialLinearScale extends LinearScaleBase {
  constructor(cfg) {
    super(cfg);
    this.xCenter = undefined;
    this.yCenter = undefined;
    this.drawingArea = undefined;
    this._pointLabels = [];
    this._pointLabelItems = [];
  }

  setDimensions() {
    const me = this;
    me.width = me.maxWidth;
    me.height = me.maxHeight;
    me.paddingTop = getTickBackdropHeight(me.options) / 2;
    me.xCenter = Math.floor(me.width / 2);
    me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
    me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
  }

  determineDataLimits() {
    const me = this;
    const {
      min,
      max
    } = me.getMinMax(false);
    me.min = (0, _helpersSegment.g)(min) && !isNaN(min) ? min : 0;
    me.max = (0, _helpersSegment.g)(max) && !isNaN(max) ? max : 0;
    me.handleTickRangeOptions();
  }

  computeTickLimit() {
    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
  }

  generateTickLabels(ticks) {
    const me = this;
    LinearScaleBase.prototype.generateTickLabels.call(me, ticks);
    me._pointLabels = me.getLabels().map((value, index) => {
      const label = (0, _helpersSegment.M)(me.options.pointLabels.callback, [value, index], me);
      return label || label === 0 ? label : '';
    });
  }

  fit() {
    const me = this;
    const opts = me.options;

    if (opts.display && opts.pointLabels.display) {
      fitWithPointLabels(me);
    } else {
      me.setCenterPoint(0, 0, 0, 0);
    }
  }

  _setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {
    const me = this;
    let radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
    let radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
    let radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
    let radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);
    radiusReductionLeft = numberOrZero(radiusReductionLeft);
    radiusReductionRight = numberOrZero(radiusReductionRight);
    radiusReductionTop = numberOrZero(radiusReductionTop);
    radiusReductionBottom = numberOrZero(radiusReductionBottom);
    me.drawingArea = Math.max(largestPossibleRadius / 2, Math.min(Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2)));
    me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
  }

  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
    const me = this;
    const maxRight = me.width - rightMovement - me.drawingArea;
    const maxLeft = leftMovement + me.drawingArea;
    const maxTop = topMovement + me.drawingArea;
    const maxBottom = me.height - me.paddingTop - bottomMovement - me.drawingArea;
    me.xCenter = Math.floor((maxLeft + maxRight) / 2 + me.left);
    me.yCenter = Math.floor((maxTop + maxBottom) / 2 + me.top + me.paddingTop);
  }

  getIndexAngle(index) {
    const angleMultiplier = _helpersSegment.T / this.getLabels().length;
    const startAngle = this.options.startAngle || 0;
    return (0, _helpersSegment.at)(index * angleMultiplier + (0, _helpersSegment.t)(startAngle));
  }

  getDistanceFromCenterForValue(value) {
    const me = this;

    if ((0, _helpersSegment.j)(value)) {
      return NaN;
    }

    const scalingFactor = me.drawingArea / (me.max - me.min);

    if (me.options.reverse) {
      return (me.max - value) * scalingFactor;
    }

    return (value - me.min) * scalingFactor;
  }

  getValueForDistanceFromCenter(distance) {
    if ((0, _helpersSegment.j)(distance)) {
      return NaN;
    }

    const me = this;
    const scaledDistance = distance / (me.drawingArea / (me.max - me.min));
    return me.options.reverse ? me.max - scaledDistance : me.min + scaledDistance;
  }

  getPointLabelContext(index) {
    const me = this;
    const pointLabels = me._pointLabels || [];

    if (index >= 0 && index < pointLabels.length) {
      const pointLabel = pointLabels[index];
      return createPointLabelContext(me.getContext(), index, pointLabel);
    }
  }

  getPointPosition(index, distanceFromCenter) {
    const me = this;

    const angle = me.getIndexAngle(index) - _helpersSegment.H;

    return {
      x: Math.cos(angle) * distanceFromCenter + me.xCenter,
      y: Math.sin(angle) * distanceFromCenter + me.yCenter,
      angle
    };
  }

  getPointPositionForValue(index, value) {
    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
  }

  getBasePosition(index) {
    return this.getPointPositionForValue(index || 0, this.getBaseValue());
  }

  getPointLabelPosition(index) {
    const {
      left,
      top,
      right,
      bottom
    } = this._pointLabelItems[index];
    return {
      left,
      top,
      right,
      bottom
    };
  }

  drawBackground() {
    const me = this;
    const {
      backgroundColor,
      grid: {
        circular
      }
    } = me.options;

    if (backgroundColor) {
      const ctx = me.ctx;
      ctx.save();
      ctx.beginPath();
      pathRadiusLine(me, me.getDistanceFromCenterForValue(me._endValue), circular, me.getLabels().length);
      ctx.closePath();
      ctx.fillStyle = backgroundColor;
      ctx.fill();
      ctx.restore();
    }
  }

  drawGrid() {
    const me = this;
    const ctx = me.ctx;
    const opts = me.options;
    const {
      angleLines,
      grid
    } = opts;
    const labelCount = me.getLabels().length;
    let i, offset, position;

    if (opts.pointLabels.display) {
      drawPointLabels(me, labelCount);
    }

    if (grid.display) {
      me.ticks.forEach((tick, index) => {
        if (index !== 0) {
          offset = me.getDistanceFromCenterForValue(tick.value);
          const optsAtIndex = grid.setContext(me.getContext(index - 1));
          drawRadiusLine(me, optsAtIndex, offset, labelCount);
        }
      });
    }

    if (angleLines.display) {
      ctx.save();

      for (i = me.getLabels().length - 1; i >= 0; i--) {
        const optsAtIndex = angleLines.setContext(me.getPointLabelContext(i));
        const {
          color,
          lineWidth
        } = optsAtIndex;

        if (!lineWidth || !color) {
          continue;
        }

        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = color;
        ctx.setLineDash(optsAtIndex.borderDash);
        ctx.lineDashOffset = optsAtIndex.borderDashOffset;
        offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
        position = me.getPointPosition(i, offset);
        ctx.beginPath();
        ctx.moveTo(me.xCenter, me.yCenter);
        ctx.lineTo(position.x, position.y);
        ctx.stroke();
      }

      ctx.restore();
    }
  }

  drawBorder() {}

  drawLabels() {
    const me = this;
    const ctx = me.ctx;
    const opts = me.options;
    const tickOpts = opts.ticks;

    if (!tickOpts.display) {
      return;
    }

    const startAngle = me.getIndexAngle(0);
    let offset, width;
    ctx.save();
    ctx.translate(me.xCenter, me.yCenter);
    ctx.rotate(startAngle);
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    me.ticks.forEach((tick, index) => {
      if (index === 0 && !opts.reverse) {
        return;
      }

      const optsAtIndex = tickOpts.setContext(me.getContext(index));
      const tickFont = (0, _helpersSegment.X)(optsAtIndex.font);
      offset = me.getDistanceFromCenterForValue(me.ticks[index].value);

      if (optsAtIndex.showLabelBackdrop) {
        ctx.font = tickFont.string;
        width = ctx.measureText(tick.label).width;
        ctx.fillStyle = optsAtIndex.backdropColor;
        const padding = (0, _helpersSegment.A)(optsAtIndex.backdropPadding);
        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
      }

      (0, _helpersSegment.V)(ctx, tick.label, 0, -offset, tickFont, {
        color: optsAtIndex.color
      });
    });
    ctx.restore();
  }

  drawTitle() {}

}

exports.RadialLinearScale = RadialLinearScale;
RadialLinearScale.id = 'radialLinear';
RadialLinearScale.defaults = {
  display: true,
  animate: true,
  position: 'chartArea',
  angleLines: {
    display: true,
    lineWidth: 1,
    borderDash: [],
    borderDashOffset: 0.0
  },
  grid: {
    circular: false
  },
  startAngle: 0,
  ticks: {
    showLabelBackdrop: true,
    callback: Ticks.formatters.numeric
  },
  pointLabels: {
    backdropColor: undefined,
    backdropPadding: 2,
    display: true,
    font: {
      size: 10
    },

    callback(label) {
      return label;
    },

    padding: 5
  }
};
RadialLinearScale.defaultRoutes = {
  'angleLines.color': 'borderColor',
  'pointLabels.color': 'color',
  'ticks.color': 'color'
};
RadialLinearScale.descriptors = {
  angleLines: {
    _fallback: 'grid'
  }
};
const INTERVALS = {
  millisecond: {
    common: true,
    size: 1,
    steps: 1000
  },
  second: {
    common: true,
    size: 1000,
    steps: 60
  },
  minute: {
    common: true,
    size: 60000,
    steps: 60
  },
  hour: {
    common: true,
    size: 3600000,
    steps: 24
  },
  day: {
    common: true,
    size: 86400000,
    steps: 30
  },
  week: {
    common: false,
    size: 604800000,
    steps: 4
  },
  month: {
    common: true,
    size: 2.628e9,
    steps: 12
  },
  quarter: {
    common: false,
    size: 7.884e9,
    steps: 4
  },
  year: {
    common: true,
    size: 3.154e10
  }
};
const UNITS = Object.keys(INTERVALS);

function sorter(a, b) {
  return a - b;
}

function parse(scale, input) {
  if ((0, _helpersSegment.j)(input)) {
    return null;
  }

  const adapter = scale._adapter;
  const {
    parser,
    round,
    isoWeekday
  } = scale._parseOpts;
  let value = input;

  if (typeof parser === 'function') {
    value = parser(value);
  }

  if (!(0, _helpersSegment.g)(value)) {
    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);
  }

  if (value === null) {
    return null;
  }

  if (round) {
    value = round === 'week' && ((0, _helpersSegment.p)(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);
  }

  return +value;
}

function determineUnitForAutoTicks(minUnit, min, max, capacity) {
  const ilen = UNITS.length;

  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
    const interval = INTERVALS[UNITS[i]];
    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;

    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
      return UNITS[i];
    }
  }

  return UNITS[ilen - 1];
}

function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
    const unit = UNITS[i];

    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
      return unit;
    }
  }

  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}

function determineMajorUnit(unit) {
  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
    if (INTERVALS[UNITS[i]].common) {
      return UNITS[i];
    }
  }
}

function addTick(ticks, time, timestamps) {
  if (!timestamps) {
    ticks[time] = true;
  } else if (timestamps.length) {
    const {
      lo,
      hi
    } = (0, _helpersSegment.aH)(timestamps, time);
    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
    ticks[timestamp] = true;
  }
}

function setMajorTicks(scale, ticks, map, majorUnit) {
  const adapter = scale._adapter;
  const first = +adapter.startOf(ticks[0].value, majorUnit);
  const last = ticks[ticks.length - 1].value;
  let major, index;

  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    index = map[major];

    if (index >= 0) {
      ticks[index].major = true;
    }
  }

  return ticks;
}

function ticksFromTimestamps(scale, values, majorUnit) {
  const ticks = [];
  const map = {};
  const ilen = values.length;
  let i, value;

  for (i = 0; i < ilen; ++i) {
    value = values[i];
    map[value] = i;
    ticks.push({
      value,
      major: false
    });
  }

  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
}

class TimeScale extends Scale {
  constructor(props) {
    super(props);
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
    this._unit = 'day';
    this._majorUnit = undefined;
    this._offsets = {};
    this._normalized = false;
    this._parseOpts = undefined;
  }

  init(scaleOpts, opts) {
    const time = scaleOpts.time || (scaleOpts.time = {});
    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
    (0, _helpersSegment.a7)(time.displayFormats, adapter.formats());
    this._parseOpts = {
      parser: time.parser,
      round: time.round,
      isoWeekday: time.isoWeekday
    };
    super.init(scaleOpts);
    this._normalized = opts.normalized;
  }

  parse(raw, index) {
    if (raw === undefined) {
      return null;
    }

    return parse(this, raw);
  }

  beforeLayout() {
    super.beforeLayout();
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
  }

  determineDataLimits() {
    const me = this;
    const options = me.options;
    const adapter = me._adapter;
    const unit = options.time.unit || 'day';
    let {
      min,
      max,
      minDefined,
      maxDefined
    } = me.getUserBounds();

    function _applyBounds(bounds) {
      if (!minDefined && !isNaN(bounds.min)) {
        min = Math.min(min, bounds.min);
      }

      if (!maxDefined && !isNaN(bounds.max)) {
        max = Math.max(max, bounds.max);
      }
    }

    if (!minDefined || !maxDefined) {
      _applyBounds(me._getLabelBounds());

      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {
        _applyBounds(me.getMinMax(false));
      }
    }

    min = (0, _helpersSegment.g)(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
    max = (0, _helpersSegment.g)(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
    me.min = Math.min(min, max - 1);
    me.max = Math.max(min + 1, max);
  }

  _getLabelBounds() {
    const arr = this.getLabelTimestamps();
    let min = Number.POSITIVE_INFINITY;
    let max = Number.NEGATIVE_INFINITY;

    if (arr.length) {
      min = arr[0];
      max = arr[arr.length - 1];
    }

    return {
      min,
      max
    };
  }

  buildTicks() {
    const me = this;
    const options = me.options;
    const timeOpts = options.time;
    const tickOpts = options.ticks;
    const timestamps = tickOpts.source === 'labels' ? me.getLabelTimestamps() : me._generate();

    if (options.bounds === 'ticks' && timestamps.length) {
      me.min = me._userMin || timestamps[0];
      me.max = me._userMax || timestamps[timestamps.length - 1];
    }

    const min = me.min;
    const max = me.max;
    const ticks = (0, _helpersSegment.aG)(timestamps, min, max);
    me._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, me._getLabelCapacity(min)) : determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
    me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined : determineMajorUnit(me._unit);
    me.initOffsets(timestamps);

    if (options.reverse) {
      ticks.reverse();
    }

    return ticksFromTimestamps(me, ticks, me._majorUnit);
  }

  initOffsets(timestamps) {
    const me = this;
    let start = 0;
    let end = 0;
    let first, last;

    if (me.options.offset && timestamps.length) {
      first = me.getDecimalForValue(timestamps[0]);

      if (timestamps.length === 1) {
        start = 1 - first;
      } else {
        start = (me.getDecimalForValue(timestamps[1]) - first) / 2;
      }

      last = me.getDecimalForValue(timestamps[timestamps.length - 1]);

      if (timestamps.length === 1) {
        end = last;
      } else {
        end = (last - me.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
      }
    }

    const limit = timestamps.length < 3 ? 0.5 : 0.25;
    start = (0, _helpersSegment.q)(start, 0, limit);
    end = (0, _helpersSegment.q)(end, 0, limit);
    me._offsets = {
      start,
      end,
      factor: 1 / (start + 1 + end)
    };
  }

  _generate() {
    const me = this;
    const adapter = me._adapter;
    const min = me.min;
    const max = me.max;
    const options = me.options;
    const timeOpts = options.time;
    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, me._getLabelCapacity(min));
    const stepSize = (0, _helpersSegment.v)(timeOpts.stepSize, 1);
    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;
    const hasWeekday = (0, _helpersSegment.p)(weekday) || weekday === true;
    const ticks = {};
    let first = min;
    let time, count;

    if (hasWeekday) {
      first = +adapter.startOf(first, 'isoWeek', weekday);
    }

    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);

    if (adapter.diff(max, min, minor) > 100000 * stepSize) {
      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);
    }

    const timestamps = options.ticks.source === 'data' && me.getDataTimestamps();

    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {
      addTick(ticks, time, timestamps);
    }

    if (time === max || options.bounds === 'ticks' || count === 1) {
      addTick(ticks, time, timestamps);
    }

    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);
  }

  getLabelForValue(value) {
    const me = this;
    const adapter = me._adapter;
    const timeOpts = me.options.time;

    if (timeOpts.tooltipFormat) {
      return adapter.format(value, timeOpts.tooltipFormat);
    }

    return adapter.format(value, timeOpts.displayFormats.datetime);
  }

  _tickFormatFunction(time, index, ticks, format) {
    const me = this;
    const options = me.options;
    const formats = options.time.displayFormats;
    const unit = me._unit;
    const majorUnit = me._majorUnit;
    const minorFormat = unit && formats[unit];
    const majorFormat = majorUnit && formats[majorUnit];
    const tick = ticks[index];
    const major = majorUnit && majorFormat && tick && tick.major;

    const label = me._adapter.format(time, format || (major ? majorFormat : minorFormat));

    const formatter = options.ticks.callback;
    return formatter ? (0, _helpersSegment.M)(formatter, [label, index, ticks], me) : label;
  }

  generateTickLabels(ticks) {
    let i, ilen, tick;

    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      tick.label = this._tickFormatFunction(tick.value, i, ticks);
    }
  }

  getDecimalForValue(value) {
    const me = this;
    return value === null ? NaN : (value - me.min) / (me.max - me.min);
  }

  getPixelForValue(value) {
    const me = this;
    const offsets = me._offsets;
    const pos = me.getDecimalForValue(value);
    return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
  }

  getValueForPixel(pixel) {
    const me = this;
    const offsets = me._offsets;
    const pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return me.min + pos * (me.max - me.min);
  }

  _getLabelSize(label) {
    const me = this;
    const ticksOpts = me.options.ticks;
    const tickLabelWidth = me.ctx.measureText(label).width;
    const angle = (0, _helpersSegment.t)(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
    const cosRotation = Math.cos(angle);
    const sinRotation = Math.sin(angle);

    const tickFontSize = me._resolveTickFontOptions(0).size;

    return {
      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
    };
  }

  _getLabelCapacity(exampleTime) {
    const me = this;
    const timeOpts = me.options.time;
    const displayFormats = timeOpts.displayFormats;
    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;

    const exampleLabel = me._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);

    const size = me._getLabelSize(exampleLabel);

    const capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h) - 1;
    return capacity > 0 ? capacity : 1;
  }

  getDataTimestamps() {
    const me = this;
    let timestamps = me._cache.data || [];
    let i, ilen;

    if (timestamps.length) {
      return timestamps;
    }

    const metas = me.getMatchingVisibleMetas();

    if (me._normalized && metas.length) {
      return me._cache.data = metas[0].controller.getAllParsedValues(me);
    }

    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(me));
    }

    return me._cache.data = me.normalize(timestamps);
  }

  getLabelTimestamps() {
    const me = this;
    const timestamps = me._cache.labels || [];
    let i, ilen;

    if (timestamps.length) {
      return timestamps;
    }

    const labels = me.getLabels();

    for (i = 0, ilen = labels.length; i < ilen; ++i) {
      timestamps.push(parse(me, labels[i]));
    }

    return me._cache.labels = me._normalized ? timestamps : me.normalize(timestamps);
  }

  normalize(values) {
    return (0, _helpersSegment._)(values.sort(sorter));
  }

}

exports.TimeScale = TimeScale;
TimeScale.id = 'time';
TimeScale.defaults = {
  bounds: 'data',
  adapters: {},
  time: {
    parser: false,
    unit: false,
    round: false,
    isoWeekday: false,
    minUnit: 'millisecond',
    displayFormats: {}
  },
  ticks: {
    source: 'auto',
    major: {
      enabled: false
    }
  }
};

function interpolate(table, val, reverse) {
  let lo = 0;
  let hi = table.length - 1;
  let prevSource, nextSource, prevTarget, nextTarget;

  if (reverse) {
    if (val >= table[lo].pos && val <= table[hi].pos) {
      ({
        lo,
        hi
      } = (0, _helpersSegment.w)(table, 'pos', val));
    }

    ({
      pos: prevSource,
      time: prevTarget
    } = table[lo]);
    ({
      pos: nextSource,
      time: nextTarget
    } = table[hi]);
  } else {
    if (val >= table[lo].time && val <= table[hi].time) {
      ({
        lo,
        hi
      } = (0, _helpersSegment.w)(table, 'time', val));
    }

    ({
      time: prevSource,
      pos: prevTarget
    } = table[lo]);
    ({
      time: nextSource,
      pos: nextTarget
    } = table[hi]);
  }

  const span = nextSource - prevSource;
  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}

class TimeSeriesScale extends TimeScale {
  constructor(props) {
    super(props);
    this._table = [];
    this._minPos = undefined;
    this._tableRange = undefined;
  }

  initOffsets() {
    const me = this;

    const timestamps = me._getTimestampsForTable();

    const table = me._table = me.buildLookupTable(timestamps);
    me._minPos = interpolate(table, me.min);
    me._tableRange = interpolate(table, me.max) - me._minPos;
    super.initOffsets(timestamps);
  }

  buildLookupTable(timestamps) {
    const {
      min,
      max
    } = this;
    const items = [];
    const table = [];
    let i, ilen, prev, curr, next;

    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
      curr = timestamps[i];

      if (curr >= min && curr <= max) {
        items.push(curr);
      }
    }

    if (items.length < 2) {
      return [{
        time: min,
        pos: 0
      }, {
        time: max,
        pos: 1
      }];
    }

    for (i = 0, ilen = items.length; i < ilen; ++i) {
      next = items[i + 1];
      prev = items[i - 1];
      curr = items[i];

      if (Math.round((next + prev) / 2) !== curr) {
        table.push({
          time: curr,
          pos: i / (ilen - 1)
        });
      }
    }

    return table;
  }

  _getTimestampsForTable() {
    const me = this;
    let timestamps = me._cache.all || [];

    if (timestamps.length) {
      return timestamps;
    }

    const data = me.getDataTimestamps();
    const label = me.getLabelTimestamps();

    if (data.length && label.length) {
      timestamps = me.normalize(data.concat(label));
    } else {
      timestamps = data.length ? data : label;
    }

    timestamps = me._cache.all = timestamps;
    return timestamps;
  }

  getDecimalForValue(value) {
    return (interpolate(this._table, value) - this._minPos) / this._tableRange;
  }

  getValueForPixel(pixel) {
    const me = this;
    const offsets = me._offsets;
    const decimal = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return interpolate(me._table, decimal * me._tableRange + me._minPos, true);
  }

}

exports.TimeSeriesScale = TimeSeriesScale;
TimeSeriesScale.id = 'timeseries';
TimeSeriesScale.defaults = TimeScale.defaults;
var scales = /*#__PURE__*/Object.freeze({
  __proto__: null,
  CategoryScale: CategoryScale,
  LinearScale: LinearScale,
  LogarithmicScale: LogarithmicScale,
  RadialLinearScale: RadialLinearScale,
  TimeScale: TimeScale,
  TimeSeriesScale: TimeSeriesScale
});
exports.scales = scales;
const registerables = [controllers, elements, plugins, scales];
exports.registerables = registerables;
},{"./chunks/helpers.segment.js":"../../node_modules/chart.js/dist/chunks/helpers.segment.js"}],"../../node_modules/chart.js/auto/auto.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chart = require("../dist/chart.esm");

_chart.Chart.register(..._chart.registerables);

var _default = _chart.Chart;
exports.default = _default;
},{"../dist/chart.esm":"../../node_modules/chart.js/dist/chart.esm.js"}],"../../node_modules/parcel-bundler/src/builtins/_empty.js":[function(require,module,exports) {

},{}],"../../node_modules/xlsx/dist/cpexcel.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
/* cpexcel.js (C) 2013-present SheetJS -- http://sheetjs.com */

/*jshint -W100 */
var cptable = {
  version: "1.14.0"
};

cptable[437] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ã¿ÃÃÂ¢Â£Â¥â§ÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿âÂ¬Â½Â¼Â¡Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â ",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[620] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Ã ÄÃ§ÃªÃ«Ã¨Ã¯Ã®ÄÃÄÄÄÅÃ´Ã¶ÄÃ»Ã¹ÅÃÃÂ¢ÅÂ¥ÅÆÅ¹Å»Ã³ÃÅÅÅºÅ¼Â¿âÂ¬Â½Â¼Â¡Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â ",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[737] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏâââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÏÎ¬Î­Î®ÏÎ¯ÏÏÏÏÎÎÎÎÎÎÎÂ±â¥â¤ÎªÎ«Ã·âÂ°âÂ·ââ¿Â²â Â ",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[850] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ã¿ÃÃÃ¸Â£ÃÃÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿Â®Â¬Â½Â¼Â¡Â«Â»âââââ¤ÃÃÃÂ©â£âââÂ¢Â¥âââ´â¬âââ¼Ã£Ãâââ©â¦â ââ¬Â¤Ã°ÃÃÃÃÄ±ÃÃÃââââÂ¦ÃâÃÃÃÃÃµÃÂµÃ¾ÃÃÃÃÃ½ÃÂ¯Â´Â­Â±âÂ¾Â¶Â§Ã·Â¸Â°Â¨Â·Â¹Â³Â²â Â ",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[852] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Å¯ÄÃ§ÅÃ«ÅÅÃ®Å¹ÃÄÃÄ¹ÄºÃ´Ã¶Ä½Ä¾ÅÅÃÃÅ¤Å¥ÅÃÄÃ¡Ã­Ã³ÃºÄÄÅ½Å¾ÄÄÂ¬ÅºÄÅÂ«Â»âââââ¤ÃÃÄÅâ£âââÅ»Å¼âââ´â¬âââ¼ÄÄâââ©â¦â ââ¬Â¤ÄÄÄÃÄÅÃÃÄââââÅ¢Å®âÃÃÃÅÅÅÅ Å¡ÅÃÅÅ°Ã½ÃÅ£Â´Â­ËËËËÂ§Ã·Â¸Â°Â¨ËÅ±ÅÅâ Â ",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[857] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ä±ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ä°ÃÃÃ¸Â£ÃÅÅÃ¡Ã­Ã³ÃºÃ±ÃÄÄÂ¿Â®Â¬Â½Â¼Â¡Â«Â»âââââ¤ÃÃÃÂ©â£âââÂ¢Â¥âââ´â¬âââ¼Ã£Ãâââ©â¦â ââ¬Â¤ÂºÂªÃÃÃï¿½ÃÃÃââââÂ¦ÃâÃÃÃÃÃµÃÂµï¿½ÃÃÃÃÃ¬Ã¿Â¯Â´Â­Â±ï¿½Â¾Â¶Â§Ã·Â¸Â°Â¨Â·Â¹Â³Â²â Â ",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[861] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨ÃÃ°ÃÃÃÃÃ¦ÃÃ´Ã¶Ã¾Ã»ÃÃ½ÃÃÃ¸Â£Ãâ§ÆÃ¡Ã­Ã³ÃºÃÃÃÃÂ¿âÂ¬Â½Â¼Â¡Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â ",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[865] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ã¿ÃÃÃ¸Â£Ãâ§ÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿âÂ¬Â½Â¼Â¡Â«Â¤âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â ",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[866] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÐÑÐÑÐÑÐÑÂ°âÂ·ââÂ¤â Â ",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[874] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿½ï¿½ï¿½ï¿½â¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½âââââ¢ââï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Â à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸ à¸¡à¸¢à¸£à¸¤à¸¥à¸¦à¸§à¸¨à¸©à¸ªà¸«à¸¬à¸­à¸®à¸¯à¸°à¸±à¸²à¸³à¸´à¸µà¸¶à¸·à¸¸à¸¹à¸ºï¿½ï¿½ï¿½ï¿½à¸¿à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹ï¿½ï¿½ï¿½ï¿½",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[895] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÃ¼Ã©ÄÃ¤ÄÅ¤ÄÄÄÄ¹ÃÄ¾ÇªÃÃÃÅ¾Å½Ã´Ã¶ÃÅ¯ÃÃ½ÃÃÅ Ä½ÃÅÅ¥Ã¡Ã­Ã³ÃºÅÅÅ®ÃÅ¡ÅÅÅÂ¼Â§Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â ",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[932] = function () {
  var d = [],
      e = {},
      D = [],
      j;
  D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï½¡ï½¢ï½£ï½¤ï½¥ï½¦ï½§ï½¨ï½©ï½ªï½«ï½¬ï½­ï½®ï½¯ï½°ï½±ï½²ï½³ï½´ï½µï½¶ï½·ï½¸ï½¹ï½ºï½»ï½¼ï½½ï½¾ï½¿ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 0xFFFD) {
    e[D[0][j]] = 0 + j;
    d[0 + j] = D[0][j];
  }

  D[129] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ãããï¼ï¼ã»ï¼ï¼ï¼ï¼ããÂ´ï½Â¨ï¼¾ï¿£ï¼¿ã½ã¾ãããä»ãããã¼ââï¼ï¼¼ï½â¥ï½â¦â¥ââââï¼ï¼ããï¼»ï¼½ï½ï½ããããããããããï¼ï¼Â±Ãï¿½Ã·ï¼â ï¼ï¼â¦â§ââ´ââÂ°â²â³âï¿¥ï¼ï¿ ï¿¡ï¼ï¼ï¼ï¼ï¼ Â§ââââââââ¡â â³â²â½â¼â»ãââââãï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½âââââââªâ©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â§â¨ï¿¢ââââï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â â¥ââââ¡ââªâ«ââ½ââµâ«â¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â«â°â¯â­âªâ â¡Â¶ï¿½ï¿½ï¿½ï¿½â¯ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[129].length; ++j) if (D[129][j].charCodeAt(0) !== 0xFFFD) {
    e[D[129][j]] = 33024 + j;
    d[33024 + j] = D[129][j];
  }

  D[130] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¼¡ï¼¢ï¼£ï¼¤ï¼¥ï¼¦ï¼§ï¼¨ï¼©ï¼ªï¼«ï¼¬ï¼­ï¼®ï¼¯ï¼°ï¼±ï¼²ï¼³ï¼´ï¼µï¼¶ï¼·ï¼¸ï¼¹ï¼ºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï¿½ï¿½ï¿½ï¿½ãããããããããããããããããããããããããããããããã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ããããããããããããããããããããï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[130].length; ++j) if (D[130][j].charCodeAt(0) !== 0xFFFD) {
    e[D[130][j]] = 33280 + j;
    d[33280 + j] = D[130][j];
  }

  D[131] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ããããããããããããããããããããããããããããããããï¿½ã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[131].length; ++j) if (D[131][j].charCodeAt(0) !== 0xFFFD) {
    e[D[131][j]] = 33536 + j;
    d[33536 + j] = D[131][j];
  }

  D[132] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð°Ð±Ð²Ð³Ð´ÐµÑÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½ï¿½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ââââââââ¬â¤â´â¼âââââââ£â³â«â»ââ â¯â¨â·â¿ââ°â¥â¸âï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[132].length; ++j) if (D[132][j].charCodeAt(0) !== 0xFFFD) {
    e[D[132][j]] = 33792 + j;
    d[33792 + j] = D[132][j];
  }

  D[135] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â â¡â¢â£â¤â¥â¦â§â¨â©âªâ«â¬â­â®â¯â°â±â²â³â â¡â¢â£â¤â¥â¦â§â¨â©ï¿½ããã¢ããã§ãã¶ãããã¦ã£ã«ãã»ããããããã¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã»ï¿½ããâãâ¡ã¤ã¥ã¦ã§ã¨ã±ã²ã¹ã¾ã½ã¼ââ¡â«â®âââ¥â ââ¿âµâ©âªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[135].length; ++j) if (D[135][j].charCodeAt(0) !== 0xFFFD) {
    e[D[135][j]] = 34560 + j;
    d[34560 + j] = D[135][j];
  }

  D[136] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½äºåå¨é¿åææ¨å§¶é¢èµèç©æªæ¡æ¸¥æ­è¦è¦é¯µæ¢å§æ¡æ±å®å§è»é£´çµ¢ç¶¾é®æç²è¢·å®åºµæææ¡ééæä»¥ä¼ä½ä¾åå²å¤·å§å¨å°æææ°ææ¤çºçç°ç§»ç¶­ç·¯èèè¡£è¬ééºå»äºäº¥åè²éç£¯ä¸å£±æº¢é¸ç¨²è¨èé°¯åå°å½å¡å å§»å¼é£²æ·«è¤è­ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[136].length; ++j) if (D[136][j].charCodeAt(0) !== 0xFFFD) {
    e[D[136][j]] = 34816 + j;
    d[34816 + j] = D[136][j];
  }

  D[137] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¢é°é é»åå³å®çç¾½è¿é¨å¯éµçªºä¸ç¢è¼æ¸¦ååæ¬èé°»å§¥å©æµ¦çéåäºéé²èé¤å¡å¶å¬°å½±æ æ³æ æ°¸æ³³æ´©ççç©é ´è±è¡è© é­æ¶²ç«çé§æ¦è¬è¶é²æ¦å­åï¿½åå °å¥å®´å»¶æ¨æ©æ´æ²¿æ¼ççççç¿ç¸è¶èèé éé´å¡©æ¼æ±ç¥å¹å¤®å¥¥å¾å¿æ¼æºæ¨ªæ¬§æ®´çç¿è¥é´¬é´é»å²¡æ²è»åå±æ¶èæ¡¶ç¡ä¹ä¿ºå¸æ©æ¸©ç©é³ä¸åä»®ä½ä¼½ä¾¡ä½³å å¯åå¤å«å®¶å¯¡ç§æææ¶æ­æ²³ç«çç¦ç¦¾ç¨¼ç®è±èèè·è¯èè¦èª²å©è²¨è¿¦ééèä¿å³¨æçç»è¥è½è¾è³éé¤é§ä»ä¼è§£åå¡å£å»»å¿«æªææ¢ææææ¹ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[137].length; ++j) if (D[137][j].charCodeAt(0) !== 0xFFFD) {
    e[D[137][j]] = 35072 + j;
    d[35072 + j] = D[137][j];
  }

  D[138] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é­æ¦æ¢°æµ·ç°çççµµè¥è¹ééè²å±å¾å¤å³å®³å´æ¨æ¦æ¶¯ç¢èè¡è©²é§éª¸æµ¬é¦¨èå£æ¿èéåååå»æ¡æ¹æ ¼æ ¸æ®»ç²ç¢ºç©«è¦è§èµ«è¼é­é£éé©å­¦å²³æ¥½é¡é¡æç¬ æ¨«ï¿½æ©¿æ¢¶é°æ½å²åæ°æ¬æ´»æ¸æ»èè¤è½ä¸é°¹å¶æ¤æ¨ºéæ ªåç«è²ééåé´¨æ ¢èè±ç²¥åèç¦ä¹¾ä¾å å¯ååå§å·»åå ªå§¦å®å®å¯å¹²å¹¹æ£ææ£æ¾ææ¢ææ¡æ£ºæ¬¾æ­æ±æ¼¢æ¾æ½ç°çç£çç«¿ç®¡ç°¡ç·©ç¼¶ç¿°èè¦èè¦³è«è²«ééééé¢é¥éé¤¨èä¸¸å«å²¸å·ç©çç¼å²©ç¿«è´éé é¡é¡ä¼ä¼å±åå¨åºå¥å¬å¯å²å¸å¹¾å¿æ®æºææ¢ææ£æ£ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[138].length; ++j) if (D[138][j].charCodeAt(0) !== 0xFFFD) {
    e[D[138][j]] = 35328 + j;
    d[35328 + j] = D[138][j];
  }

  D[139] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ©å¸°æ¯æ°æ±½ç¿ç¥å­£ç¨ç´å¾½è¦è¨è²´èµ·è»è¼é£¢é¨é¬¼äºå½åå¦å®æ¯ææ¬æ¬ºç çç¥ç¾©è»èª¼è­°æ¬èé ååå«æ¡æ©è©°ç §æµé»å´å®¢èèéä¸ä¹ä»ä¼åå¸å®®å¼æ¥æï¿½æ½æ±æ±²æ³£ç¸çç©¶çª®ç¬ç´ç³¾çµ¦æ§çå»å±å·¨ææ ææ¸ èè¨±è·é¸æ¼ç¦¦é­äº¨äº«äº¬ä¾ä¾ ååç«¶å±å¶åå¡å¿å«å¬å¢å³¡å¼·å½æ¯ææ­æææ©æ³çç­ç¯è¸èèèé·é¡é¿é¥é©ä»°åå°­ææ¥­å±æ²æ¥µçæ¡ç²åå¤åå·¾é¦æ¤æ¬£æ¬½ç´ç¦ç¦½ç­ç·è¹èè¡¿è¥è¬¹è¿éåéä¹å¶å¥åºççç©è¦èº¯é§é§é§å·æèå°ç©ºå¶å¯ééä¸²æ«é§å±å±ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[139].length; ++j) if (D[139][j].charCodeAt(0) !== 0xFFFD) {
    e[D[139][j]] = 35584 + j;
    d[35584 + j] = D[139][j];
  }

  D[140] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æçªæ²é´è½¡çªªçéç²æ ç¹°æ¡é¬å²åè«è¨ç¾¤è»é¡å¦è¢ç¥ä¿å¾åååå­çªåå¥å½¢å¾æµæ¶æ§æ©æ²æºæ¬æ¯æ¡æ¸ç¦ç¨½ç³»çµç¶ç¹ç½«èèèè¨è©£è­¦è»½é é¶è¸è¿é¯¨ï¿½åæææ¿éæ¡åæ¬ æ±ºæ½ç©´çµè¡è¨£æä»¶å¹å¦å¥å¼å¸å£å§åå å«å»ºæ²æ¸æ³æ²æ¤æ¨©ç½ç¬ç®ç ç¡¯çµ¹çè©è¦è¬è³¢è»é£éµéºé¡é¨é¹¸ååå³å¹»å¼¦æ¸æºçç¾çµè·è¨è«ºéä¹åå¤å¼åºå§å­¤å·±åº«å¼§æ¸ææ¯æ¹çç³è¢´è¡è¡è°èèªè·¨é·éé¡§é¼äºäºä¼ååå¾å¨¯å¾å¾¡ææ¢§æªçç¢èªèª¤è­·éä¹é¯äº¤ä½¼ä¾¯åååå¬åå¹å¾åå£åï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[140].length; ++j) if (D[140][j].charCodeAt(0) !== 0xFFFD) {
    e[D[140][j]] = 35840 + j;
    d[35840 + j] = D[140][j];
  }

  D[141] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åååå¢å¥½å­å­å®å·¥å·§å··å¹¸åºåºåº·å¼æææææ§æ»æææ´æ­æ ¡æ¢æ§æ±æ´ªæµ©æ¸¯æºç²çç¡¬ç¨¿ç³ ç´ç´çµç¶±èèè¯è±èèèªèè¡è¡¡è¬è²¢è³¼ééµé±ç ¿é¼é¤éï¿½é é¦é«é´»åå«å·åå£æ·æ¿ è±ªè½éº¹åå»åå½ç©é·éµ é»çæ¼è°çå¿½æéª¨çè¾¼æ­¤é ä»å°å¤å¢¾å©æ¨ææææ ¹æ¢±æ··çç´ºè®é­äºä½åååµ¯å·¦å·®æ»æ²ç³ç è©éè£ååº§æ«åµå¬åæåå¡å¦»å®°å½©ææ¡æ ½æ­³æ¸ç½éçç ç ¦ç¥­æç´°èè£è¼éå¤å¨æç½ªè²¡å´åéªå ºæ¦è´å²å´å¼ç¢é·ºä½ååæ¾æ¨ææµçªç­ç´¢é¯æ¡é®­ç¬¹ååå·ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[141].length; ++j) if (D[141][j].charCodeAt(0) !== 0xFFFD) {
    e[D[141][j]] = 36096 + j;
    d[36096 + j] = D[141][j];
  }

  D[142] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¯æ¶æ®æ¦æ­æ®ºè©éçé¯æéé®«ç¿æä¸ååå±±æ¨ææ£æ¡ç¦çç£ç®çºèè®è³é¸é¤æ¬æ«æ®ä»ä»ä¼ºä½¿åºå¸å²å£åå£«å§å§å§¿å­å±å¸å¸«å¿æææ¯å­æ¯æ½æ¨ææ­¢ï¿½æ­»æ°çç¥ç§ç³¸ç´ç´«è¢èè³è¦è©è©©è©¦èªè«®è³è³éé£¼æ­¯äºä¼¼ä¾åå­å¯ºææææ¬¡æ»æ²»ç¾ç½çç£ç¤ºèè³èªèè¾æ±é¹¿å¼è­é´«ç«ºè»¸å®é«ä¸å±å·å¤±å«å®¤ææ¹¿æ¼ç¾è³ªå®èç¯ å²æ´èå±¡èç¸èåå°æ¨èµ¦æç®ç¤¾ç´èè¬è»é®èéªååºå°ºæç¼çµééé«è¥å¯å¼±æ¹ä¸»åå®ææ±æ®ç©ç ç¨®è«è¶£éé¦åååªå¯¿ææ¨¹ç¶¬éååå¨ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[142].length; ++j) if (D[142][j].charCodeAt(0) !== 0xFFFD) {
    e[D[142][j]] = 36352 + j;
    d[36352 + j] = D[142][j];
  }

  D[143] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å®å°±å·ä¿®ææ¾æ´²ç§ç§çµç¹ç¿è­èèè¡è¥²è®è¹´è¼¯é±éé¬ééä»ä½ååå¾æææ±æ¸ç£ç¸¦ééåå¤å®¿æ·ç¥ç¸®ç²å¡¾çåºè¡è¿°ä¿å³»æ¥ç¬ç«£èé§¿åå¾ªæ¬æ¥¯æ®æ·³ï¿½æºæ½¤ç¾ç´å·¡éµéé å¦åææææ¸åº¶ç·ç½²æ¸è¯è·è«¸å©åå¥³åºå¾æé¤é¤å·ååå åå¬å¨åå±åå¥¨å¦¾å¨¼å®µå°å°å°å°åºåºå» å½°æ¿ææææ·æææ­æ¶æ¾æ¢¢æ¨æ¨µæ²¼æ¶æ¸æ¹ç¼ç¦ç§ççç¡ç¤ç¥¥ç§°ç« ç¬ç²§ç´¹èèèèè¡è£³è¨è¨¼è©è©³è±¡è³é¤é¦é¾éééä¸ä¸ä¸ä¹åå°åå ´å£å¬¢å¸¸ææ¾æ¡ææµç¶ç³ç©£è¸è­²é¸é å±å´é£¾ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[143].length; ++j) if (D[143][j].charCodeAt(0) !== 0xFFFD) {
    e[D[143][j]] = 36608 + j;
    d[36608 + j] = D[143][j];
  }

  D[144] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ­æ¤æ®ç­ç¹è·è²è§¦é£èè¾±å°»ä¼¸ä¿¡ä¾µåå¨ å¯å¯©å¿ææ¯æ°ææ£®æ¦æµ¸æ·±ç³ç¹çç¥ç§¦ç´³è£è¯èªè¦ªè¨ºèº«è¾é²ééäººä»åå¡µå£¬å°çå°½èè¨è¿é£é­ç¬¥è«é é¢å³å¨ï¿½éå¹åå¸¥æ¨æ°´çç¡ç²ç¿ è¡°éééééçé«å´åµ©æ°æ¢è¶¨éæ®ææ¤èé éè£¾æ¾æºå¯¸ä¸ç¬çæ¯åå¶å¢å§å¾æ§ææ¿æ´ææ´æ£²æ æ­£æ¸ç²ççç²¾èå£°è£½è¥¿èª èªè«ééééæç¨èé»å¸­æææ¥ææç³ç©ç±ç¸¾èè²¬èµ¤è·¡è¹ç¢©åææ¥ææè¨­çªç¯èª¬éªçµ¶èèä»ååå å®£å°å°å·æ¦ææ°æ æ ´æ³æµæ´ææ½çç½æç©¿ç®­ç·ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[144].length; ++j) if (D[144][j].charCodeAt(0) !== 0xFFFD) {
    e[D[144][j]] = 36864 + j;
    d[36864 + j] = D[144][j];
  }

  D[145] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¹ç¾¨èºèè¹è¦è©®è³è·µé¸é·é­ééé®®ååæ¼¸ç¶å¨ç¦ç¹è³ç³åå¡å²¨æªæ¾æ½æ¥çççç¤ç¥ç§ç²ç´ çµèè¨´é»é¡é¼ å§åµåå¢ååªå£®å¥ç½å®å±¤åæ£æ³æææ¿æ»ï¿½ææ©æ¹å·£æ§æ§½æ¼ç¥äºç©ç¸çªç³ç·ç¶è¡èèè¬è¼è»è£èµ°éé­ééé¨åå¢æèèµè´é ä¿å´åå³æ¯æææ¸¬è¶³éä¿å±è³æç¶åè¢å¶æå­å­«å°ææéä»å¤å¤ªæ±°è©å¾å å¦¥æ°ææèµæ¥éé§é¨¨ä½å å¯¾èå²±å¸¯å¾æ ææ´æ¿æ³°æ»èè¿èè¢è²¸éé®éé»é¯ä»£å°å¤§ç¬¬éé¡é·¹æ»ç§ååå®ææææ²¢æ¿¯ç¢è¨é¸æ¿è«¾è¸å§è¸åªï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[145].length; ++j) if (D[145][j].charCodeAt(0) !== 0xFFFD) {
    e[D[145][j]] = 37120 + j;
    d[37120 + j] = D[145][j];
  }

  D[146] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å©ä½éè¾°å¥ªè±å·½ç«ªè¾¿æ£è°·ç¸é±æ¨½èª°ä¸¹ååå¦ææ¢æ¦æ­æ·¡æ¹ç­ç­ç«¯ç®ªç¶»è½èèèªéå£å£å¼¾æ­ææªæ®µç·è«å¤ç¥å°å¼æ¥æºæ± ç´ç¨ç½®è´èéé¦³ç¯çç«¹ç­èï¿½éç§©çªè¶å«¡çä¸­ä»²å®å¿ æ½æ¼æ±æ³¨è«è¡·è¨»éé³é§æ¨ç¦çªè§èè²¯ä¸åååå¯µå¸å¸³åºå¼å¼µå½«å¾´æ²ææ¢ææ½®ççºçºè´è¹è¸è¶èª¿è«è¶è·³éé·é é³¥åæç´ææ²çè³é®é³æ´¥å¢æ¤æ§è¿½éçéå¡æ æ´æ§»ä½æ¼¬æè¾»è¦ç¶´éæ¤¿æ½°åªå£·å¬¬ç´¬çªåé£é¶´äº­ä½ååµåè²åå ¤å®å¸åºåº­å»·å¼ææµæºææ¢¯æ±ç¢ç¦ç¨ç· èè¨è«¦è¹éï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[146].length; ++j) if (D[146][j].charCodeAt(0) !== 0xFFFD) {
    e[D[146][j]] = 37376 + j;
    d[37376 + j] = D[146][j];
  }

  D[147] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¸é­éé¼æ³¥ææ¢æµæ»´çç¬é©éæººå²å¾¹æ¤è½è¿­éå¸å¡«å¤©å±åºæ·»çºçè²¼è»¢é¡ç¹ä¼æ®¿æ¾±ç°é»ååå µå¡å¦¬å± å¾æææ¸¡ç»èè³­éé½éç ¥ç ºåªåº¦åå¥´æååå¬ï¿½åååå¡å¡å¥å®å³¶å¶æ¼ææ­æ±æ¡æ¢¼æ£çæ·æ¹¯æ¶ç¯çå½çç¥·ç­ç­ç­ç³çµ±å°è£è©è¤è¨è¬è±è¸éééé¶é ­é¨°éåååå å°æ§ææ´ç³ç«¥è´èééå³ é´å¿å¾å¾³æ¶ç¹ç£ç¦¿ç¯¤æ¯ç¬èª­æ æ©¡å¸çªæ¤´å±é³¶è«å¯éçå¸å±¯ææ¦æ²è±éé åæéå¥é£åä¹åªèè¬çæºéæ¥¢é¦´ç¸ç·åæ¥ è»é£æ±äºå°¼å¼è¿©åè³èè¹å»¿æ¥ä¹³å¥ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[147].length; ++j) if (D[147][j].charCodeAt(0) !== 0xFFFD) {
    e[D[147][j]] = 37632 + j;
    d[37632 + j] = D[147][j];
  }

  D[148] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¦å°¿é®ä»»å¦å¿èªæ¿¡ç¦°ç¥¢å¯§è±ç«ç±å¹´å¿µæ»æçç²ä¹å»¼ä¹åå¢æ©æ¿ç´è½è³è¿è¾²è¦è¤å·´ææ­è¦æ·æ³¢æ´¾ç¶ç ´å©ç½µè­é¦¬ä¿³å»ææææ¯ççèèºè¼©éåå¹åªæ¢ï¿½æ¥³ç¤ç½è²·å£²è³ éªéè¿ç§¤ç§è©ä¼¯å¥åæææ³ç½ç®ç²è¶èè¿«ææ¼ çç¸è«é§éº¦å½ç®±ç¡²ç®¸èç­æ«¨å¹¡èçç å«é¢æºçºéé«ªä¼ç½°æç­é¥é³©åºå¡è¤é¼ä¼´å¤åååå¸æ¬ææ¿æ°¾æ±çç¯ç­çç¹è¬è©è²©ç¯éç©é é£¯æ½æ©çªç¤ç£èè®åªåå¦å¦åºå½¼æ²ææ¹æ«ææ¯æ³ç²ç®ç¢ç§ç·ç½·è¥è¢«èª¹è²»é¿éé£æ¨ç°¸åå°¾å¾®ææ¯çµçç¾ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[148].length; ++j) if (D[148][j].charCodeAt(0) !== 0xFFFD) {
    e[D[148][j]] = 37888 + j;
    d[37888 + j] = D[148][j];
  }

  D[149] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¼»æç¨å¹çé«­å½¦èè±èå¼¼å¿ç¢ç­é¼æ¡§å§«åªç´ç¾è¬¬ä¿µå½ªæ¨æ°·æ¼ç¢ç¥¨è¡¨è©è±¹å»æçç§èé¨é²èè­é°­åå½¬ææµçè²§è³é »æç¶ä¸ä»å å¤«å©¦å¯å¨å¸åºææ¶æ·ï¿½æ§æ®æµ®ç¶ç¬¦èèèè­è² è³¦èµ´ééä¾®æ«æ­¦èè¡èªé¨å°æ¥é¢¨èºèä¼å¯å¾©å¹æç¦è¹è¤è¦æ·µå¼ææ²¸ä»ç©é®åå»å´å¢³æ¤æ®çå¥®ç²ç³ç´é°æèä¸ä½µåµå¡å¹£å¹³å¼æä¸¦è½ééç±³é å»å£çç¢§å¥ç¥èç®åå¤çç¯ç·¨è¾ºè¿éä¾¿åå¨©å¼é­ä¿èéªåææ­©ç«è£è¼ç©åå¢æææ®æ¯ç°¿è©å£ä¿¸ååå ±å¥å®å³°å³¯å´©åºæ±æ§æ¾æ¹æï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[149].length; ++j) if (D[149][j].charCodeAt(0) !== 0xFFFD) {
    e[D[149][j]] = 38144 + j;
    d[38144 + j] = D[149][j];
  }

  D[150] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ³æ³¡ç¹ç ²ç¸«èè³èè¬èè¤è¨ªè±é¦éé£½é³³éµ¬ä¹äº¡åååå¦¨å¸½å¿å¿æ¿æ´æææ£åç´¡èªè¨è¬è²è²¿é¾é²å é ¬åååå¢¨æ²æ´ç§ç¦ç©é¦åæ²¡æ®å å¹å¥æ¬ç¿»å¡çï¿½æ©ç£¨é­éº»åå¦¹æ§ææ¯å©æ§å¹èæé®ªæ¾é±æ¡äº¦ä¿£åæ¹æ«æ²«è¿ä¾­ç¹­éº¿ä¸æ¢æºæ¼«èå³æªé­å·³ç®å²¬å¯èæ¹èç¨èå¦ç²æ°ç åå¤¢ç¡ççé§éµ¡æ¤å©¿å¨å¥åå½æçè¿·éé³´å§ªçæ»åæ£ç¶¿ç·¬é¢éººæ¸æ¨¡èå¦å­æ¯çç²ç¶²èèå²æ¨é»ç®æ¢å¿é¤å°¤æ»ç±¾è²°åæ¶ç´éåä¹å¶å¤çºè¶éå¼¥ç¢åå½¹ç´è¬è¨³èºéæ³è®éæææ²¹çï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[150].length; ++j) if (D[150][j].charCodeAt(0) !== 0xFFFD) {
    e[D[150][j]] = 38400 + j;
    d[38400 + j] = D[150][j];
  }

  D[151] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è«­è¼¸å¯ä½åªååå®¥å¹½æ æææææ¹§æ¶ç¶ç·ç±ç¥è£èªéééµéèå¤äºä½ä¸èªè¼¿é å­å¹¼å¦å®¹åº¸ææºæææ¥æ§æ´æº¶çç¨çª¯ç¾èèèè¦è¬¡è¸é¥é½é¤æ¾ææ¬²ï¿½æ²æµ´ç¿ç¿¼æ·ç¾èºè£¸æ¥è±é ¼é·æ´çµ¡è½éªä¹±åµåµæ¬æ¿«èè­è¦§å©åå±¥ææ¢¨ççç¢è£è£¡éé¢é¸å¾çç«èæ ç¥åæµæºççç¡«ç²éç«é¾ä¾¶æ®æèäºäº®åä¸¡åå¯®ææ¢æ¶¼ççç­ç¨ç³§è¯è«é¼ééµé åç·å«åææ·çç³è¨è¼ªé£é±éºç å¡æ¶ç´¯é¡ä»¤ä¼¶ä¾å·å±å¶ºæç²ç¤¼èé´é·é¶ééºé½¢æ¦æ­´åå£çè£å»æææ¼£çç°¾ç·´è¯ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[151].length; ++j) if (D[151][j].charCodeAt(0) !== 0xFFFD) {
    e[D[151][j]] = 38656 + j;
    d[38656 + j] = D[151][j];
  }

  D[152] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è®é£é¬åé­¯æ«çè³è·¯é²å´å©å»å¼ææ¥¼æ¦æµªæ¼ç¢ç¼ç¯­èè¾èéå­éºç¦èé²è«å­åè©±æ­ªè³èææ é·²äºäºé°è©«èè¨æ¤æ¹¾ç¢èï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¼ä¸ä¸ä¸ªä¸±ä¸¶ä¸¼ä¸¿ä¹ä¹ä¹äºäºè±«äºèå¼äºäºäºäº äº¢äº°äº³äº¶ä»ä»ä»ä»ä»ä»ä»ä»­ä»ä»·ä¼ä½ä¼°ä½ä½ä½ä½ä½¶ä¾ä¾ä¾ä½»ä½©ä½°ä¾ä½¯ä¾ä¾åä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿¤ä¿¥åå¨ååªå¥åä¼ä¿¶å¡å©å¬ä¿¾ä¿¯ååååæåååååå¬å¸åååå´å²ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[152].length; ++j) if (D[152][j].charCodeAt(0) !== 0xFFFD) {
    e[D[152][j]] = 38912 + j;
    d[38912 + j] = D[152][j];
  }

  D[153] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ååå³åååå¥å­å£å®å¹åµåååååååå¡åºå·å¼å»å¿ååååå¢ç«¸å©åªå®ååååååååååå¤å¦å¢å©åªå«å³å±å²å°åµå½åååå èå©å­ï¿½å°åµå¾ååååå§åªå®å³å¹åååååååªå´å©å³å¿å½åååå±ååè¾¨è¾§å¬å­å¼åµååååå£å¦é£­å å³åµå¸å¹ååç¸åååååå£å¯å±å³å¸åååä¸ååååå©å®å¤å»å·ååå å¦å¥å®å°å¶åç°éåæ¼ç®å®å¨å­åºåå½åå¬å­å¼å®å¶å©ååååµååå±å·å°åå»åå¶ååååå¢å¸å¥å¬ååå¨ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[153].length; ++j) if (D[153][j].charCodeAt(0) !== 0xFFFD) {
    e[D[153][j]] = 39168 + j;
    d[39168 + j] = D[153][j];
  }

  D[154] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å«åå¤å¾å¼åå¥å¦ååå½å®å­åºå¢å¹åå£åå®ååååå¸å³åååå¯ååå»å¾ååå®å¼åå©åå¨åååååå¤ååå·åå¾å½åå¹ååçå´å¶å²å¸ï¿½å«å¤å¯å¬åªåååå ååå¥å®å¶å´åå¼ååååååååå®å¹åå¿ååååååååååå¦å·å¸åå»ååå©ååå¡å¿ååå å³å¤åªå°åååååå åå£å å å å¡²å ¡å¡¢å¡å¡°æ¯å¡å ½å¡¹å¢å¢¹å¢å¢«å¢ºå£å¢»å¢¸å¢®å£å£å£å£å£å£å£¥å£å£¤å£å£¯å£ºå£¹å£»å£¼å£½å¤å¤å¤å¤æ¢¦å¤¥å¤¬å¤­å¤²å¤¸å¤¾ç«å¥å¥å¥å¥å¥å¥¢å¥ å¥§å¥¬å¥©ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[154].length; ++j) if (D[154][j].charCodeAt(0) !== 0xFFFD) {
    e[D[154][j]] = 39424 + j;
    d[39424 + j] = D[154][j];
  }

  D[155] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¥¸å¦å¦ä½ä¾«å¦£å¦²å§å§¨å§å¦å§å§å¨¥å¨å¨å¨å¨å¨å©å©¬å©å¨µå¨¶å©¢å©ªåªåª¼åª¾å«å«åª½å«£å«å«¦å«©å«å«ºå«»å¬å¬å¬å¬²å«å¬ªå¬¶å¬¾å­å­å­å­å­å­å­å­¥å­©å­°å­³å­µå­¸æå­ºå®ï¿½å®å®¦å®¸å¯å¯å¯å¯å¯å¯¤å¯¦å¯¢å¯å¯¥å¯«å¯°å¯¶å¯³å°å°å°å°å°å° å°¢å°¨å°¸å°¹å±å±å±å±å±å±å­±å±¬å±®ä¹¢å±¶å±¹å²å²å²å¦å²«å²»å²¶å²¼å²·å³å²¾å³å³å³©å³½å³ºå³­å¶å³ªå´å´å´åµå´å´å´å´å´¢å´å´å´åµåµåµåµåµ¬åµ³åµ¶å¶å¶å¶å¶¢å¶å¶¬å¶®å¶½å¶å¶·å¶¼å·å·å·å·å·å·å·«å·²å·µå¸å¸å¸å¸å¸å¸¶å¸·å¹å¹å¹å¹å¹å¹å¹å¹¢å¹¤å¹å¹µå¹¶å¹ºéº¼å¹¿åº å»å»å»å»å»ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[155].length; ++j) if (D[155][j].charCodeAt(0) !== 0xFFFD) {
    e[D[155][j]] = 39680 + j;
    d[39680 + j] = D[155][j];
  }

  D[156] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å»å»£å»å»å»å»¢å»¡å»¨å»©å»¬å»±å»³å»°å»´å»¸å»¾å¼å¼å½å½å¼å¼å¼å¼©å¼­å¼¸å½å½å½å½å¼¯å½å½å½å½å½¡å½­å½³å½·å¾å¾å½¿å¾å¾å¾å¾å¾å¾å¾å¾ å¾¨å¾­å¾¼å¿å¿»å¿¤å¿¸å¿±å¿æ³å¿¿æ¡æ ï¿½æææ©ææ±æææ«æ¦ææºæææªæ·æææææ£ææ¤ææ¬æ«ææææ§ææææææææ§ææ¡æ¸æ ææ´å¿°æ½ææµæææææ¶æ·ææ´æºææ¡æ»æ±ææææ¾æ¨æ§ææ¿æ¼æ¬æ´æ½æææ³æ·ææææ«æ´æ¯æ¥æ±ææææµææææ¬æææææ«æ®ææææ·ææææºæç½¹ææ¦æ£æ¶æºæ´æ¿æ½æ¼æ¾æææææææï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[156].length; ++j) if (D[156][j].charCodeAt(0) !== 0xFFFD) {
    e[D[156][j]] = 39936 + j;
    d[39936 + j] = D[156][j];
  }

  D[157] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ææ¡æªæ®æ°æ²æ³ææææ£ææ æ¨æ¼æææ¾æææææææææ»ææ¿ææææææææææææ®æ±æ§æææ¯æµææ¾æææææææ«æ¶æ£ææææµæ«ï¿½æ©æ¾æ©æææ£æææ¶æææ´æææ¦æ¶æææ¨ææ§æ¯æ¶ææªæææ¥æ©ææ¼æææææ»æææ±æ§èæ æ¡æ¬æ£æ¯æ¬æ¶æ´æ²æºææ½ææææ¤æ£æ«æ´æµæ·æ¶æ¸çææææææææ²æ¸ææè®æææ«æ·æææææææææ æ¡æ±æ²æææ»æ³æµæ¶æ´ææææææææ¤æ§æ¨ææ¢æ°æææææææææ¹ææ¾æ¼ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[157].length; ++j) if (D[157][j].charCodeAt(0) !== 0xFFFD) {
    e[D[157][j]] = 40192 + j;
    d[40192 + j] = D[157][j];
  }

  D[158] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ææ¸æææ æ¿æ¦æ©æ°æµæ·ææææ¦æ§é¸æ®æ¿æ¶ææ¸æ·æææ ææ£æ¤ææ°æ©æ¼æªæææ¦æ¡ææ·æ¯æ´æ¬æ³æ©æ¸æ¤æææ¢æ®æ¹æææ§æªæ æ¡æ ©æ¡æ¡æ ²æ¡ï¿½æ¢³æ «æ¡æ¡£æ¡·æ¡¿æ¢æ¢æ¢­æ¢æ¢æ¢æ¢æª®æ¢¹æ¡´æ¢µæ¢ æ¢ºæ¤æ¢æ¡¾æ¤æ£æ¤æ£æ¤¢æ¤¦æ£¡æ¤æ£æ£æ£§æ£æ¤¶æ¤æ¤æ£æ££æ¤¥æ£¹æ£ æ£¯æ¤¨æ¤ªæ¤æ¤£æ¤¡æ£æ¥¹æ¥·æ¥æ¥¸æ¥«æ¥æ¥¾æ¥®æ¤¹æ¥´æ¤½æ¥æ¤°æ¥¡æ¥æ¥æ¦æ¥ªæ¦²æ¦®æ§æ¦¿æ§æ§æ¦¾æ§å¯¨æ§æ§æ¦»æ§æ¦§æ¨®æ¦æ¦ æ¦æ¦æ¦´æ§æ§¨æ¨æ¨æ§¿æ¬æ§¹æ§²æ§§æ¨æ¦±æ¨æ§­æ¨æ§«æ¨æ¨æ«æ¨£æ¨æ©æ¨æ©²æ¨¶æ©¸æ©æ©¢æ©æ©¦æ©æ¨¸æ¨¢æªæªæª æªæª¢æª£ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[158].length; ++j) if (D[158][j].charCodeAt(0) !== 0xFFFD) {
    e[D[158][j]] = 40448 + j;
    d[40448 + j] = D[158][j];
  }

  D[159] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æªèæª»æ«æ«æª¸æª³æª¬æ«æ«æ«æªªæ«æ«ªæ«»æ¬èæ«ºæ¬æ¬é¬±æ¬æ¬¸æ¬·çæ¬¹é£®æ­æ­æ­æ­æ­æ­æ­æ­æ­¡æ­¸æ­¹æ­¿æ®æ®æ®æ®æ®æ®æ®æ®¤æ®ªæ®«æ®¯æ®²æ®±æ®³æ®·æ®¼æ¯æ¯æ¯æ¯æ¯¬æ¯«æ¯³æ¯¯ï¿½éº¾æ°æ°æ°æ°æ°¤æ°£æ±æ±æ±¢æ±ªæ²æ²æ²æ²æ²æ±¾æ±¨æ±³æ²æ²æ³æ³±æ³æ²½æ³æ³æ³æ²®æ²±æ²¾æ²ºæ³æ³¯æ³æ³ªæ´è¡æ´¶æ´«æ´½æ´¸æ´æ´µæ´³æ´æ´æµ£æ¶æµ¤æµæµ¹æµæ¶æ¶æ¿¤æ¶æ·¹æ¸æ¸æ¶µæ·æ·¦æ¶¸æ·æ·¬æ·æ·æ·¨æ·æ·æ·ºæ·æ·¤æ·æ·ªæ·®æ¸­æ¹®æ¸®æ¸æ¹²æ¹æ¸¾æ¸£æ¹«æ¸«æ¹¶æ¹æ¸æ¹æ¸ºæ¹æ¸¤æ»¿æ¸æ¸¸æºæºªæºæ»æº·æ»æº½æº¯æ»æº²æ»æ»æºæº¥æ»æºæ½æ¼çæ»¬æ»¸æ»¾æ¼¿æ»²æ¼±æ»¯æ¼²æ»ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[159].length; ++j) if (D[159][j].charCodeAt(0) !== 0xFFFD) {
    e[D[159][j]] = 40704 + j;
    d[40704 + j] = D[159][j];
  }

  D[224] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¼¾æ¼æ»·æ¾æ½ºæ½¸æ¾æ¾æ½¯æ½æ¿³æ½­æ¾æ½¼æ½æ¾æ¾æ¿æ½¦æ¾³æ¾£æ¾¡æ¾¤æ¾¹æ¿æ¾ªæ¿æ¿æ¿¬æ¿æ¿æ¿±æ¿®æ¿ççæ¿ºçççæ¿¾ççæ½´çççç°ç¾ç²çç£ççç¯ç±ç¬ç¸ç³ç®çççï¿½ççç½ççç¥ççç¦ç¢ççç¬çç»ççç¨ç¬çç¹ç¾ççççç ç¬ç§çµç¼ç¹ç¿çççç¨ç­ç¬ç°ç²ç»ç¼ç¿ççççç´ç¾çççççç¢ç§ç¹ç²çççççç¢ç ç¡ç¹ç·åçççççç´ç¯ç©ç¥ç¾ççé»ççªç¨ç°ç¸çµç»çºçç³çç»çç¥ç®çç¢çç¯ç¥ç¸ç²çºçç¿ççççç©ç°ç£çªç¶ç¾ççç§çççç±ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 0xFFFD) {
    e[D[224][j]] = 57344 + j;
    d[57344 + j] = D[224][j];
  }

  D[225] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç ç£ç§ç©ç®ç²ç°ç±ç¸ç·çççççççççç¦ç¬ç¼çççççççç©ç¤ç§ç«ç­ç¸ç¶ççç´ççççççç¥ç£çç³ççµç½ç¸ç¼ç±ççççç£çç¾ç¿ï¿½ç¼çç°çºç²ç³ççççç§ç ç¡ç¢ç¤ç´ç°ç»çççççç¡ç¢ç¨ç©çªç§ç¬ç°ç²ç¶ç¸ç¼çççççççççç°ç´ç¸ç¹çºçççççç¡ç¥ç§çªè¯ç»çççç©ç¤çç¥ç¦çç·ç¸ççç¨ç«çç¥ç¿ç¾ç¹çççç çç°ç¶ç¹ç¿ç¼ç½ç»çççççç£ç®ç¼ç ç ç¤¦ç  ç¤ªç¡ç¢ç¡´ç¢ç¡¼ç¢ç¢ç¢£ç¢µç¢ªç¢¯ç£ç£ç£ç£ç¢¾ç¢¼ç£ç£ç£¬ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 0xFFFD) {
    e[D[225][j]] = 57600 + j;
    d[57600 + j] = D[225][j];
  }

  D[226] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç£§ç£ç£½ç£´ç¤ç¤ç¤ç¤ç¤¬ç¤«ç¥ç¥ ç¥ç¥ç¥ç¥ç¥ç¥ºç¥¿ç¦ç¦ç¦§é½ç¦ªç¦®ç¦³ç¦¹ç¦ºç§ç§ç§§ç§¬ç§¡ç§£ç¨ç¨ç¨ç¨ç¨ ç¨ç¦ç¨±ç¨»ç¨¾ç¨·ç©ç©ç©ç©¡ç©¢ç©©é¾ç©°ç©¹ç©½çªçªçªçªçªçª©ç«çª°ï¿½çª¶ç«ç«çª¿éç«ç«ç«ç«ç«ç«ç«ç«ç«ç«¡ç«¢ç«¦ç«­ç«°ç¬ç¬ç¬ç¬ç¬³ç¬ç¬ç¬ç¬µç¬¨ç¬¶ç­ç­ºç¬ç­ç¬ç­ç­ç­µç­¥ç­´ç­§ç­°ç­±ç­¬ç­®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç­ç®ç¯ç¯ç¯ç¯ç®´ç¯ç¯ç¯©ç°ç°ç¯¦ç¯¥ç± ç°ç°ç°ç¯³ç¯·ç°ç°ç¯¶ç°£ç°§ç°ªç°ç°·ç°«ç°½ç±ç±ç±ç±ç±ç±ç±ç±ç±¤ç±ç±¥ç±¬ç±µç²ç²ç²¤ç²­ç²¢ç²«ç²¡ç²¨ç²³ç²²ç²±ç²®ç²¹ç²½ç³ç³ç³ç³ç³ç³ç³¢é¬»ç³¯ç³²ç³´ç³¶ç³ºç´ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 0xFFFD) {
    e[D[226][j]] = 57856 + j;
    d[57856 + j] = D[226][j];
  }

  D[227] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç´ç´ç´ç´çµçµç´®ç´²ç´¿ç´µçµçµ³çµçµçµ²çµ¨çµ®çµçµ£ç¶ç¶çµç¶çµ½ç¶ç¶ºç¶®ç¶£ç¶µç·ç¶½ç¶«ç¸½ç¶¢ç¶¯ç·ç¶¸ç¶ç¶°ç·ç·ç·¤ç·ç·»ç·²ç·¡ç¸ç¸ç¸£ç¸¡ç¸ç¸±ç¸ç¸ç¸ç¸¢ç¹ç¹¦ç¸»ç¸µç¸¹ç¹ç¸·ï¿½ç¸²ç¸ºç¹§ç¹ç¹ç¹ç¹ç¹ç¹¹ç¹ªç¹©ç¹¼ç¹»çºç·ç¹½è¾®ç¹¿çºçºçºçºçºçºçºçºçºçºçºç¼¸ç¼ºç½ç½ç½ç½ç½ç½ç½ç½ç½ç½ç½ ç½¨ç½©ç½§ç½¸ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾£ç¾¯ç¾²ç¾¹ç¾®ç¾¶ç¾¸è­±ç¿ç¿ç¿ç¿ç¿ç¿¡ç¿¦ç¿©ç¿³ç¿¹é£èèèèèèèè¡è¨è¿è»èèèèèèè¢è¨è³è²è°è¶è¹è½è¿èèèèèèè­åè¬èè¥èèèèèèè¯è±èè©è£è¯èï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 0xFFFD) {
    e[D[227][j]] = 58112 + j;
    d[58112 + j] = D[227][j];
  }

  D[228] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éèè¾èèè¼è±è®è¥è¦è´èèèèèè èè¤è£èèè©è°èµè¾è¸è½èèèºèèèèèèèèè è§èºè»è¾èèèèèèèèè©è«è¸è³èèèèèèè¤ï¿½è¢è¨èªè«è®è±è·è¸è¾èèè«èè»è¬è¡è£èèè´è³èºèèè»è¹èèèèèèµè´èè²è±èè¹èèè¯è«èèèèèªèè¢èè£èèèè¼èµè³èµè èè¨è´èè«èè½èèèèè·èè è²èè¢è è½è¸èè»è­èªè¼èèè·è«è­è®èè©èè¬è¯è¹èµèè¢è¹è¿èèèè»èèèèèè¡è¡è¿è´èèè¬èèèè¼èè£èèï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 0xFFFD) {
    e[D[228][j]] = 58368 + j;
    d[58368 + j] = D[228][j];
  }

  D[229] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèèèè¤èèèè¨è­èèèªèèè·è¾èèèºèè¹èèèè¥èè¹èèèè¾èºèè¢èè°è¿èä¹èèè§è±èè£è©èªèèè¶è¯èèè°èè £è«èèè©è¬ï¿½èèè¯èèèèèè»èèèè¹èè´è¿è·è»è¥è©èè èè¸èèè´èè¨è®èèè£èªè è¢èèè¯èè½èèéè«èè³èèè»è¯è²è è è è¾è¶è·è èè è è è ¢è ¡è ±è ¶è ¹è §è »è¡è¡è¡è¡è¡è¡¢è¡«è¢è¡¾è¢è¡µè¡½è¢µè¡²è¢è¢è¢è¢®è¢è¢¢è¢è¢¤è¢°è¢¿è¢±è£è£è£è£è£è£è£¹è¤è£¼è£´è£¨è£²è¤è¤è¤è¤è¥è¤è¤¥è¤ªè¤«è¥è¥è¤»è¤¶è¤¸è¥è¤è¥ è¥ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 0xFFFD) {
    e[D[229][j]] = 58624 + j;
    d[58624 + j] = D[229][j];
  }

  D[230] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¥¦è¥¤è¥­è¥ªè¥¯è¥´è¥·è¥¾è¦è¦è¦è¦è¦è¦¡è¦©è¦¦è¦¬è¦¯è¦²è¦ºè¦½è¦¿è§è§è§è§è§§è§´è§¸è¨è¨è¨è¨è¨è¨è¨¥è¨¶è©è©è©è©è©è©¼è©­è©¬è©¢èªèªèªèª¨èª¡èªèª¥èª¦èªèª£è«è«è«è«è««è«³è«§ï¿½è«¤è«±è¬è« è«¢è«·è«è«è¬è¬è¬è«¡è¬è¬è¬è¬ è¬³é«è¬¦è¬«è¬¾è¬¨è­è­è­è­è­è­è­è­è­«è­è­¬è­¯è­´è­½è®è®è®è®è®è®è®è®è°ºè±è°¿è±è±è±è±è±è±¢è±¬è±¸è±ºè²è²è²è²è²è²è²è±¼è²æè²­è²ªè²½è²²è²³è²®è²¶è³è³è³¤è³£è³è³½è³ºè³»è´è´è´è´è´è´è´é½è´è³è´è´èµ§èµ­èµ±èµ³è¶è¶è·è¶¾è¶ºè·è·è·è·è·è·è·ªè·«è·è·£è·¼è¸è¸è·¿è¸è¸è¸è¸è¹è¸µè¸°è¸´è¹ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 0xFFFD) {
    e[D[230][j]] = 58880 + j;
    d[58880 + j] = D[230][j];
  }

  D[231] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¹è¹è¹è¹è¹è¹è¹¤è¹ è¸ªè¹£è¹è¹¶è¹²è¹¼èºèºèºèºèºèºèºèºèºèºèºªèº¡èº¬èº°è»èº±èº¾è»è»è»è»è»£è»¼è»»è»«è»¾è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼¦è¼³è¼»è¼¹è½è½è¼¾è½è½è½è½è½è½ï¿½è½¢è½£è½¤è¾è¾è¾£è¾­è¾¯è¾·è¿è¿¥è¿¢è¿ªè¿¯éè¿´éè¿¹è¿ºééé¡ééééé§é¶éµé¹è¿¸ééééééé¾éééé¨é¯é¶é¨é²éé½éééééé¨é¯é±éµé¢é¤æééééé²é°éééé£é¥é©é³é²éééé¢é«é¯éªéµé´éºéééééééé¡éé¼éµé¶éé¿éé¬ééééééé¤ééé¿ééééééééé¹é·é©ééºéé®ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 0xFFFD) {
    e[D[231][j]] = 59136 + j;
    d[59136 + j] = D[231][j];
  }

  D[232] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éé¢éé£éºéµé»éé é¼é®éé°é¬é­éé¹ééé¨é¥éééééé¤ééééééé¶é«éµé¡éºééééé é¢ééªé©é°éµé·é½éé¼é¾éé¿éééééééï¿½é é¨é§é­é¼é»é¹é¾éæ¿¶éééééééé¡é¥é¢é¡é¨é®é¯ééééé·ééééé¦é²é¬éééééªé§é±é²é°é´é¶é¸é¹ééééè¥éééé¹éééééééééé¤éªé°é¹é½é¾ééééééé é¤é¦é¨åé«é±é¹éé¼ééºéééééé¨é¦é£é³é´éééééé­é½é²ç«é¶éµé é é ¸é ¤é ¡é ·é ½é¡é¡é¡é¡«é¡¯é¡°ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 0xFFFD) {
    e[D[232][j]] = 59392 + j;
    d[59392 + j] = D[232][j];
  }

  D[233] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¡±é¡´é¡³é¢ªé¢¯é¢±é¢¶é£é£é£é£©é£«é¤é¤é¤é¤é¤é¤¡é¤é¤é¤¤é¤ é¤¬é¤®é¤½é¤¾é¥é¥é¥é¥é¥é¥é¥é¥é¥é¦é¦é¦¥é¦­é¦®é¦¼é§é§é§é§é§é§­é§®é§±é§²é§»é§¸é¨é¨é¨é§¢é¨é¨«é¨·é©é©é©é©ï¿½é¨¾é©é©é©é©é©é©¢é©¥é©¤é©©é©«é©ªéª­éª°éª¼é«é«é«é«é«é«é«é«¢é«£é«¦é«¯é««é«®é«´é«±é«·é«»é¬é¬é¬é¬é¬¢é¬£é¬¥é¬§é¬¨é¬©é¬ªé¬®é¬¯é¬²é­é­é­é­é­é­é­é­´é®é®é®é®é®é®é® é®¨é®´é¯é¯é®¹é¯é¯é¯é¯é¯£é¯¢é¯¤é¯é¯¡é°ºé¯²é¯±é¯°é°é°é°é°é°é°é°é°é°é°é°®é°é°¥é°¤é°¡é°°é±é°²é±é°¾é±é± é±§é±¶é±¸é³§é³¬é³°é´é´é³«é´é´é´ªé´¦é¶¯é´£é´éµé´é´éµé´¿é´¾éµéµï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 0xFFFD) {
    e[D[233][j]] = 59648 + j;
    d[59648 + j] = D[233][j];
  }

  D[234] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éµéµéµ¤éµéµéµéµ²é¶é¶é¶«éµ¯éµºé¶é¶¤é¶©é¶²é·é·é¶»é¶¸é¶ºé·é·é·é·é·é·¸é·¦é·­é·¯é·½é¸é¸é¸é¹µé¹¹é¹½éºéºéºéºéºéºéºéºéº¥éº©éº¸éºªéº­é¡é»é»é»é»é»é»é»é»é» é»¥é»¨é»¯ï¿½é»´é»¶é»·é»¹é»»é»¼é»½é¼é¼ç·é¼é¼¡é¼¬é¼¾é½é½é½é½£é½é½ é½¡é½¦é½§é½¬é½ªé½·é½²é½¶é¾é¾é¾ å ¯æ§éç¤åçï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 0xFFFD) {
    e[D[234][j]] = 59904 + j;
    d[59904 + j] = D[234][j];
  }

  D[237] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çºè¤ééèä¿ç»æ±æ£é¹æ»å½ä¸¨ä»¡ä»¼ä¼ä¼ä¼¹ä½ä¾ä¾ä¾ä¾ä¿åå¢ä¿¿ååå°ååå´ååå¤åå¾å¬ååå¦ååååå¤å²åå²åï¨ååå©å¿ååå¥å¬ååï¨ï¿½ï¨å¢å¢²å¤å¥å¥å¥å¥£å¦¤å¦ºå­å¯ç¯å¯å¯¬å°å²¦å²ºå³µå´§åµï¨åµåµ­å¶¸å¶¹å·å¼¡å¼´å½§å¾·å¿ææææææ æ²ææ·æ°æææ¦æµæ ææææææ»ææ®ææ¤æ¥ææï¨æ³ææ æ²æ¿æºæï¤©æ¦æ»æ¡ææ æ¡æ£ï¨æ¥¨ï¨æ¦æ§¢æ¨°æ©«æ©æ©³æ©¾æ«¢æ«¤æ¯æ°¿æ±æ²æ±¯æ³æ´æ¶æµ¯æ¶æ¶¬æ·æ·¸æ·²æ·¼æ¸¹æ¹æ¸§æ¸¼æº¿æ¾æ¾µæ¿µççç¨çç«çççççï¨çç¾ç±ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 0xFFFD) {
    e[D[237][j]] = 60672 + j;
    d[60672 + j] = D[237][j];
  }

  D[238] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¾ç¤ï¨ç·ç½ççç£çççµç¦çªç©ç®ç¢çççç¯ççççç¦ï¨çå¯ç ¡ç¡ç¡¤ç¡ºç¤°ï¨ï¨ï¨ç¦ï¨ç¦ç«ç«§ï¨ç««ç®ï¨çµçµç¶·ç¶ ç·ç¹ç½ç¾¡ï¨èè¢è¿èè¶èè´èèï¿½è«ï¨è°ï¨ ï¨¡è è£µè¨è¨·è©¹èª§èª¾è«ï¨¢è«¶è­è­¿è³°è³´è´èµ¶ï¨£è»ï¨¤ï¨¥é§éï¨¦éé§éééé­é®é¤é¥ééééºéé¼éééé¹é§é§é·é¸é§éééï¨§éé éé¥é¡é»ï¨¨éé¿ééé°éé¤ééé¸é±éééï§ï¨©éé¯é³é»éééééé¡é¡¥ï¨ªï¨«é¤§ï¨¬é¦é©é«é«é­µé­²é®é®±é®»é°éµ°éµ«ï¨­é¸é»ï¿½ï¿½â°â±â²â³â´âµâ¶â·â¸â¹ï¿¢ï¿¤ï¼ï¼ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 0xFFFD) {
    e[D[238][j]] = 60928 + j;
    d[60928 + j] = D[238][j];
  }

  D[250] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â°â±â²â³â´âµâ¶â·â¸â¹â â¡â¢â£â¤â¥â¦â§â¨â©ï¿¢ï¿¤ï¼ï¼ã±ââ¡âµçºè¤ééèä¿ç»æ±æ£é¹æ»å½ä¸¨ä»¡ä»¼ä¼ä¼ä¼¹ä½ä¾ä¾ä¾ä¾ä¿åå¢ä¿¿ååå°ååå´ååï¿½å¤åå¾å¬ååå¦ååååå¤å²åå²åï¨ååå©å¿ååå¥å¬ååï¨ï¨å¢å¢²å¤å¥å¥å¥å¥£å¦¤å¦ºå­å¯ç¯å¯å¯¬å°å²¦å²ºå³µå´§åµï¨åµåµ­å¶¸å¶¹å·å¼¡å¼´å½§å¾·å¿ææææææ æ²ææ·æ°æææ¦æµæ ææææææ»ææ®ææ¤æ¥ææï¨æ³ææ æ²æ¿æºæï¤©æ¦æ»æ¡ææ æ¡æ£ï¨æ¥¨ï¨æ¦æ§¢æ¨°æ©«æ©æ©³æ©¾æ«¢æ«¤æ¯æ°¿æ±æ²æ±¯æ³æ´æ¶æµ¯ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[250].length; ++j) if (D[250][j].charCodeAt(0) !== 0xFFFD) {
    e[D[250][j]] = 64000 + j;
    d[64000 + j] = D[250][j];
  }

  D[251] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¶æ¶¬æ·æ·¸æ·²æ·¼æ¸¹æ¹æ¸§æ¸¼æº¿æ¾æ¾µæ¿µççç¨çç«çççççï¨çç¾ç±ç¾ç¤ï¨ç·ç½ççç£çççµç¦çªç©ç®ç¢çççç¯ççççç¦ï¨çå¯ç ¡ç¡ç¡¤ç¡ºç¤°ï¨ï¨ï¿½ï¨ç¦ï¨ç¦ç«ç«§ï¨ç««ç®ï¨çµçµç¶·ç¶ ç·ç¹ç½ç¾¡ï¨èè¢è¿èè¶èè´èèè«ï¨è°ï¨ ï¨¡è è£µè¨è¨·è©¹èª§èª¾è«ï¨¢è«¶è­è­¿è³°è³´è´èµ¶ï¨£è»ï¨¤ï¨¥é§éï¨¦éé§éééé­é®é¤é¥ééééºéé¼éééé¹é§é§é·é¸é§éééï¨§éé éé¥é¡é»ï¨¨éé¿ééé°éé¤ééé¸é±éééï§ï¨©éé¯é³é»éééééé¡é¡¥ï¨ªï¨«é¤§ï¨¬é¦é©é«ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[251].length; ++j) if (D[251][j].charCodeAt(0) !== 0xFFFD) {
    e[D[251][j]] = 64256 + j;
    d[64256 + j] = D[251][j];
  }

  D[252] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é«é­µé­²é®é®±é®»é°éµ°éµ«ï¨­é¸é»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[252].length; ++j) if (D[252][j].charCodeAt(0) !== 0xFFFD) {
    e[D[252][j]] = 64512 + j;
    d[64512 + j] = D[252][j];
  }

  return {
    "enc": e,
    "dec": d
  };
}();

cptable[936] = function () {
  var d = [],
      e = {},
      D = [],
      j;
  D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 0xFFFD) {
    e[D[0][j]] = 0 + j;
    d[0 + j] = D[0][j];
  }

  D[129] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¸ä¸ä¸ä¸ä¸ä¸ä¸ä¸ä¸ ä¸¡ä¸£ä¸¦ä¸©ä¸®ä¸¯ä¸±ä¸³ä¸µä¸·ä¸¼ä¹ä¹ä¹ä¹ä¹ä¹ä¹ä¹ä¹ä¹ä¹ä¹¢ä¹£ä¹¤ä¹¥ä¹§ä¹¨ä¹ªä¹«ä¹¬ä¹­ä¹®ä¹¯ä¹²ä¹´ä¹µä¹¶ä¹·ä¹¸ä¹¹ä¹ºä¹»ä¹¼ä¹½ä¹¿äºäºäºäºäºäºäºäºï¿½äºäºäºäºäºäºäºäº£äºªäº¯äº°äº±äº´äº¶äº·äº¸äº¹äº¼äº½äº¾ä»ä»ä»ä»ä»ä»ä»ä»ä» ä»¢ä»¦ä»§ä»©ä»­ä»®ä»¯ä»±ä»´ä»¸ä»¹ä»ºä»¼ä»¾ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼¡ä¼£ä¼¨ä¼©ä¼¬ä¼­ä¼®ä¼±ä¼³ä¼µä¼·ä¼¹ä¼»ä¼¾ä¼¿ä½ä½ä½ä½ä½ä½ä½ä½ä½ä½ä½ä½ä½ä½ä½¡ä½¢ä½¦ä½¨ä½ªä½«ä½­ä½®ä½±ä½²ä½µä½·ä½¸ä½¹ä½ºä½½ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾¡ä¾¢ï¿½".split("");

  for (j = 0; j != D[129].length; ++j) if (D[129][j].charCodeAt(0) !== 0xFFFD) {
    e[D[129][j]] = 33024 + j;
    d[33024 + j] = D[129][j];
  }

  D[130] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¾¤ä¾«ä¾­ä¾°ä¾±ä¾²ä¾³ä¾´ä¾¶ä¾·ä¾¸ä¾¹ä¾ºä¾»ä¾¼ä¾½ä¾¾ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ ä¿¢ä¿¤ä¿¥ä¿§ä¿«ä¿¬ä¿°ä¿²ä¿´ä¿µä¿¶ä¿·ä¿¹ä¿»ä¿¼ä¿½ä¿¿åååååååååååï¿½åååååååååååå å¢å£å¤å§å«å¯å°å±å²å³å´åµå¶å·å¸å¹å»å½å¿åååååååååååååååååååååååå å¡å¢å£å¤å¦å§å¨å©åªå«å­å®å¯å°å±å²å³å´åµå¸å¹åºå¼å½ååååååååååååååååååååååååååååå å¡å¢å¤å¦åªå«å­å®å¯å°å±å³å´åµå¶å·å¸å¹å¼ï¿½".split("");

  for (j = 0; j != D[130].length; ++j) if (D[130][j].charCodeAt(0) !== 0xFFFD) {
    e[D[130][j]] = 33280 + j;
    d[33280 + j] = D[130][j];
  }

  D[131] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å½å¾å¿åååååååååååååååååååååååååååååå å¡å¢å£å¤å¥å¨å©åªå«å¯å°å±å²å´å¶å·å¸å¹åºå¼å½å¾å¿åååååååï¿½åååååååååååååååååååååå å¢å£å¤å¥å¦å§å¨å©åªå«å¬å­å®å¯å°å±å²å³å´åµå¶å·å¸å¹åºå»å¼å½å¾ååååååååååååååååå å¡å£å¤å¦å§å©åªå¯å²åºå¾å¿åååååååååååååååååå¡å£å¦å§å¨å©åªå­å®å´å¸å¹åºå¾å¿åååååååååååååååï¿½".split("");

  for (j = 0; j != D[131].length; ++j) if (D[131][j].charCodeAt(0) !== 0xFFFD) {
    e[D[131][j]] = 33536 + j;
    d[33536 + j] = D[131][j];
  }

  D[132] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ååååååå¢å£å¥å¦å§å¨å©åªå¬å®å±å²å´å·å¾åååååååååååååå¡å¢å£å¥å¦å§åªå¬å¯å±å²å´åµå¼å¾ååååååååååååååï¿½åååååå å¢å£å¤å¦å¨å«å¬å­å®å°å±å³å´åµå¶å·å¸å¹åºå»å¼å¾åååååååååååååååååååååååå¤å¥å¦å§å®å¯å°å´åµå¶å·å¸å¹åºå»å¼å½åååååååååååååååååååååååå å¡å¢å£å¥å¦å§å¨å©åªå«å¬å­å®å¯å±å²å³å´åµå¶å·å¸å»å¼å½ååååååååååï¿½".split("");

  for (j = 0; j != D[132].length; ++j) if (D[132][j].charCodeAt(0) !== 0xFFFD) {
    e[D[132][j]] = 33792 + j;
    d[33792 + j] = D[132][j];
  }

  D[133] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åååååååååå¢å¤å¥å§å¨å©å«å¬å­å¯å°å±å²å³å´åµå¶å·å¸å¼å½åååååååååååååå¥å¨åªå¬å­å²å¶å¹å»å¼å½å¾ååååååååï¿½åååååååååååå å¡å¤å§åªå«å¬å­å¯å°å±å²å³å´åµå·å¸å¹åºå¼å½å¾ååååååååååååååååå¡å¢å§å´åºå¾å¿ååååååååååå¢å¤å¥åªå°å³å¶å·åºå½å¿åååååååååååååååå å¡å£å¥å§å©åªå«å¬å­å®å¯å°å´å¹åºå¾å¿åååååååååååååååå å¡ï¿½".split("");

  for (j = 0; j != D[133].length; ++j) if (D[133][j].charCodeAt(0) !== 0xFFFD) {
    e[D[133][j]] = 34048 + j;
    d[34048 + j] = D[133][j];
  }

  D[134] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¢å¥å®å°å²åµå¶å·å¹åºå¼å¾åååååååå å¡å¢å£å¤å«å¬å¯å°å±å´åµå¶å·å¸å¹å»å¾åååååååååååååååååååååååå¡å¥å¦ï¿½å¨å©å«å­å²å´åµå¶å¸å¹åºå»å½ååååååååååååååååååååååå å¢å£å¨å©å«å¯å°å±å²å³å´å¹åºå½å¿ååååååååååååååå å¡å¢å£å¤å¥å¦å¨å©åªå«å¬å­å®å¯å°å²å´å¶å¸åºå¼å¿åååååååååååååååååååå å¢å§å©å­å®å°å±å´å¶å¸å¹åºå»å¼å¿ååååï¿½".split("");

  for (j = 0; j != D[134].length; ++j) if (D[134][j].charCodeAt(0) !== 0xFFFD) {
    e[D[134][j]] = 34304 + j;
    d[34304 + j] = D[134][j];
  }

  D[135] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åååååååååååååååååå å¡å¢å¥å¦å¨å©åªå«å®å¯å°å³åµå·å¸åºå¼å½å¾ååååååååååååååååååååååååå å¡ï¿½å£å¥å¦å§å­å®å¯å°å²å³å´åµå·å¸å¹åºå½å¾å¿åååååååååååååååååååååååååååå å¡å¢å¤å¥å¦å§å¨å©åªå«å¬å­å®å°å±å²å³å´åµå¶å¸å¹åºå»å½å¾å¿ååååååååååååååååååååååååå£å¥å¦å§å¨å©åªå¬å®å¯å²å³å¶å·å¸å»å¼ååååååååååååï¿½".split("");

  for (j = 0; j != D[135].length; ++j) if (D[135][j].charCodeAt(0) !== 0xFFFD) {
    e[D[135][j]] = 34560 + j;
    d[34560 + j] = D[135][j];
  }

  D[136] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ååååååååååååå å¡å¢å¤å¥å¦å§å«å±å²å´åµå¶å·å¸å¼å½å¿åååååååååååååååå¢å£å¥å§å¬å®å°å±å²å´åµå¸å¹åºå½å¾å¿åï¿½åååååååååååååååååååååå¥å¨åªå¬å¯å°å±å³åµå¶å·å¹åºå»å¼å½å¾å¿åååååååååååååååååååå¡å¢å£å¥å¦å§å¨å©åªå«å¬å®å°å±å²å³åµå¶å·å»å¼å¾å¿å å å å å å å å å å å å å å å å å å å å å å å ¢å £å ¥å ¦å §å ¨å ©å «å ¬å ­å ®å ¯å ±å ²å ³å ´å ¶å ·å ¸å ¹å ºå »å ¼å ½ï¿½".split("");

  for (j = 0; j != D[136].length; ++j) if (D[136][j].charCodeAt(0) !== 0xFFFD) {
    e[D[136][j]] = 34816 + j;
    d[34816 + j] = D[136][j];
  }

  D[137] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å ¾å ¿å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡å¡ å¡¡å¡¢å¡£å¡¤å¡¦å¡§å¡¨å¡©å¡ªå¡­å¡®å¡¯å¡°å¡±å¡²å¡³å¡´å¡µå¡¶å¡·å¡¸å¡¹å¡ºå¡»å¡¼å¡½å¡¿å¢å¢å¢å¢å¢å¢å¢å¢ï¿½å¢å¢å¢å¢å¢å¢å¢å¢å¢å¢å¢å¢å¢å¢ å¢¡å¢¢å¢£å¢¤å¢¥å¢¦å¢§å¢ªå¢«å¢¬å¢­å¢®å¢¯å¢°å¢±å¢²å¢³å¢´å¢µå¢¶å¢·å¢¸å¢¹å¢ºå¢»å¢½å¢¾å¢¿å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£å£ å£¡å£¢å££å£¥å£¦å£§å£¨å£©å£ªå£­å£¯å£±å£²å£´å£µå£·å£¸å£ºå£»å£¼å£½å£¾å£¿å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤ å¤¡å¤¢å¤£å¤¦å¤¨å¤¬å¤°å¤²å¤³å¤µå¤¶å¤»ï¿½".split("");

  for (j = 0; j != D[137].length; ++j) if (D[137][j].charCodeAt(0) !== 0xFFFD) {
    e[D[137][j]] = 35072 + j;
    d[35072 + j] = D[137][j];
  }

  D[138] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¤½å¤¾å¤¿å¥å¥å¥å¥å¥å¥å¥å¥å¥å¥å¥å¥å¥å¥å¥å¥å¥¡å¥£å¥¤å¥¦å¥§å¥¨å¥©å¥ªå¥«å¥¬å¥­å¥®å¥¯å¥°å¥±å¥²å¥µå¥·å¥ºå¥»å¥¼å¥¾å¥¿å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦ å¦¡å¦¢å¦¦ï¿½å¦§å¦¬å¦­å¦°å¦±å¦³å¦´å¦µå¦¶å¦·å¦¸å¦ºå¦¼å¦½å¦¿å§å§å§å§å§å§å§å§å§å§å§å§å§å§å§å§å§å§å§å§ å§¡å§¢å§¤å§¦å§§å§©å§ªå§«å§­å§®å§¯å§°å§±å§²å§³å§´å§µå§¶å§·å§¸å§ºå§¼å§½å§¾å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨¡å¨¢å¨¤å¨¦å¨§å¨¨å¨ªå¨«å¨¬å¨­å¨®å¨¯å¨°å¨³å¨µå¨·å¨¸å¨¹å¨ºå¨»å¨½å¨¾å¨¿å©å©å©å©å©å©å©å©å©å©å©å©å©å©å©å©å©å©å©å©å©å©å©å©å©å©å© ï¿½".split("");

  for (j = 0; j != D[138].length; ++j) if (D[138][j].charCodeAt(0) !== 0xFFFD) {
    e[D[138][j]] = 35328 + j;
    d[35328 + j] = D[138][j];
  }

  D[139] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å©¡å©£å©¤å©¥å©¦å©¨å©©å©«å©¬å©­å©®å©¯å©°å©±å©²å©³å©¸å©¹å©»å©¼å©½å©¾åªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåªåª åª¡åª¢åª£åª¤åª¥åª¦åª§åª¨åª©åª«åª¬ï¿½åª­åª®åª¯åª°åª±åª´åª¶åª·åª¹åªºåª»åª¼åª½åª¿å«å«å«å«å«å«å«å«å«å«å«å«å«å«å«å«å«å«å«å«å«å«å«å«¢å«¤å«¥å«§å«¨å«ªå«¬å«­å«®å«¯å«°å«²å«³å«´å«µå«¶å«·å«¸å«¹å«ºå«»å«¼å«½å«¾å«¿å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬å¬ å¬¡å¬¢å¬£å¬¤å¬¥å¬¦å¬§å¬¨å¬©å¬ªå¬«å¬¬å¬­å¬®å¬¯å¬°å¬±å¬³å¬µå¬¶å¬¸å¬¹å¬ºå¬»å¬¼å¬½å¬¾å¬¿å­å­å­å­å­å­å­ï¿½".split("");

  for (j = 0; j != D[139].length; ++j) if (D[139][j].charCodeAt(0) !== 0xFFFD) {
    e[D[139][j]] = 35584 + j;
    d[35584 + j] = D[139][j];
  }

  D[140] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å­å­å­å­å­å­å­å­å­å­å­å­ å­¡å­§å­¨å­«å­­å­®å­¯å­²å­´å­¶å­·å­¸å­¹å­»å­¼å­¾å­¿å®å®å®å®å®å®å®å®å®å®å®å®§å®¨å®©å®¬å®­å®®å®¯å®±å®²å®·å®ºå®»å®¼å¯å¯å¯å¯å¯å¯å¯å¯å¯å¯ï¿½å¯å¯å¯å¯å¯å¯å¯å¯å¯å¯å¯ å¯¢å¯£å¯¦å¯§å¯©å¯ªå¯«å¯¬å¯­å¯¯å¯±å¯²å¯³å¯´å¯µå¯¶å¯·å¯½å¯¾å°å°å°å°å°å°å°å°å°å°å°å°å°å°å°å°å°å°å° å°¡å°£å°¦å°¨å°©å°ªå°«å°­å°®å°¯å°°å°²å°³å°µå°¶å°·å±å±å±å±å±å±å±å±å±å±å±å±å±å±å±å±å±å±¢å±¤å±§å±¨å±©å±ªå±«å±¬å±­å±°å±²å±³å±´å±µå±¶å±·å±¸å±»å±¼å±½å±¾å²å²å²å²å²å²å²å²å²å²å²å²å²å²å²å²å²å² å²¡å²¤å²¥å²¦å²§å²¨ï¿½".split("");

  for (j = 0; j != D[140].length; ++j) if (D[140][j].charCodeAt(0) !== 0xFFFD) {
    e[D[140][j]] = 35840 + j;
    d[35840 + j] = D[140][j];
  }

  D[141] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å²ªå²®å²¯å²°å²²å²´å²¶å²¹å²ºå²»å²¼å²¾å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³å³ å³¢å³£å³§å³©å³«å³¬å³®å³¯å³±å³²å³³å³´å³µå³¶å³·å³¸å³¹å³ºå³¼å³½å³¾å³¿å´ï¿½å´å´å´å´å´å´å´å´å´å´å´å´å´å´å´å´å´å´å´å´å´å´å´ å´¡å´¢å´£å´¥å´¨å´ªå´«å´¬å´¯å´°å´±å´²å´³å´µå´¶å´·å´¸å´¹å´ºå´»å´¼å´¿åµåµåµåµåµåµåµåµåµåµåµåµåµåµåµåµåµåµåµåµåµåµåµåµåµåµ åµ¡åµ¢åµ£åµ¤åµ¥åµ¦åµ§åµ¨åµªåµ­åµ®åµ°åµ±åµ²åµ³åµµåµ¶åµ·åµ¸åµ¹åµºåµ»åµ¼åµ½åµ¾åµ¿å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶ ï¿½".split("");

  for (j = 0; j != D[141].length; ++j) if (D[141][j].charCodeAt(0) !== 0xFFFD) {
    e[D[141][j]] = 36096 + j;
    d[36096 + j] = D[141][j];
  }

  D[142] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¶¡å¶¢å¶£å¶¤å¶¥å¶¦å¶§å¶¨å¶©å¶ªå¶«å¶¬å¶­å¶®å¶¯å¶°å¶±å¶²å¶³å¶´å¶µå¶¶å¶¸å¶¹å¶ºå¶»å¶¼å¶½å¶¾å¶¿å·å·å·å·å·å·å·å·å·å·å·å·å·å·å·å·å·å·å·å·å·å·å·å·å·å·å·å· å·£å·¤å·ªå·¬å·­ï¿½å·°å·µå·¶å·¸å·¹å·ºå·»å·¼å·¿å¸å¸å¸å¸å¸å¸å¸å¸å¸å¸å¸å¸å¸å¸ å¸¡å¸¢å¸£å¸¤å¸¥å¸¨å¸©å¸ªå¸«å¸¬å¸¯å¸°å¸²å¸³å¸´å¸µå¸¶å¸¹å¸ºå¸¾å¸¿å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹ å¹£å¹¤å¹¥å¹¦å¹§å¹¨å¹©å¹ªå¹«å¹¬å¹­å¹®å¹¯å¹°å¹±å¹µå¹·å¹¹å¹¾åºåºåºåºåºåºåºåºåºåºåºåºåºåº¡åº¢åº£åº¤åº¨åº©åºªåº«åº¬åº®åº¯åº°åº±åº²åº´åººåº»åº¼åº½åº¿å»å»å»å»å»å»ï¿½".split("");

  for (j = 0; j != D[142].length; ++j) if (D[142][j].charCodeAt(0) !== 0xFFFD) {
    e[D[142][j]] = 36352 + j;
    d[36352 + j] = D[142][j];
  }

  D[143] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å»å»å»å»å»å»å»å»å»å»å»å»å»å»å»å»å»å»å»å» å»¡å»¢å»£å»¤å»¥å»¦å»§å»©å»«å»¬å»­å»®å»¯å»°å»±å»²å»³å»µå»¸å»¹å»»å»¼å»½å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼¡å¼¢å¼£å¼¤ï¿½å¼¨å¼«å¼¬å¼®å¼°å¼²å¼³å¼´å¼µå¼¶å¼·å¼¸å¼»å¼½å¼¾å¼¿å½å½å½å½å½å½å½å½å½å½å½å½å½å½å½å½å½å½å½å½å½å½å½å½ å½£å½¥å½§å½¨å½«å½®å½¯å½²å½´å½µå½¶å½¸å½ºå½½å½¾å½¿å¾å¾å¾å¾å¾å¾å¾å¾å¾å¾å¾å¾å¾å¾å¾ å¾¢å¾£å¾¤å¾¥å¾¦å¾§å¾©å¾«å¾¬å¾¯å¾°å¾±å¾²å¾³å¾´å¾¶å¾¸å¾¹å¾ºå¾»å¾¾å¾¿å¿å¿å¿å¿å¿å¿å¿å¿å¿å¿å¿å¿å¿å¿å¿å¿å¿¢å¿£å¿¥å¿¦å¿¨å¿©å¿¬å¿¯å¿°å¿²å¿³å¿´å¿¶å¿·å¿¹å¿ºå¿¼æï¿½".split("");

  for (j = 0; j != D[143].length; ++j) if (D[143][j].charCodeAt(0) !== 0xFFFD) {
    e[D[143][j]] = 36608 + j;
    d[36608 + j] = D[143][j];
  }

  D[144] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æææææææææææææ¢æ£æ¤æ¬æ­æ®æ°æ±æ²æ³æ´æ¶æ·æ¸æ¹æºæ½æ¾ææææææææææææææææææææææ æ¡æ¥æ¦æ®æ±æ²æ´æµæ·æ¾æï¿½ææææææææææææææææææææ¡æ¢æ¤æ¥æ§æ©æªæ®æ°æ³æµæ¶æ·æ¹æºæ½æ¾æ¿ææææææææææææææææææææææ¡æ¢æ£æ¤æ¥æªæ±æ²æµæ·æ¸æ»æ¼æ½æ¾æ¿ææææææææææææææææææææææ¡æ¢æ¥æ¨æ©æªæ¬æ­æ®æ¯æ°æ±æ²æ³æ´æµæ¶æ·æ¸æ¹æºæ»æ¼æ½æ¾æææææææï¿½".split("");

  for (j = 0; j != D[144].length; ++j) if (D[144][j].charCodeAt(0) !== 0xFFFD) {
    e[D[144][j]] = 36864 + j;
    d[36864 + j] = D[144][j];
  }

  D[145] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æææææææææææææææææææ æ¡æ£æ¤æ¥æ¦æ©æªæ«æ¬æ­æ®æ¯æ±æ²æ³æ´æ¶æ¸æ¹æºæ»æ¼æ½æ¾æ¿æææææææææææææææææææï¿½ææææææææææ æ¡æ¢æ£æ¤æ¥æ¦æªæ«æ­æ®æ¯æ°æ±æ²æ³æ´æµæ¶æ¸æ¹æºæ»æ¼æ½æ¿ææææææææææææææææææææææææææ æ¡æ¢æ£æ¤æ¥æ§æ¨æ©æªæ«æ¬æ­æ®æ¯æ°æ±æ²æ³æ´æ¶æ·æ¸æ¹æºæ»æ¼æ½æ¾æææææææææææææææ æ£æ¦æ§æ¨æ©æ«æ­æ¯æ°æ±æ²æµæ¶æ¸æ¹æºæ»æ¼æææææï¿½".split("");

  for (j = 0; j != D[145].length; ++j) if (D[145][j].charCodeAt(0) !== 0xFFFD) {
    e[D[145][j]] = 37120 + j;
    d[37120 + j] = D[145][j];
  }

  D[146] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ææææææææææææ æ¡æ¢æ¤æ¥æ¨æ±æ²æ´æµæ·æ¸æºæ»æ½æææææææææææææææææææ£æ¦æ§æ©æªæ­æ®æ¯æ°æ²æ³æ´æ¶æ·æ¸æºæ¾ææï¿½ææææææææ æ¡æ¤æªæ«æ°æ²æµæ¸æ¹æºæ»ææææææææææææææææææææ¦æ§æ©æ¬æ­æ®æ°æ±æ³æ´æµæ¶æ·æ¸æ»æ¼æ¾æ¿æææææææææææææææææææ æ¤æ¥æ¦æ¨æªæ«æ¬æ¯æ°æ²æ³æ´æµæ¸æ¹æ¼æ½æ¾æ¿ææææææææææææææææææææ¡æ¤æ¦æ«æ¯æ±æ²æµæ¶æ¹æ»æ½æ¿æï¿½".split("");

  for (j = 0; j != D[146].length; ++j) if (D[146][j].charCodeAt(0) !== 0xFFFD) {
    e[D[146][j]] = 37376 + j;
    d[37376 + j] = D[146][j];
  }

  D[147] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ææææææææææææææææææææææ¢æ¤æ¥æ¦æ§æ¨æ«æ¬æ®æ¯æ°æ±æ³æµæ·æ¹æºæ»æ¼æ¾ææææææææææææææææææææ¢æ£æ¤ï¿½æ¥æ§æ¨æ©æ«æ®æ¯æ°æ±æ²æ³æµæ¶æ·æ¸æ¹æ»æ¼æ¾ææææææææææææææææææææææ æ¡æ¢æ£æ¤æ¥æ¦æ¨æªæ«æ¬æ®æ¯æ°æ±æ²æ³æ´æµæ¶æ·æ»æ¼æ½æ¾æ¿æææææææææææææææææææææææ æ¡æ¢æ£æ¥æ¦æ§æ¨æªæ«æ¯æ±æ²æ³æ´æ¶æ¹æ»æ½æ¾æ¿ææææææææææææææææææï¿½".split("");

  for (j = 0; j != D[147].length; ++j) if (D[147][j].charCodeAt(0) !== 0xFFFD) {
    e[D[147][j]] = 37632 + j;
    d[37632 + j] = D[147][j];
  }

  D[148] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æææææ æ¡æ£æ¥æ§æ¨æ©æªæ«æ¬æ­æ®æ¯æ°æ±æ²æ³æ´æµæ¶æ·æ¸æ¹æºæ»æ¼æ½æ¾æ¿æææææææææææææææææææææææææææææ æ¡ï¿½æ¢æ£æ¤æ¦æ§æ¨æ©æªæ¬æ­æ°æ±æ²æ³æ·æºæ¼æ½æææææææææææææææææææææ æ¡æ¤æ¥æ§æ¨æ©æªæ­æ®æ¯æ±æ³æµæ¶æ¸æ¹æºæ»æ¼æ½æ¾æ¿ææææææææææææææææææææææ æ¢æ£æ¦æ¨æªæ¬æ®æ±æ²æ³æ´æµæ¶æ·æ¸æºæ»æ¾æ¿æææææææææææææææææææææ¡æ£æ¤æªæ«ï¿½".split("");

  for (j = 0; j != D[148].length; ++j) if (D[148][j].charCodeAt(0) !== 0xFFFD) {
    e[D[148][j]] = 37888 + j;
    d[37888 + j] = D[148][j];
  }

  D[149] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ²æ³æ´æµæ¸æ¹æ»æ¼æ½æ¾æ¿æææææææææææææææææææ¡æ¢æ£æ¤æ¦æ©æªæ«æ¬æ®æ°æ²æ³æ·æ¸æ¹æºæ»æ½æ¿ææææææææææææææï¿½ææææææ æ¢æ£æ¥æ§æ©æªæ«æ¬æ­æ±æ²æ³æµæ¸æ¹æ»æ¼æ½æ¿æææææææææææææææææææææææææ æ¡æ¢æ£æ¤æ¥æ¦æ©æªæ«æ¬æ­æ¯æ°æ±æ²æ³æµæ¶æ·æ¸æºæ»æ¼æ½æ¿æææææææææææææææææææææææææææææ æ¡æ¢æ£æ¤æ¥æ§æ¨æªæ«æ¬æ­æ®æ¯æ±æµæ¶æ¸æºæ»æ½æææï¿½".split("");

  for (j = 0; j != D[149].length; ++j) if (D[149][j].charCodeAt(0) !== 0xFFFD) {
    e[D[149][j]] = 38144 + j;
    d[38144 + j] = D[149][j];
  }

  D[150] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æææææææææææææææææ æ¡æ¢æ£æ¤æ¥æ§æ©æ®æ°æ²æ³æ¶æ·æ¸æ¹æ»æ¼æ¾æ¿æææææææææææææææææ¢æ£æ¤æ¦æ§æ«æ¬æ®æ±æ´æ¶ï¿½æ¸æ¹æºæ»æ½ææææææææææææææææææææ æ¡æ¤æ¦æ©æ¬æ®æ±æ²æ´æ¹æºæ»æ¼æ½æ¾æ¿ææææææææææææææææææ¡æ£æ¤æ¦æ§æ¨æªæ«æ­æ®æ²æµæ¶æ·æ¸æ¹æºæ»æ¼æ¾æ æ æ æ æ æ æ æ æ æ æ æ æ æ æ æ æ æ  æ ¢æ £æ ¤æ ¥æ ¦æ §æ ¨æ «æ ¬æ ­æ ®æ ¯æ °æ ±æ ´æ µæ ¶æ ºæ »æ ¿æ¡æ¡æ¡æ¡æ¡æ¡æ¡æ¡æ¡æ¡æ¡ï¿½".split("");

  for (j = 0; j != D[150].length; ++j) if (D[150][j].charCodeAt(0) !== 0xFFFD) {
    e[D[150][j]] = 38400 + j;
    d[38400 + j] = D[150][j];
  }

  D[151] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¡æ¡æ¡æ¡æ¡ªæ¡¬æ¡­æ¡®æ¡¯æ¡°æ¡±æ¡²æ¡³æ¡µæ¡¸æ¡¹æ¡ºæ¡»æ¡¼æ¡½æ¡¾æ¡¿æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢ æ¢¡æ¢£æ¢¤æ¢¥æ¢©æ¢ªæ¢«æ¢¬æ¢®æ¢±æ¢²æ¢´æ¢¶æ¢·æ¢¸ï¿½æ¢¹æ¢ºæ¢»æ¢¼æ¢½æ¢¾æ¢¿æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£¡æ£¢æ£¤æ£¥æ£¦æ£§æ£¨æ£©æ£ªæ£«æ£¬æ£­æ£¯æ£²æ£³æ£´æ£¶æ£·æ£¸æ£»æ£½æ£¾æ£¿æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤¡æ¤¢æ¤£æ¤¥æ¤¦æ¤§æ¤¨æ¤©æ¤ªæ¤«æ¤¬æ¤®æ¤¯æ¤±æ¤²æ¤³æ¤µæ¤¶æ¤·æ¤¸æ¤ºæ¤»æ¤¼æ¤¾æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥æ¥ï¿½".split("");

  for (j = 0; j != D[151].length; ++j) if (D[151][j].charCodeAt(0) !== 0xFFFD) {
    e[D[151][j]] = 38656 + j;
    d[38656 + j] = D[151][j];
  }

  D[152] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¥¡æ¥¢æ¥¤æ¥¥æ¥§æ¥¨æ¥©æ¥ªæ¥¬æ¥­æ¥¯æ¥°æ¥²æ¥³æ¥´æ¥µæ¥¶æ¥ºæ¥»æ¥½æ¥¾æ¥¿æ¦æ¦æ¦æ¦æ¦æ¦æ¦æ¦æ¦æ¦æ¦æ¦æ¦æ¦æ¦æ¦æ¦æ¦æ¦æ¦ æ¦¡æ¦¢æ¦£æ¦¤æ¦¥æ¦¦æ¦©æ¦ªæ¦¬æ¦®æ¦¯æ¦°æ¦²æ¦³æ¦µæ¦¶æ¦¸æ¦¹æ¦ºæ¦¼æ¦½ï¿½æ¦¾æ¦¿æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§æ§¡æ§¢æ§£æ§¤æ§¥æ§¦æ§§æ§¨æ§©æ§ªæ§«æ§¬æ§®æ§¯æ§°æ§±æ§³æ§´æ§µæ§¶æ§·æ§¸æ§¹æ§ºæ§»æ§¼æ§¾æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨ æ¨¢æ¨£æ¨¤æ¨¥æ¨¦æ¨§æ¨©æ¨«æ¨¬æ¨­æ¨®æ¨°æ¨²æ¨³æ¨´æ¨¶æ¨·æ¨¸æ¨¹æ¨ºæ¨»æ¨¼æ¨¿æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©ï¿½".split("");

  for (j = 0; j != D[152].length; ++j) if (D[152][j].charCodeAt(0) !== 0xFFFD) {
    e[D[152][j]] = 38912 + j;
    d[38912 + j] = D[152][j];
  }

  D[153] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ©æ©æ©æ©æ© æ©¢æ©£æ©¤æ©¦æ©§æ©¨æ©©æ©ªæ©«æ©¬æ©­æ©®æ©¯æ©°æ©²æ©³æ©´æ©µæ©¶æ©·æ©¸æ©ºæ©»æ©½æ©¾æ©¿æªæªæªæªæªæªæªæªæªæªæªæªæªæªæªæªæªæªæªæªæªæªæªæªæªæªæª¡æª¢æª£æª¤æª¥æª¦ï¿½æª§æª¨æªªæª­æª®æª¯æª°æª±æª²æª³æª´æªµæª¶æª·æª¸æª¹æªºæª»æª¼æª½æª¾æª¿æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ« æ«¡æ«¢æ«£æ«¤æ«¥æ«¦æ«§æ«¨æ«©æ«ªæ««æ«¬æ«­æ«®æ«¯æ«°æ«±æ«²æ«³æ«´æ«µæ«¶æ«·æ«¸æ«¹æ«ºæ«»æ«¼æ«½æ«¾æ«¿æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬¥æ¬¦æ¬¨æ¬©æ¬ªæ¬«æ¬¬æ¬­æ¬®ï¿½".split("");

  for (j = 0; j != D[153].length; ++j) if (D[153][j].charCodeAt(0) !== 0xFFFD) {
    e[D[153][j]] = 39168 + j;
    d[39168 + j] = D[153][j];
  }

  D[154] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¬¯æ¬°æ¬±æ¬³æ¬´æ¬µæ¬¶æ¬¸æ¬»æ¬¼æ¬½æ¬¿æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­æ­ æ­¡æ­¨æ­©æ­«æ­¬æ­­æ­®æ­¯æ­°æ­±æ­²æ­³æ­´æ­µæ­¶æ­·æ­¸æ­ºæ­½æ­¾æ­¿æ®æ®æ®ï¿½æ®æ®æ®æ®æ®æ®æ®æ®æ®æ®æ®æ®æ®æ®æ® æ®¢æ®£æ®¤æ®¥æ®¦æ®§æ®¨æ®©æ®«æ®¬æ®­æ®®æ®¯æ®°æ®±æ®²æ®¶æ®¸æ®¹æ®ºæ®»æ®¼æ®½æ®¾æ¯æ¯æ¯æ¯æ¯æ¯æ¯æ¯æ¯æ¯æ¯æ¯æ¯æ¯æ¯æ¯æ¯æ¯æ¯ æ¯¢æ¯£æ¯¤æ¯¥æ¯¦æ¯§æ¯¨æ¯©æ¯¬æ¯­æ¯®æ¯°æ¯±æ¯²æ¯´æ¯¶æ¯·æ¯¸æ¯ºæ¯»æ¯¼æ¯¾æ¯¿æ°æ°æ°æ°æ°æ°æ°æ°æ°æ°æ°æ°æ°æ°æ°æ°æ° æ°£æ°¥æ°«æ°¬æ°­æ°±æ°³æ°¶æ°·æ°¹æ°ºæ°»æ°¼æ°¾æ°¿æ±æ±æ±æ±æ±æ±æ±æ±æ±æ±æ±æ±æ±æ±ï¿½".split("");

  for (j = 0; j != D[154].length; ++j) if (D[154][j].charCodeAt(0) !== 0xFFFD) {
    e[D[154][j]] = 39424 + j;
    d[39424 + j] = D[154][j];
  }

  D[155] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ±æ±æ±¢æ±£æ±¥æ±¦æ±§æ±«æ±¬æ±­æ±®æ±¯æ±±æ±³æ±µæ±·æ±¸æ±ºæ±»æ±¼æ±¿æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ² æ²¢æ²¨æ²¬æ²¯æ²°æ²´æ²µæ²¶æ²·æ²ºæ³æ³æ³æ³æ³æ³æ³æ³æ³æ³æ³æ³æ³æ³ï¿½æ³æ³æ³æ³æ³æ³¤æ³¦æ³§æ³©æ³¬æ³­æ³²æ³´æ³¹æ³¿æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´ æ´¡æ´¢æ´£æ´¤æ´¦æ´¨æ´©æ´¬æ´­æ´¯æ´°æ´´æ´¶æ´·æ´¸æ´ºæ´¿æµæµæµæµæµæµæµæµæµæµæµæµæµæµ¡æµ¢æµ¤æµ¥æµ§æµ¨æµ«æµ¬æµ­æµ°æµ±æµ²æµ³æµµæµ¶æµ¹æµºæµ»æµ½æµ¾æµ¿æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶¢æ¶¥æ¶¬æ¶­æ¶°æ¶±æ¶³æ¶´æ¶¶æ¶·æ¶¹æ¶ºæ¶»æ¶¼æ¶½æ¶¾æ·æ·æ·æ·æ·æ·ï¿½".split("");

  for (j = 0; j != D[155].length; ++j) if (D[155][j].charCodeAt(0) !== 0xFFFD) {
    e[D[155][j]] = 39680 + j;
    d[39680 + j] = D[155][j];
  }

  D[156] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ·æ·æ·æ·æ·æ·æ·æ·æ·æ·æ·æ·æ·æ·¢æ·£æ·¥æ·§æ·¨æ·©æ·ªæ·­æ·¯æ·°æ·²æ·´æ·µæ·¶æ·¸æ·ºæ·½æ·¾æ·¿æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸¢æ¸¦æ¸§æ¸¨æ¸ªæ¸¬æ¸®æ¸°æ¸±æ¸³æ¸µï¿½æ¸¶æ¸·æ¸¹æ¸»æ¸¼æ¸½æ¸¾æ¸¿æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹ æ¹¡æ¹¢æ¹£æ¹¤æ¹¥æ¹¦æ¹§æ¹¨æ¹©æ¹ªæ¹¬æ¹­æ¹¯æ¹°æ¹±æ¹²æ¹³æ¹´æ¹µæ¹¶æ¹·æ¹¸æ¹¹æ¹ºæ¹»æ¹¼æ¹½æºæºæºæºæºæºæºæºæºæºæºæºæºæºæºæºæºæºæºæºæºæºæºæº æº¡æº£æº¤æº¦æº¨æº©æº«æº¬æº­æº®æº°æº³æºµæº¸æº¹æº¼æº¾æº¿æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»£æ»§æ»ªæ»«æ»¬æ»­æ»®æ»¯ï¿½".split("");

  for (j = 0; j != D[156].length; ++j) if (D[156][j].charCodeAt(0) !== 0xFFFD) {
    e[D[156][j]] = 39936 + j;
    d[39936 + j] = D[156][j];
  }

  D[157] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ»°æ»±æ»²æ»³æ»µæ»¶æ»·æ»¸æ»ºæ»»æ»¼æ»½æ»¾æ»¿æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼¡æ¼¢æ¼£æ¼¥æ¼¦æ¼§æ¼¨æ¼¬æ¼®æ¼°æ¼²æ¼´æ¼µæ¼·æ¼¸æ¼¹æ¼ºæ¼»æ¼¼æ¼½æ¼¿æ½æ½æ½ï¿½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½ æ½¡æ½£æ½¤æ½¥æ½§æ½¨æ½©æ½ªæ½«æ½¬æ½¯æ½°æ½±æ½³æ½µæ½¶æ½·æ½¹æ½»æ½½æ½¾æ½¿æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾ æ¾¢æ¾£æ¾¤æ¾¥æ¾¦æ¾¨æ¾©æ¾ªæ¾«æ¾¬æ¾­æ¾®æ¾¯æ¾°æ¾±æ¾²æ¾´æ¾µæ¾·æ¾¸æ¾ºæ¾»æ¾¼æ¾½æ¾¾æ¾¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿æ¿¢æ¿£æ¿¤æ¿¥ï¿½".split("");

  for (j = 0; j != D[157].length; ++j) if (D[157][j].charCodeAt(0) !== 0xFFFD) {
    e[D[157][j]] = 40192 + j;
    d[40192 + j] = D[157][j];
  }

  D[158] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¿¦æ¿§æ¿¨æ¿©æ¿ªæ¿«æ¿¬æ¿­æ¿°æ¿±æ¿²æ¿³æ¿´æ¿µæ¿¶æ¿·æ¿¸æ¿¹æ¿ºæ¿»æ¿¼æ¿½æ¿¾æ¿¿çççççççççççççççççççççççççççççç ç¡ç¢ç¤ç¥ç¦ç§ç¨ç©çªï¿½ç«ç¬ç­ç®ç¯ç°ç±ç²ç³ç´ç¶ç·ç¸çºç»ç¼ç½ç¾ç¿çççççççççççççççççççççççççççççç ç¡ç¢ç£ç¤ç¥ç¦ç§ç¨ç©çªç®ç±ç²ç³ç´ç·ç¹çºç»ç½ççççççççççççççççççççç ç¡ç¢ç£ç¤ç¥ç¦ç§ç¨ç©çªç°ç²ç´çµç¶çºç¾ç¿çççççççççççççççççççï¿½".split("");

  for (j = 0; j != D[158].length; ++j) if (D[158][j].charCodeAt(0) !== 0xFFFD) {
    e[D[158][j]] = 40448 + j;
    d[40448 + j] = D[158][j];
  }

  D[159] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çççç ç¡ç¢ç£ç¥çªç®ç°ç±ç²ç³ç´çµç¶ç¸çºç»ç¼ç¾ç¿çççççççççççççççççççççççç ç¡ç¢ç£ç¤ç¥ç§ç¨ç©çªç«ç¬ç­ç®ç²ç³ç´ï¿½çµç·ç¸ç¹çºç»ç¼ç½ç¾ç¿ççççççççççççççççççççççççççç ç¡ç¢ç£ç¥ç©çªç«ç¬ç­ç¯ç°ç±ç´çµç¶ç·ç¹ç»ç¼ç¾ç¿çççççççççççççççççççççççççç¡ç¢ç£ç¤ç¥ç¦ç§ç©çªç«ç­ç®ç¯ç°ç±ç²ç´ç¶ç·ç¸çºç»ç¼ç½ç¾ç¿ççççççççççççççççççï¿½".split("");

  for (j = 0; j != D[159].length; ++j) if (D[159][j].charCodeAt(0) !== 0xFFFD) {
    e[D[159][j]] = 40704 + j;
    d[40704 + j] = D[159][j];
  }

  D[160] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ççççççççççç¡ç¢ç£ç¤ç¦ç¨ç©çªç«ç¬ç­ç¯ç°ç±ç²ç³ç´çµç¶ç·ç¸çºç»ç¼ç½ç¾ç¿ççççççççççççççççççççççççççï¿½ççççç ç¡ç¢ç£ç¤ç¥ç¦ç§ç©ç«ç­ç®ç¯ç²ç³ç´çºç¼ç¾ççççççççççççççççççççççç ç£ç¤ç¥ç¨çªç«ç¬ç­ç°ç±ç³ç´ç¶ç·ç¸ç»ç¼ç½çççççççççççççççççççççççç ç¡ç¢ç£ç¤ç¥ç¦ç§ç¨ç©çªç«ç®ç±ç²ç³çµçºç»ç¼ç½ç¾ç¿çççççççççççççççççï¿½".split("");

  for (j = 0; j != D[160].length; ++j) if (D[160][j].charCodeAt(0) !== 0xFFFD) {
    e[D[160][j]] = 40960 + j;
    d[40960 + j] = D[160][j];
  }

  D[161] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ãããÂ·ËËÂ¨ããâï½ââ¦ââââããããããããããããããÂ±ÃÃ·â¶â§â¨âââªâ©ââ·ââ¥â¥â âââ«â®â¡âââ½ââ â®â¯â¤â¥ââµâ´ââÂ°â²â³âï¼Â¤ï¿ ï¿¡â°Â§âââââââââ¡â â³â²â»ââââãï¿½".split("");

  for (j = 0; j != D[161].length; ++j) if (D[161][j].charCodeAt(0) !== 0xFFFD) {
    e[D[161][j]] = 41216 + j;
    d[41216 + j] = D[161][j];
  }

  D[162] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â°â±â²â³â´âµâ¶â·â¸â¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½âââââââââââââââââââââ´âµâ¶â·â¸â¹âºâ»â¼â½â¾â¿âââââââââ â¡â¢â£â¤â¥â¦â§â¨â©ï¿½ï¿½ã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ï¿½ï¿½â â¡â¢â£â¤â¥â¦â§â¨â©âªâ«ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[162].length; ++j) if (D[162][j].charCodeAt(0) !== 0xFFFD) {
    e[D[162][j]] = 41472 + j;
    d[41472 + j] = D[162][j];
  }

  D[163] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¼ï¼ï¼ï¿¥ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ ï¼¡ï¼¢ï¼£ï¼¤ï¼¥ï¼¦ï¼§ï¼¨ï¼©ï¼ªï¼«ï¼¬ï¼­ï¼®ï¼¯ï¼°ï¼±ï¼²ï¼³ï¼´ï¼µï¼¶ï¼·ï¼¸ï¼¹ï¼ºï¼»ï¼¼ï¼½ï¼¾ï¼¿ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï¿£ï¿½".split("");

  for (j = 0; j != D[163].length; ++j) if (D[163][j].charCodeAt(0) !== 0xFFFD) {
    e[D[163][j]] = 41728 + j;
    d[41728 + j] = D[163][j];
  }

  D[164] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ãããããããããããããããããããããããããããããããã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ããããããããããããããããããããï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[164].length; ++j) if (D[164][j].charCodeAt(0) !== 0xFFFD) {
    e[D[164][j]] = 41984 + j;
    d[41984 + j] = D[164][j];
  }

  D[165] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ããããããããããããããããããããããããããããããããã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[165].length; ++j) if (D[165][j].charCodeAt(0) !== 0xFFFD) {
    e[D[165][j]] = 42240 + j;
    d[42240 + j] = D[165][j];
  }

  D[166] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¸µï¸¶ï¸¹ï¸ºï¸¿ï¹ï¸½ï¸¾ï¹ï¹ï¹ï¹ï¿½ï¿½ï¸»ï¸¼ï¸·ï¸¸ï¸±ï¿½ï¸³ï¸´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[166].length; ++j) if (D[166][j].charCodeAt(0) !== 0xFFFD) {
    e[D[166][j]] = 42496 + j;
    d[42496 + j] = D[166][j];
  }

  D[167] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð°Ð±Ð²Ð³Ð´ÐµÑÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[167].length; ++j) if (D[167][j].charCodeAt(0) !== 0xFFFD) {
    e[D[167][j]] = 42752 + j;
    d[42752 + j] = D[167][j];
  }

  D[168] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ËËËâââ¥âµâââââââââ£ââ¦â§â¿âââââââââââââââââ â¡â¢â£â¤â¥â¦â§â¨â©âªâ«â¬â­â®â¯â°â±â²â³âââââââï¿½ââââââââââââ¼â½â¢â£â¤â¥ââãããï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÄÃ¡ÇÃ ÄÃ©ÄÃ¨Ä«Ã­ÇÃ¬ÅÃ³ÇÃ²Å«ÃºÇÃ¹ÇÇÇÇÃ¼ÃªÉï¿½ÅÅï¿½É¡ï¿½ï¿½ï¿½ï¿½ãããããããããããããããããããããããããããã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[168].length; ++j) if (D[168][j].charCodeAt(0) !== 0xFFFD) {
    e[D[168][j]] = 43008 + j;
    d[43008 + j] = D[168][j];
  }

  D[169] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ã£ãããããã¡ãããããï¸°ï¿¢ï¿¤ï¿½â¡ã±ï¿½âï¿½ï¿½ï¿½ã¼ããã½ã¾ãããï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ ï¹¡ï¿½ï¹¢ï¹£ï¹¤ï¹¥ï¹¦ï¹¨ï¹©ï¹ªï¹«ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ãï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½âââââââââââââââââââââââââââââââââ â¡â¢â£â¤â¥â¦â§â¨â©âªâ«â¬â­â®â¯â°â±â²â³â´âµâ¶â·â¸â¹âºâ»â¼â½â¾â¿ââââââââââââï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[169].length; ++j) if (D[169][j].charCodeAt(0) !== 0xFFFD) {
    e[D[169][j]] = 43264 + j;
    d[43264 + j] = D[169][j];
  }

  D[170] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çççç¢ç£ç¤ç¥ç¦ç§çªç«çµç¶ç¹ç½ç¾ç¿ççççççççççççççççççççç ç£ç¤ç¦ç§ç¨ç­ç¯ç°ç²ç³çµç¶çºç»ç¼ç½çççççççççï¿½çççççççççççççççççççç¡ç¢ç£ç¤ç¥ç¦ç§ç¨ç©çªç«ç®ç°ç±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[170].length; ++j) if (D[170][j].charCodeAt(0) !== 0xFFFD) {
    e[D[170][j]] = 43520 + j;
    d[43520 + j] = D[170][j];
  }

  D[171] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç²ç³ç´çµç¶ç·ç¸ç¹çºç»ç¼ç½ç¿çççççççççççççççççççççççç ç¡ç£ç¤ç¥ç¦ç§ç¨çªç¬ç­ç±ç´çµç¶ç¸ç¹ç¼ç½ç¾ç¿ççççççï¿½çççççççççççççççç¡ç¢ç£ç¤ç¦ç¨çªç«ç¬ç®ç¯ç°ç±ç³ç´çµç¶ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[171].length; ++j) if (D[171][j].charCodeAt(0) !== 0xFFFD) {
    e[D[171][j]] = 43776 + j;
    d[43776 + j] = D[171][j];
  }

  D[172] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¸ç¹çºç»ç¼ç½ç¾ç¿çççççççççççççççççççççççç ç¡ç£ç¤ç§ç©ç«ç­ç¯ç±ç²ç·ç¸ç¹çºç»ç½ç¾ç¿çççççççççççççï¿½ççççççççççç ç¡ç¢ç£ç¤ç¥ç¦ç§ç¨ç©çªç«ç¬ç®ç¯ç±ç²ç³ç´çµç¸ç¹çºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[172].length; ++j) if (D[172][j].charCodeAt(0) !== 0xFFFD) {
    e[D[172][j]] = 44032 + j;
    d[44032 + j] = D[172][j];
  }

  D[173] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç»ç¼ç½ç¿çççççççççççççççççççççççç ç¡ç¢ç£ç¤ç¥ç¦çªç«ç¬ç­ç®ç¯ç°ç±ç²ç³ç´çµç¶ç·ç¸ç¹ç»ç¼ç½ç¾ç¿ççççççççï¿½çççççççççççççççççççççç¡ç¥ç§ç¨ç©çªç«ç¬ç­ç°ç±ç²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[173].length; ++j) if (D[173][j].charCodeAt(0) !== 0xFFFD) {
    e[D[173][j]] = 44288 + j;
    d[44288 + j] = D[173][j];
  }

  D[174] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç³çµç¸ç¹çºç»ç¼ç½ç¾ççççççççççççççççççççççç ç¡ç¢ç£ç¤ç¦ç§çªç®ç´ç¶ç¹ç¼ç½ç¿çççççççççççççççççï¿½çççç ç¡ç¢ç£ç¤ç§ç¨ç©ç«ç¬ç­ç®ç¯ç°ç±ç³çµç¶ç·çºç»ç¼ç½ç¾ççççççï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[174].length; ++j) if (D[174][j].charCodeAt(0) !== 0xFFFD) {
    e[D[174][j]] = 44544 + j;
    d[44544 + j] = D[174][j];
  }

  D[175] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çççççççççççççç¢ç¦ç§ç¨ç©çªç­ç¶ç·çºç»ç¿ççççççççççççççççç ç¡ç¥ç©ç¬ç­ç®ç¯ç²ç³çµç¶ç·ç¸çºç»ç½ç¾ççççï¿½çççççççççççççççç¡ç£ç§ç¨ç¬ç®ç¯ç±ç²ç¶ç·ç¹çºç»ç½çççï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[175].length; ++j) if (D[175][j].charCodeAt(0) !== 0xFFFD) {
    e[D[175][j]] = 44800 + j;
    d[44800 + j] = D[175][j];
  }

  D[176] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çççççççççççççççççççççç ç¡ç¢ç¤ç¥ç¦ç§ç¨ç©çªç¬ç­ç®ç°ç±ç²ç³ç´çµç¶ç·ç¹çºç¼ç¿çççççççççççççççççï¿½ççççç ç¡ç¢ç£ç¥ç¦ç§ç¨ç©çªç«ç¬ç­ç¯ç°ç³çµç¶ç·ç¸ç¹çºç»ç¼ç½ç¾çççåé¿åæ¨åååççè¼ç®è¾ç¢ç±ééæ°¨å®ä¿ºææå²¸èºæ¡è®æçå¹æç¬ç¿±è¢å²å¥¥ææ¾³è­ææå­å§ç¬å«ç¤å·´æè·é¶æèåé¸ç½¢ç¸ç½æç¾æä½°è´¥æç¨æç­æ¬æ³è¬é¢æ¿çæ®æä¼´ç£ååç»é¦å¸®æ¢æ¦èç»æ£ç£èéåè°¤èèåè¤å¥ï¿½".split("");

  for (j = 0; j != D[176].length; ++j) if (D[176][j].charCodeAt(0) !== 0xFFFD) {
    e[D[176][j]] = 45056 + j;
    d[45056 + j] = D[176][j];
  }

  D[177] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ççççççççççççç ç¡ç¢ç£ç¤ç¦ç§ç¨ç©çªç«ç¬ç­ç°ç³çµç¶ç·çºç»ç½ç¿ççççççççççççççççççççççç¡ç£ç¤ç¥ç§çªç«ï¿½ç¬ç®ç°ç±ç²ç³ç´ç¹ç»ç½ç¾ç¿çççççççççççççççççççççèé¹ä¿å ¡é¥±å®æ±æ¥æ´è±¹é²çæ¯ç¢æ²ååè¾èè´é¡åçå¤æ«çè¢«å¥è¯æ¬ç¬¨å´©ç»·ç­æ³µè¹¦è¿¸é¼é¼»æ¯éç¬å½¼ç¢§èè½æ¯æ¯æ¯å¸åºç¹é­æå¼å¿è¾å£èé¿éé­è¾¹ç¼è´¬æä¾¿ååè¾¨è¾©è¾«éæ å½ªèè¡¨é³æå«çªå½¬ææ¿æ»¨å®¾æåµå°æä¸ç§é¥¼ç³ï¿½".split("");

  for (j = 0; j != D[177].length; ++j) if (D[177][j].charCodeAt(0) !== 0xFFFD) {
    e[D[177][j]] = 45312 + j;
    d[45312 + j] = D[177][j];
  }

  D[178] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çççç ç¤ç§ç©çªç­ç®ç¯ç°ç±ç²ç³ç´çµç¶ç·ç¸çºç»ç¼çççççççççççççççççççççççç¡ç£ç¤ç¦ç¨ç«ç­ç®ç¯ç±ç²ç´ç¶ç·ç¸ç¹çºï¿½ç¼ç¾ççççççççççççççççççççççççççççç ç¡ç¤çå¹¶ç»è æ­æ¨éµæ³¢ååæéç®ä¼¯å¸è¶èèæ¸¤æ³é©³æååºè¡¥å ä¸å¸æ­¥ç°¿é¨ææ¦çè£ææè´¢ç¬è¸©éå½©èè¡é¤åèæ®æ­æ¨ç¿èè±ä»æ²§èæç³æ§½æ¹èåç­ä¾§åæµå±è¹­æåè¬è¶æ¥ç¢´æ½å¯å²å·®è¯§ææ´è±ºææºèé¦è°ç¼ é²äº§éé¢¤æçï¿½".split("");

  for (j = 0; j != D[178].length; ++j) if (D[178][j].charCodeAt(0) !== 0xFFFD) {
    e[D[178][j]] = 45568 + j;
    d[45568 + j] = D[178][j];
  }

  D[179] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¦ç¨çªç¯ç°ç±ç²ç´çµç·ç¹çºç»ç¼ç ç ç ç ç ç ç ç ç ç ç ç ç ç ç ç ç  ç ¡ç ¢ç ¤ç ¨ç ªç «ç ®ç ¯ç ±ç ²ç ³ç µç ¶ç ½ç ¿ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ï¿½ç¡ç¡ç¡ç¡ç¡ ç¡¡ç¡¢ç¡£ç¡¤ç¡¥ç¡¦ç¡§ç¡¨ç¡©ç¡¯ç¡°ç¡±ç¡²ç¡³ç¡´ç¡µç¡¶ç¡¸ç¡¹ç¡ºç¡»ç¡½ç¡¾ç¡¿ç¢ç¢ç¢ç¢åºå°å¸¸é¿å¿è åæçå±å¡è¶æéæå²æ½®å·¢åµçè½¦æ¯æ¤æ£å½»æ¾é´è£è¾°å°æ¨å¿±æ²éè¶è¡¬æç§°åæ©æåä¹ç¨æ©æ¾è¯æ¿ééªç§¤åç´æåæ± è¿å¼é©°è»é½¿ä¾å°ºèµ¤ç¿æ¥ç½åå²è«å´å® æ½é¬ç´è¸ç¨ æç­¹ä»ç»¸çä¸è­ååºæ©±å¨èºééæ»é¤æ¥ï¿½".split("");

  for (j = 0; j != D[179].length; ++j) if (D[179][j].charCodeAt(0) !== 0xFFFD) {
    e[D[179][j]] = 45824 + j;
    d[45824 + j] = D[179][j];
  }

  D[180] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ ç¢¢ç¢¤ç¢¦ç¢¨ç¢©ç¢ªç¢«ç¢¬ç¢­ç¢®ç¢¯ç¢µç¢¶ç¢·ç¢¸ç¢ºç¢»ç¢¼ç¢½ç¢¿ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ ç£¡ç£¢ç££ï¿½ç£¤ç£¥ç£¦ç£§ç£©ç£ªç£«ç£­ç£®ç£¯ç£°ç£±ç£³ç£µç£¶ç£¸ç£¹ç£»ç£¼ç£½ç£¾ç£¿ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¡å¨çæè§¦å¤æ£å·ç©¿æ¤½ä¼ è¹åä¸²ç®çªå¹¢åºé¯åå¹çæ¶é¤åæ¥æ¤¿éåæ·³çº¯è ¢æ³ç»°çµè¨ç£éè¾æç·è¯æ­¤åºèµæ¬¡èªè±å±åä»ä¸åç²éç°ä¿è¹¿ç¯¡çªæ§å´å¬èçç²¹æ·¬ç¿ æå­å¯¸ç£æ®ææªæ«éæ­è¾¾ç­ç©æå¤§åæ­¹å£æ´å¸¦æ®ä»£è´·è¢å¾é®ï¿½".split("");

  for (j = 0; j != D[180].length; ++j) if (D[180][j].charCodeAt(0) !== 0xFFFD) {
    e[D[180][j]] = 46080 + j;
    d[46080 + j] = D[180][j];
  }

  D[181] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ ç¤¡ç¤¢ç¤£ç¤¥ç¤¦ç¤§ç¤¨ç¤©ç¤ªç¤«ç¤¬ç¤­ç¤®ç¤¯ç¤°ç¤±ç¤²ç¤³ç¤µç¤¶ç¤·ç¤¸ç¤¹ç¤½ç¤¿ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥¡ç¥£ï¿½ç¥¤ç¥¦ç¥©ç¥ªç¥«ç¥¬ç¥®ç¥°ç¥±ç¥²ç¥³ç¥´ç¥µç¥¶ç¥¹ç¥»ç¥¼ç¥½ç¥¾ç¥¿ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦æ è½æä¸¹åé¸æ¸èæ¦æ°®ä½æ®æ·¡è¯å¼¹èå½æ¡åè¡æ¡£åæ£è¹åå²ç¥·å¯¼å°ç¨»æ¼éçå¾·å¾çè¹¬ç¯ç»ç­çªå³éå ¤ä½æ»´è¿ªæç¬çæ¶¤ç¿å«¡æµåºå°èç¬¬å¸å¼éç¼é¢ ææ»ç¢ç¹å¸éå«çµä½ç¸åºæ¦å¥ æ·æ®¿ç¢å¼éååæåéè°è·ç¹ç¢è¶è¿­è°å ï¿½".split("");

  for (j = 0; j != D[181].length; ++j) if (D[181][j].charCodeAt(0) !== 0xFFFD) {
    e[D[181][j]] = 46336 + j;
    d[46336 + j] = D[181][j];
  }

  D[182] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ ç¦¡ç¦¢ç¦£ç¦¤ç¦¥ç¦¦ç¦¨ç¦©ç¦ªç¦«ç¦¬ç¦­ç¦®ç¦¯ç¦°ç¦±ç¦²ç¦´ç¦µç¦¶ç¦·ç¦¸ç¦¼ç¦¿ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ ç§¡ç§¢ç§¥ç§¨ç§ªï¿½ç§¬ç§®ç§±ç§²ç§³ç§´ç§µç§¶ç§·ç§¹ç§ºç§¼ç§¾ç§¿ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ä¸ç¯å®éé¡¶é¼é­å®è®¢ä¸¢ä¸å¬è£æå¨æ ä¾æ«å»æ´åææé¡è±éçé½ç£æ¯çç¬è¯»å µç¹èµæéèåº¦æ¸¡å¦ç«¯ç­é»æ®µæ­ç¼å åéå¯¹å¢©å¨è¹²æ¦é¡¿å¤éç¾éæåå¤å¤ºåèº²æµè·ºèµåæ°å è¾å³¨é¹ä¿é¢è®¹å¨¥æ¶åæ¼ééé¥¿æ©èå¿è³å°é¥µæ´±äºï¿½".split("");

  for (j = 0; j != D[182].length; ++j) if (D[182][j].charCodeAt(0) !== 0xFFFD) {
    e[D[182][j]] = 46592 + j;
    d[46592 + j] = D[182][j];
  }

  D[183] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¨ç¨ç¨¡ç¨¢ç¨¤ç¨¥ç¨¦ç¨§ç¨¨ç¨©ç¨ªç¨«ç¨¬ç¨­ç¨®ç¨¯ç¨°ç¨±ç¨²ç¨´ç¨µç¨¶ç¨¸ç¨ºç¨¾ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç© ç©¡ç©¢ç©£ç©¤ç©¥ç©¦ç©§ç©¨ï¿½ç©©ç©ªç©«ç©¬ç©­ç©®ç©¯ç©±ç©²ç©³ç©µç©»ç©¼ç©½ç©¾çªçªçªçªçªçªçªçªçªçªçªçªçªçªçªçªçª¡çª¢è´°åç½ç­ä¼ä¹éæ³çè©å¸çªç¿»æ¨ç¾éç¹å¡ç¦åè¿èè´©ç¯é¥­æ³åè³æ¹èªæ¿é²å¦¨ä»¿è®¿çººæ¾è²éå¡é£è¥åªè¯½å èºåºæ²¸è´¹è¬éå©æ°åçº·åçæ±¾ç²å¥ä»½å¿¿æ¤ç²ªä¸°å°æ«èå³°éé£ç¯ç½é¢å¯ç¼è®½å¥å¤ä½å¦å¤«æ·è¤å­µæ¶æè¾å¹æ°ç¬¦ä¼ä¿æï¿½".split("");

  for (j = 0; j != D[183].length; ++j) if (D[183][j].charCodeAt(0) !== 0xFFFD) {
    e[D[183][j]] = 46848 + j;
    d[46848 + j] = D[183][j];
  }

  D[184] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çª£çª¤çª§çª©çªªçª«çª®çª¯çª°çª±çª²çª´çªµçª¶çª·çª¸çª¹çªºçª»çª¼çª½çª¾ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«ç«¡ç«¢ç«¤ç«§ç«¨ç«©ç«ªç««ç«¬ç«®ç«°ç«±ç«²ç«³ï¿½ç«´ç«µç«¶ç«·ç«¸ç«»ç«¼ç«¾ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬¡ç¬¢ç¬£ç¬§ç¬©ç¬­æµ®æ¶ªç¦è¢±å¼ç«æè¾ä¿¯éæ§è¯èåºèèµ´å¯è¦èµå¤åä»éç¶è¹è´å¯è®£éå¦ç¼åå¶åè¯¥æ¹æ¦éçæºå¹²çææç«¿èèµ¶æç§æ¢èµ£ååé¢ç¼¸èçº²å²æ¸¯æ ç¯çé«èç¾ç³æéç¨¿åå¥æ­ææé¸½è³çå²é©èæ ¼è¤ééé¬ä¸ªåç»æ ¹è·èæ´åºç¾¹ï¿½".split("");

  for (j = 0; j != D[184].length; ++j) if (D[184][j].charCodeAt(0) !== 0xFFFD) {
    e[D[184][j]] = 47104 + j;
    d[47104 + j] = D[184][j];
  }

  D[185] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¬¯ç¬°ç¬²ç¬´ç¬µç¬¶ç¬·ç¬¹ç¬»ç¬½ç¬¿ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­¡ç­£ç­¤ç­¥ç­¦ç­§ç­¨ç­©ç­ªç­«ç­¬ç­­ç­¯ç­°ç­³ç­´ç­¶ç­¸ç­ºç­¼ç­½ç­¿ç®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç®ï¿½ç®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç® ç®£ç®¤ç®¥ç®®ç®¯ç®°ç®²ç®³ç®µç®¶ç®·ç®¹ç®ºç®»ç®¼ç®½ç®¾ç®¿ç¯ç¯ç¯ç¯åè¿æ¢å·¥æ»åæ­é¾ä¾èº¬å¬å®«å¼å·©æ±æ±è´¡å±é©å¾æ²èçå¢æè´­å¤è¾èåç®ä¼°æ²½å­¤å§é¼å¤èéª¨è°·è¡æé¡¾åºéå®çåå¯¡æè¤ä¹ææªæ£ºå³å®å è§ç®¡é¦ç½æ¯çè´¯åå¹¿éç°è§å­ç¡å½é¾éºè½¨é¬¼è¯¡ç¸æ¡æè·ªè´µå½è¾æ»æ£éé­å½æè£¹è¿åï¿½".split("");

  for (j = 0; j != D[185].length; ++j) if (D[185][j].charCodeAt(0) !== 0xFFFD) {
    e[D[185][j]] = 47360 + j;
    d[47360 + j] = D[185][j];
  }

  D[186] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ ç¯¢ç¯£ç¯¤ç¯§ç¯¨ç¯©ç¯«ç¯¬ç¯­ç¯¯ç¯°ç¯²ç¯³ç¯´ç¯µç¯¶ç¯¸ç¯¹ç¯ºç¯»ç¯½ç¯¿ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ï¿½ç°ç°ç°ç°ç°ç° ç°¡ç°¢ç°£ç°¤ç°¥ç°¨ç°©ç°«ç°¬ç°­ç°®ç°¯ç°°ç°±ç°²ç°³ç°´ç°µç°¶ç°·ç°¹ç°ºç°»ç°¼ç°½ç°¾ç±éª¸å­©æµ·æ°¦äº¥å®³éªé£æ¨é¯é©å«æ¶µå¯å½åç½ç¿°æ¼ææ±æ¾æçæ±æ±å¤¯æ­èªå£åè±ªæ¯«éå¥½èå·æµ©åµåè·èæ ¸ç¦¾åä½åçè²éæ²³æ¶¸èµ«è¤é¹¤è´ºå¿é»çå¾ç æ¨å¼äº¨æ¨ªè¡¡æè½°åçè¹é¸¿æ´ªå®å¼çº¢åä¾¯ç´å¼åååå¼ä¹å¿½çå£¶è«è¡è´çç³æ¹ï¿½".split("");

  for (j = 0; j != D[186].length; ++j) if (D[186][j].charCodeAt(0) !== 0xFFFD) {
    e[D[186][j]] = 47616 + j;
    d[47616 + j] = D[186][j];
  }

  D[187] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç±ç± ç±¡ç±¢ç±£ç±¤ç±¥ç±¦ç±§ç±¨ç±©ç±ªç±«ç±¬ç±­ç±®ç±¯ç±°ç±±ç±²ç±µç±¶ç±·ç±¸ç±¹ç±ºç±¾ç±¿ç²ç²ç²ç²ç²ç²ç²ç²ï¿½ç²ç²ç²ç²ç²ç²ç²ç²ç²ç²ç²ç²ç²ç²ç² ç²¡ç²£ç²¦ç²§ç²¨ç²©ç²«ç²¬ç²­ç²¯ç²°ç²´ç²µç²¶ç²·ç²¸ç²ºç²»å¼§èå¬æ¤äºæ²ªæ·è±ååç¾æ»ç»ååè¯æ§å¾ææ·®åæ¬¢ç¯æ¡è¿ç¼æ¢æ£å¤çªè±¢çæ¶£å®¦å¹»èæé»ç£ºèç°§çå°æ¶çæå¹æè°ç°æ¥è¾å¾½æ¢èåæ¯ææ§åæ æ¦è´¿ç§½ä¼ç©æ±è®³è¯²ç»è¤æå©é­æµæ··è±æ´»ä¼ç«è·ææéè´§ç¥¸å»å¾åºæºç¸ç¨½ç§¯ç®ï¿½".split("");

  for (j = 0; j != D[187].length; ++j) if (D[187][j].charCodeAt(0) !== 0xFFFD) {
    e[D[187][j]] = 47872 + j;
    d[47872 + j] = D[187][j];
  }

  D[188] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç²¿ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³¡ç³¢ç³£ç³¤ç³¥ç³¦ç³§ç³©ç³ªç³«ç³¬ç³­ç³®ç³°ç³±ç³²ç³³ç³´ç³µç³¶ç³·ç³¹ç³ºç³¼ç³½ç³¾ç³¿ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ï¿½ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´¡ç´£ç´¤ç´¥ç´¦ç´¨ç´©ç´ªç´¬ç´­ç´®ç´°ç´±ç´²ç´³ç´´ç´µç´¶èé¥¥è¿¹æ¿è®¥é¸¡å§¬ç»©ç¼åææ£è¾ç±éåæ¥ç¾æ±²å³å«çº§æ¤å èå·±èæåå­£ä¼ç¥­åæ¸æµå¯å¯è®¡è®°æ¢å¿éå¦ç»§çºªåæ·å¤¹ä½³å®¶å èé¢è´¾ç²é¾åç¨¼ä»·æ¶é©¾å«æ­¼çåå°ç¬ºé´çå¼è©è°å¥¸ç¼è§æ£æ¬ç¢±ç¡·æ£æ¡ç®ä¿­åªåèæ§é´è·µè´±è§é®ç®­ä»¶ï¿½".split("");

  for (j = 0; j != D[188].length; ++j) if (D[188][j].charCodeAt(0) !== 0xFFFD) {
    e[D[188][j]] = 48128 + j;
    d[48128 + j] = D[188][j];
  }

  D[189] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç´·ç´¸ç´¹ç´ºç´»ç´¼ç´½ç´¾ç´¿çµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµçµ çµ¡çµ¢çµ£çµ¤çµ¥çµ¦çµ§çµ¨çµ©çµªçµ«çµ¬çµ­çµ¯çµ°çµ±çµ²çµ³çµ´çµµçµ¶ï¿½çµ¸çµ¹çµºçµ»çµ¼çµ½çµ¾çµ¿ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶å¥è°åé¥¯æ¸æºæ¶§å»ºåµå§å°æµæ±çèæ¡¨å¥è®²å é±éèæ¤ç¤ç¦è¶äº¤éæµéªå¨å¼æé°ç«ä¾¥èç¡è§é¥ºç¼´ç»å¿æéµè½¿è¾å«çªæ­æ¥çç§¸è¡é¶æªå«èæ¡æ°æ·ç«ç«­æ´ç»è§£å§æèè¥çåä»ç¥è¯«å±å·¾ç­æ¤éä»æ´¥è¥ç´§é¦ä»è°¨è¿é³æç¦è¿ç¬æµ¸ï¿½".split("");

  for (j = 0; j != D[189].length; ++j) if (D[189][j].charCodeAt(0) !== 0xFFFD) {
    e[D[189][j]] = 48384 + j;
    d[48384 + j] = D[189][j];
  }

  D[190] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ ç¶¡ç¶¢ç¶£ç¶¤ç¶¥ç¶§ç¶¨ç¶©ç¶ªç¶«ç¶¬ç¶­ç¶¯ç¶°ç¶±ç¶²ç¶³ç¶´ç¶µç¶¶ç¶·ç¶¸ç¶¹ç¶ºç¶»ç¶¼ç¶½ç¶¾ç¶¿ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ç·ï¿½ç·ç·ç·ç·ç·ç·ç· ç·¡ç·¢ç·£ç·¤ç·¥ç·¦ç·§ç·¨ç·©ç·ªç·«ç·¬ç·­ç·®ç·¯ç·°ç·±ç·²ç·³ç·´ç·µç·¶ç··ç·¸ç·¹ç·ºå°½å²èå¢èçæ¶é²¸äº¬æç²¾ç²³ç»äºè­¦æ¯é¢éå¢æ¬éå¾çéç«ç«åç¯çªæªç©¶çº çé­ä¹ç¸ä¹éå©ææ§è¼èåå°±çé æçç½å±é©¹èå±åç©ä¸¾æ²®èææ®å·¨å·è·è¸é¯ä¿±å¥æ§ç¬å§æé¹å¨å¦ç·å·ç»¢ææ«ææåçµè§å³è¯ç»åèé§ååå³»ï¿½".split("");

  for (j = 0; j != D[190].length; ++j) if (D[190][j].charCodeAt(0) !== 0xFFFD) {
    e[D[190][j]] = 48640 + j;
    d[48640 + j] = D[190][j];
  }

  D[191] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç·»ç·¼ç·½ç·¾ç·¿ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ ç¸¡ç¸¢ç¸£ç¸¤ç¸¥ç¸¦ç¸§ç¸¨ç¸©ç¸ªç¸«ç¸¬ç¸­ç¸®ç¸¯ç¸°ç¸±ç¸²ç¸³ç¸´ç¸µç¸¶ç¸·ç¸¸ç¸¹ï¿½ç¸ºç¸¼ç¸½ç¸¾ç¸¿ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ä¿ç«£æµé¡éªååå¡å¯å¼æ©æ¥·å¯æ¨åå ªååç çåº·æ·ç³ ææäº¢çèæ·ç¤é å·èæ¯æ£µç£é¢ç§å£³å³å¯æ¸´åå»å®¢è¯¾è¯åå¦æ³åå­ç©ºæå­æ§æ å£æ£å¯æ¯å­çªè¦é·åºè£¤å¤¸å®æè·¨è¯åç­·ä¾©å¿«å®½æ¬¾å¡ç­çæ¡ç¿ç¶æ·åµäºçå²¿çª¥èµå¥é­åï¿½".split("");

  for (j = 0; j != D[191].length; ++j) if (D[191][j].charCodeAt(0) !== 0xFFFD) {
    e[D[191][j]] = 48896 + j;
    d[48896 + j] = D[191][j];
  }

  D[192] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¹ç¹ç¹ ç¹¡ç¹¢ç¹£ç¹¤ç¹¥ç¹¦ç¹§ç¹¨ç¹©ç¹ªç¹«ç¹¬ç¹­ç¹®ç¹¯ç¹°ç¹±ç¹²ç¹³ç¹´ç¹µç¹¶ç¹·ç¹¸ç¹¹ç¹ºç¹»ç¹¼ç¹½ç¹¾ç¹¿çºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºçºï¿½çº®çº´çº»çº¼ç»ç»¤ç»¬ç»¹ç¼ç¼ç¼ç¼·ç¼¹ç¼»ç¼¼ç¼½ç¼¾ç¼¿ç½ç½ç½ç½ç½ç½ç½ç½ç½ç½ç½ç½ç½ç½ç½é¦æ§æºå¤ææå°æ¬æ©å»éåæåè¡èè¾£å¦è±æ¥èµèå©ªæ æ¦ç¯®éå°æ¾è°°æ½è§æç¼çæ»¥çæ¦ç¼å»éææµªæå³ç¢èä½¬å§¥éªçæ¶åä¹é·é­è¾ç£ç´¯å¡åæèç±»æ³ªæ£±æ¥å·åæ¢¨çé»ç¯±ç¸ç¦»æ¼çæéé²¤ç¤¼èèåæ ä¸½åå±ç ¾åå©åä¾ä¿ï¿½".split("");

  for (j = 0; j != D[192].length; ++j) if (D[192][j].charCodeAt(0) !== 0xFFFD) {
    e[D[192][j]] = 49152 + j;
    d[49152 + j] = D[192][j];
  }

  D[193] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç½ç½ç½ç½ç½ç½ç½ ç½£ç½¤ç½¥ç½¦ç½§ç½«ç½¬ç½­ç½¯ç½°ç½³ç½µç½¶ç½·ç½¸ç½ºç½»ç½¼ç½½ç½¿ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ ç¾¢ç¾£ç¾¥ç¾¦ç¾¨ç¾©ç¾ªç¾«ç¾¬ç¾­ç¾®ç¾±ï¿½ç¾³ç¾´ç¾µç¾¶ç¾·ç¾ºç¾»ç¾¾ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿¢ç¿£ç¢ç«ç²æ²¥é¶åçå©ä¿©èè²è¿é°å»ææ¶å¸æè¸é¾æç¼ç»ç²®åæ¢ç²±è¯ä¸¤è¾éæ¾äº®è°æ©èåççå¯¥è¾½æ½¦äºæé£å»æåè£çå£çç³æç£·éä¸´é»é³æ·åèµåæç²è±é¶é¾éä¼¶ç¾åçµéµå²­é¢å¦ä»¤æºçæ¦´ç¡«é¦çåç¤æµæ³å­é¾èåç¬¼çª¿ï¿½".split("");

  for (j = 0; j != D[193].length; ++j) if (D[193][j].charCodeAt(0) !== 0xFFFD) {
    e[D[193][j]] = 49408 + j;
    d[49408 + j] = D[193][j];
  }

  D[194] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¿¤ç¿§ç¿¨ç¿ªç¿«ç¿¬ç¿­ç¿¯ç¿²ç¿´ç¿µç¿¶ç¿·ç¿¸ç¿¹ç¿ºç¿½ç¿¾ç¿¿èèèèèèèèèèèèèèè¡è£è¤è«è¬è­è®è¯è°è²è´è¹èºè¼è¾èèèèèèèèèèèèèèèï¿½èèèèèèè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½éåæ¢éæ¥¼å¨æç¯æ¼éè¦å¢é¢åºçæ³å¤èé²éºç¢é²è·¯èµé¹¿æ½ç¦å½éæ®é©´åéä¾£æå±¥å±¡ç¼èæ°¯å¾çæ»¤ç»¿å³¦æå­ªæ»¦åµä¹±æ ç¥æ¡è½®ä¼¦ä»æ²¦çº¶è®ºèèºç½é»é£ç®©éª¡è£¸è½æ´éªç»å¦éº»çç èé©¬éªåååä¹°éº¦åè¿èçé¦è®æ»¡èæ¼æ¢æ¼«ï¿½".split("");

  for (j = 0; j != D[194].length; ++j) if (D[194][j].charCodeAt(0) !== 0xFFFD) {
    e[D[194][j]] = 49664 + j;
    d[49664 + j] = D[194][j];
  }

  D[195] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¾èèèèèèèèèèèèèèèèè£è¦è§è¨è¬è°è³èµè¶è¸è¹è»èèèèèèèèèèèèèèèè è¢è£è¦è®èµè·è¹è»è¾è¿èèèèèèèèï¿½èèèèèèèèè è¡è¢è£è¤è¥è¦è§è¨è©èªè«è­è®è°è³è´èµè·è¹èºè»è¼è½è¿è°©èè«ç²æ°å¿è½ç«èéæ¯çéå¯èåå¸½è²è´¸ä¹ç«ææ¢é¶éç¤æ²¡çåªéæ¯ç¾æ§å¯å¦¹åªé¨é·ä»¬èèæª¬çé°çæ¢¦å­ç¯éé¡ç³è¿·è°å¼¥ç±³ç§è§æ³èå¯å¹æ£ç ç»µåååå¨©ç¼é¢èæçèç§æ¸ºåºå¦èç­æ°æ¿ç¿ææ¯é½æèé¸£é­åå½è°¬æ¸ï¿½".split("");

  for (j = 0; j != D[195].length; ++j) if (D[195][j].charCodeAt(0) !== 0xFFFD) {
    e[D[195][j]] = 49920 + j;
    d[49920 + j] = D[195][j];
  }

  D[196] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèèèèèèèèèèèèèèèèèèè¡è¢è£è¤è¦è¨èªè«è¬è¯è²è³èµè¶è·è¸èèèèèèèèèèèèèèèèèèèèèèè è¡è¢è¤è¥ï¿½è§è©è«è¬è­è®è¯è°è±è²è´èµè¶è·è¸è¹è¼è½è¾è¿èèèèèèèèèèèèèæ¹èæ¨¡èç£¨æ©é­æ¹æ«è«å¢¨é»æ²«æ¼ å¯éè°çææç¡äº©å§æ¯å¢æ®å¹åææ¨ç®ç¦ç§ç©æ¿åªåé é£å¨çº³æ°ä¹å¥¶èå¥åç·é¾åæ èæ¼é¹æ·å¢é¦åå«©è½å¦®éåªæ³¥å°¼æä½ å¿è»éæººè«æå¹´ç¢¾æµæ»å¿µå¨é¿é¸å°¿æèå­½å®ééæ¶æ¨æ çåå®ï¿½".split("");

  for (j = 0; j != D[196].length; ++j) if (D[196][j].charCodeAt(0) !== 0xFFFD) {
    e[D[196][j]] = 50176 + j;
    d[50176 + j] = D[196][j];
  }

  D[197] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèèèèèèèèèèè è¡è¢è¤è¥è¦è¨è©è«è®è¯è°è±è²èµè¶è·è¸è¹èºè½è¿èèèèèèèèèèèèèèèèèè è¤è¥è¦è§è©è®è²èºè¼è½è¿ï¿½èèèèèèèèèèèèèèèèèèèèèèèèè è¡è¢è£è¤è¥è¦è§è©æ§æ³çæ­é®çº½èæµåå¼å¥´åªæå¥³æèçæªæ¦ç³¯è¯ºå¦æ¬§é¸¥æ®´èåå¶æ²¤åªè¶´ç¬å¸æç¶ææçå¾æ¹æ´¾ææ½çç£ç¼çå¤åä¹åºæèªèæåå¨ç®è¢è·æ³¡å¸èå¹è£´èµéªéä½©æ²å·çç °æ¨ç¹æ¾å½­è¬æ£ç¡¼ç¯·è¨æé¹æ§ç¢°å¯ç é¹æ¹æ«åçµæ¯ï¿½".split("");

  for (j = 0; j != D[197].length; ++j) if (D[197][j].charCodeAt(0) !== 0xFFFD) {
    e[D[197][j]] = 50432 + j;
    d[50432 + j] = D[197][j];
  }

  D[198] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èªè«è¬è­è±èµè¶è·è¸è»è¼èèèèèèèèèèèèèèèèè è¢è£è§è²èµè¶èºè»è¼è¿èèèèèèèèèèèè¢è§è¨è©èªè¬è­è®è°è²è³èµè¶è¸ï¿½èºè¼è½è¾è¿èèèèèèèèèèèèèè è¡è¢è£è¤è¥è¦è©èªè®è°è²è·è»è½å¤è¾ç²ç®å¹çå»å±è­¬ç¯åçéªé£æ¼ç¢ç¥¨æç¥æ¼é¢è´«åèä¹åªè¹èå¹³å­ç¶è¯å±å¡æ³¼é¢å©ç ´é­è¿«ç²åæéºä»èè¡è©è²åæ´åæ®æµ¦è°±æçææ¬ºæ æå¦»ä¸åæ¼ææ²å¶æ£å¥æ­§ç¦å´èé½æç¥ç¥éªèµ·å²ä¹ä¼å¯å¥ç å¨æ°è¿å¼æ±½æ³£è®«æï¿½".split("");

  for (j = 0; j != D[198].length; ++j) if (D[198][j].charCodeAt(0) !== 0xFFFD) {
    e[D[198][j]] = 50688 + j;
    d[50688 + j] = D[198][j];
  }

  D[199] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¾è¿èèèèèèèèèèèèèèèèèè¢è°è±è²è³è´èµè¶è¹èºè¾è¿èèèèèèèèèèèèèèèèèèèèèèè¡è¢è£è¤è¥è¦è§è¬è­è®ï¿½è¯èµè»è¾è¿èèèèèèèèèèèèèèèèèèèè¢è£è¤è¦è§è¨è«è¬è­æ°æ´½çµæ¦ééåè¿ç­¾ä»è°¦ä¹¾é»é±é³åæ½é£æµè°´å åµæ¬ æ­æªåèç¾å¢è·å¼ºæ¢æ©é¹æ²ææ¡¥ç§ä¹ä¾¨å·§éæ¬ç¿å³­ä¿çªåèä¸æ¯çªé¦ä¾µäº²ç§¦ç´å¤è¹æç¦½å¯æ²éè½»æ°¢å¾å¿æ¸ææ´æ°°æé¡·è¯·åºç¼ç©·ç§ä¸é±çæ±åéæ³è¶åºèæ²èº¯å±é©±æ¸ ï¿½".split("");

  for (j = 0; j != D[199].length; ++j) if (D[199][j].charCodeAt(0) !== 0xFFFD) {
    e[D[199][j]] = 50944 + j;
    d[50944 + j] = D[199][j];
  }

  D[200] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è®è¯è³è´èµè¶è·èºè»è¼è¾è¿èèèèèèèèèèèèèèèèèèèè è¡è¢è£è©èªè«è¬è­è®è¯è°è²è³è´èµè¶è·è¹èºè»è¾è¿èèèèèèèèèï¿½èèèèèèèèèèèèèèèèè è¢è¤è¥è¦è§è¨èªè®è¯è°è²è´è·è¹è»è¼åå¨¶é¾è¶£å»åé¢§æéæ³å¨çæ³ç¬å¸åç¼ºçç¸å´é¹æ¦·ç¡®éè£ç¾¤ç¶çåæç¤å£¤æå·è®©é¥¶æ°ç»æ¹ç­å£¬ä»äººå¿é§ä»»è®¤åå¦çº«æä»æ¥æè¸èè£èçæº¶å®¹ç»åææèè¹è åå­ºå¦è¾±ä¹³æ±å¥è¤¥è½¯é®èçéé°æ¶¦è¥å¼±ææ´è¨è®é³å¡èµä¸åï¿½".split("");

  for (j = 0; j != D[200].length; ++j) if (D[200][j].charCodeAt(0) !== 0xFFFD) {
    e[D[200][j]] = 51200 + j;
    d[51200 + j] = D[200][j];
  }

  D[201] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è½è¾è¿èèèèèèèèèèèèèèèèèèèèèèè è¢è£è¤è¥è¦è§è¨è©èªè«è¬è­è®è°è±è³èµè¶è·è»è¼è¾èèèèèèèèèèèèèèèï¿½èèèèèèè¡è¢è¤è§è¨è©èªè«è­è®è¯è±è²è³è´èµè¶è·è¸è¹èºè»è½è¾èèèä¼æ£æ¡åä¸§æéªæ«å«çè²æ¶©æ£®å§èç æå¹æ²çº±å»å¥çç­æçè«æå±±å ç½è¡«éªéæèµ¡è³åæ±æç¼®å¢ä¼¤åèµæä¸å°è£³æ¢¢æç¨ç§èåºé¶å°å¨éµç»å¥¢èµèèèèµ¦æå°ææ¶ç¤¾è®¾ç ·ç³å»ä¼¸èº«æ·±å¨ ç»ç¥æ²å®¡å©¶çè¾ææ¸å£°çç¥ç²åç»³ï¿½".split("");

  for (j = 0; j != D[201].length; ++j) if (D[201][j].charCodeAt(0) !== 0xFFFD) {
    e[D[201][j]] = 51456 + j;
    d[51456 + j] = D[201][j];
  }

  D[202] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèèèèèèèèèèèèèèèèèèèèèè è¢è£è¤è¥è¦è§è¨è©èªè­è®è¯è°è±è²è³è´èµè¶è¾è¿èèèèèèèèèèèèèèèèèèï¿½èèèèèèèè è¡è¢è£è¥è¦è§è©èªè«è¬è­è®è¯è°è±è³èµè¶è·è¸è¼è½è¿èèççå©èå£å¸å¤±ç®æ½æ¹¿è¯å°¸è±åç³æ¾æ¶ä»é£èå®è¯å²ç¢ä½¿å±é©¶å§å¼ç¤ºå£«ä¸æ¿äºæ­èªéå¿æ¯åå¬éä»ä¾éé¥°æ°å¸æå®¤è§è¯æ¶æé¦å®å¯¿æå®åç¦å½è¬æ¢æ¢³æ®æè¾åèæ·çä¹¦èµå­°çè¯ææç½²èé»é¼ å±æ¯è¿°æ ææç«å¢åº¶æ°æ¼±ï¿½".split("");

  for (j = 0; j != D[202].length; ++j) if (D[202][j].charCodeAt(0) !== 0xFFFD) {
    e[D[202][j]] = 51712 + j;
    d[51712 + j] = D[202][j];
  }

  D[203] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèèèèèèèèèèèèèèèèèèèèèèè è¡è¢è£è¥è¦è§è©è«è¬è­è±è²è³è´èµè¶è¸èºè»è¼è½è¾è¿èèèèèèèèèèèèèèèï¿½èèèèèèèèèèè è¡è¢è£è¥è¦è§è¨èªè«è¬è­è®è¯è°è±è²è³è´èµè¶è·è¸æå·èæè¡°ç©å¸æ æ´éåç½è°æ°´ç¡ç¨å®ç¬é¡ºèè¯´ç¡æçæ¯æå¶æç§å¸ä¸æ­»èå¯ºå£åä¼ºä¼¼é¥²å·³æ¾è¸æé¢éå®è®¼è¯µæèæå½èé¥ä¿ç´ éç²å³å¡æº¯å®¿è¯èé¸èç®è½ééç»¥é«ç¢å²ç©éé§ç¥å­æç¬èæ¢­åç¼©çç´¢éæå¡ä»å®å¥¹å¡ï¿½".split("");

  for (j = 0; j != D[203].length; ++j) if (D[203][j].charCodeAt(0) !== 0xFFFD) {
    e[D[203][j]] = 51968 + j;
    d[51968 + j] = D[203][j];
  }

  D[204] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¹èºè¼è½è¾èèèèèèèèèèèèèèèèèèèèèèèèèèèèèè è¡è¢è£è¤è¥è¦è¨èªè«è¬è­è®è¯è°è±è²è³è´èµè¶è·è¹èºè»è½è¾è¿èï¿½èèèèèèèèèèèèèèèèèèèèèèèè è¡è£è¤è¥è¦è§è¨è©èªç­æè¹è¸èèæ¬å°æ³°éå¤ªææ±°åæè´ªç«æ»©åæªç°æ½­è°­è°å¦æ¯¯è¢ç¢³æ¢å¹ç­æ±¤å¡æªå æ£ èåç³åèººæ·è¶ç«ææ¶æ»ç»¦èæ¡éæ·é¶è®¨å¥ç¹è¤è¾ç¼èªæ¢¯åè¸¢éæé¢è¹å¼ä½æ¿åææ¶åå±å¤©æ·»å¡«ç°çæ¬èèææ¡è¿¢çºè·³è´´éå¸åå¬çï¿½".split("");

  for (j = 0; j != D[204].length; ++j) if (D[204][j].charCodeAt(0) !== 0xFFFD) {
    e[D[204][j]] = 52224 + j;
    d[52224 + j] = D[204][j];
  }

  D[205] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è­è¯è°è²è³è´èµè¶è·è¸èèèèèèèèèèèèèèèèèèèèèè è¡è¢è¥è¦è«è­è®è²è³è·è¸è¹è»è¼è½è¾è¿èèèèèèèèèèèèèèï¿½èè è¡è¢è£è¥è¦è§è¨èªè«è¬è¯èµè¶è·èºè»è¼è½è¿èèèèèèèèèèèèæ±å»·åäº­åº­æºèéæ¡é®ç³åéå½¤ç«¥æ¡¶æç­ç»çå·æå¤´éå¸ç§çªå¾å¾éæ¶å± åååæ¹å¢æ¨é¢è¿èè¤ªéåå±¯èææè±é¸µéé©®é©¼æ¤­å¦¥æå¾æåèæ´¼å¨ç¦è¢æ­ªå¤è±å¼¯æ¹¾ç©é¡½ä¸¸ç·å®ç¢æ½æçæå®å©ä¸èæ±ªçäº¡æç½å¾æºæå¿å¦å¨ï¿½".split("");

  for (j = 0; j != D[205].length; ++j) if (D[205][j].charCodeAt(0) !== 0xFFFD) {
    e[D[205][j]] = 52480 + j;
    d[52480 + j] = D[205][j];
  }

  D[206] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèèè è¤è¦è§è¨èªè«è¬è­è¯è°è²è³èµè¶è¸è¹èºè¼è½èèèèèèèèèèèèèèèèèèèèèèèèè¡è¢è¦è§è¨è©èªè«è¬è­è¯è±è²è³èµï¿½è·è¸è¹èºè¿èèèèèèèèèèèèèèèèèèèèèèèè è¡è¢è£è¤å·å¾®å±é¦è¿æ¡å´å¯æä¸ºæ½ç»´èèå§ä¼ä¼ªå°¾çº¬æªèå³çèåé­ä½æ¸­è°å°æ°å«çæ¸©èæé»çº¹å»ç¨³ç´é®å¡ç¿ç®æèæ¶¡çªææ¡å§æ¡æ²å·«åé¨ä¹æ±¡è¯¬å±æ èæ¢§å¾å´æ¯æ­¦äºæåèä¼ä¾®åæé¾æ¤ç©å¿å¡æè¯¯æçæè¥¿ç¡ç½æ°å»å¸é¡çºï¿½".split("");

  for (j = 0; j != D[206].length; ++j) if (D[206][j].charCodeAt(0) !== 0xFFFD) {
    e[D[206][j]] = 52736 + j;
    d[52736 + j] = D[206][j];
  }

  D[207] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¥è¦è§è©èªè®è°è±è²è´è¶è·è¸è¹è»è¼è¾è¿èèèèèèèèèèèèèèèèèèèèèèèèè¡è¢è£è¤è¦è§è¨è©è«è¬è­è¯è°è±è²è³è´èµè¶è·è¸ï¿½èºè»è¼è½è¿è è è è è è è è è è è è è è è è è è è è è è è è è è è  è £ç¨æ¯å¸æèå¤æçç¯æºªæ±çæªè¢­å¸­ä¹ åª³åé£æ´ç³»éæç»çè¾å£éè¾æå³¡ä¾ ç­ä¸å¦å¤åæé¨åä»é²çº¤å¸è´¤è¡è·é²æ¶å¼¦å«æ¾é©ç°ç®å¿èºé¦ç¾¡å®ªé·éçº¿ç¸å¢é¶é¦ç®±è¥æ¹ä¹¡ç¿ç¥¥è¯¦æ³åäº«é¡¹å··æ©¡ååè±¡è§ç¡éåå®å£éæ¶å®µæ·æï¿½".split("");

  for (j = 0; j != D[207].length; ++j) if (D[207][j].charCodeAt(0) !== 0xFFFD) {
    e[D[207][j]] = 52992 + j;
    d[52992 + j] = D[207][j];
  }

  D[208] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è ¤è ¥è ¦è §è ¨è ©è ªè «è ¬è ­è ®è ¯è °è ±è ³è ´è µè ¶è ·è ¸è ºè »è ½è ¾è ¿è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡ è¡¦è¡§è¡ªè¡­è¡¯è¡±è¡³è¡´è¡µè¡¶è¡¸è¡¹è¡ºï¿½è¡»è¡¼è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©è¢ªå°å­æ ¡èå¸ç¬ææ¥äºæ­èéåææºéªæèè°åæ¢°å¸è¹ææ³æ³»è°¢å±èªè¯éæ¬£è¾æ°å¿»å¿ä¿¡è¡æè¥ç©æºå´ååå½¢é¢è¡éå¹¸ææ§å§åå¶è¸åæ±¹éçä¼ä¿®ç¾æ½åéç§è¢ç»£å¢æéèåé¡»å¾è®¸èéåæ­åºçæ¤çµ®å©¿ç»ªç»­è½©å§å®£æ¬æçï¿½".split("");

  for (j = 0; j != D[208].length; ++j) if (D[208][j].charCodeAt(0) !== 0xFFFD) {
    e[D[208][j]] = 53248 + j;
    d[53248 + j] = D[208][j];
  }

  D[209] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¢¬è¢®è¢¯è¢°è¢²è¢³è¢´è¢µè¢¶è¢¸è¢¹è¢ºè¢»è¢½è¢¾è¢¿è£è£è£è£è£è£è£è£è£è£è£è£è£è£è£è£è£è£è£è£è£ è£¡è£¦è£§è£©è£ªè£«è£¬è£­è£®è£¯è£²è£µè£¶è£·è£ºè£»è£½è£¿è¤è¤è¤è¤è¤è¤è¤è¤ï¿½è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤ è¤¢è¤£è¤¤è¤¦è¤§è¤¨è¤©è¤¬è¤­è¤®è¤¯è¤±è¤²è¤³è¤µè¤·éç£ç©ç»é´èå­¦ç©´éªè¡åçå¾ªæ¬è¯¢å¯»é©¯å·¡æ®æ±è®­è®¯éè¿åæ¼é¸¦é¸­åä¸«è½çèå´è¡æ¶¯éåäºè®¶çå½éçæ·¹çä¸¥ç èå²©å»¶è¨é¢éçæ²¿å¥æ©ç¼è¡æ¼è³å °çåç éåå½¦ç°å®´è°éªæ®å¤®é¸¯ç§§æ¨æ¬ä½¯ç¡ç¾æ´é³æ°§ä»°çå»æ ·æ¼¾éè°å¦ç¶ï¿½".split("");

  for (j = 0; j != D[209].length; ++j) if (D[209][j].charCodeAt(0) !== 0xFFFD) {
    e[D[209][j]] = 53504 + j;
    d[53504 + j] = D[209][j];
  }

  D[210] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¤¸è¤¹è¤ºè¤»è¤¼è¤½è¤¾è¤¿è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥ è¥¡è¥¢è¥£è¥¤è¥¥è¥§è¥¨è¥©è¥ªè¥«è¥¬è¥­è¥®è¥¯è¥°è¥±è¥²è¥³è¥´è¥µè¥¶è¥·è¥¸è¥¹è¥ºè¥¼ï¿½è¥½è¥¾è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦è¦ è¦¡æå°§é¥çªè°£å§å¬èè¯è¦èæ¤°åè¶ç·éå¶ä¹é¡µæä¸å¶æ³èå¤æ¶²ä¸å£¹å»æé±ä¾ä¼è¡£é¢å¤·éç§»ä»ªè°çæ²å®å§¨å½æ¤èåå·²ä¹ç£ä»¥èºææéå±¹äº¿å½¹èé¸èç«äº¦è£ææ¯å¿ä¹çæº¢è¯£è®®è°è¯å¼ç¿¼ç¿ç»èµè«å æ®·é³é´å§»åé¶æ·«å¯é¥®å°¹å¼éï¿½".split("");

  for (j = 0; j != D[210].length; ++j) if (D[210][j].charCodeAt(0) !== 0xFFFD) {
    e[D[210][j]] = 53760 + j;
    d[53760 + j] = D[210][j];
  }

  D[211] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¦¢è¦£è¦¤è¦¥è¦¦è¦§è¦¨è¦©è¦ªè¦«è¦¬è¦­è¦®è¦¯è¦°è¦±è¦²è¦³è¦´è¦µè¦¶è¦·è¦¸è¦¹è¦ºè¦»è¦¼è¦½è¦¾è¦¿è§è§è§è§è§è§è§è§è§è§è§è§è§ è§¡è§¢è§¤è§§è§¨è§©è§ªè§¬è§­è§®è§°è§±è§²è§´è§µè§¶è§·è§¸è§¹è§ºï¿½è§»è§¼è§½è§¾è§¿è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨å°è±æ¨±å©´é¹°åºç¼¨è¹è¤è¥è§èè¿èµ¢çå½±é¢ç¡¬æ åæ¥ä½£èçåº¸éè¸è¹åæ³³æ¶æ°¸æ¿åç¨å¹½ä¼æ å¿§å°¤ç±é®éç¹æ²¹æ¸¸éæåå³ä½éè¯±åå¹¼è¿æ·¤äºçæ¦èæèä½ä¿é¾é±¼ææ¸æ¸éäºå¨±é¨ä¸å±¿ç¦¹å®è¯­ç¾½çåèéåéå»å³ªå¾¡ææ¬²ç±è²èªï¿½".split("");

  for (j = 0; j != D[211].length; ++j) if (D[211][j].charCodeAt(0) !== 0xFFFD) {
    e[D[211][j]] = 54016 + j;
    d[54016 + j] = D[211][j];
  }

  D[212] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¨è¨è¨ è¨¡è¨¢è¨£è¨¤è¨¥è¨¦è¨§è¨¨è¨©è¨ªè¨«è¨¬è¨­è¨®è¨¯è¨°è¨±è¨²è¨³è¨´è¨µè¨¶è¨·è¨¸è¨¹è¨ºè¨»è¨¼è¨½è¨¿è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©è©ï¿½è©è© è©¡è©¢è©£è©¤è©¥è©¦è©§è©¨è©©è©ªè©«è©¬è©­è©®è©¯è©°è©±è©²è©³è©´è©µè©¶è©·è©¸è©ºè©»è©¼è©½è©¾è©¿èªæµ´å¯è£é¢è±«é©­é¸³æ¸å¤åå£è¢åæ´è¾å­ååç¿æºç¼è¿èæ¿æ¨é¢æ°çº¦è¶è·é¥å²³ç²¤ææ¦éèäºé§åé¨åè¿è´éæéµå­åç ¸ææ ½åç¾å®°è½½åå¨å±ææèµèµèè¬é­ç³å¿è»æ£æ©æ¾¡è¤èºåªé çç¶ç¥è´£æ©åæ³½è´¼æå¢ææ¾èµ æå³æ¸£æ­è½§ï¿½".split("");

  for (j = 0; j != D[212].length; ++j) if (D[212][j].charCodeAt(0) !== 0xFFFD) {
    e[D[212][j]] = 54272 + j;
    d[54272 + j] = D[212][j];
  }

  D[213] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèªèª èª¡èª¢èª£èª¤èª¥èª¦èª§èª¨èª©èªªèª«èª¬èª­èª®èª¯èª°èª±èª²èª³èª´èªµèª¶èª·èª¸èª¹èªºèª»èª¼èª½èª¾èª¿è«è«è«ï¿½è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è«è« è«¡è«¢è«£é¡é¸ç¨æ æ¦¨åä¹ç¸è¯ææå®çªåºå¯¨ç»æ¯¡è©¹ç²æ²¾çæ©è¾å´­å±è¸æ å æç«æ¹ç»½æ¨ç« å½°æ¼³å¼ ææ¶¨æä¸å¸è´¦ä»èç´éææ­æ¾æ²¼èµµç§ç½©åèå¬é®æå²è°è¾èéèè¿æµçæççç §è»è´éä¾¦æç¹è¯éæ¯ééµè¸æ£çå¾ç°äºææ´æ¯æ­£æ¿ï¿½".split("");

  for (j = 0; j != D[213].length; ++j) if (D[213][j].charCodeAt(0) !== 0xFFFD) {
    e[D[213][j]] = 54528 + j;
    d[54528 + j] = D[213][j];
  }

  D[214] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è«¤è«¥è«¦è«§è«¨è«©è«ªè««è«¬è«­è«®è«¯è«°è«±è«²è«³è«´è«µè«¶è«·è«¸è«¹è«ºè«»è«¼è«½è«¾è«¿è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬ è¬¡è¬¢è¬£ï¿½è¬¤è¬¥è¬§è¬¨è¬©è¬ªè¬«è¬¬è¬­è¬®è¬¯è¬°è¬±è¬²è¬³è¬´è¬µè¬¶è¬·è¬¸è¬¹è¬ºè¬»è¬¼è¬½è¬¾è¬¿è­è­è­è­è­è­å¸§çéè¯èææ¯å±èç¥è¢èæ±ä¹ç»èç´æ¤æ®æ§å¼ä¾åææ­¢è¶¾åªæ¨çº¸å¿ææ·è³è´ç½®å¸å³å¶æºç§©ç¨è´¨ççæ»æ²»çªä¸­çå¿ éè¡·ç»ç§è¿éä»²ä¼èå¨å·æ´²è¯ç²¥è½´èå¸åç±å®æ¼éª¤ç æ ªèæ±çªè¯¸è¯éç«¹çç®æç©å±ä¸»èæ±å©èè´®é¸ç­ï¿½".split("");

  for (j = 0; j != D[214].length; ++j) if (D[214][j].charCodeAt(0) !== 0xFFFD) {
    e[D[214][j]] = 54784 + j;
    d[54784 + j] = D[214][j];
  }

  D[215] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è­è­è­è­è­è­è­è­è­è­è­è­è­è­è­è­è­è­è­è­è­è­è­è­è­è­è­ è­¡è­¢è­£è­¤è­¥è­§è­¨è­©è­ªè­«è­­è­®è­¯è­°è­±è­²è­³è­´è­µè­¶è­·è­¸è­¹è­ºè­»è­¼è­½è­¾è­¿è®è®è®è®è®è®è®ï¿½è®è®è®è®è®è®è®è®è®è®è®è®è®è®è®è®è®è®è®è®è®è®è®è®è®è®¬è®±è®»è¯è¯è¯ªè°è°ä½æ³¨ç¥é©»æçªæ½ä¸ç è½¬æ°èµç¯æ¡©åºè£å¦æå£®ç¶æ¤é¥è¿½èµå ç¼è°åææåæ¡ç¢èéåçç¼æµå¹å¨èµå§¿æ»æ·å­ç´«ä»ç±½æ»å­èªæ¸å­é¬æ£è¸ªå®ç»¼æ»çºµé¹èµ°å¥æç§è¶³åæç¥è¯é»ç»é»çºå´éæç½ªå°éµæ¨å·¦ä½æåä½ååº§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[215].length; ++j) if (D[215][j].charCodeAt(0) !== 0xFFFD) {
    e[D[215][j]] = 55040 + j;
    d[55040 + j] = D[215][j];
  }

  D[216] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è°¸è°¹è°ºè°»è°¼è°½è°¾è°¿è±è±è±è±è±è±è±è±è±è±è±è±è±è±è±è±è±è±è±è±è±è±è±è±è±è± è±£è±¤è±¥è±¦è±§è±¨è±©è±¬è±­è±®è±¯è±°è±±è±²è±´è±µè±¶è±·è±»è±¼è±½è±¾è±¿è²è²è²è²è²è²ï¿½è²è²è²è²è²è²è²è²è²è²è²è²è²è²è²è²è²è²è²è² è²¡è²¢è²£è²¤è²¥è²¦è²§è²¨è²©è²ªè²«è²¬è²­äºä¸åä¸å»¿åä¸äºä¸é¬²å­¬å©ä¸¨ç¦ºä¸¿åä¹å¤­ç»å®æ°åè¤é¦æ¯ç¾é¼ä¸¶äºé¼ä¹ä¹©äºèå­å¬åä»ååå£å¥å®é¥èµååµå¦å®å¾èµå¦å£åååå­å³å¿åååå¡åè¯å½åååååç½äº»ä»ä»ä»ä»¨ä»¡ä»«ä»ä¼ä»³ä¼¢ä½¤ä»µä¼¥ä¼§ä¼ä¼«ä½ä½§æ¸ä½ä½ï¿½".split("");

  for (j = 0; j != D[216].length; ++j) if (D[216][j].charCodeAt(0) !== 0xFFFD) {
    e[D[216][j]] = 55296 + j;
    d[55296 + j] = D[216][j];
  }

  D[217] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è²®è²¯è²°è²±è²²è²³è²´è²µè²¶è²·è²¸è²¹è²ºè²»è²¼è²½è²¾è²¿è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³è³ è³¡è³¢è³£è³¤è³¥è³¦è³§è³¨è³©è³ªè³«è³¬ï¿½è³­è³®è³¯è³°è³±è³²è³³è³´è³µè³¶è³·è³¸è³¹è³ºè³»è³¼è³½è³¾è³¿è´è´è´è´è´è´è´è´è´è´è´è´è´è´ä½ä½ä¼²ä¼½ä½¶ä½´ä¾ä¾ä¾ä¾ä½¾ä½»ä¾ªä½¼ä¾¬ä¾ä¿¦ä¿¨ä¿ªä¿ä¿ä¿£ä¿ä¿ä¿ä¿¸å©åä¿³å¬åå®å­ä¿¾ååå¥å¨å¾ååååå¬å»å¥å§å©åºååå­å¬å¦å®ååä»æ°½ä½ä½¥ä¿é¾ æ±ç±´å®å·½é»é¦åå¤å¹åè¨åå«å¤åäº åäº³è¡®è¢¤äºµèè£ç¦å¬´è ç¾¸å«å±å½å¼ï¿½".split("");

  for (j = 0; j != D[217].length; ++j) if (D[217][j].charCodeAt(0) !== 0xFFFD) {
    e[D[217][j]] = 55552 + j;
    d[55552 + j] = D[217][j];
  }

  D[218] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è´è´è´è´è´è´è´è´è´è´è´è´è´è´è´è´ èµèµèµèµèµ¥èµ¨èµ©èµªèµ¬èµ®èµ¯èµ±èµ²èµ¸èµ¹èµºèµ»èµ¼èµ½èµ¾èµ¿è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶ è¶¡ï¿½è¶¢è¶¤è¶¥è¶¦è¶§è¶¨è¶©è¶ªè¶«è¶¬è¶­è¶®è¶¯è¶°è¶²è¶¶è¶·è¶¹è¶»è¶½è·è·è·è·è·è·è·è·è·è·è·è·è·ååå¢å¥è® è®¦è®§è®ªè®´è®µè®·è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯ è¯¤è¯¨è¯©è¯®è¯°è¯³è¯¶è¯¹è¯¼è¯¿è°è°è°è°è°è°è°è°è°è°è°è°è°è°è°è°è° è°¡è°¥è°§è°ªè°«è°®è°¯è°²è°³è°µè°¶å©åºéé¢é¡é±éªé½é¼ééééé§é¬é²é´éééé°ééééé¬é¡é´é³é¶éºï¿½".split("");

  for (j = 0; j != D[218].length; ++j) if (D[218][j].charCodeAt(0) !== 0xFFFD) {
    e[D[218][j]] = 55808 + j;
    d[55808 + j] = D[218][j];
  }

  D[219] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è·è·è·è·è· è·¡è·¢è·¥è·¦è·§è·©è·­è·®è·°è·±è·²è·´è·¶è·¼è·¾è·¿è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸ è¸¡è¸¤è¸¥è¸¦è¸§è¸¨è¸«è¸­è¸°è¸²è¸³è¸´è¸¶è¸·è¸¸è¸»è¸¼è¸¾ï¿½è¸¿è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹ è¹¡è¹¢è¹£è¹¤è¹¥è¹§è¹¨è¹ªè¹«è¹®è¹±é¸é°ééé¾ééééé¦é¢éééé«é¯é¾éé¢éé£é±é¯é¹ééåå¥å¢å¬å­å¾å¿ååå°åç®çå»´åµå¼é¬¯å¶å¼çå·¯åå©å¡å¡¾å¢¼å£å£å©å¬åªå³å¹å®å¯åå»åå©åå«åå¼å»å¨å­å¶å³å­å¤åå²åå§å´åå åååååå¸å´å¯å¸å¤åï¿½".split("");

  for (j = 0; j != D[219].length; ++j) if (D[219][j].charCodeAt(0) !== 0xFFFD) {
    e[D[219][j]] = 56064 + j;
    d[56064 + j] = D[219][j];
  }

  D[220] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¹³è¹µè¹·è¹¸è¹¹è¹ºè¹»è¹½è¹¾èºèºèºèºèºèºèºèºèºèºèºèºèºèºèºèºèºèºèºèºèºèºèºèºèº èº¡èº¢èº£èº¤èº¥èº¦èº§èº¨èº©èºªèº­èº®èº°èº±èº³èº´èºµèº¶èº·èº¸èº¹èº»èº¼èº½èº¾èº¿è»è»è»ï¿½è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è»è» è»¡è»¢è»£è»¤å å å½å­å å å å¡å  å¡¥å¡¬å¢å¢å¢å¢é¦¨é¼æ¿è¹è½è¿èèè¨èèèèèè«è¸è¾è°èèè£èè·è®èèèè©è´è¡èªèèèè¤è¡èè·è¤èèèè´èèèè»èèèèèèè èèèèèèèè¼è´è±èèè¯èèèèèèè è­èºè³è¦è¥ï¿½".split("");

  for (j = 0; j != D[220].length; ++j) if (D[220][j].charCodeAt(0) !== 0xFFFD) {
    e[D[220][j]] = 56320 + j;
    d[56320 + j] = D[220][j];
  }

  D[221] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è»¥è»¦è»§è»¨è»©è»ªè»«è»¬è»­è»®è»¯è»°è»±è»²è»³è»´è»µè»¶è»·è»¸è»¹è»ºè»»è»¼è»½è»¾è»¿è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼ è¼¡è¼¢è¼£ï¿½è¼¤è¼¥è¼¦è¼§è¼¨è¼©è¼ªè¼«è¼¬è¼­è¼®è¼¯è¼°è¼±è¼²è¼³è¼´è¼µè¼¶è¼·è¼¸è¼¹è¼ºè¼»è¼¼è¼½è¼¾è¼¿è½è½è½è½è½è¨èè©è¬èªè­è®è°è¸è³è´è èªèèèè¼è¶è©è½è¸è»èèè¨èºè¼èèè¥èå èèèè½èèè¸èèèèèèè¸è¹èªèèè¦è°è¡èèèèè³èèèºèè¸è¼èè©è¶èèè±è­èèèè¦è½èèè¿èºè è¡è¹è´èè¥è£èçè¸è°è¹èèºï¿½".split("");

  for (j = 0; j != D[221].length; ++j) if (D[221][j].charCodeAt(0) !== 0xFFFD) {
    e[D[221][j]] = 56576 + j;
    d[56576 + j] = D[221][j];
  }

  D[222] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½è½ è½¡è½¢è½£è½¤è½¥è½ªè¾è¾è¾è¾è¾ è¾¡è¾¢è¾¤è¾¥è¾¦è¾§è¾ªè¾¬è¾­è¾®è¾¯è¾²è¾³è¾´è¾µè¾·è¾¸è¾ºè¾»è¾¼è¾¿è¿è¿è¿ï¿½è¿è¿è¿è¿è¿è¿è¿è¿è¿è¿è¿ è¿¡è¿£è¿§è¿¬è¿¯è¿±è¿²è¿´è¿µè¿¶è¿ºè¿»è¿¼è¿¾è¿¿éééééééèè»è¿è¼èèè¨è¤èèºç¢èè²è»è¤è¨èèè¹è®èèè¹è·è°èèèè¿è§èè©èè¼å»¾å¼å¤¼å¥è·å¥å¥å¥åå°¢å°¥å°¬å°´ææªææ»ææææ®æ¢æ¶æ¹æææ­æ¶æ±æºææ´æ­æ¬ææ©æ®æ¼æ²æ¸æ æ¿ææææææ¾æææææ ææ¦æ¡æææ­æï¿½".split("");

  for (j = 0; j != D[222].length; ++j) if (D[222][j].charCodeAt(0) !== 0xFFFD) {
    e[D[222][j]] = 56832 + j;
    d[56832 + j] = D[222][j];
  }

  D[223] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ééé£é¤é¥é§é¨é©éªé«é¬é°é±é²é³é´é·é¹éºé½é¿éééééééééééééééééééé é¡é¤é¦é§é©éªé«é¬é¯é°é±é²é³é¶é·é¸é¹éºé»é¼é¾éï¿½éééééééééééééééééééé é¤é¥é§é¨é©é«é­é²é·é¼é½é¿éæºæ·æ¸ææºææææ¤æ¢ææ¥æ®å¼å¿çå¼åå±å½å©å¨å»åååååååååå¡ååå£å²ååå·å±å¤åååå¶å¦ååå­åå´åå§å¦ååå²å£åå»å¿ååååå©åªå¤ååååå§å å½åå³å¢å£ååå§åªå§ååµåå­ååå¿åå¼ï¿½".split("");

  for (j = 0; j != D[223].length; ++j) if (D[223][j].charCodeAt(0) !== 0xFFFD) {
    e[D[223][j]] = 57088 + j;
    d[57088 + j] = D[223][j];
  }

  D[224] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éééééééééééééééééé é£é¤é¥é©éªé¬é®é°é±é²é³éµé¶é·é¹éºé»é¼é¿ééééééééééééééééééééééééééï¿½ééé é¡é¤é¥é¦é§é¨é©éªé«é¬é­é®é°é²é³é´éµé¶é·é¸éºé»é¼é½é¾é¿ééééå·ååµå¶å·å³å°ååååå±å¹åååå¾ååå»åå½å¾åååªå·åååå«å¬åå¦ååå¯å¥å²å³ååå¨åµå¤è¾ååååå¤å£å¾åå§å­åå¹åå¬åå¢åååååå¤å±å«å»å¼ååå¯åååå¡åµå«å¹å¿ååååå¸å¸å¸å¸å¸±å¸»å¸¼ï¿½".split("");

  for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 0xFFFD) {
    e[D[224][j]] = 57344 + j;
    d[57344 + j] = D[224][j];
  }

  D[225] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éééééééééééééé é¦é§é¨é«é­é³éºé»é¼éééééééééééééééééééééé é¡é¤é¥é¦é§é¨é©é«é¬é°é±é²é³é¶é·é¸é¹é»ï¿½é¼é½é¾é¿éééééééééééééééééééééééé é¡é¢é£é¤é¥å¸·å¹å¹å¹å¹å¹¡å²å±ºå²å²å²å²å²å²å²å²å²å²µå²¢å²½å²¬å²«å²±å²£å³å²·å³å³å³¤å³å³¥å´å´å´§å´¦å´®å´¤å´å´å´åµå´¾å´´å´½åµ¬åµåµ¯åµåµ«åµåµåµ©åµ´å¶å¶å¶è±³å¶·å·å½³å½·å¾å¾å¾å¾å¾å¾å¾å¾¨å¾­å¾µå¾¼è¡¢å½¡ç­ç°ç´ç·ç¸çççççç¨ç¯ç©ç²ç´ç·çç³ççºï¿½".split("");

  for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 0xFFFD) {
    e[D[225][j]] = 57600 + j;
    d[57600 + j] = D[225][j];
  }

  D[226] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¦é§é¨é©éªé«é¬é­é®é¯é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¾é¿ééééééééééééééééééééééééééééééééé é¡é¢é£é¤ï¿½é¥é¦é§é¨é©éªé«é¬é­é®é¯é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¾é¿ééééééç»ççç¡ççççç¢ç¹ç¥ç¬ç¸ç±çççç ç¬ç¯ç¾èå¤¥é£§å¤¤å¤é¥£é¥§é¥¨é¥©é¥ªé¥«é¥¬é¥´é¥·é¥½é¦é¦é¦é¦é¦é¦é¦é¦é¦é¦åºåºåºåºåº¥åº åº¹åºµåº¾åº³èµå»å»å»å»¨å»ªèºå¿å¿å¿å¿æå¿®æå¿¡å¿¤å¿¾ææå¿ªå¿­å¿¸ææµæ¦ææææ©æ«ææ¿æ¡æ¸æ¹æ»æºæï¿½".split("");

  for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 0xFFFD) {
    e[D[226][j]] = 57856 + j;
    d[57856 + j] = D[226][j];
  }

  D[227] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ééééééééééééééééééééééééééé é¡é¢é£é¤é¥é¦é§é¨é©éªé«é¬é­é®é¯é°é±é²é³éµé¶é·é¸é¹éºé»é¼é½é¾é¿ééééééï¿½éééééééééééééééééééééééééé é¡é¢é£é¤é¥é¦é§æªæ½æææ­ææææææ¬æ»æ±æææææ´æ æ¦ææ£æ´æææ«ææµæ¬ææ§æ·ææµå¿é³é©é«é±é³éµé¶é¼é¾éééééééééééééééä¸¬ç¿ææ°µæ±æ±æ±æ²£æ²æ²æ²æ²æ±¨æ±©æ±´æ±¶æ²æ²©æ³æ³æ²­æ³·æ³¸æ³±æ³æ²²æ³ æ³æ³ºæ³«æ³®æ²±æ³æ³¯æ³¾ï¿½".split("");

  for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 0xFFFD) {
    e[D[227][j]] = 58112 + j;
    d[58112 + j] = D[227][j];
  }

  D[228] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¨é©éªé«é¬é­é¯é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¾é¿éééééééééééééééééééééééééééééééé é¡é¢é£é¤é¥é¦é§é¨ï¿½é©éªé«é¬é­é®é¯é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¾é¿ééééééééééæ´¹æ´§æ´æµæµæ´æ´æ´æ´æ´«æµæ´®æ´µæ´æµæµæµæ´³æ¶æµ¯æ¶æ¶ æµæ¶æ¶æµæµ æµ¼æµ£æ¸æ·æ·æ·æ¸æ¶¿æ· æ¸æ·¦æ·æ·æ¸æ¶«æ¸æ¶®æ¸«æ¹®æ¹æ¹«æº²æ¹æºæ¹æ¹æ¸²æ¸¥æ¹æ»æº±æºæ» æ¼­æ»¢æº¥æº§æº½æº»æº·æ»æº´æ»æºæ»æºæ½¢æ½æ½æ¼¤æ¼æ»¹æ¼¯æ¼¶æ½æ½´æ¼ªæ¼æ¼©æ¾æ¾æ¾æ½¸æ½²æ½¼æ½ºæ¿ï¿½".split("");

  for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 0xFFFD) {
    e[D[228][j]] = 58368 + j;
    d[58368 + j] = D[228][j];
  }

  D[229] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ééééééééééééééééééééééé é¡é¢é£é¤é¥é¦é§é¨é©éªé«é¬é­é®é¯é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¿ééééééééééï¿½ééééééééééééééééééééééé é¡é¢é£é¤é¥é¦é§é¨é©é«æ¿æ¾§æ¾¹æ¾¶æ¿æ¿¡æ¿®æ¿æ¿ æ¿¯çç£çç¹çµççå®å®å®å®å®¥å®¸ç¯éªæ´å¯¤å¯®è¤°å¯°è¹è¬è¾¶è¿è¿è¿¥è¿®è¿¤è¿©è¿¦è¿³è¿¨éééé¦éééé¡éµé¶é­é¯ééééé¨éé¢éæ¹é´é½ééééå½å½å½å½å°»å«å±å±å­±å±£å±¦ç¾¼å¼ªå¼©å¼­è´å¼¼é¬»å±®å¦å¦å¦å¦©å¦ªå¦£ï¿½".split("");

  for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 0xFFFD) {
    e[D[229][j]] = 58624 + j;
    d[58624 + j] = D[229][j];
  }

  D[230] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¬é­é®é¯é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¾é¿éééééééééééééééééééééééééééééééé é¡é¢é£é¤é¥é¦é§é¨é©éªé«ï¿½é¬é­é®é¯é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¾é¿éééééééééééééå¦å§å¦«å¦å¦¤å§å¦²å¦¯å§å¦¾å¨å¨å§å¨å§£å§å§¹å¨å¨å¨²å¨´å¨å¨£å¨å©å©§å©å©å¨¼å©¢å©µè¬åªªåªå©·å©ºåª¾å««åª²å«å«åª¸å« å«£å«±å«å«¦å«å«å¬å¬å¬å¬²å¬·å­å°å°å­å­¥å­³å­å­å­¢é©µé©·é©¸é©ºé©¿é©½éªéªéªéªéªéªéªéªéªéªéªéªéªéªéª éª¢éª£éª¥éª§çºçº¡çº£çº¥çº¨çº©ï¿½".split("");

  for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 0xFFFD) {
    e[D[230][j]] = 58880 + j;
    d[58880 + j] = D[230][j];
  }

  D[231] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éééééééééééééééééé é¡é¢é£é¤é¥é¦é§é¨é©éªé«é¬é­é®é¯é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¾é¿ééééééééééééééï¿½ééééééééééééééééééé é¡é¢é£é¤é¥é¦é§é¨é©éªé«é¬é­é®çº­çº°çº¾ç»ç»ç»ç»ç»ç»ç»ç»ç»ç»ç» ç»¡ç»¨ç»«ç»®ç»¯ç»±ç»²ç¼ç»¶ç»ºç»»ç»¾ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼¡ç¼¢ç¼£ç¼¤ç¼¥ç¼¦ç¼§ç¼ªç¼«ç¼¬ç¼­ç¼¯ç¼°ç¼±ç¼²ç¼³ç¼µå¹ºç¿å·ç¾éççç®ç¢ççççç·ç³çççç¥çé¡¼çç©ç§ççºç²ççªçç¦ç¥ç¨ç°ç®ç¬ï¿½".split("");

  for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 0xFFFD) {
    e[D[231][j]] = 59136 + j;
    d[59136 + j] = D[231][j];
  }

  D[232] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¯é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¿ééééééééééééééééééééééééééééééééé é¡é¢é£é¤é¥é¦é§é¨é©éªé¬é­é®é¯ï¿½é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¾é¿éééééééééééééé¦é»éé çççççççç·ç­ç¾çççççççç¨ç©çç§ççºéªé«é¬æææææ©æ¥ææªæ³ææ§æµæ¨ææ­ææ·æ¼æ°æ ææ æ©æ°æ ææµææ³ææ ææ¸æ¢æ ææ½æ ²æ ³æ¡ æ¡¡æ¡æ¡¢æ¡æ¡¤æ¢æ æ¡æ¡¦æ¡æ¡§æ¡æ ¾æ¡æ¡æ ©æ¢µæ¢æ¡´æ¡·æ¢æ¡«æ£æ¥®æ£¼æ¤æ¤ æ£¹ï¿½".split("");

  for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 0xFFFD) {
    e[D[232][j]] = 59392 + j;
    d[59392 + j] = D[232][j];
  }

  D[233] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é§é³é½éééééé é®é´éµé·é¸é¹éºé»é¼é½é¾ééééééééééééééééééééééééééééééééé é¡é¢é£é¤é¥é¦é§é¨é©éªï¿½é«é¬é­é®é¯é°é±é²é³é´éµé¶é·é¸é¹éºé»é¼é½é¾é¿ééééééééééééæ¤¤æ£°æ¤æ¤æ¥æ££æ¤æ¥±æ¤¹æ¥ æ¥æ¥æ¦æ¥«æ¦æ¦æ¥¸æ¤´æ§æ¦æ¦æ§æ¦æ¥¦æ¥£æ¥¹æ¦æ¦§æ¦»æ¦«æ¦­æ§æ¦±æ§æ§æ§æ¦æ§ æ¦æ§¿æ¨¯æ§­æ¨æ¨æ©¥æ§²æ©æ¨¾æª æ©æ©æ¨µæªæ©¹æ¨½æ¨¨æ©æ©¼æªæªæª©æªæª«ç·çæ®æ®æ®æ®æ®æ®æ®æ®æ®æ®¡æ®ªè½«è½­è½±è½²è½³è½µè½¶è½¸è½·è½¹è½ºè½¼è½¾è¾è¾è¾è¾è¾ï¿½".split("");

  for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 0xFFFD) {
    e[D[233][j]] = 59648 + j;
    d[59648 + j] = D[233][j];
  }

  D[234] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ééééééééééééééééééééé é¡é¢é£é¤é¥é¦é§é¬é¿éééééé é£é¤é¥é¦é§é¨é©é«é¬é­é¯é°é·é¸é¹éºé¾ééééééééééï¿½ééééééé é£é¥é¦é«é­é®é¯é°é±é³é¸é¹éºé»é¼é½é¾é¿ééééééééè¾è¾è¾è¾è¾è»æææææ¢æ¡æ¥æ¤æ¬è§ç¯ç´ç¿çççæ´æ®æ¯æ°æææ²æææçæ·ææ´æ±æ¶æµèææææææ¡ææ·æææ§ææ¾æææ¦æ©è´²è´³è´¶è´»è´½èµèµèµèµèµèµèµèµèµè§è§è§è§è§è§è§è§ç®ççç¦ç¯ç¾ç¿çççççææ²æ°ï¿½".split("");

  for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 0xFFFD) {
    e[D[234][j]] = 59904 + j;
    d[59904 + j] = D[234][j];
  }

  D[235] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ééééééééééééé é¡é¢é£é¤é¥é¦é¨é©éªé«é¬é­é®é¯é±é²é´éµé·é¸éºé»é¿éééééééééééééééééééé¡é¢é£é¤é¥é¦é§é«ï¿½é¬é­é®é°é±é²é´éµé¸éºé»é¼é½é¿ééééééééééééééééééé æ¿æèæ¯ªæ¯³æ¯½æ¯µæ¯¹æ°æ°æ°æ°æ°æ°æ°æ°æ°¡æ°©æ°¤æ°ªæ°²æµææ«çççç°è¢åèèèè¼æè½è±è«è­è´è·è§è¨è©èªèèèèèèæèè«è±è´è­èèè²è¼æèè±è¶èè¬èè²èèèè´èèè±è è©è¼è½è­è§å¡åªµèèèæ»è£èªèæ¦èè»ï¿½".split("");

  for (j = 0; j != D[235].length; ++j) if (D[235][j].charCodeAt(0) !== 0xFFFD) {
    e[D[235][j]] = 60160 + j;
    d[60160 + j] = D[235][j];
  }

  D[236] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¡é¢é£é¤é¥é¦é§é¨é©é«é¬é®é¯é±é³é´éµé¶é·éºé»é¼é½é¿ééééééééééééééééééééééééééé£é¤é¦é§é¨éªé«é¬é­é®é¯é°é±ï¿½é²éµé·é¸é¹éºé»é½é¾é¿éééééééééééééééééééééééèè¦æ¬¤æ¬·æ¬¹æ­æ­æ­é£é£é£é£é£é£æ®³å½æ¯è§³æé½ææ¼æææææææççççç»çç·ç«ç±ç¨ççççç¯ç±ç³çç¨çç²çç¸çºçç³çµç¨ç ç çç§ç¹çç¨ç¬çç¦ç¹æ¾æ½æææç¤»ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥¢ç¥ç¥ ç¥¯ç¥§ç¥ºç¦ç¦ç¦ç¦§ç¦³å¿å¿ï¿½".split("");

  for (j = 0; j != D[236].length; ++j) if (D[236][j].charCodeAt(0) !== 0xFFFD) {
    e[D[236][j]] = 60416 + j;
    d[60416 + j] = D[236][j];
  }

  D[237] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ééé¡é¢é¤é¥é¦é§é¨é©éªé¬é®é°é±é³éµé¶é·é¸é¹éºé»é¼é½é¾é¿ééééééééééééééééééééééééééééééééé é¡é¢é£ï¿½é¤é¥é¨é®é¯é°é±é²é´é·é¸é¹éºé»é¼é½é¾é¿é é é é é é é é é é é é é é é æ¼æææ§æææ£æ«ææææ©ææææèè¿æ²æ³¶æ·¼ç¶ç¸ç ç ç ç ç æ«ç ­ç ç ç ¹ç ºç »ç ç ¼ç ¥ç ¬ç £ç ©ç¡ç¡­ç¡ç¡ç ¦ç¡ç¡ç¡ç¡ªç¢ç¢ç¢ç¢ç¢ç¢¡ç¢£ç¢²ç¢¹ç¢¥ç£ç£ç£ç£¬ç£²ç¤ç£´ç¤ç¤¤ç¤ç¤´é¾é»¹é»»é»¼ç±ççç¹çççç¢çç­ç¦çµç¸çççççç¨ï¿½".split("");

  for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 0xFFFD) {
    e[D[237][j]] = 60672 + j;
    d[60672 + j] = D[237][j];
  }

  D[238] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é é é é é é é é é é é é é é é é é é  é ¡é ¢é £é ¤é ¥é ¦é §é ¨é ©é ªé «é ¬é ­é ®é ¯é °é ±é ²é ³é ´é µé ¶é ·é ¸é ¹é ºé »é ¼é ½é ¾é ¿é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡ï¿½é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡ é¡¡é¡¢é¡£é¡¤é¡¥é¡¦é¡§é¡¨é¡©é¡ªé¡«é¡¬é¡­é¡®ç¢ç¥ç¿çç½ççççç ç°çµç½çºçççççç²ç¹çç½ç½¡ç½è©ç½¨ç½´ç½±ç½¹ç¾ç½¾çç¥è ²éééééééééééééééé£é¤é«éªé­é¬é¯é°é²é´é¶é·é¸é¹éºé¼é½é¿éééééééééééééééééééé é¢é¤é¥é§é¨éªï¿½".split("");

  for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 0xFFFD) {
    e[D[238][j]] = 60928 + j;
    d[60928 + j] = D[238][j];
  }

  D[239] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¡¯é¡°é¡±é¡²é¡³é¡´é¢é¢é¢é¢é¢é¢£é¢¨é¢©é¢ªé¢«é¢¬é¢­é¢®é¢¯é¢°é¢±é¢²é¢³é¢´é¢µé¢¶é¢·é¢¸é¢¹é¢ºé¢»é¢¼é¢½é¢¾é¢¿é£é£é£é£é£é£é£é£é£é£é£é£é£é£é£é£é£é£é£é£é£é£é£ é£¡é£¢é££é£¤ï¿½é£¥é£¦é£©é£ªé£«é£¬é£­é£®é£¯é£°é£±é£²é£³é£´é£µé£¶é£·é£¸é£¹é£ºé£»é£¼é£½é£¾é£¿é¤é¤é¤é¤é¤é¤é¤é¤é©é«é®é¯é³é´éµé·é¹é¼é½é¿éééééééééééééééééééé¢éªé«é©é¬é±é²é´é¶é·é¸é¼é¾é¿ééµééééééééééééééééééé¡é¢é¤é¥é¦é§é¨é©éªé«é¬é¯é±é²é³éºç§ç¬éç§ç§­ç§£ç§«ç¨åµç¨ç¨ç¨ç¨ï¿½".split("");

  for (j = 0; j != D[239].length; ++j) if (D[239][j].charCodeAt(0) !== 0xFFFD) {
    e[D[239][j]] = 61184 + j;
    d[61184 + j] = D[239][j];
  }

  D[240] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤ é¤¡é¤¢é¤£é¤¤é¤¥é¤¦é¤§é¤¨é¤©é¤ªé¤«é¤¬é¤­é¤¯é¤°é¤±é¤²é¤³é¤´é¤µé¤¶é¤·é¤¸é¤¹é¤ºé¤»é¤¼é¤½é¤¾é¤¿é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥ï¿½é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥ é¥¡é¥¢é¥¤é¥¦é¥³é¥¸é¥¹é¥»é¥¾é¦é¦é¦ç¨¹ç¨·ç©é»é¦¥ç©°ççççç¤çç ç¬é¸ é¸¢é¸¨é¸©é¸ªé¸«é¸¬é¸²é¸±é¸¶é¸¸é¸·é¸¹é¸ºé¸¾é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹£é¹¦é¹§é¹¨é¹©é¹ªé¹«é¹¬é¹±é¹­é¹³çççç çç¬ç£ç³ç´ç¸çç±ç°ççççç£ç¨ç¦ç¤ç«ç§çç±ç¼ç¿ççççççç¥çççï¿½".split("");

  for (j = 0; j != D[240].length; ++j) if (D[240][j].charCodeAt(0) !== 0xFFFD) {
    e[D[240][j]] = 61440 + j;
    d[61440 + j] = D[240][j];
  }

  D[241] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¦é¦é¦é¦é¦é¦é¦é¦é¦ é¦¡é¦¢é¦£é¦¤é¦¦é¦§é¦©é¦ªé¦«é¦¬é¦­é¦®é¦¯é¦°é¦±é¦²é¦³é¦´é¦µé¦¶é¦·é¦¸é¦¹é¦ºé¦»é¦¼é¦½é¦¾é¦¿é§é§é§é§é§é§é§é§é§é§é§é§é§é§é§é§é§é§é§é§é§é§é§é§é§ï¿½é§é§é§é§é§é§é§é§ é§¡é§¢é§£é§¤é§¥é§¦é§§é§¨é§©é§ªé§«é§¬é§­é§®é§¯é§°é§±é§²é§³é§´é§µé§¶é§·é§¸é§¹çç¼ç¢ç çç­ç°ç¿çµçç¾ç³çççççç«ç¯ç¿ç«¦ç©¸ç©¹çªçªçªçªçª¦çª çª¬çª¨çª­çª³è¡¤è¡©è¡²è¡½è¡¿è¢è¢¢è£è¢·è¢¼è£è£¢è£è££è£¥è£±è¤è£¼è£¨è£¾è£°è¤¡è¤è¤è¤è¤è¤´è¤«è¤¶è¥è¥¦è¥»çè¥ç²ç´çèèèèè è¢è¥è¦è§è©è¨è±èèµèèèèè©è±è¦é¡¸é¢é¢ï¿½".split("");

  for (j = 0; j != D[241].length; ++j) if (D[241][j].charCodeAt(0) !== 0xFFFD) {
    e[D[241][j]] = 61696 + j;
    d[61696 + j] = D[241][j];
  }

  D[242] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é§ºé§»é§¼é§½é§¾é§¿é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨ é¨¡é¨¢é¨£é¨¤é¨¥é¨¦é¨§é¨¨é¨©é¨ªé¨«é¨¬é¨­é¨®é¨¯é¨°é¨±é¨²é¨³é¨´é¨µé¨¶é¨·é¨¸ï¿½é¨¹é¨ºé¨»é¨¼é¨½é¨¾é¨¿é©é©é©é©é©é©é©é©é©é©é©é©é©é©é©é©é©é©é©é©é©é©é©é©é©é©é¢é¢é¢é¢é¢é¢é¢é¢é¢é¢¡é¢¢é¢¥é¢¦èèè¬è®è¿èºè¼è»è¨èèè¬èè§è£èªèè©è¶èèµèè°èºè±è¯èèè´è©è±è²è­è³èèèè´èèèèèè¸èèèèè£è»èè¥è®èè¾èè´è±è©è·è¿èè¢è½è¾è»è è°èè®èèè£è¼è¤èè¥èè¯è¨èï¿½".split("");

  for (j = 0; j != D[242].length; ++j) if (D[242][j].charCodeAt(0) !== 0xFFFD) {
    e[D[242][j]] = 61952 + j;
    d[61952 + j] = D[242][j];
  }

  D[243] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é©é©é©é©é©é©é© é©¡é©¢é©£é©¤é©¥é©¦é©§é©¨é©©é©ªé©«é©²éªéªéªéªéªéªéªéª¦éª©éªªéª«éª¬éª­éª®éª¯éª²éª³éª´éªµéª¹éª»éª½éª¾éª¿é«é«é«é«é«é«é«é«é«é«é«é«é«é«é«é«é«é«é«é«ï¿½é«é«é« é«¢é«£é«¤é«¥é«§é«¨é«©é«ªé«¬é«®é«°é«±é«²é«³é«´é«µé«¶é«·é«¸é«ºé«¼é«½é«¾é«¿é¬é¬é¬é¬é¬é¬èèèè­èèè«è¥è¬èµè³èèè½èèèèèªè è®è è è¾è è è ¡è ¹è ¼ç¼¶ç½ç½ç½èç«ºç«½ç¬ç¬ç¬ç¬ç¬ç¬«ç¬ç­ç¬¸ç¬ªç¬ç¬®ç¬±ç¬ ç¬¥ç¬¤ç¬³ç¬¾ç¬ç­ç­ç­ç­µç­ç­ç­ ç­®ç­»ç­¢ç­²ç­±ç®ç®¦ç®§ç®¸ç®¬ç®ç®¨ç®ç®ªç®ç®¢ç®«ç®´ç¯ç¯ç¯ç¯ç¯ç¯¥ç¯¦ç¯ªç°ç¯¾ç¯¼ç°ç°ç°ï¿½".split("");

  for (j = 0; j != D[243].length; ++j) if (D[243][j].charCodeAt(0) !== 0xFFFD) {
    e[D[243][j]] = 62208 + j;
    d[62208 + j] = D[243][j];
  }

  D[244] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬ é¬¡é¬¢é¬¤é¬¥é¬¦é¬§é¬¨é¬©é¬ªé¬«é¬¬é¬­é¬®é¬°é¬±é¬³é¬´é¬µé¬¶é¬·é¬¸é¬¹é¬ºé¬½é¬¾é¬¿é­é­é­é­é­é­é­é­é­é­é­é­é­é­é­ï¿½é­é­é­é­é­é­ é­¡é­¢é­£é­¤é­¥é­¦é­§é­¨é­©é­ªé­«é­¬é­­é­®é­¯é­°é­±é­²é­³é­´é­µé­¶é­·é­¸é­¹é­ºé­»ç°ç°ªç°¦ç°¸ç±ç±è¾èèèè¬è¡è¡è¢è£è­è¯è¨è«è¸è»è³è´è¾èèèèèèè¨è¡¾è¢è¢è£è£è¥ç¾ç¾ç¾§ç¾¯ç¾°ç¾²ç±¼æç²ç²ç²ç²ç²¢ç²²ç²¼ç²½ç³ç³ç³ç³ç³ç³ç³ç³¨è®æ¨ç¾¿ç¿ç¿ç¿¥ç¿¡ç¿¦ç¿©ç¿®ç¿³ç³¸çµ·ç¶¦ç¶®ç¹çºéº¸éº´èµ³è¶è¶è¶è¶±èµ§èµ­è±è±ééééé¤ï¿½".split("");

  for (j = 0; j != D[244].length; ++j) if (D[244][j].charCodeAt(0) !== 0xFFFD) {
    e[D[244][j]] = 62464 + j;
    d[62464 + j] = D[244][j];
  }

  D[245] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é­¼é­½é­¾é­¿é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é® é®¡é®¢é®£é®¤é®¥é®¦é®§é®¨é®©é®ªé®«é®¬é®­é®®é®¯é®°é®±é®²é®³é®´é®µé®¶é®·é®¸é®¹é®ºï¿½é®»é®¼é®½é®¾é®¿é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯é¢é¡é°é©é¯é½é¾é²é´é¹éééééé¢é£éªé­é®é¯éµé´éºè±é¹¾è¶¸è·«è¸è¹è¹©è¶µè¶¿è¶¼è¶ºè·è·è·è·è·è·è·è·è·è·¬è··è·¸è·£è·¹è·»è·¤è¸è·½è¸è¸è¸è¸¬è¸®è¸£è¸¯è¸ºè¹è¸¹è¸µè¸½è¸±è¹è¹è¹è¹è¹è¹è¹°è¹¶è¹¼è¹¯è¹´èºèºèºèºèºèºè±¸è²è²è²è²è²æè§è§è§è§ï¿½".split("");

  for (j = 0; j != D[245].length; ++j) if (D[245][j].charCodeAt(0) !== 0xFFFD) {
    e[D[245][j]] = 62720 + j;
    d[62720 + j] = D[245][j];
  }

  D[246] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¯é¯é¯é¯é¯ é¯¡é¯¢é¯£é¯¤é¯¥é¯¦é¯§é¯¨é¯©é¯ªé¯«é¯¬é¯­é¯®é¯¯é¯°é¯±é¯²é¯³é¯´é¯µé¯¶é¯·é¯¸é¯¹é¯ºé¯»é¯¼é¯½é¯¾é¯¿é°é°é°é°é°é°é°é°é°é°é°é°é°é°é°é°é°é°é°é°é°é°é°é°é°é°é°ï¿½é°é°é°é°é°é° é°¡é°¢é°£é°¤é°¥é°¦é°§é°¨é°©é°ªé°«é°¬é°­é°®é°¯é°°é°±é°²é°³é°´é°µé°¶é°·é°¸é°¹é°ºé°»è§¥è§«è§¯è¨¾è¬¦éé©é³é¯ééééééªé­é°é¾é¾é¾é¾é¾é¾é¾é¾é¾é¾é»¾é¼é¼é¹é¼é½ééç¿é éé®éé¾éªééé¾é«é±¿é²é²é²é²é²ç¨£é²é²é²é²é²é²é²é²é²é²é²é² é²¡é²¢é²£é²¥é²¦é²§é²¨é²©é²«é²­é²®é²°é²±é²²é²³é²´é²µé²¶é²·é²ºé²»é²¼é²½é³é³é³é³é³é³ï¿½".split("");

  for (j = 0; j != D[246].length; ++j) if (D[246][j].charCodeAt(0) !== 0xFFFD) {
    e[D[246][j]] = 62976 + j;
    d[62976 + j] = D[246][j];
  }

  D[247] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é°¼é°½é°¾é°¿é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é± é±¡é±¢é±£é±¤é±¥é±¦é±§é±¨é±©é±ªé±«é±¬é±­é±®é±¯é±°é±±é±²é±³é±´é±µé±¶é±·é±¸é±¹é±ºï¿½é±»é±½é±¾é²é²é²é²é²é²é²é²é²é²é²é²é²é²ªé²¬é²¯é²¹é²¾é²¿é³é³é³é³é³é³é³é³é³é³ é³¡é³é³é³é³é³é³é³é³é³é³é³é³é³é³é³¢é¼ééééé¯é«é£é²é´éª±éª°éª·é¹éª¶éªºéª¼é«é«é«é«é«é«é«é­é­é­é­é­é­é­é£¨é¤é¤®é¥é¥é«é«¡é«¦é«¯é««é«»é«­é«¹é¬é¬é¬é¬é¬£éº½éº¾ç¸»éºéºéºéºéºééºéºé»é»é»é» é»é»¢é»©é»§é»¥é»ªé»¯é¼¢é¼¬é¼¯é¼¹é¼·é¼½é¼¾é½ï¿½".split("");

  for (j = 0; j != D[247].length; ++j) if (D[247][j].charCodeAt(0) !== 0xFFFD) {
    e[D[247][j]] = 63232 + j;
    d[63232 + j] = D[247][j];
  }

  D[248] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é³£é³¤é³¥é³¦é³§é³¨é³©é³ªé³«é³¬é³­é³®é³¯é³°é³±é³²é³³é³´é³µé³¶é³·é³¸é³¹é³ºé³»é³¼é³½é³¾é³¿é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´é´ é´¡ï¿½é´¢é´£é´¤é´¥é´¦é´§é´¨é´©é´ªé´«é´¬é´­é´®é´¯é´°é´±é´²é´³é´´é´µé´¶é´·é´¸é´¹é´ºé´»é´¼é´½é´¾é´¿éµéµéµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[248].length; ++j) if (D[248][j].charCodeAt(0) !== 0xFFFD) {
    e[D[248][j]] = 63488 + j;
    d[63488 + j] = D[248][j];
  }

  D[249] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéµ éµ¡éµ¢éµ£éµ¤éµ¥éµ¦éµ§éµ¨éµ©éµªéµ«éµ¬éµ­éµ®éµ¯éµ°éµ±éµ²éµ³éµ´éµµéµ¶éµ·éµ¸éµ¹éµºéµ»éµ¼éµ½éµ¾éµ¿é¶é¶ï¿½é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶ é¶¡é¶¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[249].length; ++j) if (D[249][j].charCodeAt(0) !== 0xFFFD) {
    e[D[249][j]] = 63744 + j;
    d[63744 + j] = D[249][j];
  }

  D[250] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¶£é¶¤é¶¥é¶¦é¶§é¶¨é¶©é¶ªé¶«é¶¬é¶­é¶®é¶¯é¶°é¶±é¶²é¶³é¶´é¶µé¶¶é¶·é¶¸é¶¹é¶ºé¶»é¶¼é¶½é¶¾é¶¿é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é·é· é·¡ï¿½é·¢é·£é·¤é·¥é·¦é·§é·¨é·©é·ªé·«é·¬é·­é·®é·¯é·°é·±é·²é·³é·´é·µé·¶é··é·¸é·¹é·ºé·»é·¼é·½é·¾é·¿é¸é¸é¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[250].length; ++j) if (D[250][j].charCodeAt(0) !== 0xFFFD) {
    e[D[250][j]] = 64000 + j;
    d[64000 + j] = D[250][j];
  }

  D[251] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸¤é¸§é¸®é¸°é¸´é¸»é¸¼é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹ é¹¡é¹¢é¹¥é¹®é¹¯é¹²é¹´é¹µé¹¶é¹·é¹¸é¹¹é¹ºé¹»é¹¼é¹½éºï¿½éºéºéºéºéºéºéºéºéºéºéºéºéºéºéºéºéºéºéºéºéºéºéºéº éº¡éº¢éº£éº¤éº¥éº§éº¨éº©éºªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[251].length; ++j) if (D[251][j].charCodeAt(0) !== 0xFFFD) {
    e[D[251][j]] = 64256 + j;
    d[64256 + j] = D[251][j];
  }

  D[252] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éº«éº¬éº­éº®éº¯éº°éº±éº²éº³éºµéº¶éº·éº¹éººéº¼éº¿é»é»é»é»é»é»é»é»é»é»é»é»é»é»é»é»é»é»é»é»é»¡é»£é»¤é»¦é»¨é»«é»¬é»­é»®é»°é»±é»²é»³é»´é»µé»¶é»·é»¸é»ºé»½é»¿é¼é¼é¼é¼é¼é¼ï¿½é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼¡é¼£é¼¤é¼¥é¼¦é¼§é¼¨é¼©é¼ªé¼«é¼­é¼®é¼°é¼±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[252].length; ++j) if (D[252][j].charCodeAt(0) !== 0xFFFD) {
    e[D[252][j]] = 64512 + j;
    d[64512 + j] = D[252][j];
  }

  D[253] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¼²é¼³é¼´é¼µé¼¶é¼¸é¼ºé¼¼é¼¿é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½é½ é½¡é½¢é½£é½¤é½¥é½¦é½§é½¨é½©é½ªé½«é½¬é½­é½®é½¯é½°é½±é½²é½³é½´é½µé½¶é½·é½¸ï¿½é½¹é½ºé½»é½¼é½½é½¾é¾é¾é¾é¾é¾é¾é¾é¾é¾é¾é¾é¾é¾é¾é¾é¾é¾é¾¡é¾¢é¾£é¾¤é¾¥ï¤¬ï¥¹ï¦ï§§ï§±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[253].length; ++j) if (D[253][j].charCodeAt(0) !== 0xFFFD) {
    e[D[253][j]] = 64768 + j;
    d[64768 + j] = D[253][j];
  }

  D[254] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¨ï¨ï¨ï¨ï¨ï¨ï¨ï¨ï¨ï¨ ï¨¡ï¨£ï¨¤ï¨§ï¨¨ï¨©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[254].length; ++j) if (D[254][j].charCodeAt(0) !== 0xFFFD) {
    e[D[254][j]] = 65024 + j;
    d[65024 + j] = D[254][j];
  }

  return {
    "enc": e,
    "dec": d
  };
}();

cptable[949] = function () {
  var d = [],
      e = {},
      D = [],
      j;
  D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 0xFFFD) {
    e[D[0][j]] = 0 + j;
    d[0 + j] = D[0][j];
  }

  D[129] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°¡ê°¢ê°£ê°¥ê°¦ê°§ê°¨ê°©ê°ªê°«ê°®ê°²ê°³ê°´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê°µê°¶ê°·ê°ºê°»ê°½ê°¾ê°¿ê±ê±ê±ê±ê±ê±ê±ê±ê±ê±ê±ê±ê±ê±ê±ê±ê±ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê±ê±ê±ê±ê±ê±ê±ê±ê± ê±¡ê±¢ê±£ê±¤ê±¥ê±¦ê±§ê±¨ê±©ê±ªê±«ê±¬ê±­ê±®ê±¯ê±²ê±³ê±µê±¶ê±¹ê±»ê±¼ê±½ê±¾ê±¿ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²¢ê²£ê²¤ê²¥ê²¦ê²§ê²«ê²­ê²®ê²±ê²²ê²³ê²´ê²µê²¶ê²·ê²ºê²¾ê²¿ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³¢ê³£ê³¥ê³¦ê³©ê³«ê³­ê³®ê³²ê³´ê³·ê³¸ê³¹ê³ºê³»ê³¾ê³¿ê´ê´ê´ê´ê´ê´ê´ê´ê´ê´ê´ê´ê´ï¿½".split("");

  for (j = 0; j != D[129].length; ++j) if (D[129][j].charCodeAt(0) !== 0xFFFD) {
    e[D[129][j]] = 33024 + j;
    d[33024 + j] = D[129][j];
  }

  D[130] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê´ê´ê´ê´ê´ê´ê´ê´ê´ê´ê´¡ê´¢ê´£ê´¤ê´¥ê´¦ê´§ê´¨ê´ªê´«ê´®ê´¯ê´°ê´±ê´²ê´³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê´¶ê´·ê´¹ê´ºê´»ê´½ê´¾ê´¿êµêµêµêµêµêµêµêµêµêµêµêµêµêµêµêµêµêµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½êµêµêµêµêµêµêµêµ êµ¢êµ¤êµ¥êµ¦êµ§êµ¨êµ©êµªêµ«êµ®êµ¯êµ±êµ²êµ·êµ¸êµ¹êµºêµ¾ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ ê¶¡ê¶¢ê¶£ê¶¥ê¶¦ê¶§ê¶¨ê¶©ê¶ªê¶«ê¶¬ê¶­ê¶®ê¶¯ê¶°ê¶±ê¶²ê¶³ê¶´ê¶µê¶¶ê¶¸ê¶¹ê¶ºê¶»ê¶¼ê¶½ê¶¾ê¶¿ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·ê·¡ê·¢ê·£ê·¥ê·¦ê·§ê·¨ê·©ê·ªê·«ê·¬ê·­ê·®ê·¯ê·°ê·±ê·²ê·³ê·´ê·µê·¶ê··ï¿½".split("");

  for (j = 0; j != D[130].length; ++j) if (D[130][j].charCodeAt(0) !== 0xFFFD) {
    e[D[130][j]] = 33280 + j;
    d[33280 + j] = D[130][j];
  }

  D[131] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê·ºê·»ê·½ê·¾ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê¸ê¸ê¸ê¸ ê¸¡ê¸¢ê¸£ê¸¤ê¸¥ê¸¦ê¸§ê¸¨ê¸©ê¸ªê¸«ê¸¬ê¸­ê¸®ê¸¯ê¸²ê¸³ê¸µê¸¶ê¸¹ê¸»ê¸¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê¸½ê¸¾ê¸¿ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹¢ê¹£ê¹¤ê¹¦ê¹§ê¹ªê¹«ê¹­ê¹®ê¹¯ê¹±ê¹²ê¹³ê¹´ê¹µê¹¶ê¹·ê¹ºê¹¾ê¹¿êºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêºêº êº¡êº¢êº£êº¤êº¥êº¦êº§êº¨êº©êºªêº«êº¬êº­êº®êº¯êº°êº±êº²êº³êº´êºµêº¶êº·êº¸êº¹êººêº»êº¿ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê» ê»¡ê»¢ê»£ê»¤ê»¥ï¿½".split("");

  for (j = 0; j != D[131].length; ++j) if (D[131][j].charCodeAt(0) !== 0xFFFD) {
    e[D[131][j]] = 33536 + j;
    d[33536 + j] = D[131][j];
  }

  D[132] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê»¦ê»§ê»©ê»ªê»¬ê»®ê»¯ê»°ê»±ê»²ê»³ê»µê»¶ê»·ê»¹ê»ºê»»ê»½ê»¾ê»¿ê¼ê¼ê¼ê¼ê¼ê¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼ ê¼¡ê¼¢ê¼£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê¼¤ê¼¥ê¼¦ê¼§ê¼¨ê¼©ê¼ªê¼«ê¼®ê¼¯ê¼±ê¼³ê¼µê¼¶ê¼·ê¼¸ê¼¹ê¼ºê¼»ê¼¾ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ê½ ê½¡ê½¢ê½£ê½¦ê½§ê½¨ê½©ê½ªê½«ê½¬ê½­ê½®ê½¯ê½°ê½±ê½²ê½³ê½´ê½µê½¶ê½·ê½¸ê½ºê½»ê½¼ê½½ê½¾ê½¿ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾ ê¾¡ê¾¢ê¾£ê¾¤ê¾¥ê¾¦ê¾§ê¾¨ê¾©ê¾ªê¾«ê¾¬ê¾­ê¾®ê¾¯ê¾°ê¾±ê¾²ê¾³ê¾´ê¾µê¾¶ê¾·ê¾ºê¾»ê¾½ê¾¾ï¿½".split("");

  for (j = 0; j != D[132].length; ++j) if (D[132][j].charCodeAt(0) !== 0xFFFD) {
    e[D[132][j]] = 33792 + j;
    d[33792 + j] = D[132][j];
  }

  D[133] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê¾¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ ê¿¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê¿¢ê¿£ê¿¤ê¿¥ê¿¦ê¿§ê¿ªê¿«ê¿¬ê¿­ê¿®ê¿¯ê¿²ê¿³ê¿µê¿¶ê¿·ê¿¹ê¿ºê¿»ê¿¼ê¿½ê¿¾ê¿¿ëëï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëëëëëëëëëëëëëëëëëëëëëë ë¡ë¢ë£ë¤ë¥ë¦ë§ë©ëªë«ë¬ë­ë®ë¯ë°ë±ë²ë³ë´ëµë¶ë·ë¸ë¹ëºë»ë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëë ë¡ë¢ë£ë¤ë¥ë¦ë§ë¨ë©ëªë«ë¬ë­ë®ë¯ë°ë±ë²ë³ë´ëµë¶ë·ë¸ë¹ëºë»ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëë£ë¤ï¿½".split("");

  for (j = 0; j != D[133].length; ++j) if (D[133][j].charCodeAt(0) !== 0xFFFD) {
    e[D[133][j]] = 34048 + j;
    d[34048 + j] = D[133][j];
  }

  D[134] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¥ë¦ë§ëªë°ë²ë¶ë·ë¹ëºë»ë½ë¾ë¿ëëëëëëëëëëëëï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëëëëëëëëëëë¡ë¢ë£ë¤ë¦ë§ë¨ë©ëªë«ë¬ë­ë®ë¯ë°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë±ë²ë³ë´ëµë¶ë·ë¸ë¹ëºë»ë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëë ë¡ë¢ë¦ë§ë©ëªë«ë­ë®ë¯ë°ë±ë²ë³ë¶ëºë»ë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëë¡ë¢ë£ë¤ë¥ë¦ë§ë¨ë©ëªë«ë¬ë­ë®ë¯ë°ë±ë²ë³ë´ëµë¶ë·ëºë»ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëï¿½".split("");

  for (j = 0; j != D[134].length; ++j) if (D[134][j].charCodeAt(0) !== 0xFFFD) {
    e[D[134][j]] = 34304 + j;
    d[34304 + j] = D[134][j];
  }

  D[135] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëë ë¡ë¢ë£ë¤ë¥ë¦ë§ë©ëªë«ë¬ë­ë®ë¯ë°ë±ë²ë³ë´ëµë¶ë·ë¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¹ëºë»ë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëëëëëëë ë¡ë¢ë£ë¤ë¥ë¦ë§ëªë«ë­ë®ë¯ë±ë²ë³ë´ëµë¶ë·ë¸ëºë¼ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëëë¡ë¢ë£ë¤ë¥ë¦ë§ë¨ë©ëªë«ë¬ë­ë®ë¯ë°ë±ë²ë³ëµë¶ë·ë¸ë¹ëºë»ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëëëëëëëëëë¡ë¢ë£ë¤ë¥ë¦ë§ëªë«ë¬ë­ë®ï¿½".split("");

  for (j = 0; j != D[135].length; ++j) if (D[135][j].charCodeAt(0) !== 0xFFFD) {
    e[D[135][j]] = 34560 + j;
    d[34560 + j] = D[135][j];
  }

  D[136] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¯ë°ë±ë²ë³ë¶ë·ë¸ë¹ëºë»ë½ë¾ë¿ëëëëëëëëëëëëï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëëëëëëëëëëë¢ë¤ë§ë¨ë©ë«ë­ë®ë¯ë±ë²ë³ëµë¶ë·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¸ë¹ëºë»ë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëëë ë¡ë£ë§ë©ëªë°ë±ë²ë¶ë¼ë½ë¾ëëëëëëëëëëëëëëëëëëëëëëë ë¡ë¢ë£ë¤ë¥ë¦ë§ë¨ë©ëªë«ë¬ë­ë®ë¯ë°ë±ë²ë³ë´ëµë¶ë·ë¸ë¹ëºë»ë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëëëë ë¡ë¢ë£ï¿½".split("");

  for (j = 0; j != D[136].length; ++j) if (D[136][j].charCodeAt(0) !== 0xFFFD) {
    e[D[136][j]] = 34816 + j;
    d[34816 + j] = D[136][j];
  }

  D[137] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¦ë¨ëªë¬ë­ë¯ë²ë³ëµë¶ë·ë¹ëºë»ë¼ë½ë¾ë¿ëëëëëëëëï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëëëëëëëëëëëëëëëë¢ë£ë¤ë¥ë¦ë§ë©ëªë«ë­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë®ë¯ë°ë±ë²ë³ë´ëµë¶ë·ë¸ë¹ëºë»ë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëë¡ë¢ë£ë¥ë¦ë§ë©ëªë«ë¬ë­ë®ë¯ë°ë±ë²ë³ë´ëµë¶ë·ë¸ë¹ëºë»ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëëëëëëëëë¡ë¢ë£ë¤ë¥ë¦ë§ëªë¬ë­ë®ë¯ë°ë±ë²ë³ëµë¶ë·ë¸ë¹ëºë»ë¼ë½ë¾ë¿ëëëëëï¿½".split("");

  for (j = 0; j != D[137].length; ++j) if (D[137][j].charCodeAt(0) !== 0xFFFD) {
    e[D[137][j]] = 35072 + j;
    d[35072 + j] = D[137][j];
  }

  D[138] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëëëëëëëëëëëëëëëëëëëëëëë¢ë¤ë¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë§ë¨ë©ëªë«ë­ë®ë¯ë°ë±ë²ë³ë´ëµë¶ë·ë¸ë¹ëºë»ë¼ë½ë¾ë¿ëëï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëëëëëëëëëëëëëëëëëëëëëëëëëëë ë¡ë¢ë£ë¥ë¦ë§ë©ëªë«ë­ë®ë¯ë°ë±ë²ë³ë´ë¶ë¸ëºë»ë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëëëëë¡ë¢ë¥ë§ë¨ë©ëªë«ë®ë°ë²ë³ë´ëµë¶ë·ë¹ëºë»ë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëëëëï¿½".split("");

  for (j = 0; j != D[138].length; ++j) if (D[138][j].charCodeAt(0) !== 0xFFFD) {
    e[D[138][j]] = 35328 + j;
    d[35328 + j] = D[138][j];
  }

  D[139] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëë ë¡ë¢ë£ë¦ë«ë¬ë­ë®ë¯ë²ë³ëµë¶ë·ë¹ëºë»ë¼ë½ë¾ë¿ëëï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëëëëëëëëëëëëëëëëë¢ë£ë¤ë¥ë¦ë§ë¨ë©ëªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë«ë¬ë­ë®ë¯ë°ë±ë²ë³ë´ëµë¶ë·ë¸ë¹ëºë»ë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëëëëëëëëëëëë¢ë£ë¥ë¦ë§ë©ë¬ë­ë®ë¯ë²ë¶ë·ë¸ë¹ëºë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëëëë ë¡ë¢ë£ë¤ë¥ë¦ë§ë¨ë©ëªë«ë­ë®ë¯ë°ë±ë²ë³ë´ëµë¶ë·ë¸ë¹ëºë»ë¼ë½ë¾ë¿ï¿½".split("");

  for (j = 0; j != D[139].length; ++j) if (D[139][j].charCodeAt(0) !== 0xFFFD) {
    e[D[139][j]] = 35584 + j;
    d[35584 + j] = D[139][j];
  }

  D[140] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëëëëëëëëëëëëëëëëëëëëëëëëëï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëë ë¡ë¢ë£ë¤ë¦ë§ë¨ë©ëªë«ë­ë®ë¯ë°ë±ë²ë³ëµë¶ë·ë¸ë¹ëºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë»ë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëëëëëëëëëëë ë¡ë¢ë£ë¥ë¦ë§ë©ëªë«ë¬ë­ë®ë¯ë°ë±ë²ë³ë´ëµë¶ë·ë¸ë¹ëºë»ë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëëëëëëëëëë¡ë¢ë£ë¥ë¦ë§ë¨ë©ëªë­ë®ë¯ë°ë²ë³ë´ëµë¶ë·ë¸ë¹ëºë»ë¼ë½ë¾ë¿ëëëï¿½".split("");

  for (j = 0; j != D[140].length; ++j) if (D[140][j].charCodeAt(0) !== 0xFFFD) {
    e[D[140][j]] = 35840 + j;
    d[35840 + j] = D[140][j];
  }

  D[141] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëëëëëëëëëëëëëëëëëëëëëëëëëï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëë ë¡ë¢ë£ë¤ë¥ë¦ë§ë¨ë©ëªë«ë¬ë­ë®ë¯ë±ë²ë³ëµë¶ë·ë¹ëºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë»ë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëëëëëëëëë ë¡ë¢ë£ë¤ë¥ë¦ë§ëªë«ë­ë®ë±ë²ë³ë´ëµë¶ë·ëºë¼ë½ë¾ë¿ëëëëëëëëëëëëëëëëëëëëëëëëëëëë¡ë¢ë£ë¥ë¦ë§ë©ëªë«ë¬ë­ë®ë¯ë²ë´ë¶ë·ë¸ë¹ëºë»ë¾ë¿ëëëëëëëëëëëëëëëëëëï¿½".split("");

  for (j = 0; j != D[141].length; ++j) if (D[141][j].charCodeAt(0) !== 0xFFFD) {
    e[D[141][j]] = 36096 + j;
    d[36096 + j] = D[141][j];
  }

  D[142] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëë¡ë¢ë£ë¤ë¥ë¦ë§ëªë®ë¯ë°ë±ë²ë³ë¶ë·ë¹ëºë»ë¼ë½ë¾ë¿ëëï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëëëëëëëëëëëëëëëëëëëëëëëëëï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëëë ë¡ë¢ë£ë¤ë¥ë¦ë§ë¨ë©ëªë«ë®ë¯ë±ë²ë³ëµë¶ë·ë¸ë¹ëºë»ë¾ë ë ë ë ë ë ë ë ë ë ë ë ë ë ë ë ë ë ë ë ë ë  ë ¡ë ¢ë £ë ¦ë §ë ©ë ªë «ë ­ë ®ë ¯ë °ë ±ë ²ë ³ë ¶ë ºë »ë ¼ë ½ë ¾ë ¿ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡ë¡¡ë¡¢ë¡£ë¡¥ë¡¦ë¡§ë¡¨ë¡©ë¡ªë¡«ë¡®ë¡°ë¡²ë¡³ë¡´ë¡µë¡¶ë¡·ë¡¹ë¡ºë¡»ë¡½ë¡¾ë¡¿ë¢ë¢ë¢ë¢ë¢ï¿½".split("");

  for (j = 0; j != D[142].length; ++j) if (D[142][j].charCodeAt(0) !== 0xFFFD) {
    e[D[142][j]] = 36352 + j;
    d[36352 + j] = D[142][j];
  }

  D[143] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ë¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¢ ë¢¡ë¢¢ë¢£ë¢¤ë¢¥ë¢¦ë¢§ë¢©ë¢ªë¢«ë¢¬ë¢­ë¢®ë¢¯ë¢±ë¢²ë¢³ë¢µë¢¶ë¢·ë¢¹ë¢ºë¢»ë¢¼ë¢½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¢¾ë¢¿ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£ ë£¢ë££ë£¤ë£¥ë£¦ë£§ë£ªë£«ë£­ë£®ë£¯ë£±ë£²ë£³ë£´ë£µë£¶ë£·ë£ºë£¼ë£¾ë£¿ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤ë¤¡ë¤¢ë¤£ë¤¤ë¤¥ë¤¦ë¤§ë¤¨ë¤©ë¤ªë¤«ë¤¬ë¤­ë¤®ë¤¯ë¤°ë¤±ë¤²ë¤³ë¤´ë¤µë¤¶ë¤·ë¤¸ë¤¹ë¤ºë¤»ë¤¾ë¤¿ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ï¿½".split("");

  for (j = 0; j != D[143].length; ++j) if (D[143][j].charCodeAt(0) !== 0xFFFD) {
    e[D[143][j]] = 36608 + j;
    d[36608 + j] = D[143][j];
  }

  D[144] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¥ë¥ë¥ë¥ë¥ë¥¡ë¥¢ë¥£ë¥¤ë¥¥ë¥¦ë¥§ë¥ªë¥¬ë¥®ë¥¯ë¥°ë¥±ë¥²ë¥³ë¥¶ë¥·ë¥¹ë¥ºë¥»ë¥½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¥¾ë¥¿ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¦ë¦ ë¦¡ë¦¢ë¦£ë¦¤ë¦¥ë¦¦ë¦§ë¦¨ë¦©ë¦ªë¦«ë¦®ë¦¯ë¦±ë¦²ë¦³ë¦µë¦¶ë¦·ë¦¸ë¦¹ë¦ºë¦»ë¦¾ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ ë§¢ë§¦ë§§ë§©ë§ªë§«ë§­ë§®ë§¯ë§°ë§±ë§²ë§³ë§¶ë§»ë§¼ë§½ë§¾ë§¿ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ë¨ ë¨¡ë¨¢ë¨£ë¨¤ë¨¥ë¨¦ë¨§ë¨¨ë¨©ë¨ªë¨«ë¨¬ë¨­ë¨®ë¨¯ë¨°ë¨±ë¨²ë¨³ë¨´ë¨µë¨¶ë¨·ë¨ºë¨»ë¨½ë¨¾ë¨¿ë©ë©ë©ë©ë©ï¿½".split("");

  for (j = 0; j != D[144].length; ++j) if (D[144][j].charCodeAt(0) !== 0xFFFD) {
    e[D[144][j]] = 36864 + j;
    d[36864 + j] = D[144][j];
  }

  D[145] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë© ë©¡ë©¢ë©£ë©¦ë©ªë©«ë©¬ë©­ë©®ë©¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë©²ë©³ë©µë©¶ë©·ë©¹ë©ºë©»ë©¼ë©½ë©¾ë©¿ëªëªëªëªëªëªëªëªëªëªëªëªëªëªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëªëªëªëªëªëªëªëªëªëªëªëªëªëª ëª¡ëª¢ëª£ëª¤ëª¥ëª¦ëª§ëªªëª­ëª®ëª¯ëª±ëª³ëª´ëªµëª¶ëª·ëªºëª¼ëª¾ëª¿ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë«ë« ë«¡ë«¢ë«£ë«¤ë«¥ë«¦ë«§ë«¨ë«©ë«ªë««ë«¬ë«­ë«®ë«¯ë«°ë«±ë«²ë«³ë«´ë«µë«¶ë«·ë«¸ë«¹ë«ºë«»ë«½ë«¾ë«¿ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬¡ë¬¢ë¬£ë¬¤ë¬¥ë¬¦ë¬§ï¿½".split("");

  for (j = 0; j != D[145].length; ++j) if (D[145][j].charCodeAt(0) !== 0xFFFD) {
    e[D[145][j]] = 37120 + j;
    d[37120 + j] = D[145][j];
  }

  D[146] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¬¨ë¬ªë¬¬ë¬­ë¬®ë¬¯ë¬°ë¬±ë¬²ë¬³ë¬·ë¬¹ë¬ºë¬¿ë­ë­ë­ë­ë­ë­ë­ë­ë­ë­ë­ë­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë­ë­ë­ë­ë­ë­ë­ë­ë­ë­ë­ë­ ë­¢ë­¤ë­¥ë­¦ë­§ë­¨ë­©ë­ªë­«ë­­ë­®ë­¯ë­°ë­±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë­²ë­³ë­´ë­µë­¶ë­·ë­¸ë­¹ë­ºë­»ë­¼ë­½ë­¾ë­¿ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë®ë® ë®¡ë®¢ë®£ë®¥ë®¦ë®§ë®©ë®ªë®«ë®­ë®®ë®¯ë®°ë®±ë®²ë®³ë®µë®¶ë®¸ë®¹ë®ºë®»ë®¼ë®½ë®¾ë®¿ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ë¯ ë¯¡ë¯¢ë¯£ë¯¤ë¯¥ë¯¦ë¯§ë¯¨ë¯©ë¯ªë¯«ë¯¬ë¯­ë¯®ë¯¯ë¯°ë¯±ë¯²ë¯³ë¯´ë¯µë¯¶ë¯·ë¯ºë¯»ë¯½ë¯¾ë°ï¿½".split("");

  for (j = 0; j != D[146].length; ++j) if (D[146][j].charCodeAt(0) !== 0xFFFD) {
    e[D[146][j]] = 37376 + j;
    d[37376 + j] = D[146][j];
  }

  D[147] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°ë° ë°¡ë°¢ë°£ë°¦ë°¨ë°ªë°«ë°¬ë°®ë°¯ë°²ë°³ë°µï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë°¶ë°·ë°¹ë°ºë°»ë°¼ë°½ë°¾ë°¿ë±ë±ë±ë±ë±ë±ë±ë±ë±ë±ë±ë±ë±ë±ë±ë±ë±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë±ë±ë±ë±ë±ë± ë±¡ë±¢ë±£ë±¤ë±¥ë±¦ë±§ë±¨ë±©ë±ªë±«ë±¬ë±­ë±®ë±¯ë±°ë±±ë±²ë±³ë±´ë±µë±¶ë±·ë±¸ë±¹ë±ºë±»ë±¼ë±½ë±¾ë±¿ë²ë²ë²ë²ë²ë²ë²ë²ë²ë²ë²ë²ë²ë²ë²ë²ë²ë²ë²ë²ë²ë²¢ë²£ë²¥ë²¦ë²©ë²ªë²«ë²¬ë²­ë²®ë²¯ë²²ë²¶ë²·ë²¸ë²¹ë²ºë²»ë²¾ë²¿ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³ ë³¡ë³¢ë³£ë³¤ë³¥ë³¦ë³§ë³¨ë³©ë³ªë³«ë³¬ë³­ë³®ë³¯ë³°ë³±ë³²ë³³ë³·ë³¹ë³ºë³»ë³½ï¿½".split("");

  for (j = 0; j != D[147].length; ++j) if (D[147][j].charCodeAt(0) !== 0xFFFD) {
    e[D[147][j]] = 37632 + j;
    d[37632 + j] = D[147][j];
  }

  D[148] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë³¾ë³¿ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ë´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë´ë´ë´ ë´¡ë´¢ë´£ë´¥ë´¦ë´§ë´¨ë´©ë´ªë´«ë´­ë´®ë´¯ë´°ë´±ë´²ë´³ë´´ë´µë´¶ë´·ë´¸ë´¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë´ºë´»ë´¼ë´½ë´¾ë´¿ëµëµëµëµëµëµëµëµëµëµëµëµëµëµëµëµëµëµëµëµëµëµëµëµëµëµ ëµ¡ëµ¢ëµ£ëµ¥ëµ¦ëµ§ëµ©ëµªëµ«ëµ¬ëµ­ëµ®ëµ¯ëµ°ëµ±ëµ²ëµ³ëµ´ëµµëµ¶ëµ·ëµ¸ëµ¹ëµºëµ»ëµ¼ëµ½ëµ¾ëµ¿ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ ë¶¡ë¶¢ë¶£ë¶¥ë¶¦ë¶§ë¶¨ë¶©ë¶ªë¶«ë¶¬ë¶­ë¶®ë¶¯ë¶±ë¶²ë¶³ë¶´ë¶µë¶¶ë¶·ë¶¹ë¶ºë¶»ë¶¼ë¶½ë¶¾ë¶¿ë·ë·ë·ë·ë·ë·ë·ë·ë·ë·ë·ë·ë·ë·ë·ë·ë·ë·ï¿½".split("");

  for (j = 0; j != D[148].length; ++j) if (D[148][j].charCodeAt(0) !== 0xFFFD) {
    e[D[148][j]] = 37888 + j;
    d[37888 + j] = D[148][j];
  }

  D[149] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë·ë·ë·ë·ë·ë·ë·ë·ë·ë·ë· ë·¡ë·¢ë·£ë·¤ë·¥ë·¦ë·§ë·¨ë·ªë·«ë·¬ë·­ë·®ë·¯ë·±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë·²ë·³ë·µë·¶ë··ë·¹ë·ºë·»ë·¼ë·½ë·¾ë·¿ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ ë¸¡ë¸¢ë¸£ë¸¤ë¸¥ë¸¦ë¸§ë¸¨ë¸©ë¸ªë¸«ë¸¬ë¸­ë¸®ë¸¯ë¸°ë¸±ë¸²ë¸³ë¸´ë¸µë¸¶ë¸·ë¸¸ë¸¹ë¸ºë¸»ë¸¼ë¸½ë¸¾ë¸¿ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹¢ë¹£ë¹¥ë¹¦ë¹§ë¹©ë¹«ë¹¬ë¹­ë¹®ë¹¯ë¹²ë¹¶ë¹·ë¹¸ë¹¹ë¹ºë¹¾ë¹¿ëºëºëºëºëºëºëºëºëºëºëºëºëºëºëºëºëºëºëºëºëºëºëºëº ëº¡ëº¢ëº£ëº¤ëº¥ëº¦ëº§ëº©ëºªëº«ëº¬ëº­ëº®ëº¯ëº°ëº±ëº²ëº³ëº´ëºµëº¶ëº·ï¿½".split("");

  for (j = 0; j != D[149].length; ++j) if (D[149][j].charCodeAt(0) !== 0xFFFD) {
    e[D[149][j]] = 38144 + j;
    d[38144 + j] = D[149][j];
  }

  D[150] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëº¸ëº¹ëººëº»ëº¼ëº½ëº¾ëº¿ë»ë»ë»ë»ë»ë»ë»ë»ë»ë»ë»ë»ë»ë»ë»ë»ë»ë»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë»ë»ë»ë»ë»ë»ë»ë»ë»ë»¡ë»¢ë»¦ë»§ë»¨ë»©ë»ªë»«ë»­ë»®ë»¯ë»°ë»±ë»²ë»³ë»´ë»µï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë»¶ë»·ë»¸ë»¹ë»ºë»»ë»¼ë»½ë»¾ë»¿ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ ë¼¡ë¼¢ë¼£ë¼¤ë¼¥ë¼¦ë¼§ë¼¨ë¼©ë¼ªë¼«ë¼¬ë¼­ë¼®ë¼¯ë¼°ë¼±ë¼²ë¼³ë¼´ë¼µë¼¶ë¼·ë¼¸ë¼¹ë¼ºë¼»ë¼¼ë¼½ë¼¾ë¼¿ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ë½ ë½¡ë½¢ë½£ë½¤ë½¥ë½¦ë½§ë½¨ë½©ë½ªë½«ë½¬ë½­ë½®ë½¯ë½°ë½±ë½²ë½³ë½´ë½µë½¶ë½·ë½¸ë½¹ë½ºë½»ë½¼ë½½ë½¾ë½¿ë¾ë¾ë¾ï¿½".split("");

  for (j = 0; j != D[150].length; ++j) if (D[150][j].charCodeAt(0) !== 0xFFFD) {
    e[D[150][j]] = 38400 + j;
    d[38400 + j] = D[150][j];
  }

  D[151] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ë¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¾ë¾ë¾ ë¾¡ë¾¢ë¾£ë¾¤ë¾¥ë¾¦ë¾§ë¾¨ë¾©ë¾ªë¾«ë¾¬ë¾­ë¾®ë¾¯ë¾±ë¾²ë¾³ë¾´ë¾µë¾¶ë¾·ë¾¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë¾¹ë¾ºë¾»ë¾¼ë¾½ë¾¾ë¾¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿ ë¿¢ë¿£ë¿¤ë¿¥ë¿¦ë¿§ë¿¨ë¿©ë¿ªë¿«ë¿¬ë¿­ë¿®ë¿¯ë¿°ë¿±ë¿²ë¿³ë¿´ë¿µë¿¶ë¿·ë¿¸ë¿¹ë¿ºë¿»ë¿¼ë¿½ë¿¾ë¿¿ììììììììììììììììììììììììììììììììì ì¡ì¢ì£ì¤ì¥ì¦ì§ì¨ì©ìªì«ì¬ì­ì®ì¯ì°ì±ì²ì³ì´ìµì¶ì·ì¸ì¹ìºì»ì½ì¾ì¿ï¿½".split("");

  for (j = 0; j != D[151].length; ++j) if (D[151][j].charCodeAt(0) !== 0xFFFD) {
    e[D[151][j]] = 38656 + j;
    d[38656 + j] = D[151][j];
  }

  D[152] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ììììììììììììììììììììììììììï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìììì¡ì¢ì£ì¤ì¥ì¦ì§ìªì«ì¬ì­ì®ì¯ì°ì±ì²ì³ì´ìµì¶ì·ì¸ì¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìºì»ì¼ì½ì¾ì¿ììììììììììììììììììììììììììììì¢ì¤ì¦ì§ì¨ì©ìªì«ì®ì±ì²ì·ì¸ì¹ìºì»ì¾ììììììììììììììììììììì ì¡ì¢ì£ì¦ì§ì©ìªì«ì­ì®ì¯ì°ì±ì²ì³ì¶ì¸ìºì»ì¼ì½ì¾ì¿ìììììììììììììììììììììììì¡ì¢ì¥ì¨ì©ìªì«ì®ï¿½".split("");

  for (j = 0; j != D[152].length; ++j) if (D[152][j].charCodeAt(0) !== 0xFFFD) {
    e[D[152][j]] = 38912 + j;
    d[38912 + j] = D[152][j];
  }

  D[153] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì²ì³ì´ìµì·ìºì»ì½ì¾ì¿ììììììììììììììììï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ììììììì ì¡ì¢ì£ì¦ìªì«ì¬ì­ì®ì¯ì±ì²ì³ìµì¶ì·ì¹ìºì»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¼ì½ì¾ì¿ììììììììììììììììììììììì ì¢ì£ì¤ì¦ì§ìªì«ì­ì®ì¯ì±ì²ì³ì´ìµì¶ì·ì¸ì¹ìºì»ì¼ì¾ì¿ììììììììììììììììììììììììììì¡ì¢ì£ì¥ì¦ì§ì©ìªì«ì¬ì­ì®ì¯ì²ì´ìµì¶ì·ì¸ì¹ìºì»ì¾ì¿ììììììììììììììììììììììì¡ì¢ì£ï¿½".split("");

  for (j = 0; j != D[153].length; ++j) if (D[153][j].charCodeAt(0) !== 0xFFFD) {
    e[D[153][j]] = 39168 + j;
    d[39168 + j] = D[153][j];
  }

  D[154] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¤ì¥ì¦ì§ìªì¬ì®ì°ì³ìµì¶ì·ì¸ì¹ìºì»ì¼ì½ì¾ì¿ììììììï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìììììììììììììììììììììì¡ì¢ì£ì¤ì¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì§ì¨ì©ìªì«ì®ì¯ì±ì²ì³ìµì¶ì·ì¸ì¹ìºì»ì¾ìììììììììììììììììììììììììì ì¡ì¢ì£ì¦ì§ì©ìªì«ì®ì¯ì°ì±ì²ì³ì¶ì¸ìºì»ì¼ì½ì¾ì¿ììììììììììììììììììììììììììììììì¡ì¢ì¥ì¦ì§ì¨ì©ìªì®ì°ì²ì³ì´ìµì·ìºì½ì¾ì¿ìììììììììììï¿½".split("");

  for (j = 0; j != D[154].length; ++j) if (D[154][j].charCodeAt(0) !== 0xFFFD) {
    e[D[154][j]] = 39424 + j;
    d[39424 + j] = D[154][j];
  }

  D[155] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìììììììììììì ì¡ì¢ì£ì¦ì§ìªì«ì¬ì­ì®ì¯ì°ì±ì²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì³ì´ìµì¶ì·ì¸ì¹ìºì»ì¼ì½ì¾ì¿ìììììììììììììï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ììììììììììììììììììì ì¡ì¢ì£ì¤ì¥ì¦ì§ìªì«ì­ì®ì¯ì±ì³ì´ìµì¶ì·ìºì»ì¾ì¿ìììììììììììììììììììììììììììììì ì¡ì¢ì£ì¤ì¥ì¦ì§ì¨ì©ìªì«ì¬ì­ì®ì¯ì°ì±ì²ì³ì´ìµì¶ì·ì¸ì¹ìºì»ì¼ì½ì¾ì¿ììììììììììììììììììììììììï¿½".split("");

  for (j = 0; j != D[155].length; ++j) if (D[155][j].charCodeAt(0) !== 0xFFFD) {
    e[D[155][j]] = 39680 + j;
    d[39680 + j] = D[155][j];
  }

  D[156] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìììì¡ì£ì¤ì¥ì¦ì§ìªì«ì¬ì®ì¯ì°ì±ì²ì³ì¶ì·ì¹ìºì»ì¼ì½ì¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¿ìììììììììììììììììììììììììï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìììììì ì¡ì¢ì£ì¥ì¦ì§ì¨ì©ìªì«ì­ì®ì¯ì±ì²ì³ìµì¶ì·ì¸ì¹ìºì»ì¾ì¿ìììììììììììììììììììììììììììììììì ì¡ì¢ì£ì¦ì§ì©ìªì«ì­ì®ì¯ì°ì±ì²ì³ì¶ì·ì¸ìºì»ì¼ì½ì¾ì¿ìììììììììììììììììììììììììììììì ì¡ì¢ì£ì¤ì¥ì¦ì§ì¨ì©ï¿½".split("");

  for (j = 0; j != D[156].length; ++j) if (D[156][j].charCodeAt(0) !== 0xFFFD) {
    e[D[156][j]] = 39936 + j;
    d[39936 + j] = D[156][j];
  }

  D[157] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìªì«ì¬ì­ì®ì¯ì°ì±ì²ì³ì´ìµì¶ì·ì¹ìºì»ì½ì¾ì¿ììììììï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ììììììììììììììììììììììììììï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì ì¡ì¢ì£ì¤ì¥ì¦ì§ì¨ìªì«ì¬ì­ì®ì¯ì²ì³ìµì¶ì·ì¹ì»ì¼ì½ì¾ììììììììììììììììììììììììììì ì¡ì¢ì£ì¤ì¥ì¦ì§ìªì«ì­ì®ì¯ì±ì²ì³ì´ìµì¶ì·ìºì¼ì¾ì¿ììììììììììììììììì¢ì£ì¥ì¦ì§ì©ìªì«ì¬ì­ì®ì¯ì²ì¶ì·ì¸ì¹ìºì»ì¾ì¿ììììììììììììììï¿½".split("");

  for (j = 0; j != D[157].length; ++j) if (D[157][j].charCodeAt(0) !== 0xFFFD) {
    e[D[157][j]] = 40192 + j;
    d[40192 + j] = D[157][j];
  }

  D[158] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìììììììì¡ì¢ì£ì¤ì¥ì¦ì§ì¨ìªì«ì¬ì­ì®ì¯ì°ì±ì²ì³ì¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì·ìºì¿ìììììììììììììììììììì¢ì¤ì¦ì§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¨ì©ìªì«ì¯ì±ì²ì³ìµì¸ì¹ìºì»ììììììììììììììììììììì ì¡ì¢ì£ì¦ì§ì©ìªì«ì¯ì±ì²ì¶ì¸ìºì¼ì½ì¾ì¿ìììììììììììììììììììììì¡ì¢ì£ì¤ì¥ì¦ì§ì¨ì©ìªì«ì­ì®ì°ì²ì³ì´ìµì¶ì·ìºì»ì½ì¾ì¿ìììììììììììììììììììììììì ì¡ì¢ì£ì¦ï¿½".split("");

  for (j = 0; j != D[158].length; ++j) if (D[158][j].charCodeAt(0) !== 0xFFFD) {
    e[D[158][j]] = 40448 + j;
    d[40448 + j] = D[158][j];
  }

  D[159] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¨ìªì«ì¬ì­ì®ì¯ì²ì³ìµì¶ì·ì»ì¼ì½ì¾ì¿ìììììììììï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìììììììììììììì¢ì£ì¤ì¥ì¦ì§ìªì«ì­ì®ì¯ì±ì²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì³ì´ìµì¶ì·ìºì»ì¼ì¾ì¿ììììììììììììììììììììììììì¢ì£ì¥ì¦ì§ì©ìªì«ì¬ì­ì®ì¯ì²ì´ì¶ì¸ì¹ìºì»ì¾ì¿ìììììììììììììììììì¡ì¢ì£ì¤ì¥ì¦ì§ì©ìªì¬ì­ì®ì¯ì°ì±ì²ì³ì¶ì·ì¹ìºì»ì¿ìììììììììììììììììì¢ì§ì¨ì©ìªì«ì®ì¯ì±ì²ì³ìµì¶ì·ï¿½".split("");

  for (j = 0; j != D[159].length; ++j) if (D[159][j].charCodeAt(0) !== 0xFFFD) {
    e[D[159][j]] = 40704 + j;
    d[40704 + j] = D[159][j];
  }

  D[160] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¸ì¹ìºì»ì¾ìììììììììììììììììììììï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ììì ì¡ì¢ì£ì¥ì¦ì§ì©ìªì«ì­ì®ì¯ì°ì±ì²ì³ì´ìµì¶ì·ì¸ì¹ìºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì»ì¼ì½ì¾ì¿ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ì ¡ì ¢ì £ì ¥ì ¦ì §ì ¨ì ©ì ªì «ì ®ì °ì ²ì ³ì ´ì µì ¶ì ·ì ¹ì ºì »ì ½ì ¾ì ¿ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ì¡ ì¡¡ì¡¢ì¡£ì¡¤ì¡¥ì¡¦ì¡§ì¡¨ì¡©ì¡ªì¡«ì¡¬ì¡­ì¡®ì¡¯ì¡²ì¡³ì¡µì¡¶ì¡·ì¡¹ì¡»ì¡¼ì¡½ì¡¾ì¡¿ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ ì¢¢ì¢£ì¢¤ï¿½".split("");

  for (j = 0; j != D[160].length; ++j) if (D[160][j].charCodeAt(0) !== 0xFFFD) {
    e[D[160][j]] = 40960 + j;
    d[40960 + j] = D[160][j];
  }

  D[161] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¢¥ì¢¦ì¢§ì¢©ì¢ªì¢«ì¢¬ì¢­ì¢®ì¢¯ì¢°ì¢±ì¢²ì¢³ì¢´ì¢µì¢¶ì¢·ì¢¸ì¢¹ì¢ºì¢»ì¢¾ì¢¿ì£ì£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£ì£¢ì££ì£¥ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì£¦ì£§ì£¨ì£©ì£ªì£«ì£¬ì£­ì£®ì£¯ì£°ì£±ì£²ì£³ì£´ì£¶ì£·ì£¸ì£¹ì£ºì£»ì£¾ì£¿ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ãããÂ·â¥â¦Â¨ãÂ­ââ¥ï¼¼â¼ââââããããããããããããÂ±ÃÃ·â â¤â¥ââ´Â°â²â³ââ«ï¿ ï¿¡ï¿¥âââ â¥ââââ¡âÂ§â»ââââââââ¡â â³â²â½â¼âââââãâªâ«ââ½ââµâ«â¬âââââââªâ©â§â¨ï¿¢ï¿½".split("");

  for (j = 0; j != D[161].length; ++j) if (D[161][j].charCodeAt(0) !== 0xFFFD) {
    e[D[161][j]] = 41216 + j;
    d[41216 + j] = D[161][j];
  }

  D[162] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ ì¤¡ì¤¢ì¤£ì¤¤ì¤¥ì¤¦ì¤§ì¤¨ì¤©ì¤ªì¤«ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¤­ì¤®ì¤¯ì¤°ì¤±ì¤²ì¤³ì¤µì¤¶ì¤·ì¤¸ì¤¹ì¤ºì¤»ì¤¼ì¤½ì¤¾ì¤¿ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥ì¥¢ì¥¤ì¥¥ì¥¦ì¥§ì¥¨ì¥©ì¥ªì¥«ì¥­ì¥®ì¥¯ââââÂ´ï½ËËËËËÂ¸ËÂ¡Â¿Ëâ®ââÂ¤ââ°âââ·â¶â¤â â¡â¥â§â£âââ£ââââ¤â¥â¨â§â¦â©â¨ââââÂ¶â â¡ââââââ­â©âªâ¬ã¿ãâãâ¢ããâ¡â¬Â®ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[162].length; ++j) if (D[162][j].charCodeAt(0) !== 0xFFFD) {
    e[D[162][j]] = 41472 + j;
    d[41472 + j] = D[162][j];
  }

  D[163] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¥±ì¥²ì¥³ì¥µì¥¶ì¥·ì¥¸ì¥¹ì¥ºì¥»ì¥½ì¥¾ì¥¿ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì¦ ì¦¡ì¦¢ì¦£ì¦¤ì¦¥ì¦¦ì¦§ì¦¨ì¦©ì¦ªì¦«ì¦¬ì¦­ì¦®ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¦¯ì¦°ì¦±ì¦²ì¦³ì¦´ì¦µì¦¶ì¦·ì¦¸ì¦¹ì¦ºì¦»ì¦¼ì¦½ì¦¾ì¦¿ì§ì§ì§ì§ì§ì§ì§ì§ì§ì§ì§ì§ì§ì§ì§ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ ï¼¡ï¼¢ï¼£ï¼¤ï¼¥ï¼¦ï¼§ï¼¨ï¼©ï¼ªï¼«ï¼¬ï¼­ï¼®ï¼¯ï¼°ï¼±ï¼²ï¼³ï¼´ï¼µï¼¶ï¼·ï¼¸ï¼¹ï¼ºï¼»ï¿¦ï¼½ï¼¾ï¼¿ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï¿£ï¿½".split("");

  for (j = 0; j != D[163].length; ++j) if (D[163][j].charCodeAt(0) !== 0xFFFD) {
    e[D[163][j]] = 41728 + j;
    d[41728 + j] = D[163][j];
  }

  D[164] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì§ì§ì§¡ì§£ì§¥ì§¦ì§¨ì§©ì§ªì§«ì§®ì§²ì§³ì§´ì§µì§¶ì§·ì§ºì§»ì§½ì§¾ì§¿ì¨ì¨ì¨ì¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ ì¨¡ì¨¢ì¨£ì¨¤ì¨¥ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¨¦ì¨§ì¨¨ì¨ªì¨«ì¨¬ì¨­ì¨®ì¨¯ì¨°ì¨±ì¨²ì¨³ì¨´ì¨µì¨¶ì¨·ì¨¸ì¨¹ì¨ºì¨»ì¨¼ì¨½ì¨¾ì¨¿ì©ì©ì©ì©ì©ì©ì©ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ããããããããããããããããããããããããããããããããã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ãããããããããããããããï¿½".split("");

  for (j = 0; j != D[164].length; ++j) if (D[164][j].charCodeAt(0) !== 0xFFFD) {
    e[D[164][j]] = 41984 + j;
    d[41984 + j] = D[164][j];
  }

  D[165] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì©ì©ì©ì©ì©ì©ì©ì©ì©ì©ì©ì©ì©ì©ì©ì©ì©ì©ì©¢ì©£ì©¤ì©¥ì©¦ì©§ì©©ì©ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì©«ì©¬ì©­ì©®ì©¯ì©°ì©±ì©²ì©³ì©´ì©µì©¶ì©·ì©¸ì©¹ì©ºì©»ì©¼ì©¾ì©¿ìªìªìªìªìªìªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìªìªìªìªìªìªìªìªìªìªìªìªìªìªìªìªìªìªìªìªìªìªìªìªìª ìª¡ìª¢ìª£ìª¤ìª¥ìª¦ìª§â°â±â²â³â´âµâ¶â·â¸â¹ï¿½ï¿½ï¿½ï¿½ï¿½â â¡â¢â£â¤â¥â¦â§â¨â©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[165].length; ++j) if (D[165][j].charCodeAt(0) !== 0xFFFD) {
    e[D[165][j]] = 42240 + j;
    d[42240 + j] = D[165][j];
  }

  D[166] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìª¨ìª©ìªªìª«ìª¬ìª­ìª®ìª¯ìª°ìª±ìª²ìª³ìª´ìªµìª¶ìª·ìª¸ìª¹ìªºìª»ìª¾ìª¿ì«ì«ì«ì«ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì«ì«ì«ì«ì«ì«ì«ì«ì«ì«ì«ì«ì«ì«ì«ì«ì«ì«ì«ì«¡ì«¢ì«£ì«¤ì«¥ì«¦ì«§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì«¨ì«©ì«ªì««ì«­ì«®ì«¯ì«°ì«±ì«²ì«³ì«µì«¶ì«·ì«¸ì«¹ì«ºì«»ì«¼ì«½ì«¾ì«¿ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ââââââââ¬â¤â´â¼âââââââ£â³â«â»ââ â¯â¨â·â¿ââ°â¥â¸ââââââââââââ¡â¢â¦â§â©âªâ­â®â±â²âµâ¶â¹âºâ½â¾ââââââââââï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[166].length; ++j) if (D[166][j].charCodeAt(0) !== 0xFFFD) {
    e[D[166][j]] = 42496 + j;
    d[42496 + j] = D[166][j];
  }

  D[167] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬ì¬¢ì¬£ì¬¤ì¬¥ì¬¦ì¬§ì¬¨ì¬©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¬ªì¬«ì¬¬ì¬­ì¬®ì¬¯ì¬°ì¬±ì¬²ì¬³ì¬´ì¬µì¬¶ì¬·ì¬¸ì¬¹ì¬ºì¬»ì¬¼ì¬½ì¬¾ì¬¿ì­ì­ì­ì­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì­ì­ì­ì­ì­ì­ì­ì­ì­ì­ì­ì­ì­ì­ì­ì­ì­ì­ì­ì­ì­ ì­¡ì­¢ì­£ì­¥ì­¦ì­§ì­¨ì­©ì­ªì­«ì­¬ãããâããã£ã¤ã¥ã¦ãããããããã ã¡ã¢ããããããããã§ã¨ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ããããããºã»ã¼ã½ã¾ã¿ãããããâ¦ãããããããã­ã®ã¯ãã©ãªã«ã¬ãããããããï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[167].length; ++j) if (D[167][j].charCodeAt(0) !== 0xFFFD) {
    e[D[167][j]] = 42752 + j;
    d[42752 + j] = D[167][j];
  }

  D[168] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì­­ì­®ì­¯ì­°ì­±ì­²ì­³ì­´ì­µì­¶ì­·ì­ºì­»ì­¼ì­½ì­¾ì­¿ì®ì®ì®ì®ì®ì®ì®ì®ì®ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì®ì®ì®ì®ì®ì®ì®ì®ì®ì®ì®ì®ì®ì®ì®ì®ì®ì®ì®ì®ì®ì®ì® ì®¡ì®¢ì®£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì®¤ì®¥ì®¦ì®§ì®¨ì®©ì®ªì®«ì®¬ì®­ì®®ì®¯ì®°ì®±ì®²ì®³ì®´ì®µì®¶ì®·ì®¹ì®ºì®»ì®¼ì®½ì®¾ì®¿ì¯ì¯ì¯ì¯ì¯ÃÃÂªÄ¦ï¿½Ä²ï¿½Ä¿ÅÃÅÂºÃÅ¦Åï¿½ã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»âââââââââââââââââ â¡â¢â£â¤â¥â¦â§â¨â©â â¡â¢â£â¤â¥â¦â§â¨â©âªâ«â¬â­â®Â½ââÂ¼Â¾ââââï¿½".split("");

  for (j = 0; j != D[168].length; ++j) if (D[168][j].charCodeAt(0) !== 0xFFFD) {
    e[D[168][j]] = 43008 + j;
    d[43008 + j] = D[168][j];
  }

  D[169] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ì¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¯ ì¯¡ì¯¢ì¯£ì¯¥ì¯¦ì¯¨ì¯ªì¯«ì¯¬ì¯­ì¯®ì¯¯ì¯°ì¯±ì¯²ì¯³ì¯´ì¯µì¯¶ì¯·ì¯¸ì¯¹ì¯ºì¯»ì¯¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¯½ì¯¾ì¯¿ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì°ì° ì°£ì°¤Ã¦ÄÃ°Ä§Ä±Ä³Ä¸ÅÅÃ¸ÅÃÃ¾Å§ÅÅããããããããããããããããããããããããããããâââââ â¡â¢â£â¤â¥â¦â§â¨â©âªâ«â¬â­â®â¯â°â±â²â³â´âµâ´âµâ¶â·â¸â¹âºâ»â¼â½â¾â¿âââÂ¹Â²Â³â´â¿ââââï¿½".split("");

  for (j = 0; j != D[169].length; ++j) if (D[169][j].charCodeAt(0) !== 0xFFFD) {
    e[D[169][j]] = 43264 + j;
    d[43264 + j] = D[169][j];
  }

  D[170] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì°¥ì°¦ì°ªì°«ì°­ì°¯ì°±ì°²ì°³ì°´ì°µì°¶ì°·ì°ºì°¿ì±ì±ì±ì±ì±ì±ì±ì±ì±ì±ì±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì±ì±ì±ì±ì±ì±ì±ì±ì±ì±ì±ì±ì±¡ì±¢ì±£ì±¥ì±§ì±©ì±ªì±«ì±¬ì±­ì±®ì±¯ì±±ì±²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì±³ì±´ì±¶ì±·ì±¸ì±¹ì±ºì±»ì±¼ì±½ì±¾ì±¿ì²ì²ì²ì²ì²ì²ì²ì²ì²ì²ì²ì²ì²ì²ì²ì²ì²ì²ì²ì²ãããããããããããããããããããããããããããããããã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ããããããããããããããããããããï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[170].length; ++j) if (D[170][j].charCodeAt(0) !== 0xFFFD) {
    e[D[170][j]] = 43520 + j;
    d[43520 + j] = D[170][j];
  }

  D[171] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì²ì²ì²ì²ì²ì²ì²ì²ì²ì²¡ì²¢ì²£ì²¤ì²¥ì²¦ì²§ì²ªì²®ì²¯ì²°ì²±ì²²ì²³ì²¶ì²·ì²¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì²ºì²»ì²½ì²¾ì²¿ì³ì³ì³ì³ì³ì³ì³ì³ì³ì³ì³ì³ì³ì³ì³ì³ì³ì³ì³ì³ì³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì³ì³ì³ì³ì³ì³ ì³¡ì³¢ì³£ì³¥ì³¦ì³§ì³¨ì³©ì³ªì³«ì³­ì³®ì³¯ì³±ì³²ì³³ì³´ì³µì³¶ì³·ì³¸ì³¹ì³ºì³»ì³¼ì³½ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ããããããããããããããããããããããããããããããããã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[171].length; ++j) if (D[171][j].charCodeAt(0) !== 0xFFFD) {
    e[D[171][j]] = 43776 + j;
    d[43776 + j] = D[171][j];
  }

  D[172] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì³¾ì³¿ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì´¡ì´¢ì´£ì´¥ì´¦ì´§ì´©ì´ªì´«ì´­ì´®ì´¯ì´°ì´±ì´²ì´³ì´´ì´µì´¶ì´·ì´¸ì´ºì´»ì´¼ì´½ì´¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì´¿ìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµìµÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð°Ð±Ð²Ð³Ð´ÐµÑÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[172].length; ++j) if (D[172][j].charCodeAt(0) !== 0xFFFD) {
    e[D[172][j]] = 44032 + j;
    d[44032 + j] = D[172][j];
  }

  D[173] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìµ¡ìµ¢ìµ£ìµ¥ìµ¦ìµ§ìµ¨ìµ©ìµªìµ«ìµ®ìµ°ìµ²ìµ³ìµ´ìµµìµ¶ìµ·ìµ¹ìµºìµ»ìµ¼ìµ½ìµ¾ìµ¿ì¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¶ ì¶¡ì¶¢ì¶£ì¶¦ì¶¨ì¶ªì¶«ì¶¬ì¶­ì¶®ì¶¯ì¶±ì¶²ì¶³ì¶´ì¶µì¶¶ì¶·ì¶¸ì¶¹ì¶ºì¶»ì¶¼ì¶½ì¶¾ì¶¿ì·ì·ì·ì·ì·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[173].length; ++j) if (D[173][j].charCodeAt(0) !== 0xFFFD) {
    e[D[173][j]] = 44288 + j;
    d[44288 + j] = D[173][j];
  }

  D[174] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì·ì· ì·¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì·¢ì·£ì·¤ì·¥ì·¦ì·§ì·©ì·ªì·«ì·­ì·®ì·¯ì·±ì·²ì·³ì·´ì·µì·¶ì··ì·ºì·¼ì·¾ì·¿ì¸ì¸ì¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸¢ì¸£ì¸¥ì¸¦ì¸§ì¸©ì¸ªì¸«ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[174].length; ++j) if (D[174][j].charCodeAt(0) !== 0xFFFD) {
    e[D[174][j]] = 44544 + j;
    d[44544 + j] = D[174][j];
  }

  D[175] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¸¬ì¸­ì¸®ì¸¯ì¸²ì¸´ì¸¶ì¸·ì¸¸ì¸¹ì¸ºì¸»ì¸¼ì¸½ì¸¾ì¸¿ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹ì¹¢ì¹£ì¹¤ì¹¥ì¹¦ì¹§ì¹ªì¹¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¹®ì¹¯ì¹°ì¹±ì¹²ì¹³ì¹¶ì¹·ì¹¹ì¹ºì¹»ì¹½ì¹¾ì¹¿ìºìºìºìºìºìºìºìºìºìºìºìºìºìºìºìºìºìºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[175].length; ++j) if (D[175][j].charCodeAt(0) !== 0xFFFD) {
    e[D[175][j]] = 44800 + j;
    d[44800 + j] = D[175][j];
  }

  D[176] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìºìºìºìºìºìºìº¢ìº¦ìº§ìº¨ìº©ìºªìº«ìº®ìº¯ìº°ìº±ìº²ìº³ìº´ìºµìº¶ìº·ìº¸ìº¹ìººï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ìº»ìº¼ìº½ìº¾ìº¿ì»ì»ì»ì»ì»ì»ì»ì»ì»ì»ì»ì»ì»ì»ì»ì»ì»ì»ì»ì»ì»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì»ì»ì»ì»ì»ì»ì»ì»ì»ì»ì» ì»¡ì»¢ì»£ì»¦ì»§ì»©ì»ªì»­ì»®ì»¯ì»°ì»±ì»²ì»³ì»¶ì»ºì»»ì»¼ì»½ì»¾ì»¿ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê°ê° ê°¤ê°¬ê°­ê°¯ê°°ê°±ê°¸ê°¹ê°¼ê±ê±ê±ê±ê±ê±ê±°ê±±ê±´ê±·ê±¸ê±ºê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê² ê²¡ê²¨ê²©ê²ªê²¬ê²¯ê²°ê²¸ê²¹ê²»ê²¼ê²½ê³ê³ê³ê³ê³ê³ê³ ê³¡ê³¤ê³§ê³¨ê³ªê³¬ê³¯ê³°ê³±ê³³ê³µê³¶ê³¼ê³½ê´ê´ê´ï¿½".split("");

  for (j = 0; j != D[176].length; ++j) if (D[176][j].charCodeAt(0) !== 0xFFFD) {
    e[D[176][j]] = 45056 + j;
    d[45056 + j] = D[176][j];
  }

  D[177] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼¡ì¼¢ì¼£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¼¥ì¼¦ì¼§ì¼¨ì¼©ì¼ªì¼«ì¼®ì¼²ì¼³ì¼´ì¼µì¼¶ì¼·ì¼¹ì¼ºì¼»ì¼¼ì¼½ì¼¾ì¼¿ì½ì½ì½ì½ì½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ì½ ì½¡ì½¢ì½£ì½¦ì½¨ì½ªì½«ì½¬ê´ê´ê´ê´ê´ê´ê´ ê´©ê´¬ê´­ê´´ê´µê´¸ê´¼êµêµêµêµêµêµêµêµ¡êµ£êµ¬êµ­êµ°êµ³êµ´êµµêµ¶êµ»êµ¼êµ½êµ¿ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶¤ê¶·ê·ê·ê·ê·ê·ê·ê·ê·ê· ê·¤ê·¸ê·¹ê·¼ê·¿ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸°ê¸±ê¸´ê¸·ê¸¸ê¸ºê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ ê¹¡ê¹¥ê¹¨ê¹©ê¹¬ê¹°ê¹¸ï¿½".split("");

  for (j = 0; j != D[177].length; ++j) if (D[177][j].charCodeAt(0) !== 0xFFFD) {
    e[D[177][j]] = 45312 + j;
    d[45312 + j] = D[177][j];
  }

  D[178] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì½­ì½®ì½¯ì½²ì½³ì½µì½¶ì½·ì½¹ì½ºì½»ì½¼ì½½ì½¾ì½¿ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ì¾ ì¾¢ì¾£ì¾¤ì¾¥ì¾¦ì¾§ì¾©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¾ªì¾«ì¾¬ì¾­ì¾®ì¾¯ì¾±ì¾²ì¾³ì¾´ì¾µì¾¶ì¾·ì¾¸ì¾¹ì¾ºì¾»ì¾¼ì¾½ì¾¾ì¾¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ê¹¹ê¹»ê¹¼ê¹½êºêºêºêº¼êº½êº¾ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»¨ê»«ê»­ê»´ê»¸ê»¼ê¼ê¼ê¼ê¼ê¼¬ê¼­ê¼°ê¼²ê¼´ê¼¼ê¼½ê¼¿ê½ê½ê½ê½ê½ê½ê½ê½ê½¤ê½¥ê½¹ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾¸ê¾¹ê¾¼ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿¨ê¿©ê¿°ê¿±ê¿´ê¿¸ëëëëëëëëë¨ëëëëëëëëëëëï¿½".split("");

  for (j = 0; j != D[178].length; ++j) if (D[178][j].charCodeAt(0) !== 0xFFFD) {
    e[D[178][j]] = 45568 + j;
    d[45568 + j] = D[178][j];
  }

  D[179] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿ì¿¢ì¿£ì¿¥ì¿¦ì¿§ì¿©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì¿ªì¿«ì¿¬ì¿­ì¿®ì¿¯ì¿²ì¿´ì¿¶ì¿·ì¿¸ì¿¹ì¿ºì¿»ì¿½ì¿¾ì¿¿íííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííííííííííííííííí í¡í¢í£í¤í¥í¦í§í¨í©íªí«í¬ëë¼ë½ëëëëëëëëëëëë ë¡ë¢ë¨ë©ë«ë¬ë­ë®ë¯ë±ë³ë´ëµë¸ë¼ëëëëëëëëëë ë¥ëëëëëëëëëëëëë£ë¤ë¥ë¨ë¬ë´ëµë·ë¸ë¹ëëëëëëëëëëë ë¸ë¹ë¼ëëëëëëëëëëëë¨ëëëëëï¿½".split("");

  for (j = 0; j != D[179].length; ++j) if (D[179][j].charCodeAt(0) !== 0xFFFD) {
    e[D[179][j]] = 45824 + j;
    d[45824 + j] = D[179][j];
  }

  D[180] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í®í¯í°í±í²í³í¶í·í¹íºí»í½í¾í¿ííííííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííííííííííí¡í¢í£í¤í¥í¦í§í¨í©íªí«í®í¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í±í²í³íµí¶í·í¸í¹íºí»í¾í¿ííííííííííííííííííííëë¨ë©ë¬ë°ë¹ë»ë½ëëëëëëëëëë ë´ë¼ëëë ë¨ë©ë´ëµë¼ëëëëëëëëëë ë¡ë£ë¥ë¦ëªë¬ë°ë´ëëëëëëëëëë¢ë¤ë¥ë¦ë¨ë«ë¬ë­ë®ë¯ë³ë´ëµë·ë¸ë¹ëºë»ë¿ëëëëëëëëëëëëëëëëëëë¤ë¥ï¿½".split("");

  for (j = 0; j != D[180].length; ++j) if (D[180][j].charCodeAt(0) !== 0xFFFD) {
    e[D[180][j]] = 46080 + j;
    d[46080 + j] = D[180][j];
  }

  D[181] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííííííííí í¡í¢í£í¦í§í©íªí«í­í®í¯í°í±í²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í³í¶í¸íºí»í¼í½í¾í¿íííííííííííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííí¡í¢í£í¥í¦í§í¨í©íªí«í®í²í³í´íµí¶í·í¹íºí»í¼í½í¾í¿íííííë§ë©ë«ë®ë°ë±ë´ë¸ëëëëëëëëë ë¡ë¨ë¬ëëëëëëëëëëëëëë ë¤ë¨ë¼ëëëë ë¨ë©ë«ë´ëëëëë ë¡ë£ë¥ë¬ëëëë¤ë¨ë¬ëµë·ë¹ëëëëëëëë ë£ë¤ë¦ë¬ë­ë¯ë±ë¸ëëëëëë¤ë¥ë§ë¨ë©ëªë°ë±ë´ë¸ï¿½".split("");

  for (j = 0; j != D[181].length; ++j) if (D[181][j].charCodeAt(0) !== 0xFFFD) {
    e[D[181][j]] = 46336 + j;
    d[46336 + j] = D[181][j];
  }

  D[182] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ííííííííííííííííííííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í í¡í¢í£í¤í¥í¦í§í¨í©íªí«í¬í­í®í¯í²í³íµí¶í·í¹í»í¼í½í¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¿ííííííííííííííííííííí í¢í£í¤í¥í¦í§í©íªí«í­ëëëëëëëëëëëëëë ë¡ë ë¡ë¤ë¨ëªë«ë°ë±ë³ë´ëµë»ë¼ë½ëëëëëëëëë¬ëëëëë¥ë¬ë´ëë¤ë¨ëëë ë¤ë«ë¬ë±ëë°ë´ë¸ëëëë¨ë©ë¬ë¯ë°ë¸ë¹ë»ëëëëëë ë¤ë¨ë°ë±ë³ëµë¼ë½ëëëëëëëëëëï¿½".split("");

  for (j = 0; j != D[182].length; ++j) if (D[182][j].charCodeAt(0) !== 0xFFFD) {
    e[D[182][j]] = 46592 + j;
    d[46592 + j] = D[182][j];
  }

  D[183] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í®í¯í°í±í²í³í´íµí¶í·í¸í¹íºí»í½í¾í¿íííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííííííííííííííííííí¢í£í¥í¦í§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í©íªí«í¬í­í®í¯í²í´í¶í·í¸í¹í»í½í¾í¿íííííííííííííííëëëë ë¨ë©ë«ë¬ë­ë´ëµë¸ëëë¬ë­ë°ë´ë¼ë½ë¿ë ë ë ë ë ë ë ë ë ë ë ë ¤ë ¥ë ¨ë ¬ë ´ë µë ·ë ¸ë ¹ë¡ë¡ë¡ë¡ë¡ë¡ë¡ ë¡¤ë¡¬ë¡­ë¡¯ë¡±ë¡¸ë¡¼ë¢ë¢¨ë¢°ë¢´ë¢¸ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£¡ë£¨ë£©ë£¬ë£°ë£¸ë£¹ë£»ë£½ë¤ë¤ë¤ ë¤¼ë¤½ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ ë¥¨ë¥©ï¿½".split("");

  for (j = 0; j != D[183].length; ++j) if (D[183][j].charCodeAt(0) !== 0xFFFD) {
    e[D[183][j]] = 46848 + j;
    d[46848 + j] = D[183][j];
  }

  D[184] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííííííííííííí í¡í¢í£í¤í¥í¦í§í¨í©íªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í«í¬í­í®í¯í°í±í²í³íµí¶í·í¹íºí»í¼í½í¾í¿íííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ííííííííííííííííííííííí í¡í¢í£í¤í¥í¦í§í¨í©ë¥«ë¥­ë¥´ë¥µë¥¸ë¥¼ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦¬ë¦­ë¦°ë¦´ë¦¼ë¦½ë¦¿ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§ë§¡ë§£ë§¤ë§¥ë§¨ë§¬ë§´ë§µë§·ë§¸ë§¹ë§ºë¨ë¨ë¨ë¨ë¨¸ë¨¹ë¨¼ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©¤ë©¥ë©§ë©¨ë©©ë©°ë©±ë©´ë©¸ëªëªëªëªëªëª¨ëª©ëª«ëª¬ëª°ëª²ëª¸ëª¹ëª»ëª½ë«ë«ë«ë«ë«¼ï¿½".split("");

  for (j = 0; j != D[184].length; ++j) if (D[184][j].charCodeAt(0) !== 0xFFFD) {
    e[D[184][j]] = 47104 + j;
    d[47104 + j] = D[184][j];
  }

  D[185] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íªí«í®í¯í±í²í³íµí¶í·í¸í¹íºí»í¾íííííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ííííííííííííííííííí í¡í¢í£í¥í¦í§í¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í©íªí«í¬í­í®í¯í°í±í²í³í´íµí¶í·í¸í¹íºí»í¼í½í¾í¿íííííííííë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ ë¬©ë¬«ë¬´ë¬µë¬¶ë¬¸ë¬»ë¬¼ë¬½ë¬¾ë­ë­ë­ë­ë­ë­ë­ë­ë­ë­¡ë­£ë­¬ë®ë®ë®ë®¤ë®¨ë®¬ë®´ë®·ë¯ë¯ë¯ë¯ë¯ë¯¸ë¯¹ë¯¼ë¯¿ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°¤ë°¥ë°§ë°©ë°­ë°°ë°±ë°´ë°¸ë±ë±ë±ë±ë±ë±ë±ë±ë±ë±ë²ë²ë²ë²ë²ë²ë²ë²ë²ï¿½".split("");

  for (j = 0; j != D[185].length; ++j) if (D[185][j].charCodeAt(0) !== 0xFFFD) {
    e[D[185][j]] = 47360 + j;
    d[47360 + j] = D[185][j];
  }

  D[186] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííííííííííííí¡í¢í£í¥í¦í§í¨í©íªí«í­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í®í¯í°í²í³í´íµí¶í·íºí»í½í¾íííííííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííííííííí í¡í¢í£í¦í§í¨í©íªí«í¬í­í®í¯í²í³íµí¶í·í¹íºë²ë²ë² ë²¡ë²¤ë²§ë²¨ë²°ë²±ë²³ë²´ë²µë²¼ë²½ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³´ë³µë³¶ë³¸ë³¼ë´ë´ë´ë´ë´ë´ë´¤ë´¬ëµëµëµëµëµëµëµëµ¤ëµ¨ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶¤ë¶°ë¶¸ë·ë·ë·ë·ë·©ë·°ë·´ë·¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ ë¹¡ë¹¤ï¿½".split("");

  for (j = 0; j != D[186].length; ++j) if (D[186][j].charCodeAt(0) !== 0xFFFD) {
    e[D[186][j]] = 47616 + j;
    d[47616 + j] = D[186][j];
  }

  D[187] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í»í¼í½í¾í¿íííííííííííííííííííí¢í£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¤í¦í§íªí«í­í®í¯í±í²í³í´íµí¶í·íºí¾í¿ííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ííííííííííííííííííííííí í¡í¢í£í¤í¥í¦í§í¨í©ë¹¨ë¹ªë¹°ë¹±ë¹³ë¹´ë¹µë¹»ë¹¼ë¹½ëºëºëºëºëºëºëºëºëºëº¨ë»ë»ë»ë»ë»ë» ë»£ë»¤ë»¥ë»¬ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë½ë½ë½ë½ë½ë½ë½ë¾ë¾°ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿¡ì¼ìììì ì¨ì©ììììì ì¡ì£ì¥ì¬ì­ì¯ì°ì³ì´ìµì¶ì¼ì½ì¿ììììììììììììì¤ï¿½".split("");

  for (j = 0; j != D[187].length; ++j) if (D[187][j].charCodeAt(0) !== 0xFFFD) {
    e[D[187][j]] = 47872 + j;
    d[47872 + j] = D[187][j];
  }

  D[188] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íªí«í¬í­í®í¯í°í±í²í³í´íµí¶í·í¸í¹íºí»í¾í¿ííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ííííííííííííííííí¡í¢í£í¤í¥í¦í§íªí¬í®ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¯í°í±í²í³íµí¶í·í¹íºí»í½í¾í¿ííííííííííííííííííì¥ì¨ì¬ì´ìµì·ì¹ìììììììììì ì£ì¤ì¦ì§ì¬ì­ì¯ì°ì±ì¶ì¸ì¹ì¼ììììììììììì¤ì¥ì§ì¨ì©ì°ì´ì¸ììììììììììì¡ì¥ì¨ì©ì¬ì°ì½ììììììì ì¤ì¨ì°ì±ì³ì¼ì½ììììììììììì ì¨ì©ì«ì­ï¿½".split("");

  for (j = 0; j != D[188].length; ++j) if (D[188][j].charCodeAt(0) !== 0xFFFD) {
    e[D[188][j]] = 48128 + j;
    d[48128 + j] = D[188][j];
  }

  D[189] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ííííííííí í¢í¤í¥í¦í§í¨í©íªí«í®í¯í±í²í³íµí¶í·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¸í¹íºí»í¾íííííííííííííííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ííííííííí í¡í¢í£í¤í¥í¦í§í¨í©íªí«í¬í­í®í¯í°í±í²í³í´íµí¶í·ì¯ì±ì²ì´ìììììì ì¥ì¬ì­ì°ì´ì¼ì½ì¿ìììììììì¤ì¥ì¨ì¬ì­ì´ìµì·ì¹ììì ì£ì¤ì«ì¬ì­ì¯ì±ì¶ì¸ì¹ì»ì¼ììììììììììì¤ì¥ì¨ì©ìì¨ì©ì¬ì°ì²ì¸ì¹ì¼ì½ììììììììì ì¢ì¨ì©ì­ì´ìµì¸ììì¤ì¬ì°ï¿½".split("");

  for (j = 0; j != D[189].length; ++j) if (D[189][j].charCodeAt(0) !== 0xFFFD) {
    e[D[189][j]] = 48384 + j;
    d[48384 + j] = D[189][j];
  }

  D[190] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¸í¹íºí»í¼í½í¾í¿ííííííííííííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííííííííí¡í¢í£í¥í¦í§í¨í©íªí«í¬í®í°í±í²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í³í´íµí¶í·íºí»í½í¾íííííííííííííííííííííííì´ì¼ì½ìì¤ì¥ì¨ì¬ì´ìµì¹ìììì¸ì¼ì©ì°ì±ì´ì¸ìºì¿ììììììì¨ì©ì¬ì°ì¸ì¹ì»ì½ììììììììììììììììì ì¡ì¤ì¨ì°ì±ì³ì´ìµì¼ì½ìììììììììììì ì©ì´ìµì¸ì¹ì»ì¼ì½ì¾ìììììììììï¿½".split("");

  for (j = 0; j != D[190].length; ++j) if (D[190][j].charCodeAt(0) !== 0xFFFD) {
    e[D[190][j]] = 48640 + j;
    d[48640 + j] = D[190][j];
  }

  D[191] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ííí í¡í¢í£í¤í¥í¦í§í¨íªí«í¬í­í®í¯í°í±í²í³í´íµí¶í·í¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¹íºí»í¼í½í¾í¿íííííííííííííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ííííííííí í¡í¢í£í¤í¥í¦í§í©íªí«í­í®í¯í±í²í³í´íµí¶í·í¹íºí¼ììììì ì¡ì£ì¥ì¬ì­ì®ì°ì´ì¶ì·ì¼ì½ì¾ì¿ììììììììììììì¤ì¥ì¨ì¬ì­ì®ì°ì³ì´ìµì·ì¹ì»ìììììììììììì ì¬ì¯ì±ì¸ì¹ì¼ìììììììììì¤ì¥ì§ì©ì°ì±ì´ì¸ì¹ìºììììììììììì ì¡ì¨ï¿½".split("");

  for (j = 0; j != D[191].length; ++j) if (D[191][j].charCodeAt(0) !== 0xFFFD) {
    e[D[191][j]] = 48896 + j;
    d[48896 + j] = D[191][j];
  }

  D[192] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¾í¿ííííííííííííííííííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ííí í¡í¢í£í¤í¥í¦í§í¨í©íªí«í¬í­í®í¯í°í±í²í³í´íµí¶í·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¸í¹íºí»í¾í¿íííííííííííííííííííííííí¡í¢í£ì©ì¬ì°ì¸ì¹ì½ììììììììì ì¡ì¤ì¨ì°ì±ì³ìµì·ì¼ì½ìììììììììììììììì ì¨ì«ì´ìµì¸ì¼ì½ì¾ìììììììììììììììì ì¡ì£ì¤ì¥ì¦ì¬ì­ì°ì´ì¼ì½ì¿ìììììììììì¤ì¨ì¬ì ì ì ì ì ï¿½".split("");

  for (j = 0; j != D[192].length; ++j) if (D[192][j].charCodeAt(0) !== 0xFFFD) {
    e[D[192][j]] = 49152 + j;
    d[49152 + j] = D[192][j];
  }

  D[193] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¤í¦í§íªí¬í®í¯í°í±í²í³í¶í·í¹íºí»í½í¾í¿íííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííííííííííííííííí í¡í¢í£í¤í¦í§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¨í©íªí«í¬í­í®í¯í°í±í²í³í´íµí¶í·í¸í¹íºí»í¼í½í¾í¿ííííííííì ì ì ì ì ì ì ì  ì ¤ì ¬ì ­ì ¯ì ±ì ¸ì ¼ì¡ì¡ì¡ì¡ì¡ì¡ì¡°ì¡±ì¡´ì¡¸ì¡ºì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢¡ì¢¨ì¢¼ì¢½ì£ì£ì£ì£ì£ì£ì£ì£ ì£¡ì£¤ì£µì£¼ì£½ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤¬ì¤´ì¥ì¥ì¥ì¥ì¥ ì¥¡ì¥£ì¥¬ì¥°ì¥´ì¥¼ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì§ì§ì§ì§ì§ì§ì§ì§ì§ï¿½".split("");

  for (j = 0; j != D[193].length; ++j) if (D[193][j].charCodeAt(0) !== 0xFFFD) {
    e[D[193][j]] = 49408 + j;
    d[49408 + j] = D[193][j];
  }

  D[194] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííííííííííííí í¡í¢í£í¦í§í©íªí«í­í®ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¯í°í±í²í³í¶í¸íºí»í¼í½í¾í¿íííííííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííííííí¡í¢í£í¥í¦í§í¨í©íªí«í¬í®í¯í°í±í²í³í´íµí¶í·íºí»ì§ì§ì§ì§ì§ì§ì§ ì§¢ì§¤ì§§ì§¬ì§­ì§¯ì§°ì§±ì§¸ì§¹ì§¼ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨©ì©ì©ì©ì©ì©ì©ì©ì© ì©¡ì©¨ì©½ìªìªìª¼ìª½ì«ì«ì«ì«ì«ì«ì«ì«ì«ì« ì«¬ì«´ì¬ì¬ì¬ì¬ì¬ ì¬¡ì­ì­ì­ì­ì­ì­ì­ì­ì­¤ì­¸ì­¹ì®ì®¸ì¯ì¯¤ì¯§ì¯©ì°ì°ì°ì°ì°ì°ì°¡ì°¢ì°§ì°¨ì°©ì°¬ì°®ì°°ì°¸ì°¹ì°»ï¿½".split("");

  for (j = 0; j != D[194].length; ++j) if (D[194][j].charCodeAt(0) !== 0xFFFD) {
    e[D[194][j]] = 49664 + j;
    d[49664 + j] = D[194][j];
  }

  D[195] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í½í¾í¿íííííííííííííííííííííí í¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¢í£í¤í¥í¦í¨íªí«í¬í­í®í¯í²í³íµí¶í·í¸í¹íºí»í¼í½í¾í¿íï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííííííííííííííííííííí í¢í£í¤í¥í¦í§í©íªì°¼ì°½ì°¾ì±ì±ì±ì±ì±ì±ì±ì±ì±ì± ì±¤ì±¦ì±¨ì±°ì±µì²ì²ì²ì² ì²¨ì²©ì²«ì²¬ì²­ì²´ì²µì²¸ì²¼ì³ì³ì³ì³ì³ì³ì³¤ì³¬ì³°ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´¤ì´¨ì´¬ì´¹ìµìµ ìµ¤ìµ¬ìµ­ìµ¯ìµ±ìµ¸ì¶ì¶ì¶ì¶ì¶ì¶¤ì¶¥ì¶§ì¶©ì¶°ì·ì·ì·ì·¨ì·¬ì·°ì·¸ì·¹ì·»ì·½ì¸ì¸ì¸ì¸ì¸ì¸ ì¸¡ì¸¤ì¸¨ì¸°ì¸±ì¸³ì¸µï¿½".split("");

  for (j = 0; j != D[195].length; ++j) if (D[195][j].charCodeAt(0) !== 0xFFFD) {
    e[D[195][j]] = 49920 + j;
    d[49920 + j] = D[195][j];
  }

  D[196] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í«í­í®í¯í±í²í³í´íµí¶í·í¸íºí¼í½í¾í¿íííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííííííííííííí¡í¢í£í¥í¦í§í©íªí«í¬í­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í®í¯í±í²í³í´í¶í·í¸í¹íºí»í¾í¿ííííííííííííííííííì¹ì¹ì¹ì¹ì¹ ì¹¡ì¹¨ì¹©ì¹«ì¹­ì¹´ì¹µì¹¸ì¹¼ìºìºìºìºìºìºìºìºìº ìº¡ìº£ìº¤ìº¥ìº¬ìº­ì»ì»¤ì»¥ì»¨ì»«ì»¬ì»´ì»µì»·ì»¸ì»¹ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ ì¼¤ì¼¬ì¼­ì¼¯ì¼°ì¼±ì¼¸ì½ì½ì½ì½ì½¤ì½¥ì½§ì½©ì½°ì½±ì½´ì½¸ì¾ì¾ì¾ì¾¡ì¾¨ì¾°ì¿ì¿ ì¿¡ì¿¤ì¿¨ì¿°ì¿±ì¿³ì¿µì¿¼ííííí­í´íµí¸í¼ï¿½".split("");

  for (j = 0; j != D[196].length; ++j) if (D[196][j].charCodeAt(0) !== 0xFFFD) {
    e[D[196][j]] = 50176 + j;
    d[50176 + j] = D[196][j];
  }

  D[197] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ííííííííí¡í¢í£í¤í¥í¦í§íªí¬í®í¯í°í±í²í³í¶í·í¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íºí»í½í¾í¿íííííííííííííííííííííï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íí¢í¤í¦í§í¨íªí«í­í®í¯í±í²í³íµí¶í·í¸í¹íºí»í¾í¿ííííííííííííííííí í¬í­í°í´í¼í½íí¤í¥í¨í¬í´íµí·í¹ííííííííííííí í¤í¬í­í¯í°í±í¸íí°í±í´í¸íºííííííííííííí¡í¨í¬í¼ííí í¡í¤í¨í°í±í³íµíºí¼ííí´í¸íííí¬í­í°í´í¼í½í¿íííï¿½".split("");

  for (j = 0; j != D[197].length; ++j) if (D[197][j].charCodeAt(0) !== 0xFFFD) {
    e[D[197][j]] = 50432 + j;
    d[50432 + j] = D[197][j];
  }

  D[198] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ííííííííííííííí í¡í¢í£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¤ííííííííí í¤í¬í±í¸í¹í¼í¿ííííííííí¤í¥í°í±í´í¸íííííííííííííí í¡í¥í¨í©í¬í°í¸í¹í»í¼í½ííí¼í½ííííííííííí í¨í©í«í­í´í¸í¼ííííííí¡í£í¬í­í°í´í¼í½í¿íï¿½".split("");

  for (j = 0; j != D[198].length; ++j) if (D[198][j].charCodeAt(0) !== 0xFFFD) {
    e[D[198][j]] = 50688 + j;
    d[50688 + j] = D[198][j];
  }

  D[199] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½íííííí í¤í­í¯í¸í¹í¼í¿íííííííí©íííííí¨í¬í°í¸í»í½ííííííí¼í½íííííííííí í¥í¨í©í«í­í´íµí¸í¼ííííííí¥íííííííííí¤í¥í¨í¬í´íµí·í¹ííííííííííí ï¿½".split("");

  for (j = 0; j != D[199].length; ++j) if (D[199][j].charCodeAt(0) !== 0xFFFD) {
    e[D[199][j]] = 50944 + j;
    d[50944 + j] = D[199][j];
  }

  D[200] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½í¤í­í¸í¹í¼íííííííííííí§í©í°í±í´ííííííííí¡í¨í¬í°í¹í»ííííííííí í¤í¨í°íµí¼í½ííííííí í¨í©í«í­í´íµí¸í¼ííííííííííí í¡í£í¥í©í¬í°í´í¼í½íííííííííï¿½".split("");

  for (j = 0; j != D[200].length; ++j) if (D[200][j].charCodeAt(0) !== 0xFFFD) {
    e[D[200][j]] = 51200 + j;
    d[51200 + j] = D[200][j];
  }

  D[202] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¼½ä½³åå¹å å¯åµå¥åå«å®¶ææ¶æ·æ¯æ­ççç¨¼èèè¡è¢è¨¶è³è·è»»è¿¦é§å»å´åæªæ¤æ®¼çèè¦ºè§é£ä¾åå¢¾å¥¸å§¦å¹²å¹¹ææææ¬æ¡¿æ¾ççç£µç¨ç«¿ç°¡èè®è±è««éä¹«åæ·æ¸´ç¢£ç«­èè¤èé¨ååå ªåµææ¾æ¡æ¢ææ©æ¸çç³ç£ç°ç´ºé¯ééé¾ï¿½".split("");

  for (j = 0; j != D[202].length; ++j) if (D[202][j].charCodeAt(0) !== 0xFFFD) {
    e[D[202][j]] = 51712 + j;
    d[51712 + j] = D[202][j];
  }

  D[203] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å£å²¬ç²èééåå å§å²¡å´åº·å¼ºå½æ·æ±çºçç³ çµ³ç¶±ç¾èè¡èè¥è¬é¼éé±ä»ä»·åå±å¡æ·æ¾æ¨æ¹æ§ªæ¼ç¥ççç®è¥èï¤é§éåå®¢åï¤ç²³ç¾¹éµå¨å»å±å·¨ææ®ææ§æ¸ ç¬ç¥è·è¸ï¤é½éé¸ä¹¾ä»¶å¥å·¾å»ºææ¥è±èè¹éµé¨«ä¹åæ°æ¡åååæª¢ï¿½".split("");

  for (j = 0; j != D[203].length; ++j) if (D[203][j].charCodeAt(0) !== 0xFFFD) {
    e[D[203][j]] = 51968 + j;
    d[51968 + j] = D[203][j];
  }

  D[204] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¼éé»å«æ¯è¿²åæ©æ­ææ ¼æªæ¿èè¦¡éå ç½ç¬ççµ¹ç¹­è©è¦è­´é£éµææ±ºæ½çµç¼ºè¨£å¼æç®è¬ééäº¬ä¿åå¾åååå¿å°å¢åºå¾æ¶æ¬ææ¬æ¯æ»æ´æ¢æ¶çç±çç¥ççç¡¬ç£¬ç«ç«¶çµç¶èè¿èèè­¦è¼éé¡é é ¸é©é¯¨ä¿åå ºå¥å­£å±æ¸ææ¡æ¢°ï¿½".split("");

  for (j = 0; j != D[204].length; ++j) if (D[204][j].charCodeAt(0) !== 0xFFFD) {
    e[D[204][j]] = 52224 + j;
    d[52224 + j] = D[204][j];
  }

  D[205] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ£¨æºªçç¸ç£ç¨½ç³»ç¹«ç¹¼è¨èª¡è°¿éé·å¤å©åå±åºå§å­¤å°»åº«æ·æ·ææ²æ æ¯æ§æ²½ç¼çç¾ç¨¿ç¾èè¡èè¦è½è°èè ±è¢´èª¥ï¤è¾é®éé¡§é«é¼å­ææ²æ¢ç©è°·éµ å°å¤å´ææ¢±æ£æ»¾ç¨è¢é¯¤æ±¨ï¤éª¨ä¾å¬å±åå­å·¥ææ­æ±æ§æ»çç©ºè£è²¢éä¸²å¯¡ææçï¿½".split("");

  for (j = 0; j != D[205].length; ++j) if (D[205][j].charCodeAt(0) !== 0xFFFD) {
    e[D[205][j]] = 52480 + j;
    d[52480 + j] = D[205][j];
  }

  D[206] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç§èèªèª²è·¨ééé¡å»æ§¨è¿é­ï¤å å®å¯¬æ£æ£ºæ¬¾çç¯çç®¡ç½èè§è²«éé¤¨å®ææ¬éä¾åå¡å£å»£æ æ´¸çççç­è±éå¦æç½«ä¹åå¡å£æªæ§ææ§é­å®ç´è±è½äº¤åå¬å¬å¬å¶ å·§æªææ ¡æ©ç¡çç¯çµç¿¹è èèè¼è½éé¤é©é®«ä¸ä¹ä¹ä»ä¿±å·å¾ï¿½".split("");

  for (j = 0; j != D[206].length; ++j) if (D[206][j].charCodeAt(0) !== 0xFFFD) {
    e[D[206][j]] = 52736 + j;
    d[52736 + j] = D[206][j];
  }

  D[207] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åå£å¥åååµå¢å¯å¶å»æ¼æææ¸æ©æ§æ­æ¯æ¯¬æ±æºç¸çççç¿ç©ç©¶çµ¿èè¼èèèè¡¢è¬³è³¼è»éé±é¤é¶é§é©é³©é·é¾åå±èé é«éº´åçªç¾¤è£è»é¡å å±æçªå®®å¼ç©¹çª®èèº¬å¦å¸å¸å·åæ³æ²æ¬æ·ç·å¥çè¨è¹¶éæºæ«æ½°è©­è»é¥ï¤æ·æ­¸è²´ï¿½".split("");

  for (j = 0; j != D[207].length; ++j) if (D[207][j].charCodeAt(0) !== 0xFFFD) {
    e[D[207][j]] = 52992 + j;
    d[52992 + j] = D[207][j];
  }

  D[208] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¬¼ï¤å«å­å¥ææ§»çªç¡çªºç«ç³¾èµè¦èµ³éµé¨å»åçç­ èéï¤æ©åååææ£æ¥µéåå¤å¤ææ¤æ ¹æ§¿ç¾ç­è¹è«è¦²è¬¹è¿é¥ï¤ä»å¦æææªç´ç¦ç¦½è©è¡¾è¡¿è¥ï¤é¦ä¼åæ¥æ±æ±²ç´çµ¦äºå¢çè¯ä¼ä¼å¶ååå¨å»åºå¼å¤å¥å¦å¯å²å´å·±å¹¾å¿æææ£ï¿½".split("");

  for (j = 0; j != D[208].length; ++j) if (D[208][j].charCodeAt(0) !== 0xFFFD) {
    e[D[208][j]] = 53248 + j;
    d[53248 + j] = D[208][j];
  }

  D[209] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ææææ£æ£æ©æ¬ºæ°£æ±½æ²æ·çç¦çªçç£ç¸ç¿ç¢ç£¯ç¥ç¥ç¥ç¥ºç®ç´ç¶ºç¾èè­èè¨è­è±èµ·é¡é¤é£¢é¥é¨é¨é©¥éºç·ä½¶åæ®æ¡éå«åºï¤ï¤å¨æ¦ï¤ææ¿ï¤ï¤ï¤ï¤ï¤ï¤é£ï¤ï¤ï¤ï¤ï¤è«¾ï¤ï¤ï¤ï¤æï¤çï¤ï¤é£ï¤ ææºåï¤¡ææ¥ æ¹³ï¤¢ç·ï¤£ï¤¤ï¤¥ï¿½".split("");

  for (j = 0; j != D[209].length; ++j) if (D[209][j].charCodeAt(0) !== 0xFFFD) {
    e[D[209][j]] = 53504 + j;
    d[53504 + j] = D[209][j];
  }

  D[210] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç´ï¤¦ï¤§è¡²åå¨ï¤¨ï¤©ï¤ªï¤«ï¤¬ä¹ï¤­å§å¥æ°èï¤®å¥³å¹´æç§å¿µæ¬ææ»å¯§å¯åªï¤¯å¥´å¼©æï¤°ï¤±ï¤²çï¤³ï¤´ï¤µï¤¶ï¤·ï¤¸é§ï¤¹ï¤ºï¤»ï¤¼ï¤½ï¤¾ï¤¿ï¥ï¥ï¥ï¥æ¿ï¥ï¥è¿è¾²æ±ï¥ï¥è¦ï¥ï¥å°¿ï¥ï¥ï¥ï¥ï¥ï¥ï¥ï¥å«©è¨¥æ»ç´ï¥ï¥ï¥ï¥ï¥ï¥è½ï¥ï¥å°¼æ³¥å¿æººå¤è¶ï¿½".split("");

  for (j = 0; j != D[210].length; ++j) if (D[210][j].charCodeAt(0) !== 0xFFFD) {
    e[D[210][j]] = 53760 + j;
    d[53760 + j] = D[210][j];
  }

  D[211] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¸¹äº¶ä½å®åå£å½æ·æ¦æªæ®µæ¹ç­ç«¯ç°ç·èè¢é²éæ»æ¾¾çºç¸éååæºæææ·¡æ¹æ½­æ¾¹ç°èè½èè¦è«è­éæ²çç­è¸éåå å¡å¹¢æææ£ ç¶ç³è³é»¨ä»£åå®å¤§å°å²±å¸¶å¾æ´æ¡ç³èºè¢è²¸éé»å®å¾·æ³ååå°åå µå¡å°å± å³¶å¶åº¦å¾æ¼ææææ¡ï¿½".split("");

  for (j = 0; j != D[211].length; ++j) if (D[211][j].charCodeAt(0) !== 0xFFFD) {
    e[D[211][j]] = 54016 + j;
    d[54016 + j] = D[211][j];
  }

  D[212] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ£¹æ«æ·æ¸¡æ»æ¿¤ç¾çç¹ç¦±ç¨»èè¦©è³­è·³è¹éééé½éé¶éæ¯ççç¢ç¨ç£ç¦¿ç¯¤çºè®å¢©ææ¦æ½æ¾æ²ççè±é ä¹­çªä»å¬åååæ§æ±æ¡æ£æ´æ½¼ç¼ç³ç«¥è´è£éåæææçç«è³ï¥è±éé ­å±¯èèéé¯éå¾å¶æ©çç»ç­è¤è¬é§é¨°åæ¶ï¥ç©ç¾ï¿½".split("");

  for (j = 0; j != D[212].length; ++j) if (D[212][j].charCodeAt(0) !== 0xFFFD) {
    e[D[212][j]] = 54272 + j;
    d[54272 + j] = D[212][j];
  }

  D[213] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¿èºè£¸éï¥æ´çççµ¡è½ï¥éªé§±ï¥äºåµæ¬æ¬ç¾çè­é¸åè¾£åµæ¥æ¬æ¬æ¿«ç±çºèè¥¤è¦½æèè å»ææµªç¼çç¯èéä¾å´å¾ èå·æ ç¥äº®åå©åæ¢æ¨ç²®ç²±ç³§è¯è«è¼éä¾¶å·åµåå»¬æ®æ¾ææ«æ¿¾ç¤ªèè £é­é©¢é©ªéºé»åææ­·çç¤«è½¢éæææ£æ¼£ï¿½".split("");

  for (j = 0; j != D[213].length; ++j) if (D[213][j].charCodeAt(0) !== 0xFFFD) {
    e[D[213][j]] = 54528 + j;
    d[54528 + j] = D[213][j];
  }

  D[214] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ççç·´è¯è®è¼¦é£éå½åå£æ´çè£å»ææ®®æ¿ç°¾çµä»¤ä¼¶å¹ï¥å²ºå¶ºæç²ç¬­ç¾ç¿èéé´é¶éé é½¡ä¾æ¾§ç¦®é´é·åï¥ æææ«æ½ççç§èèèè·¯è¼é²é­¯é·ºé¹µç¢ç¥¿ç¶ èéé¹¿éºè«å£å¼æ§ç§çç± è¾å¡ç¨ç¢ç£è³è³è³´é·äºåå¯®å»æççç­èè¼ï¿½".split("");

  for (j = 0; j != D[214].length; ++j) if (D[214][j].charCodeAt(0) !== 0xFFFD) {
    e[D[214][j]] = 54784 + j;
    d[54784 + j] = D[214][j];
  }

  D[215] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¼é¬§é¾å£å©å±¢æ¨æ·æ¼ç»ç´¯ç¸·èè¤¸é¤éåææ³æ¦´æµæºççç çç¤ç¡«è¬¬é¡å­æ®é¸ä¾å«å´æ·ªç¶¸è¼ªå¾ææ ï¥¡éåèååæ¥ç¨ç¶¾è±éµä¿å©åååå±¥æ§ææ¢¨æµ¬çç¸ççï¥¢ç¢ç±¬ç½¹ç¾¸èè£è£¡ééé¢é¯åæ½¾ççèºèºªé£é±éºææ·ç³è¨éç ¬ï¿½".split("");

  for (j = 0; j != D[215].length; ++j) if (D[215][j].charCodeAt(0) !== 0xFFFD) {
    e[D[215][j]] = 55040 + j;
    d[55040 + j] = D[215][j];
  }

  D[216] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç«ç¬ ç²æ©çªç²ç¢¼ç£¨é¦¬é­éº»å¯å¹æ¼ èè«éä¸åå¨©å·å½æ¢æ½æ©æ¼æ»¿æ¼«ç£çè¬èè »è¼é¥é°»åæ¹æ«æ²«èè¥ªéºäº¡å¦å¿å¿æç¶²ç½èè«è½è¼éåå¦¹åªå¯æ§ææ¢æ¯ç¤ç½µè²·è³£éé­èè²éé©éº¥å­æ°çç²çèåªè¦åååæ£æ²çç ç¶¿ç·¬é¢éºµæ»ï¿½".split("");

  for (j = 0; j != D[216].length; ++j) if (D[216][j].charCodeAt(0) !== 0xFFFD) {
    e[D[216][j]] = 55296 + j;
    d[55296 + j] = D[216][j];
  }

  D[217] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èå¥åå½æææ¤§æºç¿çèèèé©éé³´è¢ä¾®ååå§å¸½ææ¸æ¹æ®ææ¨¡æ¯æ¯çç¡çç¸çèè¼èè¬è¬¨è²æ¨æ²ç§ç®ç¦ç©é¶©æ­¿æ²å¤¢æ¦èå¯å¢å¦å»ææ´æ³æ¸ºç«ç«èé¨åå·«æ®ææææ«æ æ¥æ­¦æ¯ç¡ç·çç¹èèèªèª£è²¿é§éµ¡å¢¨é»ååå»åæï¿½".split("");

  for (j = 0; j != D[217].length; ++j) if (D[217][j].charCodeAt(0) !== 0xFFFD) {
    e[D[217][j]] = 55552 + j;
    d[55552 + j] = D[217][j];
  }

  D[218] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ±¶ç´ç´èèéé¯å¿æ²ç©å³åªå°¾åµå½å¾®æªæ¢¶æ¥£æ¸¼æ¹çç±³ç¾èè¬è¿·é¡é»´å²·æ¶ææ«ææ»æ¼æ°æ³¯ççç·¡éå¯èè¬ååæææ²æ´æ¨¸æ³ççç®ç²ç¸èè¶èè¿«é¹é§ä¼´åååææ¬æææ§æ³®æ½ç­çç¢ç¤ç¼ç£ç£»ç¤¬çµè¬è è¿é é£¯åææ¥æ¸¤æ½ï¿½".split("");

  for (j = 0; j != D[218].length; ++j) if (D[218][j].charCodeAt(0) !== 0xFFFD) {
    e[D[218][j]] = 55808 + j;
    d[55808 + j] = D[218][j];
  }

  D[219] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¼è·é±é¢é«®é­å£ååå¦¨å°¨å¹å½·æ¿æ¾æ¹ææææ¦æ»ç£ç´¡èªèè«è³è¡èè¨ªè¬é¦é²é¾åä¿³ï¥£å¹å¾æææ¯æ¹ççèèè£´è£µè¤è³ è¼©ééªä¼¯ä½°å¸ææ ¢ç½ç¾é­å¹¡æ¨ç©ççªï¥¤ç¹èè©é£ä¼ç­ç½°é¥å¡å¸æ¢µæ°¾æ±æ³ç¯ç¯èæ³çºå»åå£ææªç§çï¿½".split("");

  for (j = 0; j != D[219].length; ++j) if (D[219][j].charCodeAt(0) !== 0xFFFD) {
    e[D[219][j]] = 56064 + j;
    d[56064 + j] = D[219][j];
  }

  D[220] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¢§èé¢é¹ï¥¥åå¼è®è¾¨è¾¯éå¥ç¥é±é¼ä¸ååµå±å¹·ææºææ£ç³ççç§ç«è¼§é¤ é¨ä¿å ¡å ±å¯¶æ®æ­¥æ´æ¹ºæ½½ç¤ç«è©è£è¤è­è¼ä¼åååå®å¾©æç¦è¹è¯èè¤è¦è¼¹è¼»é¦¥é°æ¬ä¹¶ä¿¸å¥å°å³¯å³°æ§æ£ç½ç¢ç«ç¸«è¬èé¢éé³³ä¸ä»ä¿¯ååå¯å¦åå å¤«å©¦ï¿½".split("");

  for (j = 0; j != D[220].length; ++j) if (D[220][j].charCodeAt(0) !== 0xFFFD) {
    e[D[220][j]] = 56320 + j;
    d[56320 + j] = D[220][j];
  }

  D[221] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å­å­µå¯åºï¥¦æ¶æ·æ§æµ®æº¥ç¶ç¬¦ç°¿ç¼¶èèèèèè©è¨è² è³¦è³»èµ´è¶ºé¨éééé§é³§ååå©å´å¢³å¥å¥®å¿¿æ¤æ®ææ±¾ççç²ç³ç´è¬è³é°ï¥§ä½å¼å½¿æå´©ææ£ç¡¼ç¹éµ¬ä¸åååªåå¦å©¢åºæ²æææ¹æææ¦§æ¯æ¯æ¯æ¯æ²¸ï¥¨çµçºç ç¢ç§ç§ç²ç·ç¿¡è¥ï¿½".split("");

  for (j = 0; j != D[221].length; ++j) if (D[221][j].charCodeAt(0) !== 0xFFFD) {
    e[D[221][j]] = 56576 + j;
    d[56576 + j] = D[221][j];
  }

  D[222] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¾èè²èè£¨èª¹è­¬è²»ééé£é¼»å¬å¬ªå½¬ææª³æ®¯æµæ¿±ççç­è²§è³é »ææ°·èé¨ä¹äºäºä»ä¼ºä¼¼ä½¿ä¿å¿å²å¸åå£åå£«å¥¢å¨å¯«å¯ºå°å·³å¸«å¾ææ¨ææ¯æ¶æ»æ¢­æ­»æ²æ³æ¸£ççç ç¤¾ç¥ç¥ ç§ç¯©ç´çµ²èèèèèè£è©è©è¬è³èµ¦è¾­éªé£¼é§éºåï¥©æï¥ªï¿½".split("");

  for (j = 0; j != D[222].length; ++j) if (D[222][j].charCodeAt(0) !== 0xFFFD) {
    e[D[222][j]] = 56832 + j;
    d[56832 + j] = D[222][j];
  }

  D[223] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ååªå±±æ£æ±çç£çç®èé¸é°ä¹·ææ®ºçè©ä¸ï¥«ææ£®æ¸èèè¡«æ·æ¾éé¢¯ä¸å·ååååªåå­å°å³ å¸¸åºåº å»æ³æ¡æ©¡æ¹ç½ççç¸ç¥¥ç®±ç¿è£³è§´è©³è±¡è³éå¡ç½è³½åï¥¬ç©¡ç´¢è²ç²çç¥ï¥­ç¬å¢å£»å¶¼åºåº¶å¾æææ¿ææææ¸æ æ£²ççç­®çµ®ç·ç½²ï¿½".split("");

  for (j = 0; j != D[223].length; ++j) if (D[223][j].charCodeAt(0) !== 0xFFFD) {
    e[D[223][j]] = 57088 + j;
    d[57088 + j] = D[223][j];
  }

  D[224] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¥èè¯è¥¿èªéé¤é»é¼ å¤å¥­å¸­æææ³ææ±æ·æ½ç³ç¢©èéé«ä»åååå¬å®£ææ¾ææ¸²ç½çççç¿ç¬ç¦ªç·ç¹ç¾¨èºè³è¹èè¬è©µè·£é¸éé¥é¥é®®å¨å±æ¥æ³æ´©æ¸«èèè¤»è¨­èªªéªé½§å¡æ¹æ®²çºè¾è´ééææ¶ç®ï¥®åå§å®¬æ§æºæææç©ç¹ççç­¬ï¿½".split("");

  for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 0xFFFD) {
    e[D[224][j]] = 57344 + j;
    d[57344 + j] = D[224][j];
  }

  D[225] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èè²è¥èª éä¸å¢æ­²æ´ç¨ç¬¹ç´°ï¥¯è²°å¬å¯å¡å®µå°å°å·¢ææææ­æ¢³æ²¼æ¶æº¯çç¤çç¦çççç¬ç¯ ç°«ç´ ç´¹è¬è­èè¨´éé¡éµé·é¶é¨·ä¿å±¬ææ¶ç²çºè¬è´éå­«å·½æèéé£¡çå®ææ¾æ·è¨èª¦éé å·ï¥°çç¢éè¡°éä¿®åå½ååå£½å«å®å²«å³å¸¥æï¿½".split("");

  for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 0xFFFD) {
    e[D[225][j]] = 57600 + j;
    d[57600 + j] = D[225][j];
  }

  D[226] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æææææ¶æ¸æ¨¹æ®æ°´æ´æ¼±ç§ç©ç¸çç²ç¦ç¡ç§ç©ç«ªç²¹ç¶ç¶¬ç¹¡ç¾è©è±èèèªè¢èª°è®è¼¸ééé¬éé¹éé§é¨ééé é¦é«é¬åå¡¾å¤å­°å®¿æ·æ½çç¡ç¹èè½å·¡å¾å¾ªææ¬æ æ¥¯æ©æ®æ´µæ·³ç£ç¾ç¬ç­ç´è£èèè´è£è©¢è«ééé é¦´æè¡è¿°é¥å´å´§ï¿½".split("");

  for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 0xFFFD) {
    e[D[226][j]] = 57856 + j;
    d[57856 + j] = D[226][j];
  }

  D[227] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åµ©çèè¨æ¿æ¾ç¿è¤¶è¥²ä¸ä¹å§ååæ¿æç¹©è éä¾åå¶å§åª¤å°¸å±å±å¸å¼ææ½æ¯ææ¾æ´çç¢ç¤ºç¿èèè¦è©¦è©©è«¡è±è±ºå´å¯å¼æ¯æ­æ¤æ®æ¹çç¯èè­è»¾é£é£¾ä¼¸ä¾ä¿¡å»å¨ å®¸æ¼æ°æ¨ç¼ç³ç¥ç´³èè£èèªèèè¨èº«è¾ï¥±è¿å¤±å®¤å¯¦æå¯©å°å¿æ²ï¿½".split("");

  for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 0xFFFD) {
    e[D[227][j]] = 58112 + j;
    d[58112 + j] = D[227][j];
  }

  D[228] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¥²æ·±ççè¯è«¶ä»åï¥³éæ°äºä¿ååå¨¥å³¨æçè½èªè¾è¡è¨é¿éé¤é´éµå å²³å¶½å¹æ¡ææ¡æ¨æ¸¥ééé¡é°é½·å®å²¸æææ¡ç¼ééé¡é®æ¡è¬è»é¼åµå²©å·åºµæçè´éå£æ¼çé´¨ä»°å¤®ææ»æ®ç§§é´¦åååå´æææ¶¯ç¢è¾ééåæ¼ææ¶²ç¸èé¡ï¿½".split("");

  for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 0xFFFD) {
    e[D[228][j]] = 58368 + j;
    d[58368 + j] = D[228][j];
  }

  D[229] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ«»ç½é¶¯é¸ä¹å»å¶å¤æ¹æ¶æ¤°çºè¶ï¥´éå¼±ï¥µï¥¶ç´è¥è¯è»è¥èºï¥·ä½¯ï¥¸ï¥¹å£¤å­ææææ­æï¥ºæ¥æ¨£æ´çç¬ççç¦³ç©°ï¥»ç¾ï¥¼è¥ï¥½è®éé½ï¥¾é¤åå¾¡æ¼æ¼çç¦¦èªé¦­é­é½¬åæ¶ææªèåå °å½¦çè¨è«ºå­¼èä¿ºå¼å´å¥æ©æ·¹å¶ªæ¥­åäºä½ï¥¿ï¦ï¦å¦ï¦ï¿½".split("");

  for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 0xFFFD) {
    e[D[229][j]] = 58624 + j;
    d[58624 + j] = D[229][j];
  }

  D[230] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¦æ­æ±ï¦çµç¤ï¦èèè¹è¼¿è½ï¦é¤ï¦ï¦ï¦äº¦ï¦åå½¹æï¦ï¦ç«ç¹¹è­¯ï¦éé©å¥å §å§¸å¨å®´ï¦å»¶ï¦ï¦ææ»ï¦æ¤½æ²æ²¿æ¶æ¶æ·µæ¼ï¦çç¶çï¦ççï¦ç¡ç¡¯ï¦ç­µç·£ï¦ç¸¯ï¦è¡è»ï¦ï¦ï¦éï¦é³¶ï¦ï¦ï¦ææ¶ï¦ç±ï¦ ï¦¡é±å­ï¦¢ï¦£ï¦¤æï¦¥çç°ç°è¶èï¿½".split("");

  for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 0xFFFD) {
    e[D[230][j]] = 58880 + j;
    d[58880 + j] = D[230][j];
  }

  D[231] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¦¦é»é«¥é¹½æï¦§çèï¦¨ï¦©å¡ï¦ªï¦«å¶¸å½±ï¦¬æ ææ¥¹æ¦®æ°¸æ³³æ¸¶æ½æ¿çç¯ççç°ï¦­çï¦®ççç©çºï¦¯ï¦°è±è© è¿ï¦±éï¦²éï¦³ï¦´ä¹åªï¦µåå¡æ³æ±­æ¿çç¿ç©¢è®èèï¦¶è£è©£è­½è±«ï¦·é³ï¦¸éé äºä¼ä¿å²åå¾å³åå¡¢å¢ºå¥§å¨å¯¤æï¦¹æææ¿æ¤æ¢§æ±æ¾³ï¿½".split("");

  for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 0xFFFD) {
    e[D[231][j]] = 59136 + j;
    d[59136 + j] = D[231][j];
  }

  D[232] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çç¬çç­½èèª¤é°²é¼å±æ²ççéºæº«ç¥çç©©ç¸èåå£æç®çç°ç¿ééé¥æ¸¦ç¦çª©çªªè¥èè¸è¨å©å®å®æ¢¡æ¤æµ£ç©çç¬ç¢ç·©ç¿«èèèè±é®é æ°å¾æºææ±ªçå­å¨æ­ªç®å¤åµ¬å·ç¥çï¦ºï¦»å¥å¹å ¯å¤­å¦å§å¯¥ï¦¼ï¦½å¶¢ææææ¾ï¦¾æï¦¿æ©ï§ç¿ç¤ï§ï¿½".split("");

  for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 0xFFFD) {
    e[D[232][j]] = 59392 + j;
    d[59392 + j] = D[232][j];
  }

  D[233] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çªçª¯ç¹ç¹èè°ï§è¯è¦è¬ éï§éé¥æ¾æ¬²æµ´ç¸è¤¥è¾±ä¿å­åååå¢å®¹åº¸ææ¦æ¶æ¹§æº¶çç¢ç¨ç¬è³è¸èè¸ééï§äºä½å¶åªååå³å®å¯å°¤æææ´ççççç¥ç¦ç¦¹ç´ç¾½èèèè¿ééµéªéé¨é©åå½§æ­æ±æ ¯çç¨¶éé äºï§æ©æ®æ¾çèè¸èï¿½".split("");

  for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 0xFFFD) {
    e[D[233][j]] = 59648 + j;
    d[59648 + j] = D[233][j];
  }

  D[234] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ééé²é»èé¬±äºçéååå¡ååå£åªå«å¯æ¨æ¿æ´æ²æ´¹æ¹²æºç°ç¿çèè¢è½é ï§é¢é¡é´æè¶éä½ååå±åå§å¨å°æ°ææ¸­ç²çç·¯èèè¦è¿èè¡è¤è¬ééé­ä¹³ä¾ååªï§å¯å©å­ºå®¥å¹¼å¹½åº¾æ æææææ¸æï§ææï§æ¥¡æ¥¢æ²¹æ´§ï§æ¸¸ï§ï¿½".split("");

  for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 0xFFFD) {
    e[D[234][j]] = 59904 + j;
    d[59904 + j] = D[234][j];
  }

  D[235] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¿¡ç¶ç·ï§çç±ï§çï§ï§ç¶­è¾è¸è£èªè«è«­è¸°è¹éé¾éºééé®ï§ï§å ï§æ¯èè²ï§ï§åå¥«å°¹ï§ï§æ½¤ç§è¤è´ï§ééï§ï§ï§ï§è¿æççµ¨èï§å æ©ææ®·èª¾éé±ä¹åæ·«è­é°é³é£®ææ³£éåæèºé·¹ä¾ååå®ææ¿æ¬æ¤æ¯çç£ç¾©è¤èè»è¡£èª¼ï¿½".split("");

  for (j = 0; j != D[235].length; ++j) if (D[235][j].charCodeAt(0) !== 0xFFFD) {
    e[D[235][j]] = 60160 + j;
    d[60160 + j] = D[235][j];
  }

  D[236] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è­°é«äºä»¥ä¼ï§ï§å¤·å§¨ï§å·²å¼å½æ¡ï§ ï§¡ï§¢ï§£ç¾ç¥ï§¤ç°çï§¥ç§»ï§¦èè³èè¡èï§§ï§¨è²½è²³éï§©ï§ªé£´é¤ï§«ï§¬ç·çç¿ç¿ç¿¼è¬äººä»åå°ï§­å½å å§»å¯å¼å¿æ¹®ï§®ï§¯çµªèµï§°èèªï§±é­é·ï§²ï§³ä¸ä½ä½¾å£¹æ¥æº¢é¸é°é¦¹ä»»å£¬å¦å§æï§´ï§µç¨ï§¶èè³å¥åï¿½".split("");

  for (j = 0; j != D[236].length; ++j) if (D[236][j].charCodeAt(0) !== 0xFFFD) {
    e[D[236][j]] = 60416 + j;
    d[60416 + j] = D[236][j];
  }

  D[237] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï§·ï§¸ï§¹ä»å©å­è¿ä»åºå¨å§å§¿å­å­å­æ£ææ»çç®çç·çµç£ç´«èèªè¨èèè«®è³éä½åºå¼æ«æ¨ç¼ç¸çµç¶½èéééµ²å­±æ£§æ®æ½ºçå²æ«æ½ç®´ç°ªè ¶éä¸ä»å å ´å¢»å£¯å¥¬å°å¸³åºå¼µææ²ææ¨æª£æ¬æ¼¿çï§ºççç« ç²§è¸èè§èè¬è£èèè£è´é¬é·ï¿½".split("");

  for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 0xFFFD) {
    e[D[237][j]] = 60672 + j;
    d[60672 + j] = D[237][j];
  }

  D[238] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éååå¨å®°æææ ½æ¢æ¸½æ»ç½ç¸¡è£è²¡è¼é½é½ç­ç®è«éä½ä½å²åå§åºæµæµæ¥®æ¨æ²®æ¸ççªç½ç®¸ç´µè§è¹èè·è©è²¯èºéé¸éé½å£åå«¡å¯ææµæ»´çï§»çç©ç¬ç±ç¸¾ç¿è»è¬«è³èµ¤è·¡è¹è¿ªè¿¹é©éä½ä½ºå³å¨å¸ååªå¡¡å¡¼å¥ å°å±å»ææ°æ æ®¿æ°æ¾±ï¿½".split("");

  for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 0xFFFD) {
    e[D[238][j]] = 60928 + j;
    d[60928 + j] = D[238][j];
  }

  D[239] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çç ç°ç¸çç²ç­ç®ç®­ç¯çºè©®è¼¾è½é¿éé¢é«é»é¡é¡«é¤åæªææµç¤ç«ç¯çµ¶å å²¾åºæ¼¸ç¹ç²éé®é»æ¥æºè¶ä¸äºäº­ååµåå§å®å¹åº­å»·å¾ææºæ¿æ´ææ¶æ¸æ¾æ¥¨æªæ­£æ±æ·æ·¨æ¸æ¹çç¡çç½çºçç¢ç¦ç¨ç©½ç²¾ç¶èè¨è«ªè²é­ééé¦éé ééï¿½".split("");

  for (j = 0; j != D[239].length; ++j) if (D[239][j].charCodeAt(0) !== 0xFFFD) {
    e[D[239][j]] = 61184 + j;
    d[61184 + j] = D[239][j];
  }

  D[240] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éé é¼å¶åå¼å ¤å¸å¼æææ¢¯æ¿ç¥­ç¬¬èèºè£½è«¸è¹éé¤éé½é¡é½ä¿ååå©å²å¼å½«æªææ©ææºæ¹ææ¢æ£æ§½æ¼æ½®ç§ç¥çªçªçºç¥ç¥ç§ç¨ çªç²ç³çµç¹°èè»è¤è©èª¿è¶èºé é­é£é»éé³¥æç°è¶³éå­å°åæçå§å®å¾æ°æ«æ£æ·ç®ç¨®çµç¶ç¸±è«ï¿½".split("");

  for (j = 0; j != D[240].length; ++j) if (D[240][j].charCodeAt(0) !== 0xFFFD) {
    e[D[240][j]] = 61440 + j;
    d[61440 + j] = D[240][j];
  }

  D[241] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¸ªè¸µé¾éä½åå·¦åº§æ«ç½ªä¸»ä½ä¾åå§èåªå¨å¾å¥å®å·å»ææ±æ±æ ªæ³¨æ´²æ¹æ¾ç·ç çç±ç´ç´¬ç¶¢èèè¨»èªèµ°èºè¼³é±éééé§ç«¹ç²¥ä¿åååå¯¯å³»ææ¨½æµæºæ¿¬çç¯ç«£è ¢é¡éµéé§¿èä¸­ä»²è¡éå½æ«æ¥«æ±èºå¢ææ¾æ¯çççç¹è¸è­è´ä¹åªï¿½".split("");

  for (j = 0; j != D[241].length; ++j) if (D[241][j].charCodeAt(0) !== 0xFFFD) {
    e[D[241][j]] = 61696 + j;
    d[61696 + j] = D[241][j];
  }

  D[242] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å«å°åå¿æææ¯æ¯æ¨æºææ³æ­¢æ± æ²æ¼¬ç¥ç ¥ç¥ç¥ç´è¢èè³èè·èèªï§¼è´è¶¾é²ç´ç¨ç¨·ç¹è·ååå¡µæ¯æ¢æææ¡­æ¦æ®æ´¥æº±çç¨ç¡çç¹ç¡ççç§¦ç¸ç¸è»è¯è¢è¨ºè³è»«è¾°é²é­é£é³éä¾å±å§ªå«å¸æ¡çç¾ç§©çªè£è­è³ªè·è¿­ææï§½å·æ½ç·è¼¯ï¿½".split("");

  for (j = 0; j != D[242].length; ++j) if (D[242][j].charCodeAt(0) !== 0xFFFD) {
    e[D[242][j]] = 61952 + j;
    d[61952 + j] = D[242][j];
  }

  D[243] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¶éå¾µæ²æ¾ä¸ä¾ååååµ¯å·®æ¬¡æ­¤ç£ç®ï§¾è¹è»é®ææ¾ççªé¯é¿é½ªæ°æ¾¯ç¦ç¨çç«ç°çºç²²çºè®è´é½é¤é¥å¹å¯æ¦æ­ç´®å­åå¡¹æææºæ¬ç«è®è®åå¡åµå±å¨¼å» å½°æ´æææ¶æ¢æ§æ»æ¼²çç¡çªè¹èèè¼åµå°å¯å¯¨å½©æ¡ç ¦ç¶µèè¡ééµåæµç­ï¿½".split("");

  for (j = 0; j != D[243].length; ++j) if (D[243][j].charCodeAt(0) !== 0xFFFD) {
    e[D[243][j]] = 62208 + j;
    d[62208 + j] = D[243][j];
  }

  D[244] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è²¬åå¦»æ½èåï§¿åå°ºæ½æææ²æ¥æ»ç èè¹ éé»ä»ååå¤©å·ææ³æ·ºçç©¿èè¦è³¤è¸é·é§é¡é¡éå¸å²åå¾¹æ¤æ¾ç¶´è¼è½éµåå°æ²¾æ·»çç»ç°½ç±¤è©¹è«å å¦¾å¸æ·ççç«è«è²¼è¼å»³æ´æ·¸è½èè«éé¯ï¨åæ¿æ¶æ»¯ç· è«¦é®éé«åå¿å¨ææææ¢¢ï¿½".split("");

  for (j = 0; j != D[244].length; ++j) if (D[244][j].charCodeAt(0) !== 0xFFFD) {
    e[D[244][j]] = 62464 + j;
    d[62464 + j] = D[244][j];
  }

  D[245] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¤æ¥æ¨µçç¦ç¡ç¤ç¤ç§ç¨èè¸èèèè²è¶é¢éé®ä¿åç­çèè§¸å¯¸å¿æé¨å¢å¡å¯µæ¤ææ ç¸½è°è¥éæ®å¬å´æå¢æ½æ¨æ¤æ¥¸æ¨æ¹«çºç§è»è©è«è¶¨è¿½éééééééé¨¶é°ä¸çç¥ç«ºç­ç¯ç¸®èè¹è¹´è»¸éæ¥æ¤¿çåºæ®é»åå¿ æ²è²è¡è¡·æ´èµèï¿½".split("");

  for (j = 0; j != D[245].length; ++j) if (D[245][j].charCodeAt(0) !== 0xFFFD) {
    e[D[245][j]] = 62720 + j;
    d[62720 + j] = D[245][j];
  }

  D[246] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è´åå¹å´å¨¶å°±çç¿ èèè­è¶£éé©é·²å´ä»å æ»æ¸¬å±¤ä¾å¤å¤å³å¹æ¥æ¢æ²»æ·ç¾çç´ç¡ç¨ç©ç·ç·»ç½®è´è©è¼éé¦³é½ååé£­è¦ªä¸ææ¼ä¾µå¯¢ææ²æµ¸çç §éé¼èç§¤ç¨±å¿«ä»å¤å¾å¢®å¦¥æ°æææ¶æ¥èµéé¦±é§å¬ååå¼ï¨æï¨æ¢æ«ææ¿æ¿¯ç¢ç¸è¨ï¿½".split("");

  for (j = 0; j != D[246].length; ++j) if (D[246][j].charCodeAt(0) !== 0xFFFD) {
    e[D[246][j]] = 62976 + j;
    d[62976 + j] = D[246][j];
  }

  D[247] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¸ååå¦å½ææ­çç­ç¶»èªå¥ªè«æ¢çè½è²ªå¡æ­æ¦»å®å¸æ¹¯ï¨è©åå°å¤ªæ ææ®æ±°æ³°ç¬èèè·é°é¢±ï¨ææ¾¤ææåååè¨ææ¡¶ï¨çç­çµ±éå æ§è¿è¤ªéé ¹å¸å¥å¦¬æéé¬ªæç¹éå¡å©å·´ææ­æºæ·æ³¢æ´¾ç¬ç¶ç ´ç½·è­è·é å¤åæ¿çç£è²©è¾¦éï¿½".split("");

  for (j = 0; j != D[247].length; ++j) if (D[247][j].charCodeAt(0) !== 0xFFFD) {
    e[D[247][j]] = 63232 + j;
    d[63232 + j] = D[247][j];
  }

  D[248] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éªå«å­æä½©åæææ²æµ¿çç½ç¨è¦è²å½­æ¾ç¹è¨æä¾¿åæçç¯ç·¨ç¿©éé­é¨è²¶åªå¹³æ°èè©å å¬å¹£å»¢å¼æèºè½ééä½åååååºåå¸æææ±æï¨æ³¡æµ¦ç±ç ²èè¯èè¡è²è¢è¤ééªé£½é®å¹æ´æççï¨ä¿µå½å½ªæææ¨æ¼ç¢ç¥¨è¡¨è±¹é£é£é©ï¿½".split("");

  for (j = 0; j != D[248].length; ++j) if (D[248][j].charCodeAt(0) !== 0xFFFD) {
    e[D[248][j]] = 63488 + j;
    d[63488 + j] = D[248][j];
  }

  D[249] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åç¨æ¥è«·è±é¢¨é¦®å½¼æ«ç²ç®è¢«é¿éå¹å¼¼å¿æ³çç¢çç­è¾é¦ä¹é¼ä¸ä½å¦å¤å»æ°æ²³çè·è¦è³ééé°å£å­¸èè¬é¶´å¯æ¨ææ±æ±æ¼¢æ¾£çç½ç¿°ééééå²è½å½å«å¸å£åæª»æ¶µç·è¦éé·é¹¹ååçè¤é¤ééäº¢ä¼å§®å«¦å··æææ­æ¡æ²æ¸¯ç¼¸èèªï¿½".split("");

  for (j = 0; j != D[249].length; ++j) if (D[249][j].charCodeAt(0) !== 0xFFFD) {
    e[D[249][j]] = 63744 + j;
    d[63744 + j] = D[249][j];
  }

  D[250] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¨ï¨é äº¥åå³åå¥å­©å®³ææ¥·æµ·ç£è¹è§£è©²è«§éé§­éª¸å¾æ ¸åå¹¸æèè¡äº«åå®ç¦éé¿é¤é¥é¦åå¢èè¨±æ²æ«¶ç»è»æ­éªé©å¥çèµ«é©ä¿å³´å¼¦æ¸ææ³«ç«çç¹ç¾ç©ççµçµ¢ç¸£è·è¡ï¨è³¢éé¡¯å­ç©´è¡é å«ä¿ åå¤¾å³½æ¾æµ¹ç¹èèè¢éé °äº¨åååï¿½".split("");

  for (j = 0; j != D[250].length; ++j) if (D[250][j].charCodeAt(0) !== 0xFFFD) {
    e[D[250][j]] = 64000 + j;
    d[64000 + j] = D[250][j];
  }

  D[251] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å½¢æ³æ»ççç¯çç©ç©èè¢è¡¡éé¢é£é¦¨å®å½æ æ§æ³èè¹é¯éä¹äºå¼å£å£ºå¥½å²µå¼§æ¶æææ§æ¯«æµ©æ·æ¹æ»¸æ¾æ¿ æ¿©ççç¥çç çç¥ç³ç¸è¡è¦è«è¿èèè´è­·è±ªé¬é é¡¥ææé·å©ææ··æ¸¾ç¿é­å¿½æç¬åå¼æ±æ³æ´ªçç´è¹è¨é´»ååå¬æ¨ºç«çµï¿½".split("");

  for (j = 0; j != D[251].length; ++j) if (D[251][j].charCodeAt(0) !== 0xFFFD) {
    e[D[251][j]] = 64256 + j;
    d[64256 + j] = D[251][j];
  }

  D[252] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¦ç¦¾è±è¯è©±è­è²¨é´ï¨æ´æ«ç¢ºç¢»ç©«ä¸¸åå¥å®¦å¹»æ£ææ­¡æ¥æ¡æ¸ç¥ç°ç´éé©©é°¥æ´»æ»ç¾è±éå°å¹å¾¨ææ¶æ°ææææ¦¥æ³æ¹æ»æ½¢çççç¯ç°§èèééé»å¯åå»»å¾æ¢ææ·æ¦ææªæ·®æ¾®ç°çªç¹ªè¾è´èèª¨è³åç²å®æ©«éå®åå­ææææ¢æ¶æ·ï¿½".split("");

  for (j = 0; j != D[252].length; ++j) if (D[252][j].charCodeAt(0) !== 0xFFFD) {
    e[D[252][j]] = 64512 + j;
    d[64512 + j] = D[252][j];
  }

  D[253] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç»è´éµé©ä¾¯åååå¼ååå¸¿å¾æ½ç¦çéåå³å¡¤å£ççç»è°è¨æè¨å§æçè±ååæ¯å½å¾½æ®æçè«±è¼éº¾ä¼æºçç¦è§æ¤è­é·¸åå¶åæ´¶è¸é»ææ¬£ççåå±¹ç´è¨æ¬ æ¬½æ­å¸æ°æ´½ç¿èåååå«åå§¬å¬å¸æææ±ææ¦çç¹çºç§ç¦§ç¨ç¾²è©°ï¿½".split("");

  for (j = 0; j != D[253].length; ++j) if (D[253][j].charCodeAt(0) !== 0xFFFD) {
    e[D[253][j]] = 64768 + j;
    d[64768 + j] = D[253][j];
  }

  return {
    "enc": e,
    "dec": d
  };
}();

cptable[950] = function () {
  var d = [],
      e = {},
      D = [],
      j;
  D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 0xFFFD) {
    e[D[0][j]] = 0 + j;
    d[0 + j] = D[0][j];
  }

  D[161] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ãï¼ããï¼â§ï¼ï¼ï¼ï¼ï¸°â¦â¥ï¹ï¹ï¹Â·ï¹ï¹ï¹ï¹ï½âï¸±âï¸³â´ï¸´ï¹ï¼ï¼ï¸µï¸¶ï½ï½ï¸·ï¸¸ããï¸¹ï¸ºããï¸»ï¸¼ããï¸½ï¸¾ããï¸¿ï¹ããï¹ï¹ããï¹ï¹ï¹ï¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¹ï¹ï¹ï¹ââââããâµâ²ï¼ï¼ï¼â»Â§ãâââ³â²ââââââ¡â â½â¼ã£âÂ¯ï¿£ï¼¿Ëï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ ï¹¡ï¼ï¼ÃÃ·Â±âï¼ï¼ï¼â¦â§â âââ¡ï¹¢ï¹£ï¹¤ï¹¥ï¹¦ï½â©âªâ¥â ââ¿ããâ«â®âµâ´âââââââââââââ¥â£ï¼ï¿½".split("");

  for (j = 0; j != D[161].length; ++j) if (D[161][j].charCodeAt(0) !== 0xFFFD) {
    e[D[161][j]] = 41216 + j;
    d[41216 + j] = D[161][j];
  }

  D[162] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¼¼âï¹¨ï¼ï¿¥ãï¿ ï¿¡ï¼ï¼ ââï¹©ï¹ªï¹«ãããããã¡ãããÂ°ååååå¡å£å§ç©ç³ââââââââââââââââ¼â´â¬â¤ââââââââââ­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â®â°â¯âââªâ¡â¢â£â¥â¤â±â²â³ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼â â¡â¢â£â¤â¥â¦â§â¨â©ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©åååï¼¡ï¼¢ï¼£ï¼¤ï¼¥ï¼¦ï¼§ï¼¨ï¼©ï¼ªï¼«ï¼¬ï¼­ï¼®ï¼¯ï¼°ï¼±ï¼²ï¼³ï¼´ï¼µï¼¶ï¼·ï¼¸ï¼¹ï¼ºï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï¿½".split("");

  for (j = 0; j != D[162].length; ++j) if (D[162][j].charCodeAt(0) !== 0xFFFD) {
    e[D[162][j]] = 41472 + j;
    d[41472 + j] = D[162][j];
  }

  D[163] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï½ï½ï½ï½ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏãããããããããããï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ããããããããããããããããã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ËËËËËï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[163].length; ++j) if (D[163][j].charCodeAt(0) !== 0xFFFD) {
    e[D[163][j]] = 41728 + j;
    d[41728 + j] = D[163][j];
  }

  D[164] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¸ä¹ä¸ä¸ä¹ä¹äºäºäººå¿å¥å«å åååååååä¸ä¸ä¸ä¸ä¸«ä¸¸å¡ä¹ä¹ä¹ä¹äºäº¡åååºååå£åå£«å¤å¤§å¥³å­å­å­å¯¸å°å°¢å°¸å±±å·å·¥å·±å·²å·³å·¾å¹²å»¾å¼å¼æï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¸ä¸ä¸ä¸­ä¸°ä¸¹ä¹å°¹äºäºäºäºäºäº¢ä»ä»ä»ä»ä»ä»ä»ä»ä»ååå§å­å®å¬åå¶åååå»å¾å¿åå¹ååååååååå£¬å¤©å¤«å¤ªå¤­å­å°å°¤å°ºå±¯å·´å¹»å»¿å¼å¼å¿ææ¶æææ¯æææ¤æ¹æ¥æ°ææ¨æ¬ æ­¢æ­¹æ¯æ¯æ¯æ°æ°´ç«çªç¶ç»çççç¬çä¸ï¿½".split("");

  for (j = 0; j != D[164].length; ++j) if (D[164][j].charCodeAt(0) !== 0xFFFD) {
    e[D[164][j]] = 41984 + j;
    d[41984 + j] = D[164][j];
  }

  D[165] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¸ä¸ä¸ä¸ä¸»ä¹ä¹ä¹ä»¥ä»ä»ä»ä»ä»ä»£ä»¤ä»ä»ååååå¬å¹åºå¸åå åååååä»ååå¡å å¯å®å»å¯å¤å³å¬å®å©å¨å¼å¸åµå«å¦åªå²å±å°å¥å­å»ååå¤ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¤®å¤±å¥´å¥¶å­å®å°¼å·¨å·§å·¦å¸å¸å¹³å¹¼å¼å¼å¼å¿ææææææ¥æ¦æ®æ¬æªæ«æ­æ­£æ¯æ°æ°æ°¸æ±æ±æ°¾ç¯çççç¦ççç¨ç©ç°ç±ç²ç³çç½ç®ç¿ç®çç¢ç³ç¤ºç¦¾ç©´ç«ä¸ä¸ä¹ä¹ä¹©äºäº¤äº¦äº¥ä»¿ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä»²ä»¶ä»»ä»°ä»³ä»½ä¼ä¼ååååå¨ï¿½".split("");

  for (j = 0; j != D[165].length; ++j) if (D[165][j].charCodeAt(0) !== 0xFFFD) {
    e[D[165][j]] = 42240 + j;
    d[42240 + j] = D[165][j];
  }

  D[166] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å±åå°åååååå£åå¡å å°å±åååååååååååååååå ååå³å°å¨å­å¬å¯å©å¤å¤å¤·å¤¸å¦å¥¸å¦å¥½å¥¹å¦å¦å­å­å®å®å®å®å¯ºå°å±¹å·å¸å¹¶å¹´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¼å¼å¿å¿æææææ£æææ¶æ©æ¨æ¬æ­æ²æ³ææ½æ´æ±æµæ¬¡æ­¤æ­»æ°æ±æ±æ±æ±æ± æ±æ±æ±¡æ±æ±æ±ç°ççç¾ç«¹ç±³ç³¸ç¼¶ç¾ç¾½èèèèè³è¿èèèè£èªè³è¼èèèè®è²è¾è«è¡è¡è¡£è¥¿é¡ä¸²äº¨ä½ä½ä½ä½ä½ä¼´ä½ä½ä¼°ä½ä½ä¼½ä¼ºä¼¸ä½ä½ä¼¼ä½ä½£ï¿½".split("");

  for (j = 0; j != D[166].length; ++j) if (D[166][j].charCodeAt(0) !== 0xFFFD) {
    e[D[166][j]] = 42496 + j;
    d[42496 + j] = D[166][j];
  }

  D[167] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä½ä½ ä¼¯ä½ä¼¶ä½ä½ä½ä½ååååµå¶å·å¥å¤å©åªå¨å«å©åªå¬å£å³åµåå­åå¾å¦åå§ååå³åååå©åå¹å»å¸å®åµå¶å å¼åå±å«åå¬åªå°å¤å«ååååï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ååå¾ååå»å£¯å¤¾å¦å¦å¦¨å¦å¦£å¦å¦å¦å¦¤å¦å¦å¦¥å­å­å­å­å®å®å®å°¬å±å±å°¿å°¾å²å²å²å²å·«å¸åºåºåºå»·å¼å¼å½¤å½¢å½·å½¹å¿å¿å¿å¿å¿±å¿«å¿¸å¿ªæææææææ¶ææ­ææ¼æ¾æ¹æ³ææ¯ææ®æææææ¹æ»æ¸æ±æ´æææææææææææ ï¿½".split("");

  for (j = 0; j != D[167].length; ++j) if (D[167][j].charCodeAt(0) !== 0xFFFD) {
    e[D[167][j]] = 42752 + j;
    d[42752 + j] = D[167][j];
  }

  D[168] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æææ­¥æ¯æ±æ±æ²æ²æ²æ²æ²æ²æ±ªæ±ºæ²æ±°æ²æ±¨æ²æ²æ±½æ²æ±²æ±¾æ±´æ²æ±¶æ²æ²æ²æ²ç¶ç¼ç½ç¸ç¢ç¡ç çççç¬ç«ç·ç¸çç¯ç£ç§ç§ç¦¿ç©¶ç³»ç½èèèèèèè²è¯èï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèè¦è§è¨è°·è±è±è²èµ¤èµ°è¶³èº«è»è¾è¾°è¿è¿è¿è¿å·¡éé¢éªé¦é£éééé²é®é±éªé¬ä¸¦ä¹ä¹³äºäºäºäº«äº¬ä½¯ä¾ä¾ä½³ä½¿ä½¬ä¾ä¾ä¾ä¾ä½°ä½µä¾ä½©ä½»ä¾ä½¾ä¾ä¾ä½ºåååå©å·å¶å¸å½å½å»å¸å·åºå°å®å¶åå¾å»ååååå¦å·å¸å¹åååå³åµï¿½".split("");

  for (j = 0; j != D[168].length; ++j) if (D[168][j].charCodeAt(0) !== 0xFFFD) {
    e[D[168][j]] = 43008 + j;
    d[43008 + j] = D[168][j];
  }

  D[169] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åå¸ååå»å·åååå¼åå±å¶ååå¢å¨åå½ååºåå·åªå©å¡å¦å¤å¼å¤å¥å¥å¥å¥å¥å¦¾å¦»å§å¦¹å¦®å§å§å§å§å§å§å§å¦¯å¦³å§å§å­å­¤å­£å®å®å®å®å®å®å°å±å±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å±å²·å²¡å²¸å²©å²«å²±å²³å¸å¸å¸å¸å¸å¸å¹¸åºåºåºåºåºå»¶å¼¦å¼§å¼©å¾å¾å½¿å½¼å¿å¿ å¿½å¿µå¿¿æææ¯æµææªææ¡æ§æ©æ«ææææ¿æ¾ææ¿ææææ¿ææ¹æææ«æææææ¨æ½æ¼æææææµææ±æææææ¬ææ¾æ§æ¼æºææææææææææï¿½".split("");

  for (j = 0; j != D[169].length; ++j) if (D[169][j].charCodeAt(0) !== 0xFFFD) {
    e[D[169][j]] = 43264 + j;
    d[43264 + j] = D[169][j];
  }

  D[170] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ææææ­æææ±ææ³æ·ææææ¯æ°æ¿ææ¾ææµæææ¼æªæ²æ¬£æ­¦æ­§æ­¿æ°æ°æ³£æ³¨æ³³æ²±æ³æ³¥æ²³æ²½æ²¾æ²¼æ³¢æ²«æ³æ³æ²¸æ³æ²¹æ³æ²®æ³æ³æ³±æ²¿æ²»æ³¡æ³æ³æ²¬æ³¯æ³æ³æ³ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çççççç¬ç­ç¸çç§ç©çççççç©ç¨çç«ç¥ç½çççççç²ç´ç¥ç½ç¤¾ç¥ç¥ç§ç§ç©ºç©¹ç«ºç³¾ç½ç¾ç¾èèºè¥è¢è±è¡è«è©è´èªè¯è¥è¾èè³èèè­è½èè¹è±è¬è¥è¯è¸è£è°è¾è·èè±åè¡¨è»è¿è¿è¿éµé¸é±é¶ééé·éééé¿é»éï¿½".split("");

  for (j = 0; j != D[170].length; ++j) if (D[170][j].charCodeAt(0) !== 0xFFFD) {
    e[D[170][j]] = 43520 + j;
    d[43520 + j] = D[170][j];
  }

  D[171] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éé¹é¨ééäºäº­äº®ä¿¡ä¾µä¾¯ä¾¿ä¿ ä¿ä¿ä¿ä¿ä¾¶ä¿ä¿ä¿ä¿ä¾®ä¿ä¿ä¿ä¿ä¿ä¿ä¾·åååå åååååååååååååå»ååå¬åå¨ååå¸å¦å³ååå½åªåï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ååå¯å«å±å»å©å§å¿å¿ååå å£å¢åå®åå¥å¥å¥å¥å¥å§å§å§¿å§£å§¨å¨å§¥å§ªå§å§¦å¨å§»å­©å®£å®¦å®¤å®¢å®¥å°å±å±å±å±å³å³å··å¸å¸¥å¸å¹½åº åº¦å»ºå¼å¼­å½¥å¾å¾å¾å¾å¾å¾å¾æææ æ¥ææ¨ææ°æ¨æ¢æææ¬æ«æªæ¤æææææ¼æ­ææ®æ½ææ±æ·ï¿½".split("");

  for (j = 0; j != D[171].length; ++j) if (D[171][j].charCodeAt(0) !== 0xFFFD) {
    e[D[171][j]] = 43776 + j;
    d[43776 + j] = D[171][j];
  }

  D[172] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¯æ¬æ¾æ´æææ¿ææ«æ½æ¢æ¥æ­æ æ§æ¯ææ¨æ±æ¤æ·æ¿ææ±æææ¬æ¶æ¯æµæ©æ¯æææ´ææ¥æ¸æææ³æ°ææ¢æææ­ªæ®æ®æ®µæ¯æ¯æ°æ³æ´æ´²æ´ªæµæ´¥æ´æ´±æ´æ´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ´»æ´½æ´¾æ´¶æ´æ³µæ´¹æ´§æ´¸æ´©æ´®æ´µæ´æ´«ç«çºç³ç¬ç¯ç­ç¸ç®ç¤ç°ç²ç¯ç´ç©ç ç¡ç·çç»ç²ççç³çç­ççççç«ç¤ç¥ç¢ç£ç¸ççççççççç¹ç¸ççç¾ç¼ççç ç ç ç ç¥ç¥ç¥ç¥ç¦¹ç¦ºç§ç§ç§ç©¿çªç«¿ç«½ç±½ç´ç´ç´ç´ç´ç´ç´ç¼¸ç¾ç¾¿èï¿½".split("");

  for (j = 0; j != D[172].length; ++j) if (D[172][j].charCodeAt(0) !== 0xFFFD) {
    e[D[172][j]] = 44032 + j;
    d[44032 + j] = D[172][j];
  }

  D[173] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèè¶èè¥èèèèè¡èèèè¤èè´è¢è§èèè£èè¦èè¥èèèèè±èèèèèèèè¯èèè¹è»èºè¡è¡«è¦è§è¨è¨è¨è²è² èµ´èµ³è¶´è»è»è¿°è¿¦è¿¢è¿ªè¿¥ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¿­è¿«è¿¤è¿¨ééééééééééééé¢é©éé­é³é é¢¨é£é£é¦é¦ä¹äº³ååå£ä¿¯å¦å¥ä¿¸å©ååå¼ååååä¿ºååå¨ä¿±å¡åååä¿³ä¿®å­åªä¿¾å«åå¼å¤å¥å¢ååååååååååªå¿åååå¨ååå·å¼å¥å²ååºåå©å­å¡åå®åªï¿½".split("");

  for (j = 0; j != D[173].length; ++j) if (D[173][j].charCodeAt(0) !== 0xFFFD) {
    e[D[173][j]] = 44288 + j;
    d[44288 + j] = D[173][j];
  }

  D[174] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¦å§åå½åååååååå å¤å¥å¥å¥å¨å¨å¨å¨å¨å¨å§¬å¨ å¨£å¨©å¨¥å¨å¨å­«å±å®°å®³å®¶å®´å®®å®µå®¹å®¸å°å±å±å±å³­å³½å³»å³ªå³¨å³°å³¶å´å³´å·®å¸­å¸«åº«åº­åº§å¼±å¾å¾å¾æï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ£æ¥æææ­æ©æ¯ææææææææææ³ææ¿ææ¾æ¯ææææææºææ½æªæ«æ¨ææææææææææææææææ¸ææææ ¡æ ¸æ¡æ¡æ¡æ ¹æ¡æ¡æ ©æ¢³æ æ¡æ¡æ ½æ´æ¡æ¡æ ¼æ¡æ ªæ¡æ æ æ¡æ®æ®æ®·æ°£æ°§æ°¨æ°¦æ°¤æ³°æµªæ¶æ¶æ¶æµ¦æµ¸æµ·æµæ¶ï¿½".split("");

  for (j = 0; j != D[174].length; ++j) if (D[174][j].charCodeAt(0) !== 0xFFFD) {
    e[D[174][j]] = 44544 + j;
    d[44544 + j] = D[174][j];
  }

  D[175] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æµ¬æ¶æµ®æµæµ´æµ©æ¶æ¶æµ¹æ¶æµ¥æ¶ççç¤çççç¹ç¹ç¼ç¹ç½ç¸ç·çç­çç®ç çªççççççç¾ççç²ç³ç½ç¼ç¹çç¸çç°çççç©çç ç¨ç©ç °ç §ç ¸ç ç ´ç ·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç ¥ç ­ç  ç ç ²ç¥ç¥ç¥ ç¥ç¥ç¥ç¥ç¥ç¥ç§¤ç§£ç§§ç§ç§¦ç§©ç§çªçªç«ç¬ç¬ç²ç´¡ç´ç´ç´ç´ ç´¢ç´ç´ç´ç´ç´ç´ç´ç´ç¼ºç½ç¾ç¿ç¿èèèèèè½è¿è±èè°èè­è´èè¸è³èè½èè¼è¯è­è¬èèèªè«è¨è¬è»è«èèèè¸èèèµè´èè²è¹è¶èèè±è¨èï¿½".split("");

  for (j = 0; j != D[175].length; ++j) if (D[175][j].charCodeAt(0) !== 0xFFFD) {
    e[D[175][j]] = 44800 + j;
    d[44800 + j] = D[175][j];
  }

  D[176] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèªèè¤è©èè£èè¡°è¡·è¢è¢è¡½è¡¹è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è±è±ºè±¹è²¡è²¢èµ·èº¬è»è»è»è¾±ééè¿·éè¿ºè¿´éè¿½éè¿¸éé¡éé¢éééééééééé¢é£é¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ééé¤ééé»é£¢é¦¬éª¨é«é¬¥é¬²é¬¼ä¹¾åºå½ååååååå¥å¶åååµå´å·ååå¯å­ååå°åªå¯åååååååå¿åå¾åæ¼ååªå¦ååå¡ååå±åååå¯å¤å¸å®åå¬å£å³ååååååå å å å å¤åºå å µå·å¹å¤ å¥¢å¨¶å©å©å©¦å©ªå©ï¿½".split("");

  for (j = 0; j != D[176].length; ++j) if (D[176][j].charCodeAt(0) !== 0xFFFD) {
    e[D[176][j]] = 45056 + j;
    d[45056 + j] = D[176][j];
  }

  D[177] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¨¼å©¢å©å©å©å­°å¯å¯å¯å¯å®¿å¯å°å°å°å± å±å±å´å´å´å´å´å´¢å´å´©å´å´å´¤å´§å´å·¢å¸¸å¸¶å¸³å¸·åº·åº¸åº¶åºµåº¾å¼µå¼·å½å½¬å½©å½«å¾å¾å¾å¾å¾¡å¾ å¾æ¿æ£ææ æ¨ææ´æ¦æ½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ææ»æµææ¼æææææ¸ææææææ æ§æ²ææ¢æ¥æ·æ§ææªæ±æ©ææææ«æ¨ææææ¡æ¬ææææ»æ©æ¨æºæææææåæææææææ¬æææææææ¤æ¨æ¦ææ¹åææ¢æ¢¯æ¢¢æ¢æ¢µæ¡¿æ¡¶æ¢±æ¢§æ¢æ¢°æ¢æ£æ¢­æ¢æ¢æ¢æ¢æ¢¨æ¢æ¢¡æ¢æ¬²æ®ºï¿½".split("");

  for (j = 0; j != D[177].length; ++j) if (D[177][j].charCodeAt(0) !== 0xFFFD) {
    e[D[177][j]] = 45312 + j;
    d[45312 + j] = D[177][j];
  }

  D[178] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¯«æ¯¬æ°«æ¶æ¶¼æ·³æ·æ¶²æ·¡æ·æ·¤æ·»æ·ºæ¸æ·æ·æ¶¯æ·æ¶®æ·æ·¹æ¶¸æ··æ·µæ·æ·æ¸æ¶µæ·æ·«æ·æ·ªæ·±æ·®æ·¨æ·æ·æ¶ªæ·¬æ¶¿æ·¦ç¹ççç½ç¯ç½ç½çççççççççççç¾çç ç¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç·çç¢ç¥ç¦ç¢ç°ççççµççççççç·ç¾ç¼ç¶ç¸çºç¡«ç¡ç¡ç¥¥ç¥¨ç¥­ç§»çªçªç¬ ç¬¨ç¬ç¬¬ç¬¦ç¬ç¬ç¬®ç²ç²ç²çµçµçµ±ç´®ç´¹ç´¼çµç´°ç´³çµç´¯çµç´²ç´±ç¼½ç¾ç¾ç¿ç¿ç¿èèèè¯èè£è«è©è°è¤èèµè·è¶è¹èèèè¸è¢èè½è«èèèèè è·è»è¼ï¿½".split("");

  for (j = 0; j != D[178].length; ++j) if (D[178][j].charCodeAt(0) !== 0xFFFD) {
    e[D[178][j]] = 45568 + j;
    d[45568 + j] = D[178][j];
  }

  D[179] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èè§èå½ªèèè¶èèµèèè±è¯èè¡è¢è¢è¢«è¢è¢è¢è¢è¦è¦è¨ªè¨è¨£è¨¥è¨±è¨­è¨è¨è¨¢è±è±è²©è²¬è²«è²¨è²ªè²§èµ§èµ¦è¶¾è¶ºè»è»ééééé£éééééé éé¢éééï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¨é­é½éééµé¦é£é§é­é©ééªéµé³é¸é°é´é¶é·é¬ééªé©ç« ç«é é é­é³¥é¹µé¹¿éº¥éº»å¢ååååååååæå±å²å´åµå©ååååå¥å»åå§å¼ååååååªååååå³å®åå¾å²åå»å¬å±å¾åå«ååå ¯å ªå ´å ¤å °å ±å ¡å å  å£¹å£ºå¥ ï¿½".split("");

  for (j = 0; j != D[179].length; ++j) if (D[179][j].charCodeAt(0) !== 0xFFFD) {
    e[D[179][j]] = 45824 + j;
    d[45824 + j] = D[179][j];
  }

  D[180] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å©·åªå©¿åªåªåª§å­³å­±å¯å¯å¯å¯å°å°å°±åµåµå´´åµå·½å¹å¸½å¹å¹å¹¾å»å»å»å»å¼¼å½­å¾©å¾ªå¾¨ææ¡æ²æ¶æ ææ£æºææ°æ»æ´æ¨æ±ææ¶ææææææ£ææææ©æææï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ææ£ææ¡ææ­æ®æ¶æ´æªææææ¹ææ¦æ¢æ£æææ¯æ®æ°æ´æ¶æ¯ææºæ¾æ·æ¾æ¿æææ£ºæ£æ£ æ£æ£æ¤æ£æ£µæ£®æ£§æ£¹æ£æ£²æ££æ£æ£æ¤æ¤æ¤æ£æ£æ¥®æ£»æ¬¾æ¬ºæ¬½æ®æ®æ®¼æ¯¯æ°®æ°¯æ°¬æ¸¯æ¸¸æ¹æ¸¡æ¸²æ¹§æ¹æ¸ æ¸¥æ¸£æ¸æ¹æ¹æ¸¤æ¹æ¹®æ¸­æ¸¦æ¹¯æ¸´æ¹æ¸ºæ¸¬æ¹æ¸æ¸¾æ»ï¿½".split("");

  for (j = 0; j != D[180].length; ++j) if (D[180][j].charCodeAt(0) !== 0xFFFD) {
    e[D[180][j]] = 46080 + j;
    d[46080 + j] = D[180][j];
  }

  D[181] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æºæ¸æ¹æ¹£æ¹æ¹²æ¹©æ¹ççç¦ç°ç¡ç¶ç®ççççç¶ç¥ç´ç©çºçªç³ç¢ç¥çµç¶ç´ç¯çç¦ç¨ç¥ç¦ç«çªç¢çç£çççç ç»ç¼ççç´ççç­ç¡ç¡¬ç¡¯ç¨ç¨ç¨ç¨ç¨çªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çªçªç«¥ç«£ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­ç²ç²¥çµçµçµ¨çµç´«çµ®çµ²çµ¡çµ¦çµ¢çµ°çµ³åç¿ç¿èèèèèèèèè¹èè¾èèè´èèè©èè¸èè èèèè¯è±è´èèè°èèè½è²èè¸èèèèèèèèèè­èèè¤èèè¡è£è£è¢±è¦è¦è¨»è© è©è©è¨¼è©ï¿½".split("");

  for (j = 0; j != D[181].length; ++j) if (D[181][j].charCodeAt(0) !== 0xFFFD) {
    e[D[181][j]] = 46336 + j;
    d[46336 + j] = D[181][j];
  }

  D[182] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è©è©è©è©è¨´è¨ºè¨¶è©è±¡è²è²¯è²¼è²³è²½è³è²»è³è²´è²·è²¶è²¿è²¸è¶è¶è¶è·è·è·è·è·è·è·è·è»»è»¸è»¼è¾é®éµé±é¸é²é¶ééµéé¾é£é¥éééé£ééééééééééï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ééééééé½éééé²ééééééé¯é²éé é é é£§é£ªé£¯é£©é£²é£­é¦®é¦­é»é»é»äºå­åµå²å³åå¾å¬å·å»å¯åå¿å·å½åå¦å¤å¢å£å¯åå¨åå¦ååååå£å¤å¯åå¡ååå¥åååå¡å¡å¡å¡å¡å¡å¡«å¡å¡­å¡å¡¢å¡å¡å¥§å«å«å«åª¾åª½åª¼ï¿½".split("");

  for (j = 0; j != D[182].length; ++j) if (D[182][j].charCodeAt(0) !== 0xFFFD) {
    e[D[182][j]] = 46592 + j;
    d[46592 + j] = D[182][j];
  }

  D[183] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åª³å«åª²åµ©åµ¯å¹å¹¹å»å»å¼å½å¾¬å¾®æææææ³ææ¹æææææææ¾æ´æ§æææ·æ¡æ¢ææ¾ææªæ­æ½æ¬æææææ¶ææææ¬ææ°ææææææææææ¦æ¥­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¥æ¥·æ¥ æ¥æ¥µæ¤°æ¦æ¥æ¥¨æ¥«æ¥æ¥æ¥¹æ¦æ¥æ¥£æ¥æ­æ­²æ¯æ®¿æ¯æ¯½æº¢æº¯æ»æº¶æ»æºæºæ»æ»æº¥æºæº¼æººæº«æ»æºæºæ»æ»æºªæº§æº´ççç©ç¤çç§çç¬ç¦çç¥ççç¨ççºçç·çç¿ç¾ç¯çççççç¿çççç¶ç¸çç°çç²ç±çºç¿ç´ç³çççç«ç¦çç£ï¿½".split("");

  for (j = 0; j != D[183].length; ++j) if (D[183][j].charCodeAt(0) !== 0xFFFD) {
    e[D[183][j]] = 46848 + j;
    d[46848 + j] = D[183][j];
  }

  D[184] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¹çªç¬çç¥ç¨ç¢ç®ç¢ç¢°ç¢ç¢ç¢ç¢ç¡¼ç¢ç¢ç¡¿ç¥ºç¥¿ç¦è¬ç¦½ç¨ç¨ç¨ ç¨ç¨ç¨çªçª ç­·ç¯ç­ ç­®ç­§ç²±ç²³ç²µç¶çµ¹ç¶ç¶ç¶çµç½®ç½©ç½ªç½²ç¾©ç¾¨ç¾¤èèèèè±è°è¸è¥è®è³è«ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¹èºè¦èèèè·è½è±èµè¦è«èè¬èè¼èµè¡è£è©è­èèèèè¹èèèèè¾è»èèèèè¡è£è£è£è£è£è£è£¡è£è£è£è¦è§£è©«è©²è©³è©¦è©©è©°èªè©¼è©£èª è©±èªè©­è©¢è©®è©¬è©¹è©»è¨¾è©¨è±¢è²è²è³è³è³è³è²²è³è³è³è·¡è·è·¨è·¯è·³è·ºè·ªè·¤è·¦èº²è¼è¼è»¾è¼ï¿½".split("");

  for (j = 0; j != D[184].length; ++j) if (D[184][j].charCodeAt(0) !== 0xFFFD) {
    e[D[184][j]] = 47104 + j;
    d[47104 + j] = D[184][j];
  }

  D[185] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¾è¾²éééééé¼éééééééé¾éééé¬éªé©éé·éé¸é½éé¾ééé¤éé´éééé¹é¿éééééééééé·é»é¹é¶éé´é¶é é é é é é é£¼é£´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é£½é£¾é¦³é¦±é¦´é«¡é³©éºé¼é¼é¼ å§å®å¥åå­ååååå±åå©å¢å³ååå±å­å¾åååå½åååååå·ååååå¶ååå¡µå¡¾å¢å¢å¢å¡¹å¢å¡½å£½å¤¥å¤¢å¤¤å¥ªå¥©å«¡å«¦å«©å«å«å«å«£å­µå¯å¯§å¯¡å¯¥å¯¦å¯¨å¯¢å¯¤å¯å°å±¢å¶å¶å¹å¹£å¹å¹å¹å»å»å¼å½å½°å¾¹æï¿½".split("");

  for (j = 0; j != D[185].length; ++j) if (D[185][j].charCodeAt(0) !== 0xFFFD) {
    e[D[185][j]] = 47360 + j;
    d[47360 + j] = D[185][j];
  }

  D[186] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¿ææ·æ¢æ£ææææµæªææææ¤æ¸ææºææ§æ´æ­æ»æ²æ¡æææ¢æ¨ææ¦æ¦¨æ¦æ§æ¦®æ§æ§æ¦æ¦·æ¦»æ¦«æ¦´æ§æ§æ¦­æ§æ¦¦æ§æ¦£æ­æ­æ°³æ¼³æ¼æ»¾æ¼æ»´æ¼©æ¼¾æ¼ æ¼¬æ¼æ¼æ¼¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ»¿æ»¯æ¼æ¼±æ¼¸æ¼²æ¼£æ¼æ¼«æ¼¯æ¾æ¼ªæ»¬æ¼æ»²æ»æ»·ççç½çççç¾ççççç¤ç£çªç°ç­ççç§ççççç¡ç£çç½ç¿ç¡ç£ç¢ç¢§ç¢³ç¢©ç¢£ç¦ç¦ç¦ç¨®ç¨±çªªçª©ç«­ç«¯ç®¡ç®ç®ç­µç®ç®ç®ç®ç®¸ç®ç®ç²¹ç²½ç²¾ç¶»ç¶°ç¶ç¶½ç¶¾ç¶ ç·ç¶´ç¶²ç¶±ç¶ºç¶¢ç¶¿ç¶µç¶¸ç¶­ç·ç·ç¶¬ï¿½".split("");

  for (j = 0; j != D[186].length; ++j) if (D[186][j].charCodeAt(0) !== 0xFFFD) {
    e[D[186][j]] = 47616 + j;
    d[47616 + j] = D[186][j];
  }

  D[187] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç½°ç¿ ç¿¡ç¿èèèèèèèèè¿èè§èºèèèèèè¿èèèèè²èèè¸èèèè¼èèè¿èè»è¢è¥è´èèè·è©è£³è¤è£´è£¹è£¸è£½è£¨è¤è£¯èª¦èªèªèª£èªèª¡èªèª¤ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èªªèª¥èª¨èªèªèªèª§è±ªè²è²è³è³è³èµ«è¶è¶è·¼è¼è¼è¼è¼è¾£é ééé£ééé¢ééééééµé¸é·é´é¸ééééé»ééé¨é¼éé¡é¨é©é£é¥é¤ééééééé¼éé¶é é é¢¯é¢±é¤é¤é¤é¤é§éª¯éª°é«¦é­é­é³´é³¶é³³éº¼é¼»é½ååå»åµå¹åååååï¿½".split("");

  for (j = 0; j != D[187].length; ++j) if (D[187][j].charCodeAt(0) !== 0xFFFD) {
    e[D[187][j]] = 47872 + j;
    d[47872 + j] = D[187][j];
  }

  D[188] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åååååå°å²å®å»å¹å²å¿å´å©åååå´å¶å¯å°å¢å¢å¢å¢³å¢å¢®å¢©å¢¦å¥­å¬å«»å¬å«µå¬å¬å¯®å¯¬å¯©å¯«å±¤å±¥å¶å¶å¹¢å¹å¹¡å»¢å»å»å»å»£å» å½å½±å¾·å¾µæ¶æ§æ®æææï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¼æ°æ«æ¾æ§ææ«ææ¬ææ¤ææ®æ®æ©æ¯æ¹ææ²æææ°æ¥æææ©ææ®æ­æ«ææ¬ææ¢æ³æµæ·æ¸æ®æ«æ´æ±æ¨£æ¨æ§¨æ¨æ¨æ¨æ§½æ¨¡æ¨æ¨æ§³æ¨æ¨æ§­æ¨æ­æ­æ®¤æ¯æ¯æ¼¿æ½¼æ¾æ½æ½¦æ½æ¾æ½­æ½æ½¸æ½®æ¾æ½ºæ½°æ½¤æ¾æ½æ»æ½¯æ½ æ½çç¬ç±ç¨ççççç©ççï¿½".split("");

  for (j = 0; j != D[188].length; ++j) if (D[188][j].charCodeAt(0) !== 0xFFFD) {
    e[D[188][j]] = 48128 + j;
    d[48128 + j] = D[188][j];
  }

  D[189] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¾çç¿ç ç©çç¤ç¦ç¡ç¢ççºç¤çççççç£ç£ç¢ºç£ç¢¾ç£ç¢¼ç£ç¨¿ç¨¼ç©ç¨½ç¨·ç¨»çª¯çª®ç®­ç®±ç¯ç®´ç¯ç¯ç¯ç® ç¯ç³ç· ç·´ç·¯ç·»ç·ç·¬ç·ç·¨ç·£ç·ç·ç·©ç¶ç·ç·²ç·¹ç½µç½·ç¾¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¿©è¦èèèè èèèè½èè®è¬è­èèè£è¡èè¬è¥è¿èèè´è¶è è¦è¸è¨èèèèè¡è¡è¤è¤è¤è¤è¤è¤èª¼è«è«è«èªè«è«¸èª²è«è«èª¿èª°è«è«èª¶èª¹è«è±è±è±¬è³ è³è³¦è³¤è³¬è³­è³¢è³£è³è³ªè³¡èµ­è¶è¶£è¸«è¸è¸è¸¢è¸è¸©è¸è¸¡è¸èººè¼è¼è¼è¼©è¼¦è¼ªè¼è¼ï¿½".split("");

  for (j = 0; j != D[189].length; ++j) if (D[189][j].charCodeAt(0) !== 0xFFFD) {
    e[D[189][j]] = 48384 + j;
    d[48384 + j] = D[189][j];
  }

  D[190] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¼¥é©é®é¨é­é·é°é­é§é±éééééé»é·éªé¬é¤éé³é¼ééé°é²é­é±ééééé éééé ¡é «é é¢³é¤é¤é¤é¤é§é§é§é§é§é§é§é§éª·é«®é«¯é¬§é­é­é­·é­¯é´é´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é´éº©éº¾é»å¢¨é½åååååååªåååå³åå«å¹å©å¤å¸åªå¨å¥å±å¯å¬å¢å¶å£å¢¾å£å£å¥®å¬å¬´å­¸å¯°å°å½æ²ææ©æææ¶æ¾æææ°ææææ»æ¼ææææææ¿æææ¾æ´æææ¹æææ¸æ¨½æ¨¸æ¨ºæ©æ©«æ©æ¨¹æ©æ©¢æ©¡æ©æ©æ¨µæ©æ©æ­æ­·æ°æ¿æ¾±æ¾¡ï¿½".split("");

  for (j = 0; j != D[190].length; ++j) if (D[190][j].charCodeAt(0) !== 0xFFFD) {
    e[D[190][j]] = 48640 + j;
    d[48640 + j] = D[190][j];
  }

  D[191] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¿æ¾¤æ¿æ¾§æ¾³æ¿æ¾¹æ¾¶æ¾¦æ¾ æ¾´ç¾çççççç¹çççççç¨çç£çççç¢ççç´ç¸çºç§ç¥ç ççç¥ç£¨ç£ç£¬ç£§ç¦¦ç©ç©ç©ç©ç©çªºç¯ç°ç¯ç¯¤ç¯ç¯¡ç¯©ç¯¦ç³ç³ç¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¸ç¸ç¸ç¸£ç¸ç¸ç¸ç¸ç½¹ç¾²ç¿°ç¿±ç¿®è¨è³è©è¨è»èèèèèèè¨è©èèè­èªèèèèè¢èè¡¡è¤ªè¤²è¤¥è¤«è¤¡è¦ªè¦¦è«¦è«ºè««è«±è¬è«è«§è«®è«¾è¬è¬è«·è«­è«³è«¶è«¼è±«è±­è²è³´è¹è¸±è¸´è¹è¸¹è¸µè¼»è¼¯è¼¸è¼³è¾¨è¾¦éµé´é¸é²é¼éºé´éé é¶é¸é³é¯é¢é¼é«ééï¿½".split("");

  for (j = 0; j != D[191].length; ++j) if (D[191][j].charCodeAt(0) !== 0xFFFD) {
    e[D[191][j]] = 48896 + j;
    d[48896 + j] = D[191][j];
  }

  D[192] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éé¦é¡éé®éé»é§é¨éªéééééééééé¦éé °é ¸é »é ·é ­é ¹é ¤é¤é¤¨é¤é¤é¤¡é¤é§­é§¢é§±éª¸éª¼é«»é«­é¬¨é®é´é´£é´¦é´¨é´é´é»é»é¾é¾åªåå¡å²åµåååååï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åå£å£å£å£å¬°å¬ªå¬¤å­ºå°·å±¨å¶¼å¶ºå¶½å¶¸å¹«å½å¾½ææææ¦ææ²æ´ææææ æ°æ¦æ¬æ±æ¢æ­æææææªæªæªæª¢æªæ«æª£æ©¾æªæªæª æ­æ®®æ¯æ°æ¿æ¿±æ¿æ¿ æ¿æ¿¤æ¿«æ¿¯æ¾æ¿¬æ¿¡æ¿©æ¿æ¿®æ¿°ç§çç®ç¦ç¥ç­ç¬ç´ç çµçç°ç²ç©ç°ç¦ç¨ççççªç³çªç°ç¬ï¿½".split("");

  for (j = 0; j != D[192].length; ++j) if (D[192][j].charCodeAt(0) !== 0xFFFD) {
    e[D[192][j]] = 49152 + j;
    d[49152 + j] = D[192][j];
  }

  D[193] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç§ç­ç¯ç£·ç£ºç£´ç£¯ç¤ç¦§ç¦ªç©çª¿ç°ç°ç¯¾ç¯·ç°ç¯ ç³ ç³ç³ç³¢ç³ç³ç³ç¸®ç¸¾ç¹ç¸·ç¸²ç¹ç¸«ç¸½ç¸±ç¹ç¹ç¸´ç¸¹ç¹ç¸µç¸¿ç¸¯ç½ç¿³ç¿¼è±è²è°è¯è³èèèºèèè¿è½èè¾è¨èè±èªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èè¾èèèè¯èèè¨èè§èèè³èèè«è»èºèèè¤»è¤¶è¥è¤¸è¤½è¦¬è¬è¬è¬è¬è¬è¬ è¬è¬è¬è±è°¿è±³è³ºè³½è³¼è³¸è³»è¶¨è¹è¹è¹è¹è½è¼¾è½è½è¼¿é¿é½ééééé¹é£ééééé¨éµéé¥ééé¾é¬éé°éééééééé±é¸éééé éé¡é¢¶é¤µé¨ï¿½".split("");

  for (j = 0; j != D[193].length; ++j) if (D[193][j].charCodeAt(0) !== 0xFFFD) {
    e[D[193][j]] = 49408 + j;
    d[49408 + j] = D[193][j];
  }

  D[194] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é§¿é®®é®«é®ªé®­é´»é´¿éºé»é»é»é»é»é¼¾é½å¢åå®å£å£å¬¸å½æ£æ³æ´æ²æ¾ææºæ»æ·æ·ææ¦æª³æª¬æ«æª»æª¸æ«æª®æª¯æ­æ­¸æ®¯ççæ¿¾çæ¿ºççç»ç¼ç¾ç¸ç·çµç§ç¿çççï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çç½ç¿ç»ç¼ç¤ç¦®ç©¡ç©¢ç© ç«ç«ç°«ç°§ç°ªç°ç°£ç°¡ç³§ç¹ç¹ç¹ç¹ç¹¡ç¹ç¹ç½ç¿¹ç¿»è·è¶èèèèè©èèèè°èºè¹è¦è¯è¬è²è è¦è¦²è§´è¬¨è¬¹è¬¬è¬«è±è´è¹è¹£è¹¦è¹¤è¹è¹è»è½è½éééé«é¬ééééé¢é³é®é¬é°éééééééé¢ééééé¤é£é¦ï¿½".split("");

  for (j = 0; j != D[194].length; ++j) if (D[194][j].charCodeAt(0) !== 0xFFFD) {
    e[D[194][j]] = 49664 + j;
    d[49664 + j] = D[194][j];
  }

  D[195] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é­é¹é¡é¡é¡é¡é¡é¢ºé¤¾é¤¿é¤½é¤®é¦¥é¨é«é¬é¬é­é­é­é¯é¯é¯½é¯é¯éµéµéµ é» é¼é¼¬å³å¥å£å£å£¢å¯µé¾å»¬æ²æ·æ¶æµæææ ææ«¥æ«æ«æ«ççç¨çççççççç¢ç¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çºç½çç£çççç¡çç¤ç¦±ç©«ç©©ç°¾ç°¿ç°¸ç°½ç°·ç±ç¹«ç¹­ç¹¹ç¹©ç¹ªç¾ç¹³ç¾¶ç¾¹ç¾¸èè©èèªèè¤è¥è·è»è è è¹è¾è¥ è¥è¥è¥è­è­è­è­è­è­è­è­è­è´è´è¹¼è¹²èºè¹¶è¹¬è¹ºè¹´è½è½è¾­ééé±é®é¡éééééééé¢ééé¤éé¨éé´é£éªé§é¡éé»é¡ï¿½".split("");

  for (j = 0; j != D[195].length; ++j) if (D[195][j].charCodeAt(0) !== 0xFFFD) {
    e[D[195][j]] = 49920 + j;
    d[49920 + j] = D[195][j];
  }

  D[196] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¡é¡é¢¼é¥é¥é¨é¨é¬é¯¨é¯§é¯é¯é¶éµ¡éµ²éµªéµ¬éºéºéºéº´å¸å¨å·å¶å´å¼å£¤å­å­å­½å¯¶å·æ¸æºææææ¦æ§æ«¬ç¾ç°ç²çç»çç¢ç¥ç¤¦ç¤ªç¤¬ç¤«ç«ç«¶ç±ç±ç±ç³¯ç³°è¾®ç¹½ç¹¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çºç½èèè¦è»è¹èèºèèèèè è è¥¤è¦ºè§¸è­°è­¬è­¦è­¯è­è­«è´è´èºèºèºèºé´éééé½é¡é°é£é¥é¥é¦¨é¨«é¨°é¨·é¨µé°é°é¹¹éºµé»¨é¼¯é½é½£é½¡å·å¸åååå¤å±¬å·æ¼æ¾ææææ©æ«»æ¬æ«ºæ®²ççç§ççç©çç±çºçºç¾¼èè­èè £è ¢è ¡è è¥ªè¥¬è¦½è­´ï¿½".split("");

  for (j = 0; j != D[196].length; ++j) if (D[196][j].charCodeAt(0) !== 0xFFFD) {
    e[D[196][j]] = 50176 + j;
    d[50176 + j] = D[196][j];
  }

  D[197] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è­·è­½è´èºèºèºè½è¾¯éºé®é³éµéºé¸é²é«é¢é¸é¹é²é¿é¡§é¡¥é¥é©é©é©é¨¾é«é­é­é°­é°¥é¶¯é¶´é·é¶¸éºé»¯é¼é½é½¦é½§å¼å»åååå­¿å·å·å½æ¿æ¤æ¬æ­¡çççç¤çç®ç¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¦³ç± ç±è¾è½èè¥²è¥¯è§¼è®è´è´èºèºè½¡ééééé½é¾ééé¡«é¥é©é©é«é¬é±é°±é°¾é°»é·é·é¼´é½¬é½ªé¾åå·ææ£æ«æªæ¬æ¬çç«ç±¤ç±£ç±¥çºçºçºè¢è¸è¿è ±è®ééé£é é¤é¨é¡¯é¥é©é©é©é«é«é«é±é±é±é·¥éºé»´åå£©æ¬çç±ç²çç½ç¾è ¶è ¹è¡¢è®è®ï¿½".split("");

  for (j = 0; j != D[197].length; ++j) if (D[197][j].charCodeAt(0) !== 0xFFFD) {
    e[D[197][j]] = 50432 + j;
    d[50432 + j] = D[197][j];
  }

  D[198] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è®è·è´ééªééééé¡°é©é¬¢é­é±é·¹é·ºé¹¼é¹½é¼é½·é½²å»³æ¬ç£ç±¬ç±®è »è§èº¡éé²é°é¡±é¥é«é¬£é»ç¤çè®é·éé©¢é©¥çºè®èºªéé½é¾é¼é±·é±¸é»·è±é¿é¸ç¨é©ªé¬±é¸é¸ç±²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[198].length; ++j) if (D[198][j].charCodeAt(0) !== 0xFFFD) {
    e[D[198][j]] = 50688 + j;
    d[50688 + j] = D[198][j];
  }

  D[201] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¹ä¹åµååä¸ä¸ä¹äºåï¨å±®å½³ä¸åä¸ä¸®äºä»ä»ä»åå¼å¬å¹å å¤å¤¬å°å·¿æ¡æ®³æ¯æ°ç¿ä¸±ä¸¼ä»¨ä»ä»©ä»¡ä»ä»åååå¢å£å¤å¤¯å®å®å°å°»å±´å±³å¸åºåºå¿æææ°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ°¶æ±æ°¿æ°»ç®ç°çç¦¸èéä¼ä¼ä¼¬ä»µä¼ä»±ä¼ä»·ä¼ä¼ä¼ä¼ä¼¢ä¼ä¼ä»´ä¼å±åååå¦å¢ååååå¡åå®åªå´å¤¼å¦å¥¼å¦å¥»å¥¾å¥·å¥¿å­å°å°¥å±¼å±ºå±»å±¾å·å¹µåºå¼å¼å½´å¿å¿å¿æææ¤æ¡æ¦æ¢ææ ææ¥æ¯æ®æ¾æ¹æ¸æ»æºæ¿æ¼æ³æ°æ±æ±æ±æ±æ±æ±æ±ï¿½".split("");

  for (j = 0; j != D[201].length; ++j) if (D[201][j].charCodeAt(0) !== 0xFFFD) {
    e[D[201][j]] = 51456 + j;
    d[51456 + j] = D[201][j];
  }

  D[202] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ±ç±çç´çµççªç¿ç©µç½è¸è¼èè½è¿èè¥¾éééééé¢é¤é é£ä½ä¼»ä½¢ä½ä½ä½¤ä¼¾ä½§ä½ä½ä½ä½ä¼­ä¼³ä¼¿ä½¡åå¹ååå¡å­å®åå£å²ååå°å·åªååååå¥åï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å½ååå¨å¤åå®å§å¥ååååååå¤å¥å¦¦å¦å¦ å¦å¦å¦¢å¦å¦å¦§å¦¡å®å®å°¨å°ªå²å²å²å²å²å²å²å²å²å²å· å¸å¸åºåºåºåºåºå¼å¼å½¸å½¶å¿å¿å¿å¿­å¿¨å¿®å¿³å¿¡å¿¤å¿£å¿ºå¿¯å¿·å¿»æå¿´æºæææææææ±æ»æºæ°æææ·æ½æ²æ´æ·æ°æ´æ³æ²æµææï¿½".split("");

  for (j = 0; j != D[202].length; ++j) if (D[202][j].charCodeAt(0) !== 0xFFFD) {
    e[D[202][j]] = 51712 + j;
    d[51712 + j] = D[202][j];
  }

  D[203] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æææææææææ¯æ°æ°æ±¸æ±§æ±«æ²æ²æ²æ±±æ±¯æ±©æ²æ±­æ²æ²æ²æ±¦æ±³æ±¥æ±»æ²ç´çºç£ç¿ç½ççççºçççççççºç¹çççç¤½è´èèèèèèèèèèèï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèè±¸è¿è¾¿éé¡é¥éé§é é°é¨é¯é­ä¸³ä¾ä½¼ä¾ä½½ä¾ä¾ä½¶ä½´ä¾ä¾ä½·ä½ä¾ä½ªä¾ä½¹ä¾ä½¸ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä½«ä½®åå¼å¾åµå²å³åå±å¼ååå¼åååå¿ååååå«åºå¾å¥å¬å´å¦åå¯å¡å åå£å§å¤å·å¹å¯å²å­å«å±å°å¶ååµå»å³å´å¢ï¿½".split("");

  for (j = 0; j != D[203].length; ++j) if (D[203][j].charCodeAt(0) !== 0xFFFD) {
    e[D[203][j]] = 51968 + j;
    d[51968 + j] = D[203][j];
  }

  D[204] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¨å½å¤å¥å¦µå¦ºå§å§å¦²å§å§å¦¶å¦¼å§å§å¦±å¦½å§å§å¦´å§å­¢å­¥å®å®å±å±å²®å²¤å² å²µå²¯å²¨å²¬å²å²£å²­å²¢å²ªå²§å²å²¥å²¶å²°å²¦å¸å¸å¸å¼¨å¼¢å¼£å¼¤å½å¾å½¾å½½å¿å¿¥æ­æ¦ææ²æï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ´æææ³æææ¬æ¢æææ®æææææææ½æ­æ´ææ¾æªæ¶ææ®æ³æ¯æ»æ©æ°æ¸æ½æ¨æ»ææ¼ææææ»æææææ½æææ¶æææ¬æææ¶æ»ææææ´æææºæææææ½ææ¸æ¹ææ¬¥æ®æ­¾æ¯æ°æ²æ³¬æ³«æ³®æ³æ²¶æ³æ²­æ³§æ²·æ³æ³æ²ºæ³æ³æ³­æ³²ï¿½".split("");

  for (j = 0; j != D[204].length; ++j) if (D[204][j].charCodeAt(0) !== 0xFFFD) {
    e[D[204][j]] = 52224 + j;
    d[52224 + j] = D[204][j];
  }

  D[205] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ³æ³æ²´æ²æ²æ²æ³æ³æ´°æ³æ³æ²°æ³¹æ³æ³©æ³ççççççççççççªççççççççççç¤ç¡ç­ç¦ç¢ç ç¬ççç¨ç¿çç¾ççç¯ç³ç±ç°çµç¸ç¼ç¹ç»çºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç·ç¥ç¤¿ç§ç©¸ç©»ç«»ç±µç³½èµèè®è£è¸èµè­è è èè«èèèèµè§è®è¼èèºè´è¨è¡è©èè¤èè¶è¢è°è¯è­è®è±è¿è¿è¿è¿è¿è¿è¿é²é´é¯é³é°é¹é½é¼éºéä¿ä¿ä¿ä¾²ä¿ä¿ä¿ä¿ä¿ä¿ä¾»ä¾³ä¿ä¿ä¿ä¾ºä¿ä¾¹ä¿¬ååååå½å¼åååååºå¡å­å¥åï¿½".split("");

  for (j = 0; j != D[205].length; ++j) if (D[205][j].charCodeAt(0) !== 0xFFFD) {
    e[D[205][j]] = 52480 + j;
    d[52480 + j] = D[205][j];
  }

  D[206] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åèå·å®åå¶ååå å°å¼å¢å¾å²åå°åµååå¤ååååååååå¥ååå£´å¤å¥å§¡å§å§®å¨å§±å§å§ºå§½å§¼å§¶å§¤å§²å§·å§å§©å§³å§µå§ å§¾å§´å§­å®¨å±å³å³å³å³å³å³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å³å³å³å³å³å³å³å³å³å³å³å³å³å³¸å·¹å¸¡å¸¢å¸£å¸ å¸¤åº°åº¤åº¢åºåº£åº¥å¼å¼®å½å¾æ·æ¹ææ²æææææææææææ¤æææ¦æ®ææææææµæææ«æ¹æææ¸æ¶ææææºææ»æ°æææªæ¿æ¶æ¡æ²æµææ¦æ¢æ³æ«æºææ´æ¹æ®ææææ²ææºï¿½".split("");

  for (j = 0; j != D[206].length; ++j) if (D[206][j].charCodeAt(0) !== 0xFFFD) {
    e[D[206][j]] = 52736 + j;
    d[52736 + j] = D[206][j];
  }

  D[207] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ææ»æ¸æææ·ææ«æ¤ææµææ³æ·æ¶æ®æ£ææ¹ææ§æ°æ²æ¼ææ­ææ®æ¦ææºææææªææ¬¨æ®æ®æ®¶æ¯æ¯æ¯ æ° æ°¡æ´¨æ´´æ´­æ´æ´¼æ´¿æ´æ´æ³æ´³æ´æ´æ´ºæ´æ´æ´æ´æµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ´æ´æ´·æ´æ´æµæ´æ´ æ´¬æ´æ´¢æ´æ´ç·çç¾ç±ç°ç¡ç´çµç©çççç¬ç°ç³ç®çç¤ç¨ç«ççªç¦ç£çççççç¹ç¶çµç´ç«ç¿çç¾ççç¸çç¬ç®ç®ççç§çªç¹ççççççç·ç»çºç§ç¨ç ç ç ç ç ç ç ç ç ç ç¥ç¥ç¥ç¥ç¥ç§ç§ç§ç§ç§çªï¿½".split("");

  for (j = 0; j != D[207].length; ++j) if (D[207][j].charCodeAt(0) !== 0xFFFD) {
    e[D[207][j]] = 52992 + j;
    d[52992 + j] = D[207][j];
  }

  D[208] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç©¾ç«ç¬ç¬ç±ºç±¸ç±¹ç±¿ç²ç²ç´ç´ç´ç½ç¾ç¾ç¾¾èèèèè·èèè èèèèèè£èèèèèèèè¦èè¿è¡èèè¾è¹èè¨èèèºè«èè´è¬è¡è²èµèè»è¶è°èªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¤è èºè³è­è·è´è¼è³è¡è¡è¡§è¡ªè¡©è§è¨è¨èµ²è¿£è¿¡è¿®è¿ é±é½é¿ééé¾éééééééééééååååå¢å°åä¿µä¿´å³å·å¬ä¿¶ä¿·ååå å§åµå¯å±åååååååååå¡åååååå¢åååå¦å¢ååå§å³å¤åå¿ååå«ååå±ï¿½".split("");

  for (j = 0; j != D[208].length; ++j) if (D[208][j].charCodeAt(0) !== 0xFFFD) {
    e[D[208][j]] = 53248 + j;
    d[53248 + j] = D[208][j];
  }

  D[209] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åå»å·å¸å ååååååå ²åååºåå½å¼å¸å¶å¿ååå¹åå¤å¥å¨å¨å¨­å¨®å¨å¨å¨å¨å¨å¨³å­¬å®§å®­å®¬å°å±å±å³¬å³¿å³®å³±å³·å´å³¹å¸©å¸¨åº¨åº®åºªåº¬å¼³å¼°å½§æææ§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ææ¢æææææææææææææææ²æææ¬æææ¶ææ¤æ¹æææ¼æ©ææ´ææææ­ææ³æææ¸ææææææææææææææææ æ æ¡æ ²æ ³æ »æ¡æ¡æ æ ±æ æ µæ «æ ­æ ¯æ¡æ¡æ ´æ æ æ æ ¦æ ¨æ ®æ¡æ ºæ ¥æ  æ¬¬æ¬¯æ¬­æ¬±æ¬´æ­­èæ®æ¯¦æ¯¤ï¿½".split("");

  for (j = 0; j != D[209].length; ++j) if (D[209][j].charCodeAt(0) !== 0xFFFD) {
    e[D[209][j]] = 53504 + j;
    d[53504 + j] = D[209][j];
  }

  D[210] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¯¨æ¯£æ¯¢æ¯§æ°¥æµºæµ£æµ¤æµ¶æ´æµ¡æ¶æµæµ¢æµ­æµ¯æ¶æ¶æ·¯æµ¿æ¶æµæµ§æµ æ¶æµ°æµ¼æµæ¶æ¶æ´¯æµ¨æ¶æµ¾æ¶æ¶æ´æ¶æµ»æµ½æµµæ¶çççççç¼¹ç¢çççç çççççççç¡çç¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç·ç¶ççºç´ç¾ç¶ç³ç»çççç¥çç¼ç§ç£ç©ççççççççç¨ççç´çµç¡ççç°çç»ççç¿ç¶çºçççççççç£ççççç¢ç§ç £ç ¬ç ¢ç µç ¯ç ¨ç ®ç «ç ¡ç ©ç ³ç ªç ±ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç§«ç§¬ç§ ç§®ç§­ç§ªç§ç§ç§çªçªçªçªçªçªçªç«ç¬ï¿½".split("");

  for (j = 0; j != D[210].length; ++j) if (D[210][j].charCodeAt(0) !== 0xFFFD) {
    e[D[210][j]] = 53760 + j;
    d[53760 + j] = D[210][j];
  }

  D[211] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç²ç²ç²ç²ç²ç²ç²ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç½ç½¡ç½ç½ ç½ç½ç¾ç¾ç¿ç¿ç¿èè¾è¹èºè²è¹èµèè»èèè¯è¥è³è­èèèè¥èè¿èè¦èè¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèèªèè¼èèè¤è è·è¯è©èèèèèè¬èè§èèèè¢è¨èèèèèèèèèèè¥èè¡è§èèèèèèè¡è¡è¡­è¡µè¡¶è¡²è¢è¡±è¡¿è¡¯è¢è¡¾è¡´è¡¼è¨è±è±è±»è²¤è²£èµ¶èµ¸è¶µè¶·è¶¶è»è»è¿¾è¿µéè¿¿è¿»éè¿¼è¿¶éé ééé£éé¥ééééé¤éï¿½".split("");

  for (j = 0; j != D[211].length; ++j) if (D[211][j].charCodeAt(0) !== 0xFFFD) {
    e[D[211][j]] = 54016 + j;
    d[54016 + j] = D[211][j];
  }

  D[212] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éééé¢éééé¼é££é«é¬¯ä¹¿å°åªå¡åå åååå²åååååå¢åååå©å«å£å¤ååå®å³åååå«å­å¬å®ååå­ååµå¶å¼ååå´åªåå¢å¶åµå°ååï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åå²å¥åå¹åå­å»ååååå»å å¢å¶åå´å å­å½å å¸å å³åå å®å£å²å¥å¬å¡å å¼å å§å å å±å©å°å å å¥å© å©å©å©§å©å¨¸å¨µå©­å©å©å©¥å©¬å©å©¤å©å©å©å©å©å©å©åªå¨¾å©å¨¹å©å©°å©©å©å©å©å©å©å­²å­®å¯å¯å±å´å´å´å´å´ å´å´¨å´å´¦å´¥å´ï¿½".split("");

  for (j = 0; j != D[212].length; ++j) if (D[212][j].charCodeAt(0) !== 0xFFFD) {
    e[D[212][j]] = 54272 + j;
    d[54272 + j] = D[212][j];
  }

  D[213] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å´°å´å´£å´å´®å¸¾å¸´åº±åº´åº¹åº²åº³å¼¶å¼¸å¾å¾å¾ææææ¾æ°æºææææ¤ææææ±ææ·ææ¿ææææ²æ¥æææ½æ½ææ­æææ«ææ¯æææ®æ¯æµææ­æ®æ¼æ¤æ»æï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¸æææææ°æææ¥æ¡ææææ¢ææ¡¹æ¢æ¢æ¢æ¡­æ¡®æ¢®æ¢«æ¥æ¡¯æ¢£æ¢¬æ¢©æ¡µæ¡´æ¢²æ¢æ¡·æ¢æ¡¼æ¡«æ¡²æ¢ªæ¢æ¡±æ¡¾æ¢æ¢æ¢æ¢ æ¢æ¢¤æ¡¸æ¡»æ¢æ¢æ¢æ¡½æ¬¶æ¬³æ¬·æ¬¸æ®æ®æ®æ®æ®æ°ªæ·æ¶«æ¶´æ¶³æ¹´æ¶¬æ·©æ·¢æ¶·æ·¶æ·æ¸æ·æ· æ·æ·æ¶¾æ·¥æ·æ·æ·æ·´æ·æ¶½æ·­æ·°æ¶ºæ·æ·æ·æ·ï¿½".split("");

  for (j = 0; j != D[213].length; ++j) if (D[213][j].charCodeAt(0) !== 0xFFFD) {
    e[D[213][j]] = 54528 + j;
    d[54528 + j] = D[213][j];
  }

  D[214] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ·æ·²æ·æ·½æ·æ·æ·£æ¶»çºçç·çç´çç°çç³çç¼ç¿çççç¸ç¶çççç¾ç»ç¼ç¿çççççççç¿çççç¶ç¸çµççç½çççºç¼ç¿ççç´çç¤ç£çççï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çççççççç¹ç¯ç­ç±ç²ç´ç³ç½ç¥ç»çµç¡ç¡ç¡ç¡ç¡ç¡ç ¦ç¡ç¡ç¥¤ç¥§ç¥©ç¥ªç¥£ç¥«ç¥¡ç¦»ç§ºç§¸ç§¶ç§·çªçªçªç¬µç­ç¬´ç¬¥ç¬°ç¬¢ç¬¤ç¬³ç¬ç¬ªç¬ç¬±ç¬«ç¬­ç¬¯ç¬²ç¬¸ç¬ç¬£ç²ç²ç²ç²£ç´µç´½ç´¸ç´¶ç´ºçµç´¬ç´©çµçµç´¾ç´¿çµç´»ç´¨ç½£ç¾ç¾ç¾ç¾ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿èï¿½".split("");

  for (j = 0; j != D[214].length; ++j) if (D[214][j].charCodeAt(0) !== 0xFFFD) {
    e[D[214][j]] = 54784 + j;
    d[54784 + j] = D[214][j];
  }

  D[215] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèèèèè¥èèè­èè¬èè¡èè§èè¢èè¸è³èºè´è²è´èè£è¨èèºè³è¤è´èèèèèµèè©è½èèèèèªèè¾è¥è¯èèè°è¿è¦èè®è¶èèèè¿è·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèèºè°èè¹è³è¸èè´è»è¼èè½è¾è¡è¢è¢è¢¨è¢¢è¢ªè¢è¢è¢¡è¢è¢è¢§è¢è¢è¢è¢¤è¢¬è¢è¢è¢è¦è§è§è§è¨°è¨§è¨¬è¨è°¹è°»è±è±è±½è²¥èµ½èµ»èµ¹è¶¼è·è¶¹è¶¿è·è»è»è»è»è»è» è»¡é¤ééééé¡é¯éªé°é´é²é³éé«é¬é©éééééé¬é´é±é³é¸é¤é¹éªï¿½".split("");

  for (j = 0; j != D[215].length; ++j) if (D[215][j].charCodeAt(0) !== 0xFFFD) {
    e[D[215][j]] = 55040 + j;
    d[55040 + j] = D[215][j];
  }

  D[216] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é«é·é¨é®éºééé¼é­é«é±é¯é¿éªé é£¥é¦åååååå£ååååå¨ååååååååå¤å§åå¨å¥å­å·åå¢ååååµåå£åå¤å½åå¦å¿åå¡ååå ©å ·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å å å §å £å ¨åµå¡å ¥å å å ³å ¿å ¶å ®å ¹å ¸å ­å ¬å »å¥¡åª¯åªåªå©ºåª¢åªå©¸åª¦å©¼åª¥åª¬åªåª®å¨·åªåªåªåªåªåª©å©»å©½åªåªåªåªåªå¯ªå¯å¯å¯å¯å¯å¯å°å°°å´·åµåµ«åµåµå´¿å´µåµåµåµå´³å´ºåµå´½å´±åµåµå´¹åµå´¸å´¼å´²å´¶åµåµå¹å¹å½å¾¦å¾¥å¾«ææ¹ææ¢æææï¿½".split("");

  for (j = 0; j != D[216].length; ++j) if (D[216][j].charCodeAt(0) !== 0xFFFD) {
    e[D[216][j]] = 55296 + j;
    d[55296 + j] = D[216][j];
  }

  D[217] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ²ææææµææ¸æ¼æ¾ææææææ¿æææææ±æ°ææ¥æ¨æ¯æææ³ææ æ¶ææ²æµæ¡ææ¾æææææææææææ°æææ²æ§æªæ¤ææ¨æ¥ææææ®ææï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¼æ¬æ»ææ±æ¹æªæ²ææ¤æ£æ¤æ£æ¤ªæ£¬æ£ªæ£±æ¤æ£æ£·æ£«æ£¤æ£¶æ¤æ¤æ£³æ£¡æ¤æ£æ¤æ¥°æ¢´æ¤æ£¯æ£æ¤æ£¸æ£æ£½æ£¼æ£¨æ¤æ¤æ¤æ£æ£æ£æ£æ£¦æ£´æ£æ¤æ£æ£©æ¤æ¤¥æ£æ¬¹æ¬»æ¬¿æ¬¼æ®æ®æ®æ®æ®½æ¯°æ¯²æ¯³æ°°æ·¼æ¹æ¹æ¸æ¹æºæ¸¼æ¸½æ¹æ¹¢æ¸«æ¸¿æ¹æ¹æ¹³æ¸æ¸³æ¹æ¹æ¹æ¸»æ¸æ¸®æ¹ï¿½".split("");

  for (j = 0; j != D[217].length; ++j) if (D[217][j].charCodeAt(0) !== 0xFFFD) {
    e[D[217][j]] = 55552 + j;
    d[55552 + j] = D[217][j];
  }

  D[218] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¹¨æ¹æ¹¡æ¸±æ¸¨æ¹ æ¹±æ¹«æ¸¹æ¸¢æ¸°æ¹æ¹¥æ¸§æ¹¸æ¹¤æ¹·æ¹æ¹¹æ¹æ¹¦æ¸µæ¸¶æ¹ç çç¯ç»ç®ç±ç£ç¥ç¢ç²çç¨çºççççççççççç°ç¢ç±ç³ç§ç²ç­ç¦ç£çµçç®ç¬ç°ç«çï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çç¡ç­ç±ç¤ç£çç©ç ç²ç»ç¯ç¯ç¬ç§çç¡ç¦ççç¤ççççççççççççççç¬ç¡ ç¡¤ç¡¥ç¡ç¡­ç¡±ç¡ªç¡®ç¡°ç¡©ç¡¨ç¡ç¡¢ç¥´ç¥³ç¥²ç¥°ç¨ç¨ç¨ç¨ç¨çªç«¦ç«¤ç­ç¬»ç­ç­ç­ç­ç­ç­ç­ç²¢ç²ç²¨ç²¡çµçµ¯çµ£çµçµçµ§çµªçµçµ­çµçµ«çµçµçµ©çµçµçµç¼¾ç¼¿ç½¥ï¿½".split("");

  for (j = 0; j != D[218].length; ++j) if (D[218][j].charCodeAt(0) !== 0xFFFD) {
    e[D[218][j]] = 55808 + j;
    d[55808 + j] = D[218][j];
  }

  D[219] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç½¦ç¾¢ç¾ ç¾¡ç¿èèèè¾èèèèèèè½èèºè¦è®è·è¸è¹èè¼è½è¿èµè»èè¹è£èè¨èè§è¤è¼è¶èèèè«è£è¿èèè¥èè¿è¡èèèèµèèèèèèèè³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèºèèèªèèè¬è®èè»èè¢èèè¾èè¢è¦èè£èèªèè«èè¬è©èè¨èè¡è¡è¡è¢ºè£è¢¹è¢¸è£è¢¾è¢¶è¢¼è¢·è¢½è¢²è¤è£è¦è¦è¦è§è§è§è©è©è¨¹è©è©è©è©è©è©è©è©è©è©è©è©è±è²è²è²ºè²¾è²°è²¹è²µè¶è¶è¶è·è·è·è·è·è·è·è·è·è·è·è·è»¯è»·è»ºï¿½".split("");

  for (j = 0; j != D[219].length; ++j) if (D[219][j].charCodeAt(0) !== 0xFFFD) {
    e[D[219][j]] = 56064 + j;
    d[56064 + j] = D[219][j];
  }

  D[220] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è»¹è»¦è»®è»¥è»µè»§è»¨è»¶è»«è»±è»¬è»´è»©é­é´é¯éé¬éé¿é¼éé¹é»éééééé¡é¤éé¢é ééé¥ééé¦ééééé¿é½ééé§ééé¤ééééé»ééééé¾éï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ééééééé±é°é¬é°é®é é¢©é£«é³¦é»¹äºäºäº¶å½å¿åå®ååå´ååå°ååºå±ååå¶å¸ååºå¸å»å¼ååååååååååå©å¿ååååå¢ååå²ååååå¡å¡¨å¡¤å¡å¡å¡å¡¯å¡å¡å¡å¡å¡¥å¡å ½å¡£å¡±å£¼å«å«å«åªºåª¸åª±åªµåª°åª¿å«åª»å«ï¿½".split("");

  for (j = 0; j != D[220].length; ++j) if (D[220][j].charCodeAt(0) !== 0xFFFD) {
    e[D[220][j]] = 56320 + j;
    d[56320 + j] = D[220][j];
  }

  D[221] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åª·å«å«åª´åª¶å«åª¹åªå¯å¯å¯å°å°³åµ±åµ£åµåµ¥åµ²åµ¬åµåµ¨åµ§åµ¢å·°å¹å¹å¹å¹å¹å»å»å»å»å»å½å¾¯å¾­æ·æææ«ææ¶æ²æ®ææ¯ææ©ææ é¨æ£æ¥æ¤ææ±æ«ææææ æ¤ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ³æææææ¹æ·æ¢æ£ææ¦æ°æ¨ææµæ¯ææææ¥æ§ææ§ææ®æ¡ææ¯æææææææææææ¸æ æ¥¦æ¥æ¤¸æ¥æ¥¢æ¥±æ¤¿æ¥æ¥ªæ¤¹æ¥æ¥æ¥æ¥ºæ¥æ¥æ¤µæ¥¬æ¤³æ¤½æ¥¥æ£°æ¥¸æ¤´æ¥©æ¥æ¥¯æ¥æ¥¶æ¥æ¥æ¥´æ¥æ¤»æ¥æ¤·æ¥æ¥æ¥æ¤²æ¥æ¤¯æ¥»æ¤¼æ­æ­æ­æ­æ­æ­æ®ï¨æ¯»æ¯¼ï¿½".split("");

  for (j = 0; j != D[221].length; ++j) if (D[221][j].charCodeAt(0) !== 0xFFFD) {
    e[D[221][j]] = 56576 + j;
    d[56576 + j] = D[221][j];
  }

  D[222] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¯¹æ¯·æ¯¸æºæ»æ»æºæ»æºæºæºæº æº±æº¹æ»æ»æº½æ»æºæ»æº·æº°æ»æº¦æ»æº²æº¾æ»æ»æ»æºæºæºæºæº¤æº¡æº¿æº³æ»æ»æºæº®æº£çççç£ç ççç¢ç²ç¸çªç¡ççççç°çççï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çççççççççç¼çç»çºçççççççççççççççççç¡ç¿ç¾ç½çç¹ç·æ¦ç¯ççç·ç¾ç¼ç¹ç¸çç»ç¶ç­çµç½ççµçççç çççç©ç§ççç­ç ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢¡ç¢ç¡¹ç¢ç¢ç¢ç¡»ç¥¼ç¦ç¥½ç¥¹ç¨ç¨ç¨ç¨ç¨ç¨ç¨¢ç¨ï¿½".split("");

  for (j = 0; j != D[222].length; ++j) if (D[222][j].charCodeAt(0) !== 0xFFFD) {
    e[D[222][j]] = 56832 + j;
    d[56832 + j] = D[222][j];
  }

  D[223] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¨ç¨çª£çª¢çªç««ç­¦ç­¤ç­­ç­´ç­©ç­²ç­¥ç­³ç­±ç­°ç­¡ç­¸ç­¶ç­£ç²²ç²´ç²¯ç¶ç¶ç¶ç¶çµ¿ç¶çµºç¶çµ»ç¶çµ¼ç¶ç¶ç¶çµ½ç¶ç½­ç½«ç½§ç½¨ç½¬ç¾¦ç¾¥ç¾§ç¿ç¿è¡è¤è è·èè©èè¢è²æ¡èè¶è§è¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èè¡èèèèèèè±è¿èè¶è¹èèè¥èèèè§è°èè½èèè´è³èèèè·èºè´èºèè¸è²èè©èèè¯èè­èè°è¹èèèè¯èèè»èè¶è³è¨è¾èè«è èè®èèèè·èèºèèµèè¸èèèè¶èèè£è£è£è£è£è£è£è£è£è¦è¦è§è§¥è§¤ï¿½".split("");

  for (j = 0; j != D[223].length; ++j) if (D[223][j].charCodeAt(0) !== 0xFFFD) {
    e[D[223][j]] = 57088 + j;
    d[57088 + j] = D[223][j];
  }

  D[224] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è§¡è§ è§¢è§è§¦è©¶èªè©¿è©¡è¨¿è©·èªèªè©µèªèªè©´è©ºè°¼è±è±è±¥è±¤è±¦è²è²è²è³èµ¨èµ©è¶è¶è¶è¶è¶è¶è¶è¶è¶è·°è· è·¬è·±è·®è·è·©è·£è·¢è·§è·²è·«è·´è¼è»¿è¼è¼è¼è¼è¼è¼è¼éé¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ééé½ééééééééé®é¯ééé°éºé¦é³é¥ééé®ééé­é¬éé é§é¯é¶é¡é°é±éé£éé²ééééé²ééééééééééºé½é¸éµé³é·é¸é²é é é é¢¬é£¶é£¹é¦¯é¦²é¦°é¦µéª­éª«é­é³ªé³­é³§éºé»½å¦ååå¨å³ååªåå¤åå¬å°å¯å£å ï¿½".split("");

  for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 0xFFFD) {
    e[D[224][j]] = 57344 + j;
    d[57344 + j] = D[224][j];
  }

  D[225] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åååå©å«å°å¬å§åååå¼ååååååºååå¿å¹å¢å¡¼å¢å¢å¢å¢å¡¿å¡´å¢å¡ºå¢å¢å¢å¡¶å¢å¢å¡»å¢å¢å£¾å¥«å«å«®å«¥å«å«ªå«å«­å««å«³å«¢å« å«å«¬å«å«å«å«¨å«å­·å¯ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¯£å±£å¶å¶åµ½å¶åµºå¶åµ·å¶å¶å¶åµ¾åµ¼å¶åµ¹åµ¿å¹å¹å¹å»å»å»å»å»å»å»å»å»å½å½å½¯å¾¶æ¬æ¨æææ±æ³æææ²æ¬ææ´ææºææ¥æ»æªæ¡ææ©æ§æ«æ«ææææ´æ¶æ²æ³æ½æµæ¦æ¦æææææææ ææ¿æ¿æ¬æ«ææ¥æ·æ³æ æ¡æ ææææ¢æ¦±æ¦¶æ§ï¿½".split("");

  for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 0xFFFD) {
    e[D[225][j]] = 57600 + j;
    d[57600 + j] = D[225][j];
  }

  D[226] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¦ æ§æ¦æ¦°æ¦¬æ¦¼æ¦æ¦æ¦æ¦§æ¦æ¦©æ¦¾æ¦¯æ¦¿æ§æ¦½æ¦¤æ§æ¦¹æ§æ¦æ§æ¦³æ¦æ¦ªæ¦¡æ¦æ§æ¦æ¦æ§æ¦µæ¦¥æ§æ­æ­æ­æ®æ®æ® æ¯æ¯æ¯¾æ»æ»µæ»±æ¼æ¼¥æ»¸æ¼·æ»»æ¼®æ¼æ½æ¼æ¼æ¼§æ¼æ¼»æ¼æ»­æ¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¼¶æ½³æ»¹æ»®æ¼­æ½æ¼°æ¼¼æ¼µæ»«æ¼æ¼æ½æ¼æ»½æ»¶æ¼¹æ¼æ»¼æ¼ºæ¼æ¼æ¼æ¼æ¼¡çççççççç»ççççççççççççç¢ç³ç±çµç²ç§ç®çççç½ççççççççç¸çç¼ççç®çç¯ç¾çç¢²ç¢ªç¢´ç¢­ç¢¨ç¡¾ç¢«ç¢ç¢¥ç¢ ç¢¬ç¢¢ç¢¤ç¦ç¦ç¦ç¦ç¦ç¦ç¦ï¿½".split("");

  for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 0xFFFD) {
    e[D[226][j]] = 57856 + j;
    d[57856 + j] = D[226][j];
  }

  D[227] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¦ç¦ç¦ç¦ç¨«ç©ç¨°ç¨¯ç¨¨ç¨¦çª¨çª«çª¬ç«®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç®åç®ç®¤ç®ç²»ç²¿ç²¼ç²ºç¶§ç¶·ç·ç¶£ç¶ªç·ç·ç·ç¶ç·ç·ç·ç·ç·ç¶¯ç¶¹ç¶ç¶¼ç¶ç¶¦ç¶®ç¶©ç¶¡ç·ç½³ç¿¢ç¿£ç¿¥ç¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¤èèèèèèèèèèèè¤è¡èèºèèè¬è®è«è¹è´èèèªèè±èèè§è»è¢èèèèè©è¯è¨èèè¶èè èèèèè°èè¡è³è£è¨è«èè®èè¡èèèè¬èè¾èè è²èªè­è¼èèºè±èµèè¦è§è¸è¤èè°èè£·è£§è£±è£²è£ºè£¾è£®è£¼è£¶è£»ï¿½".split("");

  for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 0xFFFD) {
    e[D[227][j]] = 58112 + j;
    d[58112 + j] = D[227][j];
  }

  D[228] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è£°è£¬è£«è¦è¦¡è¦è¦è§©è§«è§¨èª«èªèªèªèªèªè°½è±¨è±©è³è³è³è¶è¸è¸è·¿è¸è·½è¸è¸è¸è¸è¸è·¾è¸è¸è¼è¼è¼è¼é£éé é¢éééé¤é¡ééºé²é¹é³é¥é¤é¶ééºé ééªéï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¦éé«é¹éé¿é£é®éééé¢é½éé¡ééééé§é¾éé©ééé­éé¡é¿éé½éºé¾éééé»ééé¿ééé é¢­é¢®é¤é¤é¤é¦é¦é§é¦¹é¦»é¦ºé§é¦½é§éª±é«£é«§é¬¾é¬¿é­ é­¡é­é³±é³²é³µéº§å¿åå°å¸ååå¶å¾ååå½åååå±å¯ååååµåååååï¿½".split("");

  for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 0xFFFD) {
    e[D[228][j]] = 58368 + j;
    d[58368 + j] = D[228][j];
  }

  D[229] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ååå³å½å¬å¾å¸åªåºåå¢«å¢å¢±å¢ å¢£å¢¯å¢¬å¢¥å¢¡å£¿å«¿å«´å«½å«·å«¶å¬å«¸å¬å«¹å¬å¬å¬å¬å±§å¶å¶å¶å¶å¶¢å¶å¶å¶ å¶å¶¡å¶å¶å¹©å¹å¹ å¹ç·³å»å»å»¡å½å¾²æææ¹æ±æ°æ¢æï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æææ¯æ­æææªæ¡ææ¦æ³æ­æ®æ°ææ ææææææææ£ææ¨æ±ææ¶æºæ¹æ»æ²æ³æµæ°æ©æ²æ·æªæ¯æ¨æ¨æ¨æ§¥æ§¸æ¨æ§±æ§¤æ¨ æ§¿æ§¬æ§¢æ¨æ¨æ§¾æ¨§æ§²æ§®æ¨æ§·æ§§æ©æ¨æ§¦æ§»æ¨æ§¼æ§«æ¨æ¨æ¨æ¨¥æ¨æ§¶æ¨¦æ¨æ§´æ¨æ­æ®¥æ®£æ®¢æ®¦æ°æ°æ¯¿æ°æ½æ¼¦æ½¾æ¾æ¿æ¾ï¿½".split("");

  for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 0xFFFD) {
    e[D[229][j]] = 58624 + j;
    d[58624 + j] = D[229][j];
  }

  D[230] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¾æ¾æ¾æ½¢æ½æ¾æ½æ¾æ½¶æ½¬æ¾æ½æ½²æ½æ½æ½æ¾æ¾æ½æ¼æ½¡æ½«æ½½æ½§æ¾æ½æ¾æ½©æ½¿æ¾æ½£æ½·æ½ªæ½»ç²ç¯çç°ç çç©çµçç¥çç¤ç¡çªçç§ç³ççççççç ççç¡ççï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¢çççççç½ççç¼ç¹ççç¾ç¥ççççç£çç¨çççççççççç£ç¢»ç£ç£ç£ç£ç£ç£ç£ç£ç£ç¦ç¦¡ç¦ ç¦ç¦¢ç¦æ­¶ç¨¹çª²çª´çª³ç®·ç¯ç®¾ç®¬ç¯ç®¯ç®¹ç¯ç®µç³ç³ç³ç³ç··ç·ç·ªç·§ç·ç·¡ç¸ç·ºç·¦ç·¶ç·±ç·°ç·®ç·ç½¶ç¾¬ç¾°ç¾­ç¿­ç¿«ç¿ªç¿¬ç¿¦ç¿¨è¤è§è£èï¿½".split("");

  for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 0xFFFD) {
    e[D[230][j]] = 58880 + j;
    d[58880 + j] = D[230][j];
  }

  D[231] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèè¢èèèèèèèèèè¤è»èèè©èèèèèè§èè»è«èºèèè´èªè²èè·è«è³è¼èèªè©èè¾è¨èè®èè½èè¶è±è¦è§è¨è°è¯è¹èè è°èèè¯è¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èè£è¤è·è¡è³èèèèè¡èèèè­èªèèèèè¯è¬èºè®èè¥èè»èµè¢è§è©è¡è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¦¢è¦¤è¦£è§­è§°è§¬è«è«èª¸è«è«è«è«èª»è«èª¾è«è«è«è«èªºèª½è«è°¾è±è²è³¥è³è³è³¨è³è³è³§è¶ è¶è¶¡è¶è¸ è¸£è¸¥è¸¤è¸®è¸è¸è¸è¸è¸è¸¦è¸§ï¿½".split("");

  for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 0xFFFD) {
    e[D[231][j]] = 59136 + j;
    d[59136 + j] = D[231][j];
  }

  D[232] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¸è¸è¸è¸è¸è¸è¸è¼¬è¼¤è¼è¼è¼ è¼£è¼è¼é³é°é¯é§é«é¯é«é©éªé²é¦é®ééééééééééééé¶éé±ééé©éééé¯éé¨éééé¦éééé éé§ééï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éµé¡éé´é¼é¬é«é®é°é¤é¢ééééééééééé é é ¦é ©é ¨é  é é §é¢²é¤é£ºé¤é¤é¤é¤é¤é§é§é§é§é§é§é§é§é§é§é§é§éª³é«¬é««é«³é«²é«±é­é­é­§é­´é­±é­¦é­¶é­µé­°é­¨é­¤é­¬é³¼é³ºé³½é³¿é³·é´é´é³¹é³»é´é´é´éºé»é¼é¼ååååååå´å¡å°å å®ï¿½".split("");

  for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 0xFFFD) {
    e[D[232][j]] = 59392 + j;
    d[59392 + j] = D[232][j];
  }

  D[233] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å³å¦å£å­å²åå·ååå£å¢½å£å¢¿å¢ºå£å¢¼å£å¬å¬å¬å¬¡å¬å¬å¬å¬å¬¨å¬å¬ å¬å¯¯å¶¬å¶±å¶©å¶§å¶µå¶°å¶®å¶ªå¶¨å¶²å¶­å¶¯å¶´å¹§å¹¨å¹¦å¹¯å»©å»§å»¦å»¨å»¥å½å¾¼ææ¨æææ´ææææºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¿æ¸æææææææ½ææææ³ææ³æ¿æ¼æ¢ææ¾æææææ½æ»æºææ£æ¨´æ©¦æ©æ©§æ¨²æ©¨æ¨¾æ©æ©­æ©¶æ©æ©æ¨¨æ©æ¨»æ¨¿æ©æ©ªæ©¤æ©æ©æ©æ©¯æ©©æ© æ¨¼æ©æ©æ©æ©æ©æ©æ­æ­æ­æ®§æ®ªæ®«æ¯æ¯æ°æ°æ°æ¾­æ¿æ¾£æ¿æ¾¼æ¿æ¿æ½æ¿æ¾½æ¾æ¿æ¾¨çæ¾¥æ¾®æ¾ºæ¾¬æ¾ªæ¿æ¾¿æ¾¸ï¿½".split("");

  for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 0xFFFD) {
    e[D[233][j]] = 59648 + j;
    d[59648 + j] = D[233][j];
  }

  D[234] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¾¢æ¿æ¾«æ¿æ¾¯æ¾²æ¾°ççç¿ç¸ççççççççç½çç¼çççççç©ç¦ç§ç¬ç¥ç«çªç¿çç çççç¡ççç¯ç­ç±ç½ç³ç¼çµç²ç°ç»ç¦ççç¡ççç¢ç£ççï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çç£ç£©ç£¥ç£ªç£ç££ç£ç£¡ç£¢ç£­ç£ç£ ç¦¤ç©ç©ç©çª¶çª¸çªµçª±çª·ç¯ç¯£ç¯§ç¯ç¯ç¯¥ç¯ç¯¨ç¯¹ç¯ç¯ªç¯¢ç¯ç¯«ç¯ç¯ç³ç³ç³ç³ç³ç¸ç¸¡ç¸ç¸ç¸ç¸ ç¸ç¸ç¸ç¸ç¸ç¸¢ç¸ç¸ç¸ç¸ç¸ç¸¥ç¸¤ç½ç½»ç½¼ç½ºç¾±ç¿¯èªè©è¬è±è¦è®è¹èµè«è°è¬è´è²è·è§è²èèèèèè«èèè¡èï¿½".split("");

  for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 0xFFFD) {
    e[D[234][j]] = 59904 + j;
    d[59904 + j] = D[234][j];
  }

  D[235] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèè¤èè¢èèèè£è¾èè±èè®èµèè§è èè¦èèè¥è¬è£è¥è¤èèèèèèèèèè¹èè£èèèèèèèèèè¤è¤¦è¤°è¤­è¤®è¤§è¤±è¤¢è¤©è¤£è¤¯è¤¬è¤è§±è« ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è«¢è«²è«´è«µè«è¬è«¤è«è«°è«è«è«¡è«¨è«¿è«¯è«»è²è²è²è³µè³®è³±è³°è³³èµ¬èµ®è¶¥è¶§è¸³è¸¾è¸¸è¹è¹è¸¶è¸¼è¸½è¹è¸°è¸¿èº½è¼¶è¼®è¼µè¼²è¼¹è¼·è¼´é¶é¹é»ééºé³éµé¶éééééé§ééééééºé¸é¼éé£éééé­éééééºé¥éé¹é·é´éé¤é¿é©é¹éµéªééï¿½".split("");

  for (j = 0; j != D[235].length; ++j) if (D[235][j].charCodeAt(0) !== 0xFFFD) {
    e[D[235][j]] = 60160 + j;
    d[60160 + j] = D[235][j];
  }

  D[236] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éé¾ééé»éé¼éé¾é¹éºé¶é¿éµé½é©éééééééé°é¸é µé ¯é ²é¤¤é¤é¤§é¤©é¦é§®é§¬é§¥é§¤é§°é§£é§ªé§©é§§éª¹éª¿éª´éª»é«¶é«ºé«¹é«·é¬³é®é®é®é­¼é­¾é­»é®é®é®é®é­ºé®ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é­½é®é´¥é´é´ é´é´é´©é´é´é´¢é´é´é´éºéºéºéº®éº­é»é»é»ºé¼é¼½å¦å¥å¢å¤å å©å´ååååååå¾åå¿åå£å£å£å£å¬­å¬¥å¬²å¬£å¬¬å¬§å¬¦å¬¯å¬®å­»å¯±å¯²å¶·å¹¬å¹ªå¾¾å¾»ææµæ¼æ§æ æ¥æ¤æ¨ææ¯æ©æ£æ«æ¤æ¨æææ¶æææªæªæªæª¥æªæªæªæª¡æªæªæªæªï¿½".split("");

  for (j = 0; j != D[236].length; ++j) if (D[236][j].charCodeAt(0) !== 0xFFFD) {
    e[D[236][j]] = 60416 + j;
    d[60416 + j] = D[236][j];
  }

  D[237] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æªæªæª¨æª¤æªæ©¿æª¦æªæªæªæªæ­æ®­æ°æ¿æ¾©æ¿´æ¿æ¿£æ¿æ¿­æ¿§æ¿¦æ¿æ¿²æ¿æ¿¢æ¿¨ç¡ç±ç¨ç²ç¤ç°ç¢ç³ç®ç¯çç²ç«ççªç­ç±ç¥ç¯çççççççççç¤ç©çµç«ç²ç·ç¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç´ç±ç¨ç°ç£³ç£½ç¤ç£»ç£¼ç£²ç¤ç£¹ç£¾ç¤ç¦«ç¦¨ç©ç©ç©ç©ç©ç©çª¾ç«ç«ç°ç°ç¯²ç°ç¯¿ç¯»ç°ç¯´ç°ç¯³ç°ç°ç°ç°ç¯¸ç¯½ç°ç¯°ç¯±ç°ç°ç³¨ç¸­ç¸¼ç¹ç¸³é¡ç¸¸ç¸ªç¹ç¹ç¹ç¸©ç¹ç¸°ç¸»ç¸¶ç¹ç¸ºç½ç½¿ç½¾ç½½ç¿´ç¿²è¬è»èèèèèè¼è©èèèèèèè§èè èè£è»è¤èèï¿½".split("");

  for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 0xFFFD) {
    e[D[237][j]] = 60672 + j;
    d[60672 + j] = D[237][j];
  }

  D[238] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è·è¼èè¡èºè¸èèèèèèèèè¢èèèè¹è¶èèèè¨è¾èªè­èè°è¬è¹èµè¼è®èèèèè·è¯èèè´è¶è¿è¸è½èè²è¤µè¤³è¤¼è¤¾è¥è¥è¤·è¥è¦­è¦¯è¦®è§²è§³è¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¬è¬è¬è¬è¬è¬¢è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è±è±°è±²è±±è±¯è²è²è³¹èµ¯è¹è¹è¹è¹è¹è¹è½è½éé¾é¸éé¢éééé¡éé é¡éé¯é¤ééé¼ééé¶éééé é­éééªé¹ééééé±é·é»é¡éé£é§ééééééééé·é®é°é¬é éééééé¡éï¿½".split("");

  for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 0xFFFD) {
    e[D[238][j]] = 60928 + j;
    d[60928 + j] = D[238][j];
  }

  D[239] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ééééé±é¡é¡é¡é¡é¡é¡é¤¥é¤«é¤¬é¤ªé¤³é¤²é¤¯é¤­é¤±é¤°é¦é¦£é¦¡é¨é§ºé§´é§·é§¹é§¸é§¶é§»é§½é§¾é§¼é¨éª¾é«¾é«½é¬é«¼é­é®é®¨é®é®é®¦é®¡é®¥é®¤é®é®¢é® é®¯é´³éµéµ§é´¶é´®é´¯é´±é´¸é´°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éµéµéµé´¾é´·éµé´½ç¿µé´­éºéºéºéº°é»é»é»»é»¿é¼¤é¼£é¼¢é½é¾ å±å­å®ååååååå¥°å¬¼å±©å±ªå·å¹­å¹®æææ­æ®æ±æªæ°æ«ææ©æ¿ææ½æ¸æææ¼ææææææ«æª¹æª½æ«¡æ«æªºæª¶æª·æ«æª´æª­æ­æ¯æ°çççççççæ¿¿çæ¿»ç¦æ¿¼æ¿·ççç¿ç¹çç½ç¶ï¿½".split("");

  for (j = 0; j != D[239].length; ++j) if (D[239][j].charCodeAt(0) !== 0xFFFD) {
    e[D[239][j]] = 61184 + j;
    d[61184 + j] = D[239][j];
  }

  D[240] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¸ççµçç¾ç¶ç»ççççç¤çççççç¦ç½ç¬ççºç£¿ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¦­ç¦¬ç©ç°ç°©ç°ç° ç°ç°­ç°ç°¦ç°¨ç°¢ç°¥ç°°ç¹ç¹ç¹ç¹£ç¹ç¹¢ç¹ç¹ç¹ ç¹ç¹ç¾µç¾³ç¿·ç¿¸èµèèï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèè´èèèèè³èµè½èèè¿èèèèè±è¶èè¤è¸è·è¾è©è§è¦è¢èè«èªè¥èè³è¤èèèè­èè£è¤èèè è´è¨èè¥è¥è¥è¥è¥è¥è¥è¥è¬ªè¬§è¬£è¬³è¬°è¬µè­è¬¯è¬¼è¬¾è¬±è¬¥è¬·è¬¦è¬¶è¬®è¬¤è¬»è¬½è¬ºè±è±µè²è²è²è³¾è´è´è´è¹è¹¢è¹ è¹è¹è¹è¹¥è¹§ï¿½".split("");

  for (j = 0; j != D[240].length; ++j) if (D[240][j].charCodeAt(0) !== 0xFFFD) {
    e[D[240][j]] = 61440 + j;
    d[61440 + j] = D[240][j];
  }

  D[241] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¹è¹è¹¡è¹è¹©è¹è½è½è½è½é¨éºé»é¾é¨é¥é§é¯éªéµééé·éééé§ééªéé¦éééééé±éé²é¤é¨é´é£é¥éééé³ééå·éééé£é¢é¥é¬é®é¨é«é¤éªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¢é¥éééééºé¡é¡é¡é¢¸é¥é¤¼é¤ºé¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é«é«é¬é¬é¬é¬©é¬µé­é­é­é¯é¯é¯é®¿é¯é®µé®¸é¯é®¶é¯é®¹é®½éµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéºéºé»é¼é¼é¼é¼¥é¼«é¼ªé¼©é¼¨é½é½å´åµåå·å´å«å­å¦å§åªå¬å£å£å£å¤å¬½å¬¾å¬¿å·å¹°ï¿½".split("");

  for (j = 0; j != D[241].length; ++j) if (D[241][j].charCodeAt(0) !== 0xFFFD) {
    e[D[241][j]] = 61696 + j;
    d[61696 + j] = D[241][j];
  }

  D[242] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¾¿æ»æææææææææææ«§æ« æ«æ«æ«æ«æ«æ«æ«æ««æ«æ«æ«æ­ æ®°æ°çç§ç çç«ç¡ç¢ç£ç©çç¤ççªçççççç¥ç¦ç¤ç£ç¡ççç·ççç çççç±ç¤ç¤ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¤¡ç¤ç¤ç¤ç¦°ç©§ç©¨ç°³ç°¼ç°¹ç°¬ç°»ç³¬ç³ªç¹¶ç¹µç¹¸ç¹°ç¹·ç¹¯ç¹ºç¹²ç¹´ç¹¨ç½ç½ç¾ç¾ç¾·ç¿½ç¿¾è¸èèè¤è¡è£è«è±è­èè¡è¨èèè¬è²è¸èèè£èèè°è¦è¯èè¢è èºè è¶è·è è è è è¼è è¿è è è¥¢è¥è¥è¥è¥¡è¥è¥è¥è¥è¦è¦·è¦¶è§¶è­è­è­è­è­è­è­è­è­ï¿½".split("");

  for (j = 0; j != D[242].length; ++j) if (D[242][j].charCodeAt(0) !== 0xFFFD) {
    e[D[242][j]] = 61952 + j;
    d[61952 + j] = D[242][j];
  }

  D[243] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è­è­è­è­è±è±·è±¶è²è´è´è´è¶¬è¶ªè¶­è¶«è¹­è¹¸è¹³è¹ªè¹¯è¹»è»è½è½è½è½è½è¾´éé¿é°é­ééééééé¹é¬ééé©é¦ééé®é£éééééé§é½ééé¡é©é«é¬é¨é¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é³é·é¶éééé¡é¡é¡é¡é¢¿é¢½é¢»é¢¾é¥é¥é¥é¦¦é¦§é¨é¨é¨¥é¨é¨¤é¨é¨¢é¨ é¨§é¨£é¨é¨é¨é«é¬é¬é¬é¬é¬·é¯ªé¯«é¯ é¯é¯¤é¯¦é¯¢é¯°é¯é¯é¯¬é¯é¯é¯¥é¯é¯¡é¯éµ·é¶é¶é¶é¶éµ±é¶éµ¸é¶é¶é¶éµ½éµ«éµ´éµµéµ°éµ©é¶éµ³éµ»é¶éµ¯éµ¹éµ¿é¶éµ¨éºéºé»é»¼é¼­é½é½é½é½é½é½å·å²ï¿½".split("");

  for (j = 0; j != D[243].length; ++j) if (D[243][j].charCodeAt(0) !== 0xFFFD) {
    e[D[243][j]] = 62208 + j;
    d[62208 + j] = D[243][j];
  }

  D[244] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åµå³å££å­å·å·å»®å»¯å¿å¿æ¹ææææææ¨æ£æ¤æ«³æ«°æ«ªæ«¨æ«¹æ«±æ«®æ«¯ç¼çµç¯ç·ç´ç±çç¸ç¿çºç¹çç»ç³çççç¨ç½ç¼çºç«çªç¾ç­ççççç²ç¤¥ç¤£ç¤§ç¤¨ç¤¤ç¤©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¦²ç©®ç©¬ç©­ç«·ç±ç±ç±ç±ç±ç³®ç¹»ç¹¾çºçºç¾ºç¿¿è¹èèèè¨è©è¢è¿èè¾èèè¶èèèèè½è è è è è è è¥£è¥¦è¦¹è§·è­ è­ªè­è­¨è­£è­¥è­§è­­è¶®èºèºèºè½è½è½è½è½è½éééé·éµé²é³ééé»é ééé¾ééé¨éééµéé·éééééºéé¸éé¿ï¿½".split("");

  for (j = 0; j != D[244].length; ++j) if (D[244][j].charCodeAt(0) !== 0xFFFD) {
    e[D[244][j]] = 62464 + j;
    d[62464 + j] = D[244][j];
  }

  D[245] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¼éé¶éééé éé®é¯é¹é»é½é¾é¡ é¡¢é¡£é¡é£é£é¥é¥é¥é¥é¥é¥é¨²é¨´é¨±é¨¬é¨ªé¨¶é¨©é¨®é¨¸é¨­é«é«é«é¬é¬é¬é°é°é¯·é°é°é¯¸é±é°é°é°é°é°é°é¶é¶é¶¤é¶é¶é¶é¶é¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¶ é¶é¶é¶ªé¶é¶¡é¶é¶¢é¶¨é¶é¶£é¶¿é¶©é¶é¶¦é¶§éºéºéºé»¥é»¤é»§é»¦é¼°é¼®é½é½ é½é½é½é¾åºå¹åååå½å¾å­å­å·å·å»±æ½ææ¬æ«¼æ¬æ«¸æ¬ççççççççççç¾ççªçç¤­ç¤±ç¤¯ç±ç±ç³²çºçºçºçºçºçºç½ç¾»è°èèèªè¦èè£èèè§è®è¡è è©èè¥ï¿½".split("");

  for (j = 0; j != D[245].length; ++j) if (D[245][j].charCodeAt(0) !== 0xFFFD) {
    e[D[245][j]] = 62720 + j;
    d[62720 + j] = D[245][j];
  }

  D[246] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è ©è è è  è ¤è è «è¡è¥­è¥©è¥®è¥«è§ºè­¹è­¸è­è­ºè­»è´è´è¶¯èºèºè½è½è½éééé¹é¿é»é¶é©é½é¼é°é¹éªé·é¬éé±é¥é¤é£éµéºé¿é¡é¡¤é£é£é£é¥é¥é¨¹é¨½é©é©é©é©é¨ºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¨¿é«é¬é¬é¬é¬é¬ºé­é°«é°é°é°¬é°£é°¨é°©é°¤é°¡é¶·é¶¶é¶¼é·é·é·é·é¶¾é·é·é¶»é¶µé·é¶¹é¶ºé¶¬é·é¶±é¶­é·é¶³é·é¶²é¹ºéºé»«é»®é»­é¼é¼é¼é¼±é½é½¥é½¤é¾äº¹åååå¥±å­å­å·å·å»²æ¡æ æ¦æ¢æ¬æ¬æ¬æ°ççççççç©ç¿ççççç­ç­ç¤µç¦´ç©°ç©±ç±ç±ç±ç±ç±ï¿½".split("");

  for (j = 0; j != D[246].length; ++j) if (D[246][j].charCodeAt(0) !== 0xFFFD) {
    e[D[246][j]] = 62976 + j;
    d[62976 + j] = D[246][j];
  }

  D[247] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç³´ç³±çºç½ç¾èè«è´èµè³è¬è²è¶è ¬è ¨è ¦è ªè ¥è¥±è¦¿è¦¾è§»è­¾è®è®è®è®è­¿è´èºèºèºèºèºèºèºè½ è½¢éééééééééééé¿é£é¡ªé¡©é£é¥é¥é©é©é©é©é©é©é©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é©é©é©é«é¬é¬«é¬»é­é­é±é±é°¿é±é°¹é°³é±é°¼é°·é°´é°²é°½é°¶é·é·é·é·é·é·é·é·é·é·©é·é·é·é·µé·é·éº¶é»°é¼µé¼³é¼²é½é½«é¾é¾¢å½åå£¨å£§å¥²å­å·è ¯å½ææææ©æ¥ææ«æ¬æ¬æ¬æ¯ççç¢çççç°çç±§ç±¦çºè¬èºèè¹è¼è±è»è¾è °è ²è ®è ³è¥¶è¥´è¥³è§¾ï¿½".split("");

  for (j = 0; j != D[247].length; ++j) if (D[247][j].charCodeAt(0) !== 0xFFFD) {
    e[D[247][j]] = 63232 + j;
    d[63232 + j] = D[247][j];
  }

  D[248] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è®è®è®è®è±è´èºè½¤è½£é¼é¢ééééééé é©é©é¬é¬é¬ é±é±é±é±é±é±é±é±é±é±é·»é··é·¯é·£é·«é·¸é·¤é·¶é·¡é·®é·¦é·²é·°é·¢é·¬é·´é·³é·¨é·­é»é»é»²é»³é¼é¼é¼¸é¼·é¼¶é½é½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é½±é½°é½®é½¯ååå­å±­æ­æ­æ®æ¬çç¡çç ç£çç¥çç¤¸ç¦·ç¦¶ç±ªçºç¾è­èè ¸è ·è µè¡è®è®èºèºèº èºé¾é½éé«é¨é©é¥ééééé¥é©é«é­é±£é±§é±¦é±¢é±é± é¸é·¾é¸é¸é¸é¸é¸é¸é¸é·¿é·½é¸éº é¼é½é½´é½µé½¶åæ®æ¸æ¬æ¬æ¬æ¬ç¢ç¦çªççç¤¹ç±©ç±«ç³¶çºï¿½".split("");

  for (j = 0; j != D[248].length; ++j) if (D[248][j].charCodeAt(0) !== 0xFFFD) {
    e[D[248][j]] = 63488 + j;
    d[63488 + j] = D[248][j];
  }

  D[249] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çºçºçºè è¡èèèè¥¹è¥ºè¥¼è¥»è§¿è®è®èº¥èº¤èº£é®é­é¯é±é³éé¡²é¥é±¨é±®é±­é¸é¸é¸é¸é¸é¸éº¡é»µé¼é½é½¸é½»é½ºé½¹åç¦ç±¯è ¼è¶²èº¦éé´é¸é¶éµé© é±´é±³é±±é±µé¸é¸é»¶é¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¾¤ç¨ç¥ç³·èªè ¾è ½è ¿è®è²èº©è»éé¡³é¡´é£é¥¡é¦«é©¤é©¦é©§é¬¤é¸é¸é½ææ¬ç§èèº¨éééé©©é©¨é¬®é¸ç©èè®éé±¹éº·çµé©«é±ºé¸ç©çªéº¤é½¾é½é¾ç¢é¹è£å¢»æç²§å«ºââ¦ââ â¬â£ââ©âââ¤âââªâ¡ââ§âââ¥âââ«â¢ââ¨ââââ­â®â°â¯âï¿½".split("");

  for (j = 0; j != D[249].length; ++j) if (D[249][j].charCodeAt(0) !== 0xFFFD) {
    e[D[249][j]] = 63744 + j;
    d[63744 + j] = D[249][j];
  }

  return {
    "enc": e,
    "dec": d
  };
}();

cptable[1250] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿½âï¿½ââ¦â â¡ï¿½â°Å â¹ÅÅ¤Å½Å¹ï¿½âââââ¢ââï¿½â¢Å¡âºÅÅ¥Å¾ÅºÂ ËËÅÂ¤ÄÂ¦Â§Â¨Â©ÅÂ«Â¬Â­Â®Å»Â°Â±ËÅÂ´ÂµÂ¶Â·Â¸ÄÅÂ»Ä½ËÄ¾Å¼ÅÃÃÄÃÄ¹ÄÃÄÃÄÃÄÃÃÄÄÅÅÃÃÅÃÃÅÅ®ÃÅ°ÃÃÅ¢ÃÅÃ¡Ã¢ÄÃ¤ÄºÄÃ§ÄÃ©ÄÃ«ÄÃ­Ã®ÄÄÅÅÃ³Ã´ÅÃ¶Ã·ÅÅ¯ÃºÅ±Ã¼Ã½Å£Ë",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[1251] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÐÐâÑââ¦â â¡â¬â°Ðâ¹ÐÐÐÐÑâââââ¢ââï¿½â¢ÑâºÑÑÑÑÂ ÐÑÐÂ¤ÒÂ¦Â§ÐÂ©ÐÂ«Â¬Â­Â®ÐÂ°Â±ÐÑÒÂµÂ¶Â·ÑâÑÂ»ÑÐÑÑÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[1252] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿½âÆââ¦â â¡Ëâ°Å â¹Åï¿½Å½ï¿½ï¿½âââââ¢ââËâ¢Å¡âºÅï¿½Å¾Å¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[1253] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿½âÆââ¦â â¡ï¿½â°ï¿½â¹ï¿½ï¿½ï¿½ï¿½ï¿½âââââ¢ââï¿½â¢ï¿½âºï¿½ï¿½ï¿½ï¿½Â ÎÎÂ£Â¤Â¥Â¦Â§Â¨Â©ï¿½Â«Â¬Â­Â®âÂ°Â±Â²Â³ÎÂµÂ¶Â·ÎÎÎÂ»ÎÂ½ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡ï¿½Î£Î¤Î¥Î¦Î§Î¨Î©ÎªÎ«Î¬Î­Î®Î¯Î°Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏÏÏÏÏÏÏï¿½",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[1254] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿½âÆââ¦â â¡Ëâ°Å â¹Åï¿½ï¿½ï¿½ï¿½âââââ¢ââËâ¢Å¡âºÅï¿½ï¿½Å¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÄÃÃÃÃÃÃÃÃÃÃÃÃÄ°ÅÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯ÄÃ±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ä±ÅÃ¿",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[1255] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿½âÆââ¦â â¡Ëâ°ï¿½â¹ï¿½ï¿½ï¿½ï¿½ï¿½âââââ¢ââËâ¢ï¿½âºï¿½ï¿½ï¿½ï¿½Â Â¡Â¢Â£âªÂ¥Â¦Â§Â¨Â©ÃÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹Ã·Â»Â¼Â½Â¾Â¿Ö°Ö±Ö²Ö³Ö´ÖµÖ¶Ö·Ö¸Ö¹ï¿½Ö»Ö¼Ö½Ö¾Ö¿×××××°×±×²×³×´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½××××××××××××××××× ×¡×¢×£×¤×¥×¦×§×¨×©×ªï¿½ï¿½ââï¿½",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[1256] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬Ù¾âÆââ¦â â¡Ëâ°Ù¹â¹ÅÚÚÚÚ¯âââââ¢ââÚ©â¢ÚâºÅââÚºÂ ØÂ¢Â£Â¤Â¥Â¦Â§Â¨Â©Ú¾Â«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ØÂ»Â¼Â½Â¾ØÛØ¡Ø¢Ø£Ø¤Ø¥Ø¦Ø§Ø¨Ø©ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶ÃØ·Ø¸Ø¹ØºÙÙÙÙÃ ÙÃ¢ÙÙÙÙÃ§Ã¨Ã©ÃªÃ«ÙÙÃ®Ã¯ÙÙÙÙÃ´ÙÙÃ·ÙÃ¹ÙÃ»Ã¼ââÛ",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[1257] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿½âï¿½ââ¦â â¡ï¿½â°ï¿½â¹ï¿½Â¨ËÂ¸ï¿½âââââ¢ââï¿½â¢ï¿½âºï¿½Â¯Ëï¿½Â ï¿½Â¢Â£Â¤ï¿½Â¦Â§ÃÂ©ÅÂ«Â¬Â­Â®ÃÂ°Â±Â²Â³Â´ÂµÂ¶Â·Ã¸Â¹ÅÂ»Â¼Â½Â¾Ã¦ÄÄ®ÄÄÃÃÄÄÄÃÅ¹ÄÄ¢Ä¶ÄªÄ»Å ÅÅÃÅÃÃÃÅ²ÅÅÅªÃÅ»Å½ÃÄÄ¯ÄÄÃ¤Ã¥ÄÄÄÃ©ÅºÄÄ£Ä·Ä«Ä¼Å¡ÅÅÃ³ÅÃµÃ¶Ã·Å³ÅÅÅ«Ã¼Å¼Å¾Ë",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[1258] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿½âÆââ¦â â¡Ëâ°ï¿½â¹Åï¿½ï¿½ï¿½ï¿½âââââ¢ââËâ¢ï¿½âºÅï¿½ï¿½Å¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÄÃÃÃÃÃÃÃÃÌÃÃÃÄÃÌÃÃÆ ÃÃÃÃÃÃÃÆ¯ÌÃÃ Ã¡Ã¢ÄÃ¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«ÌÃ­Ã®Ã¯ÄÃ±Ì£Ã³Ã´Æ¡Ã¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Æ°â«Ã¿",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[10000] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼â Â°Â¢Â£Â§â¢Â¶ÃÂ®Â©â¢Â´Â¨â ÃÃâÂ±â¤â¥Â¥ÂµâââÏâ«ÂªÂºâ¦Ã¦Ã¸Â¿Â¡Â¬âÆââÂ«Â»â¦Â ÃÃÃÅÅââââââÃ·âÃ¿Å¸âÂ¤â¹âºï¬ï¬â¡Â·âââ°ÃÃÃÃÃÃÃÃÃÃÃï¿½ÃÃÃÃÄ±ËËÂ¯ËËËÂ¸ËËË",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[10006] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÂ¹Â²ÃÂ³ÃÃÎÃ Ã¢Ã¤ÎÂ¨Ã§Ã©Ã¨ÃªÃ«Â£â¢Ã®Ã¯â¢Â½â°Ã´Ã¶Â¦Â­Ã¹Ã»Ã¼â ÎÎÎÎÎÎ ÃÂ®Â©Î£ÎªÂ§â Â°ÎÎÂ±â¤â¥Â¥ÎÎÎÎÎÎÎÎ¦Î«Î¨Î©Î¬ÎÂ¬ÎÎ¡âÎ¤Â«Â»â¦Â Î¥Î§ÎÎÅââââââÃ·ÎÎÎÎÎ­Î®Î¯ÏÎÏÎ±Î²ÏÎ´ÎµÏÎ³Î·Î¹Î¾ÎºÎ»Î¼Î½Î¿ÏÏÏÏÏÎ¸ÏÏÏÏÎ¶ÏÏÎÎ°ï¿½",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[10007] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯â Â°Â¢Â£Â§â¢Â¶ÐÂ®Â©â¢ÐÑâ ÐÑâÂ±â¤â¥ÑÂµâÐÐÑÐÑÐÑÐÑÑÐÂ¬âÆââÂ«Â»â¦Â ÐÑÐÑÑââââââÃ·âÐÑÐÑâÐÑÑÐ°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÂ¤",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[10008] = function () {
  var d = [],
      e = {},
      D = [],
      j;
  D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Âï£ï£ï£ï£ï£ï£ï£ï£ï£ ï£¡ï£¢ï££ï£¤ï£¥ï£¦ï£§ï£¨ï£©ï£ªï£«ï£¬ï£­ï£®ï£¯ï£°ï£±ï£²ï£³ï£´ï£µï£¶ï£·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï£¸ï£¹ï£ºï£»ï£¼ï£½ï£¾ï£¿".split("");

  for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 0xFFFD) {
    e[D[0][j]] = 0 + j;
    d[0 + j] = D[0][j];
  }

  D[161] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ãããã»ËËÂ¨ããâï½ï¿½â¦ââââããããããããããããããÂ±ÃÃ·â¶â§â¨âââªâ©ââ·ââ¥â¥â âââ«â®â¡âââ½ââ â®â¯â¤â¥ââµâ´ââÂ°â²â³âï¼Â¤ï¿ ï¿¡â°Â§âââââââââ¡â â³â²â»ââââãï¿½".split("");

  for (j = 0; j != D[161].length; ++j) if (D[161][j].charCodeAt(0) !== 0xFFFD) {
    e[D[161][j]] = 41216 + j;
    d[41216 + j] = D[161][j];
  }

  D[162] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½âââââââââââââââââââââ´âµâ¶â·â¸â¹âºâ»â¼â½â¾â¿âââââââââ â¡â¢â£â¤â¥â¦â§â¨â©ï¿½ï¿½ã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ï¿½ï¿½â â¡â¢â£â¤â¥â¦â§â¨â©âªâ«ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[162].length; ++j) if (D[162][j].charCodeAt(0) !== 0xFFFD) {
    e[D[162][j]] = 41472 + j;
    d[41472 + j] = D[162][j];
  }

  D[163] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¼ï¼ï¼ï¿¥ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ ï¼¡ï¼¢ï¼£ï¼¤ï¼¥ï¼¦ï¼§ï¼¨ï¼©ï¼ªï¼«ï¼¬ï¼­ï¼®ï¼¯ï¼°ï¼±ï¼²ï¼³ï¼´ï¼µï¼¶ï¼·ï¼¸ï¼¹ï¼ºï¼»ï¼¼ï¼½ï¼¾ï¼¿ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï¿£ï¿½".split("");

  for (j = 0; j != D[163].length; ++j) if (D[163][j].charCodeAt(0) !== 0xFFFD) {
    e[D[163][j]] = 41728 + j;
    d[41728 + j] = D[163][j];
  }

  D[164] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ãããããããããããããããããããããããããããããããã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ããããããããããããããããããããï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[164].length; ++j) if (D[164][j].charCodeAt(0) !== 0xFFFD) {
    e[D[164][j]] = 41984 + j;
    d[41984 + j] = D[164][j];
  }

  D[165] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ã·ã¸ã¹ãºã»ã¼ã½ã¾ã¿ããããããããããããããããããããããããããããããããã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ãªã«ã¬ã­ã®ã¯ã°ã±ã²ã³ã´ãµã¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[165].length; ++j) if (D[165][j].charCodeAt(0) !== 0xFFFD) {
    e[D[165][j]] = 42240 + j;
    d[42240 + j] = D[165][j];
  }

  D[166] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[166].length; ++j) if (D[166][j].charCodeAt(0) !== 0xFFFD) {
    e[D[166][j]] = 42496 + j;
    d[42496 + j] = D[166][j];
  }

  D[167] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð°Ð±Ð²Ð³Ð´ÐµÑÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[167].length; ++j) if (D[167][j].charCodeAt(0) !== 0xFFFD) {
    e[D[167][j]] = 42752 + j;
    d[42752 + j] = D[167][j];
  }

  D[168] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÄÃ¡ÇÃ ÄÃ©ÄÃ¨Ä«Ã­ÇÃ¬ÅÃ³ÇÃ²Å«ÃºÇÃ¹ÇÇÇÇÃ¼Ãªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ãããããããããããããããããããããããããããã ã¡ã¢ã£ã¤ã¥ã¦ã§ã¨ã©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[168].length; ++j) if (D[168][j].charCodeAt(0) !== 0xFFFD) {
    e[D[168][j]] = 43008 + j;
    d[43008 + j] = D[168][j];
  }

  D[169] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½âââââââââââââââââââââââââââââââââ â¡â¢â£â¤â¥â¦â§â¨â©âªâ«â¬â­â®â¯â°â±â²â³â´âµâ¶â·â¸â¹âºâ»â¼â½â¾â¿ââââââââââââï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[169].length; ++j) if (D[169][j].charCodeAt(0) !== 0xFFFD) {
    e[D[169][j]] = 43264 + j;
    d[43264 + j] = D[169][j];
  }

  D[176] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åé¿åæ¨åååççè¼ç®è¾ç¢ç±ééæ°¨å®ä¿ºææå²¸èºæ¡è®æçå¹æç¬ç¿±è¢å²å¥¥ææ¾³è­ææå­å§ç¬å«ç¤å·´æè·é¶æèåé¸ç½¢ç¸ç½æç¾æä½°è´¥æç¨æç­æ¬æ³è¬é¢æ¿çæ®æä¼´ç£ååç»é¦å¸®æ¢æ¦èç»æ£ç£èéåè°¤èèåè¤å¥ï¿½".split("");

  for (j = 0; j != D[176].length; ++j) if (D[176][j].charCodeAt(0) !== 0xFFFD) {
    e[D[176][j]] = 45056 + j;
    d[45056 + j] = D[176][j];
  }

  D[177] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èé¹ä¿å ¡é¥±å®æ±æ¥æ´è±¹é²çæ¯ç¢æ²ååè¾èè´é¡åçå¤æ«çè¢«å¥è¯æ¬ç¬¨å´©ç»·ç­æ³µè¹¦è¿¸é¼é¼»æ¯éç¬å½¼ç¢§èè½æ¯æ¯æ¯å¸åºç¹é­æå¼å¿è¾å£èé¿éé­è¾¹ç¼è´¬æä¾¿ååè¾¨è¾©è¾«éæ å½ªèè¡¨é³æå«çªå½¬ææ¿æ»¨å®¾æåµå°æä¸ç§é¥¼ç³ï¿½".split("");

  for (j = 0; j != D[177].length; ++j) if (D[177][j].charCodeAt(0) !== 0xFFFD) {
    e[D[177][j]] = 45312 + j;
    d[45312 + j] = D[177][j];
  }

  D[178] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çå¹¶ç»è æ­æ¨éµæ³¢ååæéç®ä¼¯å¸è¶èèæ¸¤æ³é©³æååºè¡¥å ä¸å¸æ­¥ç°¿é¨ææ¦çè£ææè´¢ç¬è¸©éå½©èè¡é¤åèæ®æ­æ¨ç¿èè±ä»æ²§èæç³æ§½æ¹èåç­ä¾§åæµå±è¹­æåè¬è¶æ¥ç¢´æ½å¯å²å·®è¯§ææ´è±ºææºèé¦è°ç¼ é²äº§éé¢¤æçï¿½".split("");

  for (j = 0; j != D[178].length; ++j) if (D[178][j].charCodeAt(0) !== 0xFFFD) {
    e[D[178][j]] = 45568 + j;
    d[45568 + j] = D[178][j];
  }

  D[179] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åºå°å¸¸é¿å¿è åæçå±å¡è¶æéæå²æ½®å·¢åµçè½¦æ¯æ¤æ£å½»æ¾é´è£è¾°å°æ¨å¿±æ²éè¶è¡¬æç§°åæ©æåä¹ç¨æ©æ¾è¯æ¿ééªç§¤åç´æåæ± è¿å¼é©°è»é½¿ä¾å°ºèµ¤ç¿æ¥ç½åå²è«å´å® æ½é¬ç´è¸ç¨ æç­¹ä»ç»¸çä¸è­ååºæ©±å¨èºééæ»é¤æ¥ï¿½".split("");

  for (j = 0; j != D[179].length; ++j) if (D[179][j].charCodeAt(0) !== 0xFFFD) {
    e[D[179][j]] = 45824 + j;
    d[45824 + j] = D[179][j];
  }

  D[180] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¡å¨çæè§¦å¤æ£å·ç©¿æ¤½ä¼ è¹åä¸²ç®çªå¹¢åºé¯åå¹çæ¶é¤åæ¥æ¤¿éåæ·³çº¯è ¢æ³ç»°çµè¨ç£éè¾æç·è¯æ­¤åºèµæ¬¡èªè±å±åä»ä¸åç²éç°ä¿è¹¿ç¯¡çªæ§å´å¬èçç²¹æ·¬ç¿ æå­å¯¸ç£æ®ææªæ«éæ­è¾¾ç­ç©æå¤§åæ­¹å£æ´å¸¦æ®ä»£è´·è¢å¾é®ï¿½".split("");

  for (j = 0; j != D[180].length; ++j) if (D[180][j].charCodeAt(0) !== 0xFFFD) {
    e[D[180][j]] = 46080 + j;
    d[46080 + j] = D[180][j];
  }

  D[181] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ è½æä¸¹åé¸æ¸èæ¦æ°®ä½æ®æ·¡è¯å¼¹èå½æ¡åè¡æ¡£åæ£è¹åå²ç¥·å¯¼å°ç¨»æ¼éçå¾·å¾çè¹¬ç¯ç»ç­çªå³éå ¤ä½æ»´è¿ªæç¬çæ¶¤ç¿å«¡æµåºå°èç¬¬å¸å¼éç¼é¢ ææ»ç¢ç¹å¸éå«çµä½ç¸åºæ¦å¥ æ·æ®¿ç¢å¼éååæåéè°è·ç¹ç¢è¶è¿­è°å ï¿½".split("");

  for (j = 0; j != D[181].length; ++j) if (D[181][j].charCodeAt(0) !== 0xFFFD) {
    e[D[181][j]] = 46336 + j;
    d[46336 + j] = D[181][j];
  }

  D[182] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¸ç¯å®éé¡¶é¼é­å®è®¢ä¸¢ä¸å¬è£æå¨æ ä¾æ«å»æ´åææé¡è±éçé½ç£æ¯çç¬è¯»å µç¹èµæéèåº¦æ¸¡å¦ç«¯ç­é»æ®µæ­ç¼å åéå¯¹å¢©å¨è¹²æ¦é¡¿å¤éç¾éæåå¤å¤ºåèº²æµè·ºèµåæ°å è¾å³¨é¹ä¿é¢è®¹å¨¥æ¶åæ¼ééé¥¿æ©èå¿è³å°é¥µæ´±äºï¿½".split("");

  for (j = 0; j != D[182].length; ++j) if (D[182][j].charCodeAt(0) !== 0xFFFD) {
    e[D[182][j]] = 46592 + j;
    d[46592 + j] = D[182][j];
  }

  D[183] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è´°åç½ç­ä¼ä¹éæ³çè©å¸çªç¿»æ¨ç¾éç¹å¡ç¦åè¿èè´©ç¯é¥­æ³åè³æ¹èªæ¿é²å¦¨ä»¿è®¿çººæ¾è²éå¡é£è¥åªè¯½å èºåºæ²¸è´¹è¬éå©æ°åçº·åçæ±¾ç²å¥ä»½å¿¿æ¤ç²ªä¸°å°æ«èå³°éé£ç¯ç½é¢å¯ç¼è®½å¥å¤ä½å¦å¤«æ·è¤å­µæ¶æè¾å¹æ°ç¬¦ä¼ä¿æï¿½".split("");

  for (j = 0; j != D[183].length; ++j) if (D[183][j].charCodeAt(0) !== 0xFFFD) {
    e[D[183][j]] = 46848 + j;
    d[46848 + j] = D[183][j];
  }

  D[184] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æµ®æ¶ªç¦è¢±å¼ç«æè¾ä¿¯éæ§è¯èåºèèµ´å¯è¦èµå¤åä»éç¶è¹è´å¯è®£éå¦ç¼åå¶åè¯¥æ¹æ¦éçæºå¹²çææç«¿èèµ¶æç§æ¢èµ£ååé¢ç¼¸èçº²å²æ¸¯æ ç¯çé«èç¾ç³æéç¨¿åå¥æ­ææé¸½è³çå²é©èæ ¼è¤ééé¬ä¸ªåç»æ ¹è·èæ´åºç¾¹ï¿½".split("");

  for (j = 0; j != D[184].length; ++j) if (D[184][j].charCodeAt(0) !== 0xFFFD) {
    e[D[184][j]] = 47104 + j;
    d[47104 + j] = D[184][j];
  }

  D[185] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åè¿æ¢å·¥æ»åæ­é¾ä¾èº¬å¬å®«å¼å·©æ±æ±è´¡å±é©å¾æ²èçå¢æè´­å¤è¾èåç®ä¼°æ²½å­¤å§é¼å¤èéª¨è°·è¡æé¡¾åºéå®çåå¯¡æè¤ä¹ææªæ£ºå³å®å è§ç®¡é¦ç½æ¯çè´¯åå¹¿éç°è§å­ç¡å½é¾éºè½¨é¬¼è¯¡ç¸æ¡æè·ªè´µå½è¾æ»æ£éé­å½æè£¹è¿åï¿½".split("");

  for (j = 0; j != D[185].length; ++j) if (D[185][j].charCodeAt(0) !== 0xFFFD) {
    e[D[185][j]] = 47360 + j;
    d[47360 + j] = D[185][j];
  }

  D[186] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éª¸å­©æµ·æ°¦äº¥å®³éªé£æ¨é¯é©å«æ¶µå¯å½åç½ç¿°æ¼ææ±æ¾æçæ±æ±å¤¯æ­èªå£åè±ªæ¯«éå¥½èå·æµ©åµåè·èæ ¸ç¦¾åä½åçè²éæ²³æ¶¸èµ«è¤é¹¤è´ºå¿é»çå¾ç æ¨å¼äº¨æ¨ªè¡¡æè½°åçè¹é¸¿æ´ªå®å¼çº¢åä¾¯ç´å¼åååå¼ä¹å¿½çå£¶è«è¡è´çç³æ¹ï¿½".split("");

  for (j = 0; j != D[186].length; ++j) if (D[186][j].charCodeAt(0) !== 0xFFFD) {
    e[D[186][j]] = 47616 + j;
    d[47616 + j] = D[186][j];
  }

  D[187] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¼§èå¬æ¤äºæ²ªæ·è±ååç¾æ»ç»ååè¯æ§å¾ææ·®åæ¬¢ç¯æ¡è¿ç¼æ¢æ£å¤çªè±¢çæ¶£å®¦å¹»èæé»ç£ºèç°§çå°æ¶çæå¹æè°ç°æ¥è¾å¾½æ¢èåæ¯ææ§åæ æ¦è´¿ç§½ä¼ç©æ±è®³è¯²ç»è¤æå©é­æµæ··è±æ´»ä¼ç«è·ææéè´§ç¥¸å»å¾åºæºç¸ç¨½ç§¯ç®ï¿½".split("");

  for (j = 0; j != D[187].length; ++j) if (D[187][j].charCodeAt(0) !== 0xFFFD) {
    e[D[187][j]] = 47872 + j;
    d[47872 + j] = D[187][j];
  }

  D[188] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èé¥¥è¿¹æ¿è®¥é¸¡å§¬ç»©ç¼åææ£è¾ç±éåæ¥ç¾æ±²å³å«çº§æ¤å èå·±èæåå­£ä¼ç¥­åæ¸æµå¯å¯è®¡è®°æ¢å¿éå¦ç»§çºªåæ·å¤¹ä½³å®¶å èé¢è´¾ç²é¾åç¨¼ä»·æ¶é©¾å«æ­¼çåå°ç¬ºé´çå¼è©è°å¥¸ç¼è§æ£æ¬ç¢±ç¡·æ£æ¡ç®ä¿­åªåèæ§é´è·µè´±è§é®ç®­ä»¶ï¿½".split("");

  for (j = 0; j != D[188].length; ++j) if (D[188][j].charCodeAt(0) !== 0xFFFD) {
    e[D[188][j]] = 48128 + j;
    d[48128 + j] = D[188][j];
  }

  D[189] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¥è°åé¥¯æ¸æºæ¶§å»ºåµå§å°æµæ±çèæ¡¨å¥è®²å é±éèæ¤ç¤ç¦è¶äº¤éæµéªå¨å¼æé°ç«ä¾¥èç¡è§é¥ºç¼´ç»å¿æéµè½¿è¾å«çªæ­æ¥çç§¸è¡é¶æªå«èæ¡æ°æ·ç«ç«­æ´ç»è§£å§æèè¥çåä»ç¥è¯«å±å·¾ç­æ¤éä»æ´¥è¥ç´§é¦ä»è°¨è¿é³æç¦è¿ç¬æµ¸ï¿½".split("");

  for (j = 0; j != D[189].length; ++j) if (D[189][j].charCodeAt(0) !== 0xFFFD) {
    e[D[189][j]] = 48384 + j;
    d[48384 + j] = D[189][j];
  }

  D[190] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å°½å²èå¢èçæ¶é²¸äº¬æç²¾ç²³ç»äºè­¦æ¯é¢éå¢æ¬éå¾çéç«ç«åç¯çªæªç©¶çº çé­ä¹ç¸ä¹éå©ææ§è¼èåå°±çé æçç½å±é©¹èå±åç©ä¸¾æ²®èææ®å·¨å·è·è¸é¯ä¿±å¥æ§ç¬å§æé¹å¨å¦ç·å·ç»¢ææ«ææåçµè§å³è¯ç»åèé§ååå³»ï¿½".split("");

  for (j = 0; j != D[190].length; ++j) if (D[190][j].charCodeAt(0) !== 0xFFFD) {
    e[D[190][j]] = 48640 + j;
    d[48640 + j] = D[190][j];
  }

  D[191] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¿ç«£æµé¡éªååå¡å¯å¼æ©æ¥·å¯æ¨åå ªååç çåº·æ·ç³ ææäº¢çèæ·ç¤é å·èæ¯æ£µç£é¢ç§å£³å³å¯æ¸´åå»å®¢è¯¾è¯åå¦æ³åå­ç©ºæå­æ§æ å£æ£å¯æ¯å­çªè¦é·åºè£¤å¤¸å®æè·¨è¯åç­·ä¾©å¿«å®½æ¬¾å¡ç­çæ¡ç¿ç¶æ·åµäºçå²¿çª¥èµå¥é­åï¿½".split("");

  for (j = 0; j != D[191].length; ++j) if (D[191][j].charCodeAt(0) !== 0xFFFD) {
    e[D[191][j]] = 48896 + j;
    d[48896 + j] = D[191][j];
  }

  D[192] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¦æ§æºå¤ææå°æ¬æ©å»éåæåè¡èè¾£å¦è±æ¥èµèå©ªæ æ¦ç¯®éå°æ¾è°°æ½è§æç¼çæ»¥çæ¦ç¼å»éææµªæå³ç¢èä½¬å§¥éªçæ¶åä¹é·é­è¾ç£ç´¯å¡åæèç±»æ³ªæ£±æ¥å·åæ¢¨çé»ç¯±ç¸ç¦»æ¼çæéé²¤ç¤¼èèåæ ä¸½åå±ç ¾åå©åä¾ä¿ï¿½".split("");

  for (j = 0; j != D[192].length; ++j) if (D[192][j].charCodeAt(0) !== 0xFFFD) {
    e[D[192][j]] = 49152 + j;
    d[49152 + j] = D[192][j];
  }

  D[193] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¢ç«ç²æ²¥é¶åçå©ä¿©èè²è¿é°å»ææ¶å¸æè¸é¾æç¼ç»ç²®åæ¢ç²±è¯ä¸¤è¾éæ¾äº®è°æ©èåççå¯¥è¾½æ½¦äºæé£å»æåè£çå£çç³æç£·éä¸´é»é³æ·åèµåæç²è±é¶é¾éä¼¶ç¾åçµéµå²­é¢å¦ä»¤æºçæ¦´ç¡«é¦çåç¤æµæ³å­é¾èåç¬¼çª¿ï¿½".split("");

  for (j = 0; j != D[193].length; ++j) if (D[193][j].charCodeAt(0) !== 0xFFFD) {
    e[D[193][j]] = 49408 + j;
    d[49408 + j] = D[193][j];
  }

  D[194] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éåæ¢éæ¥¼å¨æç¯æ¼éè¦å¢é¢åºçæ³å¤èé²éºç¢é²è·¯èµé¹¿æ½ç¦å½éæ®é©´åéä¾£æå±¥å±¡ç¼èæ°¯å¾çæ»¤ç»¿å³¦æå­ªæ»¦åµä¹±æ ç¥æ¡è½®ä¼¦ä»æ²¦çº¶è®ºèèºç½é»é£ç®©éª¡è£¸è½æ´éªç»å¦éº»çç èé©¬éªåååä¹°éº¦åè¿èçé¦è®æ»¡èæ¼æ¢æ¼«ï¿½".split("");

  for (j = 0; j != D[194].length; ++j) if (D[194][j].charCodeAt(0) !== 0xFFFD) {
    e[D[194][j]] = 49664 + j;
    d[49664 + j] = D[194][j];
  }

  D[195] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è°©èè«ç²æ°å¿è½ç«èéæ¯çéå¯èåå¸½è²è´¸ä¹ç«ææ¢é¶éç¤æ²¡çåªéæ¯ç¾æ§å¯å¦¹åªé¨é·ä»¬èèæª¬çé°çæ¢¦å­ç¯éé¡ç³è¿·è°å¼¥ç±³ç§è§æ³èå¯å¹æ£ç ç»µåååå¨©ç¼é¢èæçèç§æ¸ºåºå¦èç­æ°æ¿ç¿ææ¯é½æèé¸£é­åå½è°¬æ¸ï¿½".split("");

  for (j = 0; j != D[195].length; ++j) if (D[195][j].charCodeAt(0) !== 0xFFFD) {
    e[D[195][j]] = 49920 + j;
    d[49920 + j] = D[195][j];
  }

  D[196] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¹èæ¨¡èç£¨æ©é­æ¹æ«è«å¢¨é»æ²«æ¼ å¯éè°çææç¡äº©å§æ¯å¢æ®å¹åææ¨ç®ç¦ç§ç©æ¿åªåé é£å¨çº³æ°ä¹å¥¶èå¥åç·é¾åæ èæ¼é¹æ·å¢é¦åå«©è½å¦®éåªæ³¥å°¼æä½ å¿è»éæººè«æå¹´ç¢¾æµæ»å¿µå¨é¿é¸å°¿æèå­½å®ééæ¶æ¨æ çåå®ï¿½".split("");

  for (j = 0; j != D[196].length; ++j) if (D[196][j].charCodeAt(0) !== 0xFFFD) {
    e[D[196][j]] = 50176 + j;
    d[50176 + j] = D[196][j];
  }

  D[197] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ§æ³çæ­é®çº½èæµåå¼å¥´åªæå¥³æèçæªæ¦ç³¯è¯ºå¦æ¬§é¸¥æ®´èåå¶æ²¤åªè¶´ç¬å¸æç¶ææçå¾æ¹æ´¾ææ½çç£ç¼çå¤åä¹åºæèªèæåå¨ç®è¢è·æ³¡å¸èå¹è£´èµéªéä½©æ²å·çç °æ¨ç¹æ¾å½­è¬æ£ç¡¼ç¯·è¨æé¹æ§ç¢°å¯ç é¹æ¹æ«åçµæ¯ï¿½".split("");

  for (j = 0; j != D[197].length; ++j) if (D[197][j].charCodeAt(0) !== 0xFFFD) {
    e[D[197][j]] = 50432 + j;
    d[50432 + j] = D[197][j];
  }

  D[198] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¤è¾ç²ç®å¹çå»å±è­¬ç¯åçéªé£æ¼ç¢ç¥¨æç¥æ¼é¢è´«åèä¹åªè¹èå¹³å­ç¶è¯å±å¡æ³¼é¢å©ç ´é­è¿«ç²åæéºä»èè¡è©è²åæ´åæ®æµ¦è°±æçææ¬ºæ æå¦»ä¸åæ¼ææ²å¶æ£å¥æ­§ç¦å´èé½æç¥ç¥éªèµ·å²ä¹ä¼å¯å¥ç å¨æ°è¿å¼æ±½æ³£è®«æï¿½".split("");

  for (j = 0; j != D[198].length; ++j) if (D[198][j].charCodeAt(0) !== 0xFFFD) {
    e[D[198][j]] = 50688 + j;
    d[50688 + j] = D[198][j];
  }

  D[199] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ°æ´½çµæ¦ééåè¿ç­¾ä»è°¦ä¹¾é»é±é³åæ½é£æµè°´å åµæ¬ æ­æªåèç¾å¢è·å¼ºæ¢æ©é¹æ²ææ¡¥ç§ä¹ä¾¨å·§éæ¬ç¿å³­ä¿çªåèä¸æ¯çªé¦ä¾µäº²ç§¦ç´å¤è¹æç¦½å¯æ²éè½»æ°¢å¾å¿æ¸ææ´æ°°æé¡·è¯·åºç¼ç©·ç§ä¸é±çæ±åéæ³è¶åºèæ²èº¯å±é©±æ¸ ï¿½".split("");

  for (j = 0; j != D[199].length; ++j) if (D[199][j].charCodeAt(0) !== 0xFFFD) {
    e[D[199][j]] = 50944 + j;
    d[50944 + j] = D[199][j];
  }

  D[200] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½åå¨¶é¾è¶£å»åé¢§æéæ³å¨çæ³ç¬å¸åç¼ºçç¸å´é¹æ¦·ç¡®éè£ç¾¤ç¶çåæç¤å£¤æå·è®©é¥¶æ°ç»æ¹ç­å£¬ä»äººå¿é§ä»»è®¤åå¦çº«æä»æ¥æè¸èè£èçæº¶å®¹ç»åææèè¹è åå­ºå¦è¾±ä¹³æ±å¥è¤¥è½¯é®èçéé°æ¶¦è¥å¼±ææ´è¨è®é³å¡èµä¸åï¿½".split("");

  for (j = 0; j != D[200].length; ++j) if (D[200][j].charCodeAt(0) !== 0xFFFD) {
    e[D[200][j]] = 51200 + j;
    d[51200 + j] = D[200][j];
  }

  D[201] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä¼æ£æ¡åä¸§æéªæ«å«çè²æ¶©æ£®å§èç æå¹æ²çº±å»å¥çç­æçè«æå±±å ç½è¡«éªéæèµ¡è³åæ±æç¼®å¢ä¼¤åèµæä¸å°è£³æ¢¢æç¨ç§èåºé¶å°å¨éµç»å¥¢èµèèèèµ¦æå°ææ¶ç¤¾è®¾ç ·ç³å»ä¼¸èº«æ·±å¨ ç»ç¥æ²å®¡å©¶çè¾ææ¸å£°çç¥ç²åç»³ï¿½".split("");

  for (j = 0; j != D[201].length; ++j) if (D[201][j].charCodeAt(0) !== 0xFFFD) {
    e[D[201][j]] = 51456 + j;
    d[51456 + j] = D[201][j];
  }

  D[202] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ççå©èå£å¸å¤±ç®æ½æ¹¿è¯å°¸è±åç³æ¾æ¶ä»é£èå®è¯å²ç¢ä½¿å±é©¶å§å¼ç¤ºå£«ä¸æ¿äºæ­èªéå¿æ¯åå¬éä»ä¾éé¥°æ°å¸æå®¤è§è¯æ¶æé¦å®å¯¿æå®åç¦å½è¬æ¢æ¢³æ®æè¾åèæ·çä¹¦èµå­°çè¯ææç½²èé»é¼ å±æ¯è¿°æ ææç«å¢åº¶æ°æ¼±ï¿½".split("");

  for (j = 0; j != D[202].length; ++j) if (D[202][j].charCodeAt(0) !== 0xFFFD) {
    e[D[202][j]] = 51712 + j;
    d[51712 + j] = D[202][j];
  }

  D[203] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æå·èæè¡°ç©å¸æ æ´éåç½è°æ°´ç¡ç¨å®ç¬é¡ºèè¯´ç¡æçæ¯æå¶æç§å¸ä¸æ­»èå¯ºå£åä¼ºä¼¼é¥²å·³æ¾è¸æé¢éå®è®¼è¯µæèæå½èé¥ä¿ç´ éç²å³å¡æº¯å®¿è¯èé¸èç®è½ééç»¥é«ç¢å²ç©éé§ç¥å­æç¬èæ¢­åç¼©çç´¢éæå¡ä»å®å¥¹å¡ï¿½".split("");

  for (j = 0; j != D[203].length; ++j) if (D[203][j].charCodeAt(0) !== 0xFFFD) {
    e[D[203][j]] = 51968 + j;
    d[51968 + j] = D[203][j];
  }

  D[204] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç­æè¹è¸èèæ¬å°æ³°éå¤ªææ±°åæè´ªç«æ»©åæªç°æ½­è°­è°å¦æ¯¯è¢ç¢³æ¢å¹ç­æ±¤å¡æªå æ£ èåç³åèººæ·è¶ç«ææ¶æ»ç»¦èæ¡éæ·é¶è®¨å¥ç¹è¤è¾ç¼èªæ¢¯åè¸¢éæé¢è¹å¼ä½æ¿åææ¶åå±å¤©æ·»å¡«ç°çæ¬èèææ¡è¿¢çºè·³è´´éå¸åå¬çï¿½".split("");

  for (j = 0; j != D[204].length; ++j) if (D[204][j].charCodeAt(0) !== 0xFFFD) {
    e[D[204][j]] = 52224 + j;
    d[52224 + j] = D[204][j];
  }

  D[205] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ±å»·åäº­åº­æºèéæ¡é®ç³åéå½¤ç«¥æ¡¶æç­ç»çå·æå¤´éå¸ç§çªå¾å¾éæ¶å± åååæ¹å¢æ¨é¢è¿èè¤ªéåå±¯èææè±é¸µéé©®é©¼æ¤­å¦¥æå¾æåèæ´¼å¨ç¦è¢æ­ªå¤è±å¼¯æ¹¾ç©é¡½ä¸¸ç·å®ç¢æ½æçæå®å©ä¸èæ±ªçäº¡æç½å¾æºæå¿å¦å¨ï¿½".split("");

  for (j = 0; j != D[205].length; ++j) if (D[205][j].charCodeAt(0) !== 0xFFFD) {
    e[D[205][j]] = 52480 + j;
    d[52480 + j] = D[205][j];
  }

  D[206] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å·å¾®å±é¦è¿æ¡å´å¯æä¸ºæ½ç»´èèå§ä¼ä¼ªå°¾çº¬æªèå³çèåé­ä½æ¸­è°å°æ°å«çæ¸©èæé»çº¹å»ç¨³ç´é®å¡ç¿ç®æèæ¶¡çªææ¡å§æ¡æ²å·«åé¨ä¹æ±¡è¯¬å±æ èæ¢§å¾å´æ¯æ­¦äºæåèä¼ä¾®åæé¾æ¤ç©å¿å¡æè¯¯æçæè¥¿ç¡ç½æ°å»å¸é¡çºï¿½".split("");

  for (j = 0; j != D[206].length; ++j) if (D[206][j].charCodeAt(0) !== 0xFFFD) {
    e[D[206][j]] = 52736 + j;
    d[52736 + j] = D[206][j];
  }

  D[207] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¨æ¯å¸æèå¤æçç¯æºªæ±çæªè¢­å¸­ä¹ åª³åé£æ´ç³»éæç»çè¾å£éè¾æå³¡ä¾ ç­ä¸å¦å¤åæé¨åä»é²çº¤å¸è´¤è¡è·é²æ¶å¼¦å«æ¾é©ç°ç®å¿èºé¦ç¾¡å®ªé·éçº¿ç¸å¢é¶é¦ç®±è¥æ¹ä¹¡ç¿ç¥¥è¯¦æ³åäº«é¡¹å··æ©¡ååè±¡è§ç¡éåå®å£éæ¶å®µæ·æï¿½".split("");

  for (j = 0; j != D[207].length; ++j) if (D[207][j].charCodeAt(0) !== 0xFFFD) {
    e[D[207][j]] = 52992 + j;
    d[52992 + j] = D[207][j];
  }

  D[208] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å°å­æ ¡èå¸ç¬ææ¥äºæ­èéåææºéªæèè°åæ¢°å¸è¹ææ³æ³»è°¢å±èªè¯éæ¬£è¾æ°å¿»å¿ä¿¡è¡æè¥ç©æºå´ååå½¢é¢è¡éå¹¸ææ§å§åå¶è¸åæ±¹éçä¼ä¿®ç¾æ½åéç§è¢ç»£å¢æéèåé¡»å¾è®¸èéåæ­åºçæ¤çµ®å©¿ç»ªç»­è½©å§å®£æ¬æçï¿½".split("");

  for (j = 0; j != D[208].length; ++j) if (D[208][j].charCodeAt(0) !== 0xFFFD) {
    e[D[208][j]] = 53248 + j;
    d[53248 + j] = D[208][j];
  }

  D[209] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½éç£ç©ç»é´èå­¦ç©´éªè¡åçå¾ªæ¬è¯¢å¯»é©¯å·¡æ®æ±è®­è®¯éè¿åæ¼é¸¦é¸­åä¸«è½çèå´è¡æ¶¯éåäºè®¶çå½éçæ·¹çä¸¥ç èå²©å»¶è¨é¢éçæ²¿å¥æ©ç¼è¡æ¼è³å °çåç éåå½¦ç°å®´è°éªæ®å¤®é¸¯ç§§æ¨æ¬ä½¯ç¡ç¾æ´é³æ°§ä»°çå»æ ·æ¼¾éè°å¦ç¶ï¿½".split("");

  for (j = 0; j != D[209].length; ++j) if (D[209][j].charCodeAt(0) !== 0xFFFD) {
    e[D[209][j]] = 53504 + j;
    d[53504 + j] = D[209][j];
  }

  D[210] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æå°§é¥çªè°£å§å¬èè¯è¦èæ¤°åè¶ç·éå¶ä¹é¡µæä¸å¶æ³èå¤æ¶²ä¸å£¹å»æé±ä¾ä¼è¡£é¢å¤·éç§»ä»ªè°çæ²å®å§¨å½æ¤èåå·²ä¹ç£ä»¥èºææéå±¹äº¿å½¹èé¸èç«äº¦è£ææ¯å¿ä¹çæº¢è¯£è®®è°è¯å¼ç¿¼ç¿ç»èµè«å æ®·é³é´å§»åé¶æ·«å¯é¥®å°¹å¼éï¿½".split("");

  for (j = 0; j != D[210].length; ++j) if (D[210][j].charCodeAt(0) !== 0xFFFD) {
    e[D[210][j]] = 53760 + j;
    d[53760 + j] = D[210][j];
  }

  D[211] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å°è±æ¨±å©´é¹°åºç¼¨è¹è¤è¥è§èè¿èµ¢çå½±é¢ç¡¬æ åæ¥ä½£èçåº¸éè¸è¹åæ³³æ¶æ°¸æ¿åç¨å¹½ä¼æ å¿§å°¤ç±é®éç¹æ²¹æ¸¸éæåå³ä½éè¯±åå¹¼è¿æ·¤äºçæ¦èæèä½ä¿é¾é±¼ææ¸æ¸éäºå¨±é¨ä¸å±¿ç¦¹å®è¯­ç¾½çåèéåéå»å³ªå¾¡ææ¬²ç±è²èªï¿½".split("");

  for (j = 0; j != D[211].length; ++j) if (D[211][j].charCodeAt(0) !== 0xFFFD) {
    e[D[211][j]] = 54016 + j;
    d[54016 + j] = D[211][j];
  }

  D[212] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æµ´å¯è£é¢è±«é©­é¸³æ¸å¤åå£è¢åæ´è¾å­ååç¿æºç¼è¿èæ¿æ¨é¢æ°çº¦è¶è·é¥å²³ç²¤ææ¦éèäºé§åé¨åè¿è´éæéµå­åç ¸ææ ½åç¾å®°è½½åå¨å±ææèµèµèè¬é­ç³å¿è»æ£æ©æ¾¡è¤èºåªé çç¶ç¥è´£æ©åæ³½è´¼æå¢ææ¾èµ æå³æ¸£æ­è½§ï¿½".split("");

  for (j = 0; j != D[212].length; ++j) if (D[212][j].charCodeAt(0) !== 0xFFFD) {
    e[D[212][j]] = 54272 + j;
    d[54272 + j] = D[212][j];
  }

  D[213] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¡é¸ç¨æ æ¦¨åä¹ç¸è¯ææå®çªåºå¯¨ç»æ¯¡è©¹ç²æ²¾çæ©è¾å´­å±è¸æ å æç«æ¹ç»½æ¨ç« å½°æ¼³å¼ ææ¶¨æä¸å¸è´¦ä»èç´éææ­æ¾æ²¼èµµç§ç½©åèå¬é®æå²è°è¾èéèè¿æµçæççç §è»è´éä¾¦æç¹è¯éæ¯ééµè¸æ£çå¾ç°äºææ´æ¯æ­£æ¿ï¿½".split("");

  for (j = 0; j != D[213].length; ++j) if (D[213][j].charCodeAt(0) !== 0xFFFD) {
    e[D[213][j]] = 54528 + j;
    d[54528 + j] = D[213][j];
  }

  D[214] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¸§çéè¯èææ¯å±èç¥è¢èæ±ä¹ç»èç´æ¤æ®æ§å¼ä¾åææ­¢è¶¾åªæ¨çº¸å¿ææ·è³è´ç½®å¸å³å¶æºç§©ç¨è´¨ççæ»æ²»çªä¸­çå¿ éè¡·ç»ç§è¿éä»²ä¼èå¨å·æ´²è¯ç²¥è½´èå¸åç±å®æ¼éª¤ç æ ªèæ±çªè¯¸è¯éç«¹çç®æç©å±ä¸»èæ±å©èè´®é¸ç­ï¿½".split("");

  for (j = 0; j != D[214].length; ++j) if (D[214][j].charCodeAt(0) !== 0xFFFD) {
    e[D[214][j]] = 54784 + j;
    d[54784 + j] = D[214][j];
  }

  D[215] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä½æ³¨ç¥é©»æçªæ½ä¸ç è½¬æ°èµç¯æ¡©åºè£å¦æå£®ç¶æ¤é¥è¿½èµå ç¼è°åææåæ¡ç¢èéåçç¼æµå¹å¨èµå§¿æ»æ·å­ç´«ä»ç±½æ»å­èªæ¸å­é¬æ£è¸ªå®ç»¼æ»çºµé¹èµ°å¥æç§è¶³åæç¥è¯é»ç»é»çºå´éæç½ªå°éµæ¨å·¦ä½æåä½ååº§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½".split("");

  for (j = 0; j != D[215].length; ++j) if (D[215][j].charCodeAt(0) !== 0xFFFD) {
    e[D[215][j]] = 55040 + j;
    d[55040 + j] = D[215][j];
  }

  D[216] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½äºä¸åä¸å»¿åä¸äºä¸é¬²å­¬å©ä¸¨ç¦ºä¸¿åä¹å¤­ç»å®æ°åè¤é¦æ¯ç¾é¼ä¸¶äºé¼ä¹ä¹©äºèå­å¬åä»ååå£å¥å®é¥èµååµå¦å®å¾èµå¦å£åååå­å³å¿åååå¡åè¯å½åååååç½äº»ä»ä»ä»ä»¨ä»¡ä»«ä»ä¼ä»³ä¼¢ä½¤ä»µä¼¥ä¼§ä¼ä¼«ä½ä½§æ¸ä½ä½ï¿½".split("");

  for (j = 0; j != D[216].length; ++j) if (D[216][j].charCodeAt(0) !== 0xFFFD) {
    e[D[216][j]] = 55296 + j;
    d[55296 + j] = D[216][j];
  }

  D[217] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ä½ä½ä¼²ä¼½ä½¶ä½´ä¾ä¾ä¾ä¾ä½¾ä½»ä¾ªä½¼ä¾¬ä¾ä¿¦ä¿¨ä¿ªä¿ä¿ä¿£ä¿ä¿ä¿ä¿¸å©åä¿³å¬åå®å­ä¿¾ååå¥å¨å¾ååååå¬å»å¥å§å©åºååå­å¬å¦å®ååä»æ°½ä½ä½¥ä¿é¾ æ±ç±´å®å·½é»é¦åå¤å¹åè¨åå«å¤åäº åäº³è¡®è¢¤äºµèè£ç¦å¬´è ç¾¸å«å±å½å¼ï¿½".split("");

  for (j = 0; j != D[217].length; ++j) if (D[217][j].charCodeAt(0) !== 0xFFFD) {
    e[D[217][j]] = 55552 + j;
    d[55552 + j] = D[217][j];
  }

  D[218] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ååå¢å¥è® è®¦è®§è®ªè®´è®µè®·è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯ è¯¤è¯¨è¯©è¯®è¯°è¯³è¯¶è¯¹è¯¼è¯¿è°è°è°è°è°è°è°è°è°è°è°è°è°è°è°è°è° è°¡è°¥è°§è°ªè°«è°®è°¯è°²è°³è°µè°¶å©åºéé¢é¡é±éªé½é¼ééééé§é¬é²é´éééé°ééééé¬é¡é´é³é¶éºï¿½".split("");

  for (j = 0; j != D[218].length; ++j) if (D[218][j].charCodeAt(0) !== 0xFFFD) {
    e[D[218][j]] = 55808 + j;
    d[55808 + j] = D[218][j];
  }

  D[219] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¸é°ééé¾ééééé¦é¢éééé«é¯é¾éé¢éé£é±é¯é¹ééåå¥å¢å¬å­å¾å¿ååå°åç®çå»´åµå¼é¬¯å¶å¼çå·¯åå©å¡å¡¾å¢¼å£å£å©å¬åªå³å¹å®å¯åå»åå©åå«åå¼å»å¨å­å¶å³å­å¤åå²åå§å´åå åååååå¸å´å¯å¸å¤åï¿½".split("");

  for (j = 0; j != D[219].length; ++j) if (D[219][j].charCodeAt(0) !== 0xFFFD) {
    e[D[219][j]] = 56064 + j;
    d[56064 + j] = D[219][j];
  }

  D[220] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å å å½å­å å å å¡å  å¡¥å¡¬å¢å¢å¢å¢é¦¨é¼æ¿è¹è½è¿èèè¨èèèèèè«è¸è¾è°èèè£èè·è®èèèè©è´è¡èªèèèè¤è¡èè·è¤èèèè´èèèè»èèèèèèè èèèèèèèè¼è´è±èèè¯èèèèèèè è­èºè³è¦è¥ï¿½".split("");

  for (j = 0; j != D[220].length; ++j) if (D[220][j].charCodeAt(0) !== 0xFFFD) {
    e[D[220][j]] = 56320 + j;
    d[56320 + j] = D[220][j];
  }

  D[221] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¨èè©è¬èªè­è®è°è¸è³è´è èªèèèè¼è¶è©è½è¸è»èèè¨èºè¼èèè¥èå èèèè½èèè¸èèèèèèè¸è¹èªèèè¦è°è¡èèèèè³èèèºèè¸è¼èè©è¶èèè±è­èèèè¦è½èèè¿èºè è¡è¹è´èè¥è£èçè¸è°è¹èèºï¿½".split("");

  for (j = 0; j != D[221].length; ++j) if (D[221][j].charCodeAt(0) !== 0xFFFD) {
    e[D[221][j]] = 56576 + j;
    d[56576 + j] = D[221][j];
  }

  D[222] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èè»è¿è¼èèè¨è¤èèºç¢èè²è»è¤è¨èèè¹è®èèè¹è·è°èèèè¿è§èè©èè¼å»¾å¼å¤¼å¥è·å¥å¥å¥åå°¢å°¥å°¬å°´ææªææ»ææææ®æ¢æ¶æ¹æææ­æ¶æ±æºææ´æ­æ¬ææ©æ®æ¼æ²æ¸æ æ¿ææææææ¾æææææ ææ¦æ¡æææ­æï¿½".split("");

  for (j = 0; j != D[222].length; ++j) if (D[222][j].charCodeAt(0) !== 0xFFFD) {
    e[D[222][j]] = 56832 + j;
    d[56832 + j] = D[222][j];
  }

  D[223] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æºæ·æ¸ææºææææ¤æ¢ææ¥æ®å¼å¿çå¼åå±å½å©å¨å»åååååååååå¡ååå£å²ååå·å±å¤åååå¶å¦ååå­åå´åå§å¦ååå²å£åå»å¿ååååå©åªå¤ååååå§å å½åå³å¢å£ååå§åªå§ååµåå­ååå¿åå¼ï¿½".split("");

  for (j = 0; j != D[223].length; ++j) if (D[223][j].charCodeAt(0) !== 0xFFFD) {
    e[D[223][j]] = 57088 + j;
    d[57088 + j] = D[223][j];
  }

  D[224] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å·ååµå¶å·å³å°ååååå±å¹åååå¾ååå»åå½å¾åååªå·åååå«å¬åå¦ååå¯å¥å²å³ååå¨åµå¤è¾ååååå¤å£å¾åå§å­åå¹åå¬åå¢åååååå¤å±å«å»å¼ååå¯åååå¡åµå«å¹å¿ååååå¸å¸å¸å¸å¸±å¸»å¸¼ï¿½".split("");

  for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 0xFFFD) {
    e[D[224][j]] = 57344 + j;
    d[57344 + j] = D[224][j];
  }

  D[225] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¸·å¹å¹å¹å¹å¹¡å²å±ºå²å²å²å²å²å²å²å²å²å²µå²¢å²½å²¬å²«å²±å²£å³å²·å³å³å³¤å³å³¥å´å´å´§å´¦å´®å´¤å´å´å´åµå´¾å´´å´½åµ¬åµåµ¯åµåµ«åµåµåµ©åµ´å¶å¶å¶è±³å¶·å·å½³å½·å¾å¾å¾å¾å¾å¾å¾å¾¨å¾­å¾µå¾¼è¡¢å½¡ç­ç°ç´ç·ç¸çççççç¨ç¯ç©ç²ç´ç·çç³ççºï¿½".split("");

  for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 0xFFFD) {
    e[D[225][j]] = 57600 + j;
    d[57600 + j] = D[225][j];
  }

  D[226] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç»ççç¡ççççç¢ç¹ç¥ç¬ç¸ç±çççç ç¬ç¯ç¾èå¤¥é£§å¤¤å¤é¥£é¥§é¥¨é¥©é¥ªé¥«é¥¬é¥´é¥·é¥½é¦é¦é¦é¦é¦é¦é¦é¦é¦é¦åºåºåºåºåº¥åº åº¹åºµåº¾åº³èµå»å»å»å»¨å»ªèºå¿å¿å¿å¿æå¿®æå¿¡å¿¤å¿¾ææå¿ªå¿­å¿¸ææµæ¦ææææ©æ«ææ¿æ¡æ¸æ¹æ»æºæï¿½".split("");

  for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 0xFFFD) {
    e[D[226][j]] = 57856 + j;
    d[57856 + j] = D[226][j];
  }

  D[227] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æªæ½æææ­ææææææ¬æ»æ±æææææ´æ æ¦ææ£æ´æææ«ææµæ¬ææ§æ·ææµå¿é³é©é«é±é³éµé¶é¼é¾éééééééééééééééä¸¬ç¿ææ°µæ±æ±æ±æ²£æ²æ²æ²æ²æ±¨æ±©æ±´æ±¶æ²æ²©æ³æ³æ²­æ³·æ³¸æ³±æ³æ²²æ³ æ³æ³ºæ³«æ³®æ²±æ³æ³¯æ³¾ï¿½".split("");

  for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 0xFFFD) {
    e[D[227][j]] = 58112 + j;
    d[58112 + j] = D[227][j];
  }

  D[228] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ´¹æ´§æ´æµæµæ´æ´æ´æ´æ´«æµæ´®æ´µæ´æµæµæµæ´³æ¶æµ¯æ¶æ¶ æµæ¶æ¶æµæµ æµ¼æµ£æ¸æ·æ·æ·æ¸æ¶¿æ· æ¸æ·¦æ·æ·æ¸æ¶«æ¸æ¶®æ¸«æ¹®æ¹æ¹«æº²æ¹æºæ¹æ¹æ¸²æ¸¥æ¹æ»æº±æºæ» æ¼­æ»¢æº¥æº§æº½æº»æº·æ»æº´æ»æºæ»æºæ½¢æ½æ½æ¼¤æ¼æ»¹æ¼¯æ¼¶æ½æ½´æ¼ªæ¼æ¼©æ¾æ¾æ¾æ½¸æ½²æ½¼æ½ºæ¿ï¿½".split("");

  for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 0xFFFD) {
    e[D[228][j]] = 58368 + j;
    d[58368 + j] = D[228][j];
  }

  D[229] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¿æ¾§æ¾¹æ¾¶æ¿æ¿¡æ¿®æ¿æ¿ æ¿¯çç£çç¹çµççå®å®å®å®å®¥å®¸ç¯éªæ´å¯¤å¯®è¤°å¯°è¹è¬è¾¶è¿è¿è¿¥è¿®è¿¤è¿©è¿¦è¿³è¿¨éééé¦éééé¡éµé¶é­é¯ééééé¨éé¢éæ¹é´é½ééééå½å½å½å½å°»å«å±å±å­±å±£å±¦ç¾¼å¼ªå¼©å¼­è´å¼¼é¬»å±®å¦å¦å¦å¦©å¦ªå¦£ï¿½".split("");

  for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 0xFFFD) {
    e[D[229][j]] = 58624 + j;
    d[58624 + j] = D[229][j];
  }

  D[230] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¦å§å¦«å¦å¦¤å§å¦²å¦¯å§å¦¾å¨å¨å§å¨å§£å§å§¹å¨å¨å¨²å¨´å¨å¨£å¨å©å©§å©å©å¨¼å©¢å©µè¬åªªåªå©·å©ºåª¾å««åª²å«å«åª¸å« å«£å«±å«å«¦å«å«å¬å¬å¬å¬²å¬·å­å°å°å­å­¥å­³å­å­å­¢é©µé©·é©¸é©ºé©¿é©½éªéªéªéªéªéªéªéªéªéªéªéªéªéªéª éª¢éª£éª¥éª§çºçº¡çº£çº¥çº¨çº©ï¿½".split("");

  for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 0xFFFD) {
    e[D[230][j]] = 58880 + j;
    d[58880 + j] = D[230][j];
  }

  D[231] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çº­çº°çº¾ç»ç»ç»ç»ç»ç»ç»ç»ç»ç»ç» ç»¡ç»¨ç»«ç»®ç»¯ç»±ç»²ç¼ç»¶ç»ºç»»ç»¾ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼¡ç¼¢ç¼£ç¼¤ç¼¥ç¼¦ç¼§ç¼ªç¼«ç¼¬ç¼­ç¼¯ç¼°ç¼±ç¼²ç¼³ç¼µå¹ºç¿å·ç¾éççç®ç¢ççççç·ç³çççç¥çé¡¼çç©ç§ççºç²ççªçç¦ç¥ç¨ç°ç®ç¬ï¿½".split("");

  for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 0xFFFD) {
    e[D[231][j]] = 59136 + j;
    d[59136 + j] = D[231][j];
  }

  D[232] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çççççççç·ç­ç¾çççççççç¨ç©çç§ççºéªé«é¬æææææ©æ¥ææªæ³ææ§æµæ¨ææ­ææ·æ¼æ°æ ææ æ©æ°æ ææµææ³ææ ææ¸æ¢æ ææ½æ ²æ ³æ¡ æ¡¡æ¡æ¡¢æ¡æ¡¤æ¢æ æ¡æ¡¦æ¡æ¡§æ¡æ ¾æ¡æ¡æ ©æ¢µæ¢æ¡´æ¡·æ¢æ¡«æ£æ¥®æ£¼æ¤æ¤ æ£¹ï¿½".split("");

  for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 0xFFFD) {
    e[D[232][j]] = 59392 + j;
    d[59392 + j] = D[232][j];
  }

  D[233] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¤¤æ£°æ¤æ¤æ¥æ££æ¤æ¥±æ¤¹æ¥ æ¥æ¥æ¦æ¥«æ¦æ¦æ¥¸æ¤´æ§æ¦æ¦æ§æ¦æ¥¦æ¥£æ¥¹æ¦æ¦§æ¦»æ¦«æ¦­æ§æ¦±æ§æ§æ§æ¦æ§ æ¦æ§¿æ¨¯æ§­æ¨æ¨æ©¥æ§²æ©æ¨¾æª æ©æ©æ¨µæªæ©¹æ¨½æ¨¨æ©æ©¼æªæªæª©æªæª«ç·çæ®æ®æ®æ®æ®æ®æ®æ®æ®æ®¡æ®ªè½«è½­è½±è½²è½³è½µè½¶è½¸è½·è½¹è½ºè½¼è½¾è¾è¾è¾è¾è¾ï¿½".split("");

  for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 0xFFFD) {
    e[D[233][j]] = 59648 + j;
    d[59648 + j] = D[233][j];
  }

  D[234] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è¾è¾è¾è¾è¾è»æææææ¢æ¡æ¥æ¤æ¬è§ç¯ç´ç¿çççæ´æ®æ¯æ°æææ²æææçæ·ææ´æ±æ¶æµèææææææ¡ææ·æææ§ææ¾æææ¦æ©è´²è´³è´¶è´»è´½èµèµèµèµèµèµèµèµèµè§è§è§è§è§è§è§è§ç®ççç¦ç¯ç¾ç¿çççççææ²æ°ï¿½".split("");

  for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 0xFFFD) {
    e[D[234][j]] = 59904 + j;
    d[59904 + j] = D[234][j];
  }

  D[235] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¿æèæ¯ªæ¯³æ¯½æ¯µæ¯¹æ°æ°æ°æ°æ°æ°æ°æ°æ°¡æ°©æ°¤æ°ªæ°²æµææ«çççç°è¢åèèèè¼æè½è±è«è­è´è·è§è¨è©èªèèèèèèæèè«è±è´è­èèè²è¼æèè±è¶èè¬èè²èèèè´èèè±è è©è¼è½è­è§å¡åªµèèèæ»è£èªèæ¦èè»ï¿½".split("");

  for (j = 0; j != D[235].length; ++j) if (D[235][j].charCodeAt(0) !== 0xFFFD) {
    e[D[235][j]] = 60160 + j;
    d[60160 + j] = D[235][j];
  }

  D[236] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èè¦æ¬¤æ¬·æ¬¹æ­æ­æ­é£é£é£é£é£é£æ®³å½æ¯è§³æé½ææ¼æææææææççççç»çç·ç«ç±ç¨ççççç¯ç±ç³çç¨çç²çç¸çºçç³çµç¨ç ç çç§ç¹çç¨ç¬çç¦ç¹æ¾æ½æææç¤»ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥¢ç¥ç¥ ç¥¯ç¥§ç¥ºç¦ç¦ç¦ç¦§ç¦³å¿å¿ï¿½".split("");

  for (j = 0; j != D[236].length; ++j) if (D[236][j].charCodeAt(0) !== 0xFFFD) {
    e[D[236][j]] = 60416 + j;
    d[60416 + j] = D[236][j];
  }

  D[237] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½æ¼æææ§æææ£æ«ææææ©ææææèè¿æ²æ³¶æ·¼ç¶ç¸ç ç ç ç ç æ«ç ­ç ç ç ¹ç ºç »ç ç ¼ç ¥ç ¬ç £ç ©ç¡ç¡­ç¡ç¡ç ¦ç¡ç¡ç¡ç¡ªç¢ç¢ç¢ç¢ç¢ç¢¡ç¢£ç¢²ç¢¹ç¢¥ç£ç£ç£ç£¬ç£²ç¤ç£´ç¤ç¤¤ç¤ç¤´é¾é»¹é»»é»¼ç±ççç¹çççç¢çç­ç¦çµç¸çççççç¨ï¿½".split("");

  for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 0xFFFD) {
    e[D[237][j]] = 60672 + j;
    d[60672 + j] = D[237][j];
  }

  D[238] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¢ç¥ç¿çç½ççççç ç°çµç½çºçççççç²ç¹çç½ç½¡ç½è©ç½¨ç½´ç½±ç½¹ç¾ç½¾çç¥è ²éééééééééééééééé£é¤é«éªé­é¬é¯é°é²é´é¶é·é¸é¹éºé¼é½é¿éééééééééééééééééééé é¢é¤é¥é§é¨éªï¿½".split("");

  for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 0xFFFD) {
    e[D[238][j]] = 60928 + j;
    d[60928 + j] = D[238][j];
  }

  D[239] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é©é«é®é¯é³é´éµé·é¹é¼é½é¿éééééééééééééééééééé¢éªé«é©é¬é±é²é´é¶é·é¸é¼é¾é¿ééµééééééééééééééééééé¡é¢é¤é¥é¦é§é¨é©éªé«é¬é¯é±é²é³éºç§ç¬éç§ç§­ç§£ç§«ç¨åµç¨ç¨ç¨ç¨ï¿½".split("");

  for (j = 0; j != D[239].length; ++j) if (D[239][j].charCodeAt(0) !== 0xFFFD) {
    e[D[239][j]] = 61184 + j;
    d[61184 + j] = D[239][j];
  }

  D[240] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç¨¹ç¨·ç©é»é¦¥ç©°ççççç¤çç ç¬é¸ é¸¢é¸¨é¸©é¸ªé¸«é¸¬é¸²é¸±é¸¶é¸¸é¸·é¸¹é¸ºé¸¾é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹£é¹¦é¹§é¹¨é¹©é¹ªé¹«é¹¬é¹±é¹­é¹³çççç çç¬ç£ç³ç´ç¸çç±ç°ççççç£ç¨ç¦ç¤ç«ç§çç±ç¼ç¿ççççççç¥çççï¿½".split("");

  for (j = 0; j != D[240].length; ++j) if (D[240][j].charCodeAt(0) !== 0xFFFD) {
    e[D[240][j]] = 61440 + j;
    d[61440 + j] = D[240][j];
  }

  D[241] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½çç¼ç¢ç çç­ç°ç¿çµçç¾ç³çççççç«ç¯ç¿ç«¦ç©¸ç©¹çªçªçªçªçª¦çª çª¬çª¨çª­çª³è¡¤è¡©è¡²è¡½è¡¿è¢è¢¢è£è¢·è¢¼è£è£¢è£è££è£¥è£±è¤è£¼è£¨è£¾è£°è¤¡è¤è¤è¤è¤è¤´è¤«è¤¶è¥è¥¦è¥»çè¥ç²ç´çèèèèè è¢è¥è¦è§è©è¨è±èèµèèèèè©è±è¦é¡¸é¢é¢ï¿½".split("");

  for (j = 0; j != D[241].length; ++j) if (D[241][j].charCodeAt(0) !== 0xFFFD) {
    e[D[241][j]] = 61696 + j;
    d[61696 + j] = D[241][j];
  }

  D[242] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¢é¢é¢é¢é¢é¢é¢é¢é¢é¢¡é¢¢é¢¥é¢¦èèè¬è®è¿èºè¼è»è¨èèè¬èè§è£èªèè©è¶èèµèè°èºè±è¯èèè´è©è±è²è­è³èèèè´èèèèèè¸èèèèè£è»èè¥è®èè¾èè´è±è©è·è¿èè¢è½è¾è»è è°èè®èèè£è¼è¤èè¥èè¯è¨èï¿½".split("");

  for (j = 0; j != D[242].length; ++j) if (D[242][j].charCodeAt(0) !== 0xFFFD) {
    e[D[242][j]] = 61952 + j;
    d[61952 + j] = D[242][j];
  }

  D[243] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½èèèè­èèè«è¥è¬èµè³èèè½èèèèèªè è®è è è¾è è è ¡è ¹è ¼ç¼¶ç½ç½ç½èç«ºç«½ç¬ç¬ç¬ç¬ç¬ç¬«ç¬ç­ç¬¸ç¬ªç¬ç¬®ç¬±ç¬ ç¬¥ç¬¤ç¬³ç¬¾ç¬ç­ç­ç­ç­µç­ç­ç­ ç­®ç­»ç­¢ç­²ç­±ç®ç®¦ç®§ç®¸ç®¬ç®ç®¨ç®ç®ªç®ç®¢ç®«ç®´ç¯ç¯ç¯ç¯ç¯ç¯¥ç¯¦ç¯ªç°ç¯¾ç¯¼ç°ç°ç°ï¿½".split("");

  for (j = 0; j != D[243].length; ++j) if (D[243][j].charCodeAt(0) !== 0xFFFD) {
    e[D[243][j]] = 62208 + j;
    d[62208 + j] = D[243][j];
  }

  D[244] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ç°ç°ªç°¦ç°¸ç±ç±è¾èèèè¬è¡è¡è¢è£è­è¯è¨è«è¸è»è³è´è¾èèèèèèè¨è¡¾è¢è¢è£è£è¥ç¾ç¾ç¾§ç¾¯ç¾°ç¾²ç±¼æç²ç²ç²ç²ç²¢ç²²ç²¼ç²½ç³ç³ç³ç³ç³ç³ç³ç³¨è®æ¨ç¾¿ç¿ç¿ç¿¥ç¿¡ç¿¦ç¿©ç¿®ç¿³ç³¸çµ·ç¶¦ç¶®ç¹çºéº¸éº´èµ³è¶è¶è¶è¶±èµ§èµ­è±è±ééééé¤ï¿½".split("");

  for (j = 0; j != D[244].length; ++j) if (D[244][j].charCodeAt(0) !== 0xFFFD) {
    e[D[244][j]] = 62464 + j;
    d[62464 + j] = D[244][j];
  }

  D[245] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é¢é¡é°é©é¯é½é¾é²é´é¹éééééé¢é£éªé­é®é¯éµé´éºè±é¹¾è¶¸è·«è¸è¹è¹©è¶µè¶¿è¶¼è¶ºè·è·è·è·è·è·è·è·è·è·¬è··è·¸è·£è·¹è·»è·¤è¸è·½è¸è¸è¸è¸¬è¸®è¸£è¸¯è¸ºè¹è¸¹è¸µè¸½è¸±è¹è¹è¹è¹è¹è¹è¹°è¹¶è¹¼è¹¯è¹´èºèºèºèºèºèºè±¸è²è²è²è²è²æè§è§è§è§ï¿½".split("");

  for (j = 0; j != D[245].length; ++j) if (D[245][j].charCodeAt(0) !== 0xFFFD) {
    e[D[245][j]] = 62720 + j;
    d[62720 + j] = D[245][j];
  }

  D[246] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è§¥è§«è§¯è¨¾è¬¦éé©é³é¯ééééééªé­é°é¾é¾é¾é¾é¾é¾é¾é¾é¾é¾é»¾é¼é¼é¹é¼é½ééç¿é éé®éé¾éªééé¾é«é±¿é²é²é²é²é²ç¨£é²é²é²é²é²é²é²é²é²é²é²é² é²¡é²¢é²£é²¥é²¦é²§é²¨é²©é²«é²­é²®é²°é²±é²²é²³é²´é²µé²¶é²·é²ºé²»é²¼é²½é³é³é³é³é³é³ï¿½".split("");

  for (j = 0; j != D[246].length; ++j) if (D[246][j].charCodeAt(0) !== 0xFFFD) {
    e[D[246][j]] = 62976 + j;
    d[62976 + j] = D[246][j];
  }

  D[247] = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é³é³é³é³é³é³é³é³é³é³é³é³é³é³é³¢é¼ééééé¯é«é£é²é´éª±éª°éª·é¹éª¶éªºéª¼é«é«é«é«é«é«é«é­é­é­é­é­é­é­é£¨é¤é¤®é¥é¥é«é«¡é«¦é«¯é««é«»é«­é«¹é¬é¬é¬é¬é¬£éº½éº¾ç¸»éºéºéºéºéºééºéºé»é»é»é» é»é»¢é»©é»§é»¥é»ªé»¯é¼¢é¼¬é¼¯é¼¹é¼·é¼½é¼¾é½ï¿½".split("");

  for (j = 0; j != D[247].length; ++j) if (D[247][j].charCodeAt(0) !== 0xFFFD) {
    e[D[247][j]] = 63232 + j;
    d[63232 + j] = D[247][j];
  }

  return {
    "enc": e,
    "dec": d
  };
}();

cptable[10029] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÄÄÃÄÃÃÃ¡ÄÄÃ¤ÄÄÄÃ©Å¹ÅºÄÃ­ÄÄÄÄÃ³ÄÃ´Ã¶ÃµÃºÄÄÃ¼â Â°ÄÂ£Â§â¢Â¶ÃÂ®Â©â¢ÄÂ¨â Ä£Ä®Ä¯Äªâ¤â¥Ä«Ä¶ââÅÄ»Ä¼Ä½Ä¾Ä¹ÄºÅÅÅÂ¬âÅÅâÂ«Â»â¦Â ÅÅÃÅÅââââââÃ·âÅÅÅÅâ¹âºÅÅÅÅ ââÅ¡ÅÅÃÅ¤Å¥ÃÅ½Å¾ÅªÃÃÅ«Å®ÃÅ¯Å°Å±Å²Å³ÃÃ½Ä·Å»ÅÅ¼Ä¢Ë",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[10079] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼ÃÂ°Â¢Â£Â§â¢Â¶ÃÂ®Â©â¢Â´Â¨â ÃÃâÂ±â¤â¥Â¥ÂµâââÏâ«ÂªÂºâ¦Ã¦Ã¸Â¿Â¡Â¬âÆââÂ«Â»â¦Â ÃÃÃÅÅââââââÃ·âÃ¿Å¸âÂ¤ÃÃ°ÃÃ¾Ã½Â·âââ°ÃÃÃÃÃÃÃÃÃÃÃï¿½ÃÃÃÃÄ±ËËÂ¯ËËËÂ¸ËËË",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}();

cptable[10081] = function () {
  var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼â Â°Â¢Â£Â§â¢Â¶ÃÂ®Â©â¢Â´Â¨â ÃÃâÂ±â¤â¥Â¥ÂµâââÏâ«ÂªÂºâ¦Ã¦Ã¸Â¿Â¡Â¬âÆââÂ«Â»â¦Â ÃÃÃÅÅââââââÃ·âÃ¿Å¸ÄÄÄ°Ä±ÅÅâ¡Â·âââ°ÃÃÃÃÃÃÃÃÃÃÃï¿½ÃÃÃÃï¿½ËËÂ¯ËËËÂ¸ËËË",
      D = [],
      e = {};

  for (var i = 0; i != d.length; ++i) {
    if (d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i;
    D[i] = d.charAt(i);
  }

  return {
    "enc": e,
    "dec": D
  };
}(); // eslint-disable-next-line no-undef


if (typeof module !== 'undefined' && module.exports && typeof DO_NOT_EXPORT_CODEPAGE === 'undefined') module.exports = cptable;
/* cputils.js (C) 2013-present SheetJS -- http://sheetjs.com */

/* vim: set ft=javascript: */

/*jshint newcap: false */

(function (root, factory) {
  /*jshint ignore:start */

  /*eslint-disable */
  "use strict";

  if (typeof cptable === "undefined") {
    if (typeof require !== "undefined") {
      var cpt = cptable;
      if (typeof module !== 'undefined' && module.exports && typeof DO_NOT_EXPORT_CODEPAGE === 'undefined') module.exports = factory(cpt);else root.cptable = factory(cpt);
    } else throw new Error("cptable not found");
  } else cptable = factory(cptable);
  /*eslint-enable */

  /*jshint ignore:end */

})(this, function (cpt) {
  "use strict";
  /*global module, Buffer */

  var magic = {
    "1200": "utf16le",
    "1201": "utf16be",
    "12000": "utf32le",
    "12001": "utf32be",
    "16969": "utf64le",
    "20127": "ascii",
    "65000": "utf7",
    "65001": "utf8"
  };
  var sbcs_cache = [874, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 10000];
  var dbcs_cache = [932, 936, 949, 950];
  var magic_cache = [65001];
  var magic_decode = {};
  var magic_encode = {};
  var cpdcache = {};
  var cpecache = {};

  var sfcc = function sfcc(x) {
    return String.fromCharCode(x);
  };

  var cca = function cca(x) {
    return x.charCodeAt(0);
  };

  var has_buf = typeof Buffer !== 'undefined';

  var Buffer_from = function () {};

  if (has_buf) {
    var nbfs = !Buffer.from;
    if (!nbfs) try {
      Buffer.from("foo", "utf8");
    } catch (e) {
      nbfs = true;
    }
    Buffer_from = nbfs ? function (buf, enc) {
      return enc ? new Buffer(buf, enc) : new Buffer(buf);
    } : Buffer.from.bind(Buffer); // $FlowIgnore

    if (!Buffer.allocUnsafe) Buffer.allocUnsafe = function (n) {
      return new Buffer(n);
    };
    var mdl = 1024,
        mdb = Buffer.allocUnsafe(mdl);

    var make_EE = function make_EE(E) {
      var EE = Buffer.allocUnsafe(65536);

      for (var i = 0; i < 65536; ++i) EE[i] = 0;

      var keys = Object.keys(E),
          len = keys.length;

      for (var ee = 0, e = keys[ee]; ee < len; ++ee) {
        if (!(e = keys[ee])) continue;
        EE[e.charCodeAt(0)] = E[e];
      }

      return EE;
    };

    var sbcs_encode = function make_sbcs_encode(cp) {
      var EE = make_EE(cpt[cp].enc);
      return function sbcs_e(data, ofmt) {
        var len = data.length;
        var out,
            i = 0,
            j = 0,
            D = 0,
            w = 0;

        if (typeof data === 'string') {
          out = Buffer.allocUnsafe(len);

          for (i = 0; i < len; ++i) out[i] = EE[data.charCodeAt(i)];
        } else if (Buffer.isBuffer(data)) {
          out = Buffer.allocUnsafe(2 * len);
          j = 0;

          for (i = 0; i < len; ++i) {
            D = data[i];
            if (D < 128) out[j++] = EE[D];else if (D < 224) {
              out[j++] = EE[((D & 31) << 6) + (data[i + 1] & 63)];
              ++i;
            } else if (D < 240) {
              out[j++] = EE[((D & 15) << 12) + ((data[i + 1] & 63) << 6) + (data[i + 2] & 63)];
              i += 2;
            } else {
              w = ((D & 7) << 18) + ((data[i + 1] & 63) << 12) + ((data[i + 2] & 63) << 6) + (data[i + 3] & 63);
              i += 3;
              if (w < 65536) out[j++] = EE[w];else {
                w -= 65536;
                out[j++] = EE[0xD800 + (w >> 10 & 1023)];
                out[j++] = EE[0xDC00 + (w & 1023)];
              }
            }
          }

          out = out.slice(0, j);
        } else {
          out = Buffer.allocUnsafe(len);

          for (i = 0; i < len; ++i) out[i] = EE[data[i].charCodeAt(0)];
        }

        if (!ofmt || ofmt === 'buf') return out;
        if (ofmt !== 'arr') return out.toString('binary');
        return [].slice.call(out);
      };
    };

    var sbcs_decode = function make_sbcs_decode(cp) {
      var D = cpt[cp].dec;
      var DD = Buffer.allocUnsafe(131072),
          d = 0,
          c = "";

      for (d = 0; d < D.length; ++d) {
        if (!(c = D[d])) continue;
        var w = c.charCodeAt(0);
        DD[2 * d] = w & 255;
        DD[2 * d + 1] = w >> 8;
      }

      return function sbcs_d(data) {
        var len = data.length,
            i = 0,
            j = 0;

        if (2 * len > mdl) {
          mdl = 2 * len;
          mdb = Buffer.allocUnsafe(mdl);
        }

        if (Buffer.isBuffer(data)) {
          for (i = 0; i < len; i++) {
            j = 2 * data[i];
            mdb[2 * i] = DD[j];
            mdb[2 * i + 1] = DD[j + 1];
          }
        } else if (typeof data === "string") {
          for (i = 0; i < len; i++) {
            j = 2 * data.charCodeAt(i);
            mdb[2 * i] = DD[j];
            mdb[2 * i + 1] = DD[j + 1];
          }
        } else {
          for (i = 0; i < len; i++) {
            j = 2 * data[i];
            mdb[2 * i] = DD[j];
            mdb[2 * i + 1] = DD[j + 1];
          }
        }

        return mdb.slice(0, 2 * len).toString('ucs2');
      };
    };

    var dbcs_encode = function make_dbcs_encode(cp) {
      var E = cpt[cp].enc;
      var EE = Buffer.allocUnsafe(131072);

      for (var i = 0; i < 131072; ++i) EE[i] = 0;

      var keys = Object.keys(E);

      for (var ee = 0, e = keys[ee]; ee < keys.length; ++ee) {
        if (!(e = keys[ee])) continue;
        var f = e.charCodeAt(0);
        EE[2 * f] = E[e] & 255;
        EE[2 * f + 1] = E[e] >> 8;
      }

      return function dbcs_e(data, ofmt) {
        var len = data.length,
            out = Buffer.allocUnsafe(2 * len),
            i = 0,
            j = 0,
            jj = 0,
            k = 0,
            D = 0;

        if (typeof data === 'string') {
          for (i = k = 0; i < len; ++i) {
            j = data.charCodeAt(i) * 2;
            out[k++] = EE[j + 1] || EE[j];
            if (EE[j + 1] > 0) out[k++] = EE[j];
          }

          out = out.slice(0, k);
        } else if (Buffer.isBuffer(data)) {
          for (i = k = 0; i < len; ++i) {
            D = data[i];
            if (D < 128) j = D;else if (D < 224) {
              j = ((D & 31) << 6) + (data[i + 1] & 63);
              ++i;
            } else if (D < 240) {
              j = ((D & 15) << 12) + ((data[i + 1] & 63) << 6) + (data[i + 2] & 63);
              i += 2;
            } else {
              j = ((D & 7) << 18) + ((data[i + 1] & 63) << 12) + ((data[i + 2] & 63) << 6) + (data[i + 3] & 63);
              i += 3;
            }

            if (j < 65536) {
              j *= 2;
              out[k++] = EE[j + 1] || EE[j];
              if (EE[j + 1] > 0) out[k++] = EE[j];
            } else {
              jj = j - 65536;
              j = 2 * (0xD800 + (jj >> 10 & 1023));
              out[k++] = EE[j + 1] || EE[j];
              if (EE[j + 1] > 0) out[k++] = EE[j];
              j = 2 * (0xDC00 + (jj & 1023));
              out[k++] = EE[j + 1] || EE[j];
              if (EE[j + 1] > 0) out[k++] = EE[j];
            }
          }

          out = out.slice(0, k);
        } else {
          for (i = k = 0; i < len; i++) {
            j = data[i].charCodeAt(0) * 2;
            out[k++] = EE[j + 1] || EE[j];
            if (EE[j + 1] > 0) out[k++] = EE[j];
          }
        }

        if (!ofmt || ofmt === 'buf') return out;
        if (ofmt !== 'arr') return out.toString('binary');
        return [].slice.call(out);
      };
    };

    var dbcs_decode = function make_dbcs_decode(cp) {
      var D = cpt[cp].dec;
      var DD = Buffer.allocUnsafe(131072),
          d = 0,
          c,
          w = 0,
          j = 0,
          i = 0;

      for (i = 0; i < 65536; ++i) {
        DD[2 * i] = 0xFF;
        DD[2 * i + 1] = 0xFD;
      }

      for (d = 0; d < D.length; ++d) {
        if (!(c = D[d])) continue;
        w = c.charCodeAt(0);
        j = 2 * d;
        DD[j] = w & 255;
        DD[j + 1] = w >> 8;
      }

      return function dbcs_d(data) {
        var len = data.length,
            out = Buffer.allocUnsafe(2 * len),
            i = 0,
            j = 0,
            k = 0;

        if (Buffer.isBuffer(data)) {
          for (i = 0; i < len; i++) {
            j = 2 * data[i];

            if (DD[j] === 0xFF && DD[j + 1] === 0xFD) {
              j = 2 * ((data[i] << 8) + data[i + 1]);
              ++i;
            }

            out[k++] = DD[j];
            out[k++] = DD[j + 1];
          }
        } else if (typeof data === "string") {
          for (i = 0; i < len; i++) {
            j = 2 * data.charCodeAt(i);

            if (DD[j] === 0xFF && DD[j + 1] === 0xFD) {
              j = 2 * ((data.charCodeAt(i) << 8) + data.charCodeAt(i + 1));
              ++i;
            }

            out[k++] = DD[j];
            out[k++] = DD[j + 1];
          }
        } else {
          for (i = 0; i < len; i++) {
            j = 2 * data[i];

            if (DD[j] === 0xFF && DD[j + 1] === 0xFD) {
              j = 2 * ((data[i] << 8) + data[i + 1]);
              ++i;
            }

            out[k++] = DD[j];
            out[k++] = DD[j + 1];
          }
        }

        return out.slice(0, k).toString('ucs2');
      };
    };

    magic_decode[65001] = function utf8_d(data) {
      if (typeof data === "string") return utf8_d(data.split("").map(cca));
      var len = data.length,
          w = 0,
          ww = 0;

      if (4 * len > mdl) {
        mdl = 4 * len;
        mdb = Buffer.allocUnsafe(mdl);
      }

      var i = 0;
      if (len >= 3 && data[0] == 0xEF) if (data[1] == 0xBB && data[2] == 0xBF) i = 3;

      for (var j = 1, k = 0, D = 0; i < len; i += j) {
        j = 1;
        D = data[i];
        if (D < 128) w = D;else if (D < 224) {
          w = (D & 31) * 64 + (data[i + 1] & 63);
          j = 2;
        } else if (D < 240) {
          w = ((D & 15) << 12) + (data[i + 1] & 63) * 64 + (data[i + 2] & 63);
          j = 3;
        } else {
          w = (D & 7) * 262144 + ((data[i + 1] & 63) << 12) + (data[i + 2] & 63) * 64 + (data[i + 3] & 63);
          j = 4;
        }

        if (w < 65536) {
          mdb[k++] = w & 255;
          mdb[k++] = w >> 8;
        } else {
          w -= 65536;
          ww = 0xD800 + (w >> 10 & 1023);
          w = 0xDC00 + (w & 1023);
          mdb[k++] = ww & 255;
          mdb[k++] = ww >>> 8;
          mdb[k++] = w & 255;
          mdb[k++] = w >>> 8 & 255;
        }
      }

      return mdb.slice(0, k).toString('ucs2');
    };

    magic_encode[65001] = function utf8_e(data, ofmt) {
      if (has_buf && Buffer.isBuffer(data)) {
        if (!ofmt || ofmt === 'buf') return data;
        if (ofmt !== 'arr') return data.toString('binary');
        return [].slice.call(data);
      }

      var len = data.length,
          w = 0,
          ww = 0,
          j = 0;
      var direct = typeof data === "string";

      if (4 * len > mdl) {
        mdl = 4 * len;
        mdb = Buffer.allocUnsafe(mdl);
      }

      for (var i = 0; i < len; ++i) {
        w = direct ? data.charCodeAt(i) : data[i].charCodeAt(0);
        if (w <= 0x007F) mdb[j++] = w;else if (w <= 0x07FF) {
          mdb[j++] = 192 + (w >> 6);
          mdb[j++] = 128 + (w & 63);
        } else if (w >= 0xD800 && w <= 0xDFFF) {
          w -= 0xD800;
          ++i;
          ww = (direct ? data.charCodeAt(i) : data[i].charCodeAt(0)) - 0xDC00 + (w << 10);
          mdb[j++] = 240 + (ww >>> 18 & 0x07);
          mdb[j++] = 144 + (ww >>> 12 & 0x3F);
          mdb[j++] = 128 + (ww >>> 6 & 0x3F);
          mdb[j++] = 128 + (ww & 0x3F);
        } else {
          mdb[j++] = 224 + (w >> 12);
          mdb[j++] = 128 + (w >> 6 & 63);
          mdb[j++] = 128 + (w & 63);
        }
      }

      if (!ofmt || ofmt === 'buf') return mdb.slice(0, j);
      if (ofmt !== 'arr') return mdb.slice(0, j).toString('binary');
      return [].slice.call(mdb, 0, j);
    };
  }

  var encache = function encache() {
    if (has_buf) {
      if (cpdcache[sbcs_cache[0]]) return;
      var i = 0,
          s = 0;

      for (i = 0; i < sbcs_cache.length; ++i) {
        s = sbcs_cache[i];

        if (cpt[s]) {
          cpdcache[s] = sbcs_decode(s);
          cpecache[s] = sbcs_encode(s);
        }
      }

      for (i = 0; i < dbcs_cache.length; ++i) {
        s = dbcs_cache[i];

        if (cpt[s]) {
          cpdcache[s] = dbcs_decode(s);
          cpecache[s] = dbcs_encode(s);
        }
      }

      for (i = 0; i < magic_cache.length; ++i) {
        s = magic_cache[i];
        if (magic_decode[s]) cpdcache[s] = magic_decode[s];
        if (magic_encode[s]) cpecache[s] = magic_encode[s];
      }
    }
  };

  var null_enc = function (data, ofmt) {
    void ofmt;
    return "";
  };

  var cp_decache = function cp_decache(cp) {
    delete cpdcache[cp];
    delete cpecache[cp];
  };

  var decache = function decache() {
    if (has_buf) {
      if (!cpdcache[sbcs_cache[0]]) return;
      sbcs_cache.forEach(cp_decache);
      dbcs_cache.forEach(cp_decache);
      magic_cache.forEach(cp_decache);
    }

    last_enc = null_enc;
    last_cp = 0;
  };

  var cache = {
    encache: encache,
    decache: decache,
    sbcs: sbcs_cache,
    dbcs: dbcs_cache
  };
  encache();
  var BM = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var SetD = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?";
  var last_enc = null_enc,
      last_cp = 0;

  var encode = function encode(cp, data, ofmt) {
    if (cp === last_cp && last_enc) {
      return last_enc(data, ofmt);
    }

    if (cpecache[cp]) {
      last_enc = cpecache[last_cp = cp];
      return last_enc(data, ofmt);
    }

    if (has_buf && Buffer.isBuffer(data)) data = data.toString('utf8');
    var len = data.length;
    var out = has_buf ? Buffer.allocUnsafe(4 * len) : [],
        w = 0,
        i = 0,
        j = 0,
        ww = 0;
    var C = cpt[cp],
        E,
        M = "";
    var isstr = typeof data === 'string';
    if (C && (E = C.enc)) for (i = 0; i < len; ++i, ++j) {
      w = E[isstr ? data.charAt(i) : data[i]];

      if (w > 255) {
        out[j] = w >> 8;
        out[++j] = w & 255;
      } else out[j] = w & 255;
    } else if (M = magic[cp]) switch (M) {
      case "utf8":
        if (has_buf && isstr) {
          out = Buffer_from(data, M);
          j = out.length;
          break;
        }

        for (i = 0; i < len; ++i, ++j) {
          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
          if (w <= 0x007F) out[j] = w;else if (w <= 0x07FF) {
            out[j] = 192 + (w >> 6);
            out[++j] = 128 + (w & 63);
          } else if (w >= 0xD800 && w <= 0xDFFF) {
            w -= 0xD800;
            ww = (isstr ? data.charCodeAt(++i) : data[++i].charCodeAt(0)) - 0xDC00 + (w << 10);
            out[j] = 240 + (ww >>> 18 & 0x07);
            out[++j] = 144 + (ww >>> 12 & 0x3F);
            out[++j] = 128 + (ww >>> 6 & 0x3F);
            out[++j] = 128 + (ww & 0x3F);
          } else {
            out[j] = 224 + (w >> 12);
            out[++j] = 128 + (w >> 6 & 63);
            out[++j] = 128 + (w & 63);
          }
        }

        break;

      case "ascii":
        if (has_buf && typeof data === "string") {
          out = Buffer_from(data, M);
          j = out.length;
          break;
        }

        for (i = 0; i < len; ++i, ++j) {
          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
          if (w <= 0x007F) out[j] = w;else throw new Error("bad ascii " + w);
        }

        break;

      case "utf16le":
        if (has_buf && typeof data === "string") {
          out = Buffer_from(data, M);
          j = out.length;
          break;
        }

        for (i = 0; i < len; ++i) {
          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
          out[j++] = w & 255;
          out[j++] = w >> 8;
        }

        break;

      case "utf16be":
        for (i = 0; i < len; ++i) {
          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
          out[j++] = w >> 8;
          out[j++] = w & 255;
        }

        break;

      case "utf32le":
        for (i = 0; i < len; ++i) {
          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
          if (w >= 0xD800 && w <= 0xDFFF) w = 0x10000 + (w - 0xD800 << 10) + (data[++i].charCodeAt(0) - 0xDC00);
          out[j++] = w & 255;
          w >>= 8;
          out[j++] = w & 255;
          w >>= 8;
          out[j++] = w & 255;
          w >>= 8;
          out[j++] = w & 255;
        }

        break;

      case "utf32be":
        for (i = 0; i < len; ++i) {
          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
          if (w >= 0xD800 && w <= 0xDFFF) w = 0x10000 + (w - 0xD800 << 10) + (data[++i].charCodeAt(0) - 0xDC00);
          out[j + 3] = w & 255;
          w >>= 8;
          out[j + 2] = w & 255;
          w >>= 8;
          out[j + 1] = w & 255;
          w >>= 8;
          out[j] = w & 255;
          j += 4;
        }

        break;

      case "utf7":
        for (i = 0; i < len; i++) {
          var c = isstr ? data.charAt(i) : data[i].charAt(0);

          if (c === "+") {
            out[j++] = 0x2b;
            out[j++] = 0x2d;
            continue;
          }

          if (SetD.indexOf(c) > -1) {
            out[j++] = c.charCodeAt(0);
            continue;
          }

          var tt = encode(1201, c);
          out[j++] = 0x2b;
          out[j++] = BM.charCodeAt(tt[0] >> 2);
          out[j++] = BM.charCodeAt(((tt[0] & 0x03) << 4) + ((tt[1] || 0) >> 4));
          out[j++] = BM.charCodeAt(((tt[1] & 0x0F) << 2) + ((tt[2] || 0) >> 6));
          out[j++] = 0x2d;
        }

        break;

      default:
        throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
    } else throw new Error("Unrecognized CP: " + cp);
    out = out.slice(0, j);
    if (!has_buf) return ofmt == 'str' ? out.map(sfcc).join("") : out;
    if (!ofmt || ofmt === 'buf') return out;
    if (ofmt !== 'arr') return out.toString('binary');
    return [].slice.call(out);
  };

  var decode = function decode(cp, data) {
    var F;
    if (F = cpdcache[cp]) return F(data);
    if (typeof data === "string") return decode(cp, data.split("").map(cca));
    var len = data.length,
        out = new Array(len),
        s = "",
        w = 0,
        i = 0,
        j = 1,
        k = 0,
        ww = 0;
    var C = cpt[cp],
        D,
        M = "";

    if (C && (D = C.dec)) {
      for (i = 0; i < len; i += j) {
        j = 2;
        s = D[(data[i] << 8) + data[i + 1]];

        if (!s) {
          j = 1;
          s = D[data[i]];
        }

        if (!s) throw new Error('Unrecognized code: ' + data[i] + ' ' + data[i + j - 1] + ' ' + i + ' ' + j + ' ' + D[data[i]]);
        out[k++] = s;
      }
    } else if (M = magic[cp]) switch (M) {
      case "utf8":
        if (len >= 3 && data[0] == 0xEF) if (data[1] == 0xBB && data[2] == 0xBF) i = 3;

        for (; i < len; i += j) {
          j = 1;
          if (data[i] < 128) w = data[i];else if (data[i] < 224) {
            w = (data[i] & 31) * 64 + (data[i + 1] & 63);
            j = 2;
          } else if (data[i] < 240) {
            w = ((data[i] & 15) << 12) + (data[i + 1] & 63) * 64 + (data[i + 2] & 63);
            j = 3;
          } else {
            w = (data[i] & 7) * 262144 + ((data[i + 1] & 63) << 12) + (data[i + 2] & 63) * 64 + (data[i + 3] & 63);
            j = 4;
          }

          if (w < 65536) {
            out[k++] = String.fromCharCode(w);
          } else {
            w -= 65536;
            ww = 0xD800 + (w >> 10 & 1023);
            w = 0xDC00 + (w & 1023);
            out[k++] = String.fromCharCode(ww);
            out[k++] = String.fromCharCode(w);
          }
        }

        break;

      case "ascii":
        if (has_buf && Buffer.isBuffer(data)) return data.toString(M);

        for (i = 0; i < len; i++) out[i] = String.fromCharCode(data[i]);

        k = len;
        break;

      case "utf16le":
        if (len >= 2 && data[0] == 0xFF) if (data[1] == 0xFE) i = 2;
        if (has_buf && Buffer.isBuffer(data)) return data.toString(M);
        j = 2;

        for (; i + 1 < len; i += j) {
          out[k++] = String.fromCharCode((data[i + 1] << 8) + data[i]);
        }

        break;

      case "utf16be":
        if (len >= 2 && data[0] == 0xFE) if (data[1] == 0xFF) i = 2;
        j = 2;

        for (; i + 1 < len; i += j) {
          out[k++] = String.fromCharCode((data[i] << 8) + data[i + 1]);
        }

        break;

      case "utf32le":
        if (len >= 4 && data[0] == 0xFF) if (data[1] == 0xFE && data[2] === 0 && data[3] === 0) i = 4;
        j = 4;

        for (; i < len; i += j) {
          w = (data[i + 3] << 24) + (data[i + 2] << 16) + (data[i + 1] << 8) + data[i];

          if (w > 0xFFFF) {
            w -= 0x10000;
            out[k++] = String.fromCharCode(0xD800 + (w >> 10 & 0x3FF));
            out[k++] = String.fromCharCode(0xDC00 + (w & 0x3FF));
          } else out[k++] = String.fromCharCode(w);
        }

        break;

      case "utf32be":
        if (len >= 4 && data[3] == 0xFF) if (data[2] == 0xFE && data[1] === 0 && data[0] === 0) i = 4;
        j = 4;

        for (; i < len; i += j) {
          w = (data[i] << 24) + (data[i + 1] << 16) + (data[i + 2] << 8) + data[i + 3];

          if (w > 0xFFFF) {
            w -= 0x10000;
            out[k++] = String.fromCharCode(0xD800 + (w >> 10 & 0x3FF));
            out[k++] = String.fromCharCode(0xDC00 + (w & 0x3FF));
          } else out[k++] = String.fromCharCode(w);
        }

        break;

      case "utf7":
        if (len >= 4 && data[0] == 0x2B && data[1] == 0x2F && data[2] == 0x76) {
          if (len >= 5 && data[3] == 0x38 && data[4] == 0x2D) i = 5;else if (data[3] == 0x38 || data[3] == 0x39 || data[3] == 0x2B || data[3] == 0x2F) i = 4;
        }

        for (; i < len; i += j) {
          if (data[i] !== 0x2b) {
            j = 1;
            out[k++] = String.fromCharCode(data[i]);
            continue;
          }

          j = 1;

          if (data[i + 1] === 0x2d) {
            j = 2;
            out[k++] = "+";
            continue;
          } // eslint-disable-next-line no-useless-escape


          while (String.fromCharCode(data[i + j]).match(/[A-Za-z0-9+\/]/)) j++;

          var dash = 0;

          if (data[i + j] === 0x2d) {
            ++j;
            dash = 1;
          }

          var tt = [];
          var o64 = "";
          var c1 = 0,
              c2 = 0,
              c3 = 0;
          var e1 = 0,
              e2 = 0,
              e3 = 0,
              e4 = 0;

          for (var l = 1; l < j - dash;) {
            e1 = BM.indexOf(String.fromCharCode(data[i + l++]));
            e2 = BM.indexOf(String.fromCharCode(data[i + l++]));
            c1 = e1 << 2 | e2 >> 4;
            tt.push(c1);
            e3 = BM.indexOf(String.fromCharCode(data[i + l++]));
            if (e3 === -1) break;
            c2 = (e2 & 15) << 4 | e3 >> 2;
            tt.push(c2);
            e4 = BM.indexOf(String.fromCharCode(data[i + l++]));
            if (e4 === -1) break;
            c3 = (e3 & 3) << 6 | e4;
            if (e4 < 64) tt.push(c3);
          }

          o64 = decode(1201, tt);

          for (l = 0; l < o64.length; ++l) out[k++] = o64.charAt(l);
        }

        break;

      default:
        throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
    } else throw new Error("Unrecognized CP: " + cp);

    return out.slice(0, k).join("");
  };

  var hascp = function hascp(cp) {
    return !!(cpt[cp] || magic[cp]);
  };

  cpt.utils = {
    decode: decode,
    encode: encode,
    hascp: hascp,
    magic: magic,
    cache: cache
  };
  return cpt;
});
},{"buffer":"../../node_modules/parcel-bundler/src/builtins/_empty.js"}],"../../node_modules/xlsx/jszip.js":[function(require,module,exports) {
var define;
var global = arguments[3];
var Buffer = require("buffer").Buffer;
/*

JSZip - A Javascript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2014 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/master/LICENSE

Note: since JSZip 3 removed critical functionality, this version assigns to the
`JSZipSync` variable.  Another JSZip version can be loaded in parallel.
*/
(function (e) {
  if ("object" == typeof exports && "undefined" != typeof module && "undefined" == typeof DO_NOT_EXPORT_JSZIP) module.exports = e();else if ("function" == typeof define && define.amd && "undefined" == typeof DO_NOT_EXPORT_JSZIP) {
    JSZipSync = e();
    define([], e);
  } else {
    var f;
    "undefined" != typeof globalThis ? f = globalThis : "undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof $ && $.global ? f = $.global : "undefined" != typeof self && (f = self), f.JSZipSync = e();
  }
})(function () {
  var define, module, exports;
  return function e(t, n, r) {
    function s(o, u) {
      if (!n[o]) {
        if (!t[o]) {
          var a = typeof require == "function" && require;
          if (!u && a) return a(o, !0);
          if (i) return i(o, !0);
          throw new Error("Cannot find module '" + o + "'");
        }

        var f = n[o] = {
          exports: {}
        };
        t[o][0].call(f.exports, function (e) {
          var n = t[o][1][e];
          return s(n ? n : e);
        }, f, f.exports, e, t, n, r);
      }

      return n[o].exports;
    }

    var i = typeof require == "function" && require;

    for (var o = 0; o < r.length; o++) s(r[o]);

    return s;
  }({
    1: [function (_dereq_, module, exports) {
      'use strict'; // private property

      var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="; // public method for encoding

      exports.encode = function (input, utf8) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        while (i < input.length) {
          chr1 = input.charCodeAt(i++);
          chr2 = input.charCodeAt(i++);
          chr3 = input.charCodeAt(i++);
          enc1 = chr1 >> 2;
          enc2 = (chr1 & 3) << 4 | chr2 >> 4;
          enc3 = (chr2 & 15) << 2 | chr3 >> 6;
          enc4 = chr3 & 63;

          if (isNaN(chr2)) {
            enc3 = enc4 = 64;
          } else if (isNaN(chr3)) {
            enc4 = 64;
          }

          output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
        }

        return output;
      }; // public method for decoding


      exports.decode = function (input, utf8) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {
          enc1 = _keyStr.indexOf(input.charAt(i++));
          enc2 = _keyStr.indexOf(input.charAt(i++));
          enc3 = _keyStr.indexOf(input.charAt(i++));
          enc4 = _keyStr.indexOf(input.charAt(i++));
          chr1 = enc1 << 2 | enc2 >> 4;
          chr2 = (enc2 & 15) << 4 | enc3 >> 2;
          chr3 = (enc3 & 3) << 6 | enc4;
          output = output + String.fromCharCode(chr1);

          if (enc3 != 64) {
            output = output + String.fromCharCode(chr2);
          }

          if (enc4 != 64) {
            output = output + String.fromCharCode(chr3);
          }
        }

        return output;
      };
    }, {}],
    2: [function (_dereq_, module, exports) {
      'use strict';

      function CompressedObject() {
        this.compressedSize = 0;
        this.uncompressedSize = 0;
        this.crc32 = 0;
        this.compressionMethod = null;
        this.compressedContent = null;
      }

      CompressedObject.prototype = {
        /**
         * Return the decompressed content in an unspecified format.
         * The format will depend on the decompressor.
         * @return {Object} the decompressed content.
         */
        getContent: function () {
          return null; // see implementation
        },

        /**
         * Return the compressed content in an unspecified format.
         * The format will depend on the compressed conten source.
         * @return {Object} the compressed content.
         */
        getCompressedContent: function () {
          return null; // see implementation
        }
      };
      module.exports = CompressedObject;
    }, {}],
    3: [function (_dereq_, module, exports) {
      'use strict';

      exports.STORE = {
        magic: "\x00\x00",
        compress: function (content) {
          return content; // no compression
        },
        uncompress: function (content) {
          return content; // no compression
        },
        compressInputType: null,
        uncompressInputType: null
      };
      exports.DEFLATE = _dereq_('./flate');
    }, {
      "./flate": 8
    }],
    4: [function (_dereq_, module, exports) {
      'use strict';

      var utils = _dereq_('./utils');

      var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];
      /**
       *
       *  Javascript crc32
       *  http://www.webtoolkit.info/
       *
       */

      module.exports = function crc32(input, crc) {
        if (typeof input === "undefined" || !input.length) {
          return 0;
        }

        var isArray = utils.getTypeOf(input) !== "string";

        if (typeof crc == "undefined") {
          crc = 0;
        }

        var x = 0;
        var y = 0;
        var b = 0;
        crc = crc ^ -1;

        for (var i = 0, iTop = input.length; i < iTop; i++) {
          b = isArray ? input[i] : input.charCodeAt(i);
          y = (crc ^ b) & 0xFF;
          x = table[y];
          crc = crc >>> 8 ^ x;
        }

        return crc ^ -1;
      }; // vim: set shiftwidth=4 softtabstop=4:

    }, {
      "./utils": 21
    }],
    5: [function (_dereq_, module, exports) {
      'use strict';

      var utils = _dereq_('./utils');

      function DataReader(data) {
        this.data = null; // type : see implementation

        this.length = 0;
        this.index = 0;
      }

      DataReader.prototype = {
        /**
         * Check that the offset will not go too far.
         * @param {string} offset the additional offset to check.
         * @throws {Error} an Error if the offset is out of bounds.
         */
        checkOffset: function (offset) {
          this.checkIndex(this.index + offset);
        },

        /**
         * Check that the specifed index will not be too far.
         * @param {string} newIndex the index to check.
         * @throws {Error} an Error if the index is out of bounds.
         */
        checkIndex: function (newIndex) {
          if (this.length < newIndex || newIndex < 0) {
            throw new Error("End of data reached (data length = " + this.length + ", asked index = " + newIndex + "). Corrupted zip ?");
          }
        },

        /**
         * Change the index.
         * @param {number} newIndex The new index.
         * @throws {Error} if the new index is out of the data.
         */
        setIndex: function (newIndex) {
          this.checkIndex(newIndex);
          this.index = newIndex;
        },

        /**
         * Skip the next n bytes.
         * @param {number} n the number of bytes to skip.
         * @throws {Error} if the new index is out of the data.
         */
        skip: function (n) {
          this.setIndex(this.index + n);
        },

        /**
         * Get the byte at the specified index.
         * @param {number} i the index to use.
         * @return {number} a byte.
         */
        byteAt: function (i) {// see implementations
        },

        /**
         * Get the next number with a given byte size.
         * @param {number} size the number of bytes to read.
         * @return {number} the corresponding number.
         */
        readInt: function (size) {
          var result = 0,
              i;
          this.checkOffset(size);

          for (i = this.index + size - 1; i >= this.index; i--) {
            result = (result << 8) + this.byteAt(i);
          }

          this.index += size;
          return result;
        },

        /**
         * Get the next string with a given byte size.
         * @param {number} size the number of bytes to read.
         * @return {string} the corresponding string.
         */
        readString: function (size) {
          return utils.transformTo("string", this.readData(size));
        },

        /**
         * Get raw data without conversion, <size> bytes.
         * @param {number} size the number of bytes to read.
         * @return {Object} the raw data, implementation specific.
         */
        readData: function (size) {// see implementations
        },

        /**
         * Find the last occurence of a zip signature (4 bytes).
         * @param {string} sig the signature to find.
         * @return {number} the index of the last occurence, -1 if not found.
         */
        lastIndexOfSignature: function (sig) {// see implementations
        },

        /**
         * Get the next date.
         * @return {Date} the date.
         */
        readDate: function () {
          var dostime = this.readInt(4);
          return new Date((dostime >> 25 & 0x7f) + 1980, // year
          (dostime >> 21 & 0x0f) - 1, // month
          dostime >> 16 & 0x1f, // day
          dostime >> 11 & 0x1f, // hour
          dostime >> 5 & 0x3f, // minute
          (dostime & 0x1f) << 1); // second
        }
      };
      module.exports = DataReader;
    }, {
      "./utils": 21
    }],
    6: [function (_dereq_, module, exports) {
      'use strict';

      exports.base64 = false;
      exports.binary = false;
      exports.dir = false;
      exports.createFolders = false;
      exports.date = null;
      exports.compression = null;
      exports.comment = null;
    }, {}],
    7: [function (_dereq_, module, exports) {
      'use strict';

      var utils = _dereq_('./utils');
      /**
       * @deprecated
       * This function will be removed in a future version without replacement.
       */


      exports.string2binary = function (str) {
        return utils.string2binary(str);
      };
      /**
       * @deprecated
       * This function will be removed in a future version without replacement.
       */


      exports.string2Uint8Array = function (str) {
        return utils.transformTo("uint8array", str);
      };
      /**
       * @deprecated
       * This function will be removed in a future version without replacement.
       */


      exports.uint8Array2String = function (array) {
        return utils.transformTo("string", array);
      };
      /**
       * @deprecated
       * This function will be removed in a future version without replacement.
       */


      exports.string2Blob = function (str) {
        var buffer = utils.transformTo("arraybuffer", str);
        return utils.arrayBuffer2Blob(buffer);
      };
      /**
       * @deprecated
       * This function will be removed in a future version without replacement.
       */


      exports.arrayBuffer2Blob = function (buffer) {
        return utils.arrayBuffer2Blob(buffer);
      };
      /**
       * @deprecated
       * This function will be removed in a future version without replacement.
       */


      exports.transformTo = function (outputType, input) {
        return utils.transformTo(outputType, input);
      };
      /**
       * @deprecated
       * This function will be removed in a future version without replacement.
       */


      exports.getTypeOf = function (input) {
        return utils.getTypeOf(input);
      };
      /**
       * @deprecated
       * This function will be removed in a future version without replacement.
       */


      exports.checkSupport = function (type) {
        return utils.checkSupport(type);
      };
      /**
       * @deprecated
       * This value will be removed in a future version without replacement.
       */


      exports.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;
      /**
       * @deprecated
       * This value will be removed in a future version without replacement.
       */

      exports.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;
      /**
       * @deprecated
       * This function will be removed in a future version without replacement.
       */

      exports.pretty = function (str) {
        return utils.pretty(str);
      };
      /**
       * @deprecated
       * This function will be removed in a future version without replacement.
       */


      exports.findCompression = function (compressionMethod) {
        return utils.findCompression(compressionMethod);
      };
      /**
       * @deprecated
       * This function will be removed in a future version without replacement.
       */


      exports.isRegExp = function (object) {
        return utils.isRegExp(object);
      };
    }, {
      "./utils": 21
    }],
    8: [function (_dereq_, module, exports) {
      'use strict';

      var USE_TYPEDARRAY = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Uint32Array !== 'undefined';

      var pako = _dereq_("pako");

      exports.uncompressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
      exports.compressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
      exports.magic = "\x08\x00";

      exports.compress = function (input) {
        return pako.deflateRaw(input);
      };

      exports.uncompress = function (input) {
        return pako.inflateRaw(input);
      };
    }, {
      "pako": 24
    }],
    9: [function (_dereq_, module, exports) {
      'use strict';

      var base64 = _dereq_('./base64');
      /**
      Usage:
         zip = new JSZip();
         zip.file("hello.txt", "Hello, World!").file("tempfile", "nothing");
         zip.folder("images").file("smile.gif", base64Data, {base64: true});
         zip.file("Xmas.txt", "Ho ho ho !", {date : new Date("December 25, 2007 00:00:01")});
         zip.remove("tempfile");
      
         base64zip = zip.generate();
      
      **/

      /**
       * Representation a of zip file in js
       * @constructor
       * @param {String=|ArrayBuffer=|Uint8Array=} data the data to load, if any (optional).
       * @param {Object=} options the options for creating this objects (optional).
       */


      function JSZipSync(data, options) {
        // if this constructor isÂ used withoutÂ `new`, itÂ adds `new` beforeÂ itself:
        if (!(this instanceof JSZipSync)) return new JSZipSync(data, options); // object containing the files :
        // {
        //   "folder/" : {...},
        //   "folder/data.txt" : {...}
        // }

        this.files = {};
        this.comment = null; // Where we are in the hierarchy

        this.root = "";

        if (data) {
          this.load(data, options);
        }

        this.clone = function () {
          var newObj = new JSZipSync();

          for (var i in this) {
            if (typeof this[i] !== "function") {
              newObj[i] = this[i];
            }
          }

          return newObj;
        };
      }

      JSZipSync.prototype = _dereq_('./object');
      JSZipSync.prototype.load = _dereq_('./load');
      JSZipSync.support = _dereq_('./support');
      JSZipSync.defaults = _dereq_('./defaults');
      /**
       * @deprecated
       * This namespace will be removed in a future version without replacement.
       */

      JSZipSync.utils = _dereq_('./deprecatedPublicUtils');
      JSZipSync.base64 = {
        /**
         * @deprecated
         * This method will be removed in a future version without replacement.
         */
        encode: function (input) {
          return base64.encode(input);
        },

        /**
         * @deprecated
         * This method will be removed in a future version without replacement.
         */
        decode: function (input) {
          return base64.decode(input);
        }
      };
      JSZipSync.compressions = _dereq_('./compressions');
      module.exports = JSZipSync;
    }, {
      "./base64": 1,
      "./compressions": 3,
      "./defaults": 6,
      "./deprecatedPublicUtils": 7,
      "./load": 10,
      "./object": 13,
      "./support": 17
    }],
    10: [function (_dereq_, module, exports) {
      'use strict';

      var base64 = _dereq_('./base64');

      var ZipEntries = _dereq_('./zipEntries');

      module.exports = function (data, options) {
        var files, zipEntries, i, input;
        options = options || {};

        if (options.base64) {
          data = base64.decode(data);
        }

        zipEntries = new ZipEntries(data, options);
        files = zipEntries.files;

        for (i = 0; i < files.length; i++) {
          input = files[i];
          this.file(input.fileName, input.decompressed, {
            binary: true,
            optimizedBinaryString: true,
            date: input.date,
            dir: input.dir,
            comment: input.fileComment.length ? input.fileComment : null,
            createFolders: options.createFolders
          });
        }

        if (zipEntries.zipComment.length) {
          this.comment = zipEntries.zipComment;
        }

        return this;
      };
    }, {
      "./base64": 1,
      "./zipEntries": 22
    }],
    11: [function (_dereq_, module, exports) {
      (function (Buffer) {
        'use strict';

        var Buffer_from =
        /*::(*/
        function () {}
        /*:: :any)*/
        ;

        if (typeof Buffer !== 'undefined') {
          var nbfs = !Buffer.from;
          if (!nbfs) try {
            Buffer.from("foo", "utf8");
          } catch (e) {
            nbfs = true;
          }
          Buffer_from = nbfs ? function (buf, enc) {
            return enc ? new Buffer(buf, enc) : new Buffer(buf);
          } : Buffer.from.bind(Buffer); // $FlowIgnore

          if (!Buffer.alloc) Buffer.alloc = function (n) {
            return new Buffer(n);
          };
        }

        module.exports = function (data, encoding) {
          return typeof data == 'number' ? Buffer.alloc(data) : Buffer_from(data, encoding);
        };

        module.exports.test = function (b) {
          return Buffer.isBuffer(b);
        };
      }).call(this, typeof Buffer !== "undefined" ? Buffer : undefined);
    }, {}],
    12: [function (_dereq_, module, exports) {
      'use strict';

      var Uint8ArrayReader = _dereq_('./uint8ArrayReader');

      function NodeBufferReader(data) {
        this.data = data;
        this.length = this.data.length;
        this.index = 0;
      }

      NodeBufferReader.prototype = new Uint8ArrayReader();
      /**
       * @see DataReader.readData
       */

      NodeBufferReader.prototype.readData = function (size) {
        this.checkOffset(size);
        var result = this.data.slice(this.index, this.index + size);
        this.index += size;
        return result;
      };

      module.exports = NodeBufferReader;
    }, {
      "./uint8ArrayReader": 18
    }],
    13: [function (_dereq_, module, exports) {
      'use strict';

      var support = _dereq_('./support');

      var utils = _dereq_('./utils');

      var crc32 = _dereq_('./crc32');

      var signature = _dereq_('./signature');

      var defaults = _dereq_('./defaults');

      var base64 = _dereq_('./base64');

      var compressions = _dereq_('./compressions');

      var CompressedObject = _dereq_('./compressedObject');

      var nodeBuffer = _dereq_('./nodeBuffer');

      var utf8 = _dereq_('./utf8');

      var StringWriter = _dereq_('./stringWriter');

      var Uint8ArrayWriter = _dereq_('./uint8ArrayWriter');
      /**
       * Returns the raw data of a ZipObject, decompress the content if necessary.
       * @param {ZipObject} file the file to use.
       * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
       */


      var getRawData = function (file) {
        if (file._data instanceof CompressedObject) {
          file._data = file._data.getContent();
          file.options.binary = true;
          file.options.base64 = false;

          if (utils.getTypeOf(file._data) === "uint8array") {
            var copy = file._data; // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.
            // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).

            file._data = new Uint8Array(copy.length); // with an empty Uint8Array, Opera fails with a "Offset larger than array size"

            if (copy.length !== 0) {
              file._data.set(copy, 0);
            }
          }
        }

        return file._data;
      };
      /**
       * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.
       * @param {ZipObject} file the file to use.
       * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
       */


      var getBinaryData = function (file) {
        var result = getRawData(file),
            type = utils.getTypeOf(result);

        if (type === "string") {
          if (!file.options.binary) {
            // unicode text !
            // unicode string => binary string is a painful process, check if we can avoid it.
            if (support.nodebuffer) {
              return nodeBuffer(result, "utf-8");
            }
          }

          return file.asBinary();
        }

        return result;
      };
      /**
       * Transform this._data into a string.
       * @param {function} filter a function String -> String, applied if not null on the result.
       * @return {String} the string representing this._data.
       */


      var dataToString = function (asUTF8) {
        var result = getRawData(this);

        if (result === null || typeof result === "undefined") {
          return "";
        } // if the data is a base64 string, we decode it before checking the encoding !


        if (this.options.base64) {
          result = base64.decode(result);
        }

        if (asUTF8 && this.options.binary) {
          // JSZip.prototype.utf8decode supports arrays as input
          // skip to array => string step, utf8decode will do it.
          result = out.utf8decode(result);
        } else {
          // no utf8 transformation, do the array => string step.
          result = utils.transformTo("string", result);
        }

        if (!asUTF8 && !this.options.binary) {
          result = utils.transformTo("string", out.utf8encode(result));
        }

        return result;
      };
      /**
       * A simple object representing a file in the zip file.
       * @constructor
       * @param {string} name the name of the file
       * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data
       * @param {Object} options the options of the file
       */


      var ZipObject = function (name, data, options) {
        this.name = name;
        this.dir = options.dir;
        this.date = options.date;
        this.comment = options.comment;
        this._data = data;
        this.options = options;
        /*
         * This object contains initial values for dir and date.
         * With them, we can check if the user changed the deprecated metadata in
         * `ZipObject#options` or not.
         */

        this._initialMetadata = {
          dir: options.dir,
          date: options.date
        };
      };

      ZipObject.prototype = {
        /**
         * Return the content as UTF8 string.
         * @return {string} the UTF8 string.
         */
        asText: function () {
          return dataToString.call(this, true);
        },

        /**
         * Returns the binary content.
         * @return {string} the content as binary.
         */
        asBinary: function () {
          return dataToString.call(this, false);
        },

        /**
         * Returns the content as a nodejs Buffer.
         * @return {Buffer} the content as a Buffer.
         */
        asNodeBuffer: function () {
          var result = getBinaryData(this);
          return utils.transformTo("nodebuffer", result);
        },

        /**
         * Returns the content as an Uint8Array.
         * @return {Uint8Array} the content as an Uint8Array.
         */
        asUint8Array: function () {
          var result = getBinaryData(this);
          return utils.transformTo("uint8array", result);
        },

        /**
         * Returns the content as an ArrayBuffer.
         * @return {ArrayBuffer} the content as an ArrayBufer.
         */
        asArrayBuffer: function () {
          return this.asUint8Array().buffer;
        }
      };
      /**
       * Transform an integer into a string in hexadecimal.
       * @private
       * @param {number} dec the number to convert.
       * @param {number} bytes the number of bytes to generate.
       * @returns {string} the result.
       */

      var decToHex = function (dec, bytes) {
        var hex = "",
            i;

        for (i = 0; i < bytes; i++) {
          hex += String.fromCharCode(dec & 0xff);
          dec = dec >>> 8;
        }

        return hex;
      };
      /**
       * Merge the objects passed as parameters into a new one.
       * @private
       * @param {...Object} var_args All objects to merge.
       * @return {Object} a new object with the data of the others.
       */


      var extend = function () {
        var result = {},
            i,
            attr;

        for (i = 0; i < arguments.length; i++) {
          // arguments is not enumerable in some browsers
          for (attr in arguments[i]) {
            if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") {
              result[attr] = arguments[i][attr];
            }
          }
        }

        return result;
      };
      /**
       * Transforms the (incomplete) options from the user into the complete
       * set of options to create a file.
       * @private
       * @param {Object} o the options from the user.
       * @return {Object} the complete set of options.
       */


      var prepareFileAttrs = function (o) {
        o = o || {};

        if (o.base64 === true && (o.binary === null || o.binary === undefined)) {
          o.binary = true;
        }

        o = extend(o, defaults);
        o.date = o.date || new Date();
        if (o.compression !== null) o.compression = o.compression.toUpperCase();
        return o;
      };
      /**
       * Add a file in the current folder.
       * @private
       * @param {string} name the name of the file
       * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file
       * @param {Object} o the options of the file
       * @return {Object} the new file.
       */


      var fileAdd = function (name, data, o) {
        // be sure sub folders exist
        var dataType = utils.getTypeOf(data),
            parent;
        o = prepareFileAttrs(o);

        if (o.createFolders && (parent = parentFolder(name))) {
          folderAdd.call(this, parent, true);
        }

        if (o.dir || data === null || typeof data === "undefined") {
          o.base64 = false;
          o.binary = false;
          data = null;
        } else if (dataType === "string") {
          if (o.binary && !o.base64) {
            // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask
            if (o.optimizedBinaryString !== true) {
              // this is a string, not in a base64 format.
              // Be sure that this is a correct "binary string"
              data = utils.string2binary(data);
            }
          }
        } else {
          // arraybuffer, uint8array, ...
          o.base64 = false;
          o.binary = true;

          if (!dataType && !(data instanceof CompressedObject)) {
            throw new Error("The data of '" + name + "' is in an unsupported format !");
          } // special case : it's way easier to work with Uint8Array than with ArrayBuffer


          if (dataType === "arraybuffer") {
            data = utils.transformTo("uint8array", data);
          }
        }

        var object = new ZipObject(name, data, o);
        this.files[name] = object;
        return object;
      };
      /**
       * Find the parent folder of the path.
       * @private
       * @param {string} path the path to use
       * @return {string} the parent folder, or ""
       */


      var parentFolder = function (path) {
        if (path.slice(-1) == '/') {
          path = path.substring(0, path.length - 1);
        }

        var lastSlash = path.lastIndexOf('/');
        return lastSlash > 0 ? path.substring(0, lastSlash) : "";
      };
      /**
       * Add a (sub) folder in the current folder.
       * @private
       * @param {string} name the folder's name
       * @param {boolean=} [createFolders] If true, automatically create sub
       *  folders. Defaults to false.
       * @return {Object} the new folder.
       */


      var folderAdd = function (name, createFolders) {
        // Check the name ends with a /
        if (name.slice(-1) != "/") {
          name += "/"; // IE doesn't like substr(-1)
        }

        createFolders = typeof createFolders !== 'undefined' ? createFolders : false; // Does this folder already exist?

        if (!this.files[name]) {
          fileAdd.call(this, name, null, {
            dir: true,
            createFolders: createFolders
          });
        }

        return this.files[name];
      };
      /**
       * Generate a JSZip.CompressedObject for a given zipOject.
       * @param {ZipObject} file the object to read.
       * @param {JSZip.compression} compression the compression to use.
       * @return {JSZip.CompressedObject} the compressed result.
       */


      var generateCompressedObjectFrom = function (file, compression) {
        var result = new CompressedObject(),
            content; // the data has not been decompressed, we might reuse things !

        if (file._data instanceof CompressedObject) {
          result.uncompressedSize = file._data.uncompressedSize;
          result.crc32 = file._data.crc32;

          if (result.uncompressedSize === 0 || file.dir) {
            compression = compressions['STORE'];
            result.compressedContent = "";
            result.crc32 = 0;
          } else if (file._data.compressionMethod === compression.magic) {
            result.compressedContent = file._data.getCompressedContent();
          } else {
            content = file._data.getContent(); // need to decompress / recompress

            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));
          }
        } else {
          // have uncompressed data
          content = getBinaryData(file);

          if (!content || content.length === 0 || file.dir) {
            compression = compressions['STORE'];
            content = "";
          }

          result.uncompressedSize = content.length;
          result.crc32 = crc32(content);
          result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));
        }

        result.compressedSize = result.compressedContent.length;
        result.compressionMethod = compression.magic;
        return result;
      };
      /**
       * Generate the various parts used in the construction of the final zip file.
       * @param {string} name the file name.
       * @param {ZipObject} file the file content.
       * @param {JSZip.CompressedObject} compressedObject the compressed object.
       * @param {number} offset the current offset from the start of the zip file.
       * @return {object} the zip parts.
       */


      var generateZipParts = function (name, file, compressedObject, offset) {
        var data = compressedObject.compressedContent,
            utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)),
            comment = file.comment || "",
            utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)),
            useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,
            useUTF8ForComment = utfEncodedComment.length !== comment.length,
            o = file.options,
            dosTime,
            dosDate,
            extraFields = "",
            unicodePathExtraField = "",
            unicodeCommentExtraField = "",
            dir,
            date; // handle the deprecated options.dir

        if (file._initialMetadata.dir !== file.dir) {
          dir = file.dir;
        } else {
          dir = o.dir;
        } // handle the deprecated options.date


        if (file._initialMetadata.date !== file.date) {
          date = file.date;
        } else {
          date = o.date;
        }

        dosTime = date.getHours();
        dosTime = dosTime << 6;
        dosTime = dosTime | date.getMinutes();
        dosTime = dosTime << 5;
        dosTime = dosTime | date.getSeconds() / 2;
        dosDate = date.getFullYear() - 1980;
        dosDate = dosDate << 4;
        dosDate = dosDate | date.getMonth() + 1;
        dosDate = dosDate << 5;
        dosDate = dosDate | date.getDate();

        if (useUTF8ForFileName) {
          // set the unicode path extra field. unzip needs at least one extra
          // field to correctly handle unicode path, so using the path is as good
          // as any other information. This could improve the situation with
          // other archive managers too.
          // This field is usually used without the utf8 flag, with a non
          // unicode path in the header (winrar, winzip). This helps (a bit)
          // with the messy Windows' default compressed folders feature but
          // breaks on p7zip which doesn't seek the unicode path extra field.
          // So for now, UTF-8 everywhere !
          unicodePathExtraField = // Version
          decToHex(1, 1) + // NameCRC32
          decToHex(crc32(utfEncodedFileName), 4) + // UnicodeName
          utfEncodedFileName;
          extraFields += // Info-ZIP Unicode Path Extra Field
          "\x75\x70" + // size
          decToHex(unicodePathExtraField.length, 2) + // content
          unicodePathExtraField;
        }

        if (useUTF8ForComment) {
          unicodeCommentExtraField = // Version
          decToHex(1, 1) + // CommentCRC32
          decToHex(this.crc32(utfEncodedComment), 4) + // UnicodeName
          utfEncodedComment;
          extraFields += // Info-ZIP Unicode Path Extra Field
          "\x75\x63" + // size
          decToHex(unicodeCommentExtraField.length, 2) + // content
          unicodeCommentExtraField;
        }

        var header = ""; // version needed to extract

        header += "\x0A\x00"; // general purpose bit flag
        // set bit 11 if utf8

        header += useUTF8ForFileName || useUTF8ForComment ? "\x00\x08" : "\x00\x00"; // compression method

        header += compressedObject.compressionMethod; // last mod file time

        header += decToHex(dosTime, 2); // last mod file date

        header += decToHex(dosDate, 2); // crc-32

        header += decToHex(compressedObject.crc32, 4); // compressed size

        header += decToHex(compressedObject.compressedSize, 4); // uncompressed size

        header += decToHex(compressedObject.uncompressedSize, 4); // file name length

        header += decToHex(utfEncodedFileName.length, 2); // extra field length

        header += decToHex(extraFields.length, 2);
        var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;
        var dirRecord = signature.CENTRAL_FILE_HEADER + // version made by (00: DOS)
        "\x14\x00" + // file header (common to file and central directory)
        header + // file comment length
        decToHex(utfEncodedComment.length, 2) + // disk number start
        "\x00\x00" + // internal file attributes TODO
        "\x00\x00" + ( // external file attributes
        dir === true ? "\x10\x00\x00\x00" : "\x00\x00\x00\x00") + // relative offset of local header
        decToHex(offset, 4) + // file name
        utfEncodedFileName + // extra field
        extraFields + // file comment
        utfEncodedComment;
        return {
          fileRecord: fileRecord,
          dirRecord: dirRecord,
          compressedObject: compressedObject
        };
      }; // return the actual prototype of JSZip


      var out = {
        /**
         * Read an existing zip and merge the data in the current JSZip object.
         * The implementation is in jszip-load.js, don't forget to include it.
         * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load
         * @param {Object} options Options for loading the stream.
         *  options.base64 : is the stream in base64 ? default : false
         * @return {JSZip} the current JSZip object
         */
        load: function (stream, options) {
          throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
        },

        /**
         * Filter nested files/folders with the specified function.
         * @param {Function} search the predicate to use :
         * function (relativePath, file) {...}
         * It takes 2 arguments : the relative path and the file.
         * @return {Array} An array of matching elements.
         */
        filter: function (search) {
          var result = [],
              filename,
              relativePath,
              file,
              fileClone;

          for (filename in this.files) {
            if (!this.files.hasOwnProperty(filename)) {
              continue;
            }

            file = this.files[filename]; // return a new object, don't let the user mess with our internal objects :)

            fileClone = new ZipObject(file.name, file._data, extend(file.options));
            relativePath = filename.slice(this.root.length, filename.length);

            if (filename.slice(0, this.root.length) === this.root && // the file is in the current root
            search(relativePath, fileClone)) {
              // and the file matches the function
              result.push(fileClone);
            }
          }

          return result;
        },

        /**
         * Add a file to the zip file, or search a file.
         * @param   {string|RegExp} name The name of the file to add (if data is defined),
         * the name of the file to find (if no data) or a regex to match files.
         * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded
         * @param   {Object} o     File options
         * @return  {JSZip|Object|Array} this JSZip object (when adding a file),
         * a file (when searching by string) or an array of files (when searching by regex).
         */
        file: function (name, data, o) {
          if (arguments.length === 1) {
            if (utils.isRegExp(name)) {
              var regexp = name;
              return this.filter(function (relativePath, file) {
                return !file.dir && regexp.test(relativePath);
              });
            } else {
              // text
              return this.filter(function (relativePath, file) {
                return !file.dir && relativePath === name;
              })[0] || null;
            }
          } else {
            // more than one argument : we have data !
            name = this.root + name;
            fileAdd.call(this, name, data, o);
          }

          return this;
        },

        /**
         * Add a directory to the zip file, or search.
         * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.
         * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.
         */
        folder: function (arg) {
          if (!arg) {
            return this;
          }

          if (utils.isRegExp(arg)) {
            return this.filter(function (relativePath, file) {
              return file.dir && arg.test(relativePath);
            });
          } // else, name is a new folder


          var name = this.root + arg;
          var newFolder = folderAdd.call(this, name); // Allow chaining by returning a new object with this folder as the root

          var ret = this.clone();
          ret.root = newFolder.name;
          return ret;
        },

        /**
         * Delete a file, or a directory and all sub-files, from the zip
         * @param {string} name the name of the file to delete
         * @return {JSZip} this JSZip object
         */
        remove: function (name) {
          name = this.root + name;
          var file = this.files[name];

          if (!file) {
            // Look for any folders
            if (name.slice(-1) != "/") {
              name += "/";
            }

            file = this.files[name];
          }

          if (file && !file.dir) {
            // file
            delete this.files[name];
          } else {
            // maybe a folder, delete recursively
            var kids = this.filter(function (relativePath, file) {
              return file.name.slice(0, name.length) === name;
            });

            for (var i = 0; i < kids.length; i++) {
              delete this.files[kids[i].name];
            }
          }

          return this;
        },

        /**
         * Generate the complete zip file
         * @param {Object} options the options to generate the zip file :
         * - base64, (deprecated, use type instead) true to generate base64.
         * - compression, "STORE" by default.
         * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
         * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file
         */
        generate: function (options) {
          options = extend(options || {}, {
            base64: true,
            compression: "STORE",
            type: "base64",
            comment: null
          });
          utils.checkSupport(options.type);
          var zipData = [],
              localDirLength = 0,
              centralDirLength = 0,
              writer,
              i,
              utfEncodedComment = utils.transformTo("string", this.utf8encode(options.comment || this.comment || "")); // first, generate all the zip parts.

          for (var name in this.files) {
            if (!this.files.hasOwnProperty(name)) {
              continue;
            }

            var file = this.files[name];
            var compressionName = file.options.compression || options.compression.toUpperCase();
            var compression = compressions[compressionName];

            if (!compression) {
              throw new Error(compressionName + " is not a valid compression method !");
            }

            var compressedObject = generateCompressedObjectFrom.call(this, file, compression);
            var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength);
            localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;
            centralDirLength += zipPart.dirRecord.length;
            zipData.push(zipPart);
          }

          var dirEnd = ""; // end of central dir signature

          dirEnd = signature.CENTRAL_DIRECTORY_END + // number of this disk
          "\x00\x00" + // number of the disk with the start of the central directory
          "\x00\x00" + // total number of entries in the central directory on this disk
          decToHex(zipData.length, 2) + // total number of entries in the central directory
          decToHex(zipData.length, 2) + // size of the central directory   4 bytes
          decToHex(centralDirLength, 4) + // offset of start of central directory with respect to the starting disk number
          decToHex(localDirLength, 4) + // .ZIP file comment length
          decToHex(utfEncodedComment.length, 2) + // .ZIP file comment
          utfEncodedComment; // we have all the parts (and the total length)
          // time to create a writer !

          var typeName = options.type.toLowerCase();

          if (typeName === "uint8array" || typeName === "arraybuffer" || typeName === "blob" || typeName === "nodebuffer") {
            writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);
          } else {
            writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);
          }

          for (i = 0; i < zipData.length; i++) {
            writer.append(zipData[i].fileRecord);
            writer.append(zipData[i].compressedObject.compressedContent);
          }

          for (i = 0; i < zipData.length; i++) {
            writer.append(zipData[i].dirRecord);
          }

          writer.append(dirEnd);
          var zip = writer.finalize();

          switch (options.type.toLowerCase()) {
            // case "zip is an Uint8Array"
            case "uint8array":
            case "arraybuffer":
            case "nodebuffer":
              return utils.transformTo(options.type.toLowerCase(), zip);

            case "blob":
              return utils.arrayBuffer2Blob(utils.transformTo("arraybuffer", zip));
            // case "zip is a string"

            case "base64":
              return options.base64 ? base64.encode(zip) : zip;

            default:
              // case "string" :
              return zip;
          }
        },

        /**
         * @deprecated
         * This method will be removed in a future version without replacement.
         */
        crc32: function (input, crc) {
          return crc32(input, crc);
        },

        /**
         * @deprecated
         * This method will be removed in a future version without replacement.
         */
        utf8encode: function (string) {
          return utils.transformTo("string", utf8.utf8encode(string));
        },

        /**
         * @deprecated
         * This method will be removed in a future version without replacement.
         */
        utf8decode: function (input) {
          return utf8.utf8decode(input);
        }
      };
      module.exports = out;
    }, {
      "./base64": 1,
      "./compressedObject": 2,
      "./compressions": 3,
      "./crc32": 4,
      "./defaults": 6,
      "./nodeBuffer": 11,
      "./signature": 14,
      "./stringWriter": 16,
      "./support": 17,
      "./uint8ArrayWriter": 19,
      "./utf8": 20,
      "./utils": 21
    }],
    14: [function (_dereq_, module, exports) {
      'use strict';

      exports.LOCAL_FILE_HEADER = "PK\x03\x04";
      exports.CENTRAL_FILE_HEADER = "PK\x01\x02";
      exports.CENTRAL_DIRECTORY_END = "PK\x05\x06";
      exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x06\x07";
      exports.ZIP64_CENTRAL_DIRECTORY_END = "PK\x06\x06";
      exports.DATA_DESCRIPTOR = "PK\x07\x08";
    }, {}],
    15: [function (_dereq_, module, exports) {
      'use strict';

      var DataReader = _dereq_('./dataReader');

      var utils = _dereq_('./utils');

      function StringReader(data, optimizedBinaryString) {
        this.data = data;

        if (!optimizedBinaryString) {
          this.data = utils.string2binary(this.data);
        }

        this.length = this.data.length;
        this.index = 0;
      }

      StringReader.prototype = new DataReader();
      /**
       * @see DataReader.byteAt
       */

      StringReader.prototype.byteAt = function (i) {
        return this.data.charCodeAt(i);
      };
      /**
       * @see DataReader.lastIndexOfSignature
       */


      StringReader.prototype.lastIndexOfSignature = function (sig) {
        return this.data.lastIndexOf(sig);
      };
      /**
       * @see DataReader.readData
       */


      StringReader.prototype.readData = function (size) {
        this.checkOffset(size); // this will work because the constructor applied the "& 0xff" mask.

        var result = this.data.slice(this.index, this.index + size);
        this.index += size;
        return result;
      };

      module.exports = StringReader;
    }, {
      "./dataReader": 5,
      "./utils": 21
    }],
    16: [function (_dereq_, module, exports) {
      'use strict';

      var utils = _dereq_('./utils');
      /**
       * An object to write any content to a string.
       * @constructor
       */


      var StringWriter = function () {
        this.data = [];
      };

      StringWriter.prototype = {
        /**
         * Append any content to the current string.
         * @param {Object} input the content to add.
         */
        append: function (input) {
          input = utils.transformTo("string", input);
          this.data.push(input);
        },

        /**
         * Finalize the construction an return the result.
         * @return {string} the generated string.
         */
        finalize: function () {
          return this.data.join("");
        }
      };
      module.exports = StringWriter;
    }, {
      "./utils": 21
    }],
    17: [function (_dereq_, module, exports) {
      (function (Buffer) {
        'use strict';

        exports.base64 = true;
        exports.array = true;
        exports.string = true;
        exports.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined"; // contains true if JSZip can read/generate nodejs Buffer, false otherwise.
        // Browserify will provide a Buffer implementation for browsers, which is
        // an augmented Uint8Array (i.e., can be used as either Buffer or U8).

        exports.nodebuffer = typeof Buffer !== "undefined"; // contains true if JSZip can read/generate Uint8Array, false otherwise.

        exports.uint8array = typeof Uint8Array !== "undefined";

        if (typeof ArrayBuffer === "undefined") {
          exports.blob = false;
        } else {
          var buffer = new ArrayBuffer(0);

          try {
            exports.blob = new Blob([buffer], {
              type: "application/zip"
            }).size === 0;
          } catch (e) {
            try {
              var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
              var builder = new Builder();
              builder.append(buffer);
              exports.blob = builder.getBlob('application/zip').size === 0;
            } catch (e) {
              exports.blob = false;
            }
          }
        }
      }).call(this, typeof Buffer !== "undefined" ? Buffer : undefined);
    }, {}],
    18: [function (_dereq_, module, exports) {
      'use strict';

      var DataReader = _dereq_('./dataReader');

      function Uint8ArrayReader(data) {
        if (data) {
          this.data = data;
          this.length = this.data.length;
          this.index = 0;
        }
      }

      Uint8ArrayReader.prototype = new DataReader();
      /**
       * @see DataReader.byteAt
       */

      Uint8ArrayReader.prototype.byteAt = function (i) {
        return this.data[i];
      };
      /**
       * @see DataReader.lastIndexOfSignature
       */


      Uint8ArrayReader.prototype.lastIndexOfSignature = function (sig) {
        var sig0 = sig.charCodeAt(0),
            sig1 = sig.charCodeAt(1),
            sig2 = sig.charCodeAt(2),
            sig3 = sig.charCodeAt(3);

        for (var i = this.length - 4; i >= 0; --i) {
          if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
            return i;
          }
        }

        return -1;
      };
      /**
       * @see DataReader.readData
       */


      Uint8ArrayReader.prototype.readData = function (size) {
        this.checkOffset(size);

        if (size === 0) {
          // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].
          return new Uint8Array(0);
        }

        var result = this.data.subarray(this.index, this.index + size);
        this.index += size;
        return result;
      };

      module.exports = Uint8ArrayReader;
    }, {
      "./dataReader": 5
    }],
    19: [function (_dereq_, module, exports) {
      'use strict';

      var utils = _dereq_('./utils');
      /**
       * An object to write any content to an Uint8Array.
       * @constructor
       * @param {number} length The length of the array.
       */


      var Uint8ArrayWriter = function (length) {
        this.data = new Uint8Array(length);
        this.index = 0;
      };

      Uint8ArrayWriter.prototype = {
        /**
         * Append any content to the current array.
         * @param {Object} input the content to add.
         */
        append: function (input) {
          if (input.length !== 0) {
            // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
            input = utils.transformTo("uint8array", input);
            this.data.set(input, this.index);
            this.index += input.length;
          }
        },

        /**
         * Finalize the construction an return the result.
         * @return {Uint8Array} the generated array.
         */
        finalize: function () {
          return this.data;
        }
      };
      module.exports = Uint8ArrayWriter;
    }, {
      "./utils": 21
    }],
    20: [function (_dereq_, module, exports) {
      'use strict';

      var utils = _dereq_('./utils');

      var support = _dereq_('./support');

      var nodeBuffer = _dereq_('./nodeBuffer');
      /**
       * The following functions come from pako, from pako/lib/utils/strings
       * released under the MIT license, see pako https://github.com/nodeca/pako/
       */
      // Table with utf8 lengths (calculated by first byte of sequence)
      // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
      // because max possible codepoint is 0x10ffff


      var _utf8len = new Array(256);

      for (var i = 0; i < 256; i++) {
        _utf8len[i] = i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1;
      }

      _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start
      // convert string to array (typed, when possible)

      var string2buf = function (str) {
        var buf,
            c,
            c2,
            m_pos,
            i,
            str_len = str.length,
            buf_len = 0; // count binary size

        for (m_pos = 0; m_pos < str_len; m_pos++) {
          c = str.charCodeAt(m_pos);

          if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);

            if ((c2 & 0xfc00) === 0xdc00) {
              c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
              m_pos++;
            }
          }

          buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
        } // allocate buffer


        if (support.uint8array) {
          buf = new Uint8Array(buf_len);
        } else {
          buf = new Array(buf_len);
        } // convert


        for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
          c = str.charCodeAt(m_pos);

          if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);

            if ((c2 & 0xfc00) === 0xdc00) {
              c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
              m_pos++;
            }
          }

          if (c < 0x80) {
            /* one byte */
            buf[i++] = c;
          } else if (c < 0x800) {
            /* two bytes */
            buf[i++] = 0xC0 | c >>> 6;
            buf[i++] = 0x80 | c & 0x3f;
          } else if (c < 0x10000) {
            /* three bytes */
            buf[i++] = 0xE0 | c >>> 12;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
          } else {
            /* four bytes */
            buf[i++] = 0xf0 | c >>> 18;
            buf[i++] = 0x80 | c >>> 12 & 0x3f;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
          }
        }

        return buf;
      }; // Calculate max possible position in utf8 buffer,
      // that will not break sequence. If that's not possible
      // - (very small limits) return max size as is.
      //
      // buf[] - utf8 bytes array
      // max   - length limit (mandatory);


      var utf8border = function (buf, max) {
        var pos;
        max = max || buf.length;

        if (max > buf.length) {
          max = buf.length;
        } // go back from last position, until start of sequence found


        pos = max - 1;

        while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) {
          pos--;
        } // Fuckup - very small and broken sequence,
        // return max, because we should return something anyway.


        if (pos < 0) {
          return max;
        } // If we came to start of buffer - that means vuffer is too small,
        // return max too.


        if (pos === 0) {
          return max;
        }

        return pos + _utf8len[buf[pos]] > max ? pos : max;
      }; // convert array to string


      var buf2string = function (buf) {
        var str, i, out, c, c_len;
        var len = buf.length; // Reserve max possible length (2 words per char)
        // NB: by unknown reasons, Array is significantly faster for
        //     String.fromCharCode.apply than Uint16Array.

        var utf16buf = new Array(len * 2);

        for (out = 0, i = 0; i < len;) {
          c = buf[i++]; // quick process ascii

          if (c < 0x80) {
            utf16buf[out++] = c;
            continue;
          }

          c_len = _utf8len[c]; // skip 5 & 6 byte codes

          if (c_len > 4) {
            utf16buf[out++] = 0xfffd;
            i += c_len - 1;
            continue;
          } // apply mask on first byte


          c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07; // join the rest

          while (c_len > 1 && i < len) {
            c = c << 6 | buf[i++] & 0x3f;
            c_len--;
          } // terminated by end of string?


          if (c_len > 1) {
            utf16buf[out++] = 0xfffd;
            continue;
          }

          if (c < 0x10000) {
            utf16buf[out++] = c;
          } else {
            c -= 0x10000;
            utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;
            utf16buf[out++] = 0xdc00 | c & 0x3ff;
          }
        } // shrinkBuf(utf16buf, out)


        if (utf16buf.length !== out) {
          if (utf16buf.subarray) {
            utf16buf = utf16buf.subarray(0, out);
          } else {
            utf16buf.length = out;
          }
        } // return String.fromCharCode.apply(null, utf16buf);


        return utils.applyFromCharCode(utf16buf);
      }; // That's all for the pako functions.

      /**
       * Transform a javascript string into an array (typed if possible) of bytes,
       * UTF-8 encoded.
       * @param {String} str the string to encode
       * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.
       */


      exports.utf8encode = function utf8encode(str) {
        if (support.nodebuffer) {
          return nodeBuffer(str, "utf-8");
        }

        return string2buf(str);
      };
      /**
       * Transform a bytes array (or a representation) representing an UTF-8 encoded
       * string into a javascript string.
       * @param {Array|Uint8Array|Buffer} buf the data de decode
       * @return {String} the decoded string.
       */


      exports.utf8decode = function utf8decode(buf) {
        if (support.nodebuffer) {
          return utils.transformTo("nodebuffer", buf).toString("utf-8");
        }

        buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf); // return buf2string(buf);
        // Chrome prefers to work with "small" chunks of data
        // for the method buf2string.
        // Firefox and Chrome has their own shortcut, IE doesn't seem to really care.

        var result = [],
            k = 0,
            len = buf.length,
            chunk = 65536;

        while (k < len) {
          var nextBoundary = utf8border(buf, Math.min(k + chunk, len));

          if (support.uint8array) {
            result.push(buf2string(buf.subarray(k, nextBoundary)));
          } else {
            result.push(buf2string(buf.slice(k, nextBoundary)));
          }

          k = nextBoundary;
        }

        return result.join("");
      }; // vim: set shiftwidth=4 softtabstop=4:

    }, {
      "./nodeBuffer": 11,
      "./support": 17,
      "./utils": 21
    }],
    21: [function (_dereq_, module, exports) {
      'use strict';

      var support = _dereq_('./support');

      var compressions = _dereq_('./compressions');

      var nodeBuffer = _dereq_('./nodeBuffer');
      /**
       * Convert a string to a "binary string" : a string containing only char codes between 0 and 255.
       * @param {string} str the string to transform.
       * @return {String} the binary string.
       */


      exports.string2binary = function (str) {
        var result = "";

        for (var i = 0; i < str.length; i++) {
          result += String.fromCharCode(str.charCodeAt(i) & 0xff);
        }

        return result;
      };

      exports.arrayBuffer2Blob = function (buffer) {
        exports.checkSupport("blob");

        try {
          // Blob constructor
          return new Blob([buffer], {
            type: "application/zip"
          });
        } catch (e) {
          try {
            // deprecated, browser only, old way
            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
            var builder = new Builder();
            builder.append(buffer);
            return builder.getBlob('application/zip');
          } catch (e) {
            // well, fuck ?!
            throw new Error("Bug : can't construct the Blob.");
          }
        }
      };
      /**
       * The identity function.
       * @param {Object} input the input.
       * @return {Object} the same input.
       */


      function identity(input) {
        return input;
      }
      /**
       * Fill in an array with a string.
       * @param {String} str the string to use.
       * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).
       * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.
       */


      function stringToArrayLike(str, array) {
        for (var i = 0; i < str.length; ++i) {
          array[i] = str.charCodeAt(i) & 0xFF;
        }

        return array;
      }
      /**
       * Transform an array-like object to a string.
       * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
       * @return {String} the result.
       */


      function arrayLikeToString(array) {
        // Performances notes :
        // --------------------
        // String.fromCharCode.apply(null, array) is the fastest, see
        // see http://jsperf.com/converting-a-uint8array-to-a-string/2
        // but the stack is limited (and we can get huge arrays !).
        //
        // result += String.fromCharCode(array[i]); generate too many strings !
        //
        // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2
        var chunk = 65536;
        var result = [],
            len = array.length,
            type = exports.getTypeOf(array),
            k = 0,
            canUseApply = true;

        try {
          switch (type) {
            case "uint8array":
              String.fromCharCode.apply(null, new Uint8Array(0));
              break;

            case "nodebuffer":
              String.fromCharCode.apply(null, nodeBuffer(0));
              break;
          }
        } catch (e) {
          canUseApply = false;
        } // no apply : slow and painful algorithm
        // default browser on android 4.*


        if (!canUseApply) {
          var resultStr = "";

          for (var i = 0; i < array.length; i++) {
            resultStr += String.fromCharCode(array[i]);
          }

          return resultStr;
        }

        while (k < len && chunk > 1) {
          try {
            if (type === "array" || type === "nodebuffer") {
              result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
            } else {
              result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
            }

            k += chunk;
          } catch (e) {
            chunk = Math.floor(chunk / 2);
          }
        }

        return result.join("");
      }

      exports.applyFromCharCode = arrayLikeToString;
      /**
       * Copy the data from an array-like to an other array-like.
       * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.
       * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.
       * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.
       */

      function arrayLikeToArrayLike(arrayFrom, arrayTo) {
        for (var i = 0; i < arrayFrom.length; i++) {
          arrayTo[i] = arrayFrom[i];
        }

        return arrayTo;
      } // a matrix containing functions to transform everything into everything.


      var transform = {}; // string to ?

      transform["string"] = {
        "string": identity,
        "array": function (input) {
          return stringToArrayLike(input, new Array(input.length));
        },
        "arraybuffer": function (input) {
          return transform["string"]["uint8array"](input).buffer;
        },
        "uint8array": function (input) {
          return stringToArrayLike(input, new Uint8Array(input.length));
        },
        "nodebuffer": function (input) {
          return stringToArrayLike(input, nodeBuffer(input.length));
        }
      }; // array to ?

      transform["array"] = {
        "string": arrayLikeToString,
        "array": identity,
        "arraybuffer": function (input) {
          return new Uint8Array(input).buffer;
        },
        "uint8array": function (input) {
          return new Uint8Array(input);
        },
        "nodebuffer": function (input) {
          return nodeBuffer(input);
        }
      }; // arraybuffer to ?

      transform["arraybuffer"] = {
        "string": function (input) {
          return arrayLikeToString(new Uint8Array(input));
        },
        "array": function (input) {
          return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
        },
        "arraybuffer": identity,
        "uint8array": function (input) {
          return new Uint8Array(input);
        },
        "nodebuffer": function (input) {
          return nodeBuffer(new Uint8Array(input));
        }
      }; // uint8array to ?

      transform["uint8array"] = {
        "string": arrayLikeToString,
        "array": function (input) {
          return arrayLikeToArrayLike(input, new Array(input.length));
        },
        "arraybuffer": function (input) {
          return input.buffer;
        },
        "uint8array": identity,
        "nodebuffer": function (input) {
          return nodeBuffer(input);
        }
      }; // nodebuffer to ?

      transform["nodebuffer"] = {
        "string": arrayLikeToString,
        "array": function (input) {
          return arrayLikeToArrayLike(input, new Array(input.length));
        },
        "arraybuffer": function (input) {
          return transform["nodebuffer"]["uint8array"](input).buffer;
        },
        "uint8array": function (input) {
          return arrayLikeToArrayLike(input, new Uint8Array(input.length));
        },
        "nodebuffer": identity
      };
      /**
       * Transform an input into any type.
       * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.
       * If no output type is specified, the unmodified input will be returned.
       * @param {String} outputType the output type.
       * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.
       * @throws {Error} an Error if the browser doesn't support the requested output type.
       */

      exports.transformTo = function (outputType, input) {
        if (!input) {
          // undefined, null, etc
          // an empty string won't harm.
          input = "";
        }

        if (!outputType) {
          return input;
        }

        exports.checkSupport(outputType);
        var inputType = exports.getTypeOf(input);
        var result = transform[inputType][outputType](input);
        return result;
      };
      /**
       * Return the type of the input.
       * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.
       * @param {Object} input the input to identify.
       * @return {String} the (lowercase) type of the input.
       */


      exports.getTypeOf = function (input) {
        if (typeof input === "string") {
          return "string";
        }

        if (Object.prototype.toString.call(input) === "[object Array]") {
          return "array";
        }

        if (support.nodebuffer && nodeBuffer.test(input)) {
          return "nodebuffer";
        }

        if (support.uint8array && input instanceof Uint8Array) {
          return "uint8array";
        }

        if (support.arraybuffer && input instanceof ArrayBuffer) {
          return "arraybuffer";
        }
      };
      /**
       * Throw an exception if the type is not supported.
       * @param {String} type the type to check.
       * @throws {Error} an Error if the browser doesn't support the requested type.
       */


      exports.checkSupport = function (type) {
        var supported = support[type.toLowerCase()];

        if (!supported) {
          throw new Error(type + " is not supported by this browser");
        }
      };

      exports.MAX_VALUE_16BITS = 65535;
      exports.MAX_VALUE_32BITS = -1; // well, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" is parsed as -1

      /**
       * Prettify a string read as binary.
       * @param {string} str the string to prettify.
       * @return {string} a pretty string.
       */

      exports.pretty = function (str) {
        var res = '',
            code,
            i;

        for (i = 0; i < (str || "").length; i++) {
          code = str.charCodeAt(i);
          res += '\\x' + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
        }

        return res;
      };
      /**
       * Find a compression registered in JSZip.
       * @param {string} compressionMethod the method magic to find.
       * @return {Object|null} the JSZip compression object, null if none found.
       */


      exports.findCompression = function (compressionMethod) {
        for (var method in compressions) {
          if (!compressions.hasOwnProperty(method)) {
            continue;
          }

          if (compressions[method].magic === compressionMethod) {
            return compressions[method];
          }
        }

        return null;
      };
      /**
      * Cross-window, cross-Node-context regular expression detection
      * @param  {Object}  object Anything
      * @return {Boolean}        true if the object is a regular expression,
      * false otherwise
      */


      exports.isRegExp = function (object) {
        return Object.prototype.toString.call(object) === "[object RegExp]";
      };
    }, {
      "./compressions": 3,
      "./nodeBuffer": 11,
      "./support": 17
    }],
    22: [function (_dereq_, module, exports) {
      'use strict';

      var StringReader = _dereq_('./stringReader');

      var NodeBufferReader = _dereq_('./nodeBufferReader');

      var Uint8ArrayReader = _dereq_('./uint8ArrayReader');

      var utils = _dereq_('./utils');

      var sig = _dereq_('./signature');

      var ZipEntry = _dereq_('./zipEntry');

      var support = _dereq_('./support');

      var jszipProto = _dereq_('./object'); //  class ZipEntries {{{

      /**
       * All the entries in the zip file.
       * @constructor
       * @param {String|ArrayBuffer|Uint8Array} data the binary stream to load.
       * @param {Object} loadOptions Options for loading the stream.
       */


      function ZipEntries(data, loadOptions) {
        this.files = [];
        this.loadOptions = loadOptions;

        if (data) {
          this.load(data);
        }
      }

      ZipEntries.prototype = {
        /**
         * Check that the reader is on the speficied signature.
         * @param {string} expectedSignature the expected signature.
         * @throws {Error} if it is an other signature.
         */
        checkSignature: function (expectedSignature) {
          var signature = this.reader.readString(4);

          if (signature !== expectedSignature) {
            throw new Error("Corrupted zip or bug : unexpected signature " + "(" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")");
          }
        },

        /**
         * Read the end of the central directory.
         */
        readBlockEndOfCentral: function () {
          this.diskNumber = this.reader.readInt(2);
          this.diskWithCentralDirStart = this.reader.readInt(2);
          this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
          this.centralDirRecords = this.reader.readInt(2);
          this.centralDirSize = this.reader.readInt(4);
          this.centralDirOffset = this.reader.readInt(4);
          this.zipCommentLength = this.reader.readInt(2); // warning : the encoding depends of the system locale
          // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.
          // On a windows machine, this field is encoded with the localized windows code page.

          this.zipComment = this.reader.readString(this.zipCommentLength); // To get consistent behavior with the generation part, we will assume that
          // this is utf8 encoded.

          this.zipComment = jszipProto.utf8decode(this.zipComment);
        },

        /**
         * Read the end of the Zip 64 central directory.
         * Not merged with the method readEndOfCentral :
         * The end of central can coexist with its Zip64 brother,
         * I don't want to read the wrong number of bytes !
         */
        readBlockZip64EndOfCentral: function () {
          this.zip64EndOfCentralSize = this.reader.readInt(8);
          this.versionMadeBy = this.reader.readString(2);
          this.versionNeeded = this.reader.readInt(2);
          this.diskNumber = this.reader.readInt(4);
          this.diskWithCentralDirStart = this.reader.readInt(4);
          this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
          this.centralDirRecords = this.reader.readInt(8);
          this.centralDirSize = this.reader.readInt(8);
          this.centralDirOffset = this.reader.readInt(8);
          this.zip64ExtensibleData = {};
          var extraDataSize = this.zip64EndOfCentralSize - 44,
              index = 0,
              extraFieldId,
              extraFieldLength,
              extraFieldValue;

          while (index < extraDataSize) {
            extraFieldId = this.reader.readInt(2);
            extraFieldLength = this.reader.readInt(4);
            extraFieldValue = this.reader.readString(extraFieldLength);
            this.zip64ExtensibleData[extraFieldId] = {
              id: extraFieldId,
              length: extraFieldLength,
              value: extraFieldValue
            };
          }
        },

        /**
         * Read the end of the Zip 64 central directory locator.
         */
        readBlockZip64EndOfCentralLocator: function () {
          this.diskWithZip64CentralDirStart = this.reader.readInt(4);
          this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
          this.disksCount = this.reader.readInt(4);

          if (this.disksCount > 1) {
            throw new Error("Multi-volumes zip are not supported");
          }
        },

        /**
         * Read the local files, based on the offset read in the central part.
         */
        readLocalFiles: function () {
          var i, file;

          for (i = 0; i < this.files.length; i++) {
            file = this.files[i];
            this.reader.setIndex(file.localHeaderOffset);
            this.checkSignature(sig.LOCAL_FILE_HEADER);
            file.readLocalPart(this.reader);
            file.handleUTF8();
          }
        },

        /**
         * Read the central directory.
         */
        readCentralDir: function () {
          var file;
          this.reader.setIndex(this.centralDirOffset);

          while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {
            file = new ZipEntry({
              zip64: this.zip64
            }, this.loadOptions);
            file.readCentralPart(this.reader);
            this.files.push(file);
          }
        },

        /**
         * Read the end of central directory.
         */
        readEndOfCentral: function () {
          var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);

          if (offset === -1) {
            throw new Error("Corrupted zip : can't find end of central directory");
          }

          this.reader.setIndex(offset);
          this.checkSignature(sig.CENTRAL_DIRECTORY_END);
          this.readBlockEndOfCentral();
          /* extract from the zip spec :
              4)  If one of the fields in the end of central directory
                  record is too small to hold required data, the field
                  should be set to -1 (0xFFFF or 0xFFFFFFFF) and the
                  ZIP64 format record should be created.
              5)  The end of central directory record and the
                  Zip64 end of central directory locator record must
                  reside on the same disk when splitting or spanning
                  an archive.
           */

          if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
            this.zip64 = true;
            /*
            Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from
            the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents
            all numbers as 64-bit double precision IEEE 754 floating point numbers.
            So, we have 53bits for integers and bitwise operations treat everything as 32bits.
            see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators
            and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5
            */
            // should look for a zip64 EOCD locator

            offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);

            if (offset === -1) {
              throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
            }

            this.reader.setIndex(offset);
            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
            this.readBlockZip64EndOfCentralLocator(); // now the zip64 EOCD record

            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
            this.readBlockZip64EndOfCentral();
          }
        },
        prepareReader: function (data) {
          var type = utils.getTypeOf(data);

          if (type === "string" && !support.uint8array) {
            this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);
          } else if (type === "nodebuffer") {
            this.reader = new NodeBufferReader(data);
          } else {
            this.reader = new Uint8ArrayReader(utils.transformTo("uint8array", data));
          }
        },

        /**
         * Read a zip file and create ZipEntries.
         * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.
         */
        load: function (data) {
          this.prepareReader(data);
          this.readEndOfCentral();
          this.readCentralDir();
          this.readLocalFiles();
        }
      }; // }}} end of ZipEntries

      module.exports = ZipEntries;
    }, {
      "./nodeBufferReader": 12,
      "./object": 13,
      "./signature": 14,
      "./stringReader": 15,
      "./support": 17,
      "./uint8ArrayReader": 18,
      "./utils": 21,
      "./zipEntry": 23
    }],
    23: [function (_dereq_, module, exports) {
      'use strict';

      var StringReader = _dereq_('./stringReader');

      var utils = _dereq_('./utils');

      var CompressedObject = _dereq_('./compressedObject');

      var jszipProto = _dereq_('./object'); // class ZipEntry {{{

      /**
       * An entry in the zip file.
       * @constructor
       * @param {Object} options Options of the current file.
       * @param {Object} loadOptions Options for loading the stream.
       */


      function ZipEntry(options, loadOptions) {
        this.options = options;
        this.loadOptions = loadOptions;
      }

      ZipEntry.prototype = {
        /**
         * say if the file is encrypted.
         * @return {boolean} true if the file is encrypted, false otherwise.
         */
        isEncrypted: function () {
          // bit 1 is set
          return (this.bitFlag & 0x0001) === 0x0001;
        },

        /**
         * say if the file has utf-8 filename/comment.
         * @return {boolean} true if the filename/comment is in utf-8, false otherwise.
         */
        useUTF8: function () {
          // bit 11 is set
          return (this.bitFlag & 0x0800) === 0x0800;
        },

        /**
         * Prepare the function used to generate the compressed content from this ZipFile.
         * @param {DataReader} reader the reader to use.
         * @param {number} from the offset from where we should read the data.
         * @param {number} length the length of the data to read.
         * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).
         */
        prepareCompressedContent: function (reader, from, length) {
          return function () {
            var previousIndex = reader.index;
            reader.setIndex(from);
            var compressedFileData = reader.readData(length);
            reader.setIndex(previousIndex);
            return compressedFileData;
          };
        },

        /**
         * Prepare the function used to generate the uncompressed content from this ZipFile.
         * @param {DataReader} reader the reader to use.
         * @param {number} from the offset from where we should read the data.
         * @param {number} length the length of the data to read.
         * @param {JSZip.compression} compression the compression used on this file.
         * @param {number} uncompressedSize the uncompressed size to expect.
         * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).
         */
        prepareContent: function (reader, from, length, compression, uncompressedSize) {
          return function () {
            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());
            var uncompressedFileData = compression.uncompress(compressedFileData);

            if (uncompressedFileData.length !== uncompressedSize) {
              throw new Error("Bug : uncompressed data size mismatch");
            }

            return uncompressedFileData;
          };
        },

        /**
         * Read the local part of a zip file and add the info in this object.
         * @param {DataReader} reader the reader to use.
         */
        readLocalPart: function (reader) {
          var compression, localExtraFieldsLength; // we already know everything from the central dir !
          // If the central dir data are false, we are doomed.
          // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.
          // The less data we get here, the more reliable this should be.
          // Let's skip the whole header and dash to the data !

          reader.skip(22); // in some zip created on windows, the filename stored in the central dir contains \ instead of /.
          // Strangely, the filename here is OK.
          // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes
          // or APPNOTE#4.4.17.1, "All slashes MUST be forward slashes '/'") but there are a lot of bad zip generators...
          // Search "unzip mismatching "local" filename continuing with "central" filename version" on
          // the internet.
          //
          // I think I see the logic here : the central directory is used to display
          // content and the local directory is used to extract the files. Mixing / and \
          // may be used to display \ to windows users and use / when extracting the files.
          // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394

          this.fileNameLength = reader.readInt(2);
          localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir

          this.fileName = reader.readString(this.fileNameLength);
          reader.skip(localExtraFieldsLength);

          if (this.compressedSize == -1 || this.uncompressedSize == -1) {
            throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory " + "(compressedSize == -1 || uncompressedSize == -1)");
          }

          compression = utils.findCompression(this.compressionMethod);

          if (compression === null) {
            // no compression found
            throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")");
          }

          this.decompressed = new CompressedObject();
          this.decompressed.compressedSize = this.compressedSize;
          this.decompressed.uncompressedSize = this.uncompressedSize;
          this.decompressed.crc32 = this.crc32;
          this.decompressed.compressionMethod = this.compressionMethod;
          this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);
          this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize); // we need to compute the crc32...

          if (this.loadOptions.checkCRC32) {
            this.decompressed = utils.transformTo("string", this.decompressed.getContent());

            if (jszipProto.crc32(this.decompressed) !== this.crc32) {
              throw new Error("Corrupted zip : CRC32 mismatch");
            }
          }
        },

        /**
         * Read the central part of a zip file and add the info in this object.
         * @param {DataReader} reader the reader to use.
         */
        readCentralPart: function (reader) {
          this.versionMadeBy = reader.readString(2);
          this.versionNeeded = reader.readInt(2);
          this.bitFlag = reader.readInt(2);
          this.compressionMethod = reader.readString(2);
          this.date = reader.readDate();
          this.crc32 = reader.readInt(4);
          this.compressedSize = reader.readInt(4);
          this.uncompressedSize = reader.readInt(4);
          this.fileNameLength = reader.readInt(2);
          this.extraFieldsLength = reader.readInt(2);
          this.fileCommentLength = reader.readInt(2);
          this.diskNumberStart = reader.readInt(2);
          this.internalFileAttributes = reader.readInt(2);
          this.externalFileAttributes = reader.readInt(4);
          this.localHeaderOffset = reader.readInt(4);

          if (this.isEncrypted()) {
            throw new Error("Encrypted zip are not supported");
          }

          this.fileName = reader.readString(this.fileNameLength);
          this.readExtraFields(reader);
          this.parseZIP64ExtraField(reader);
          this.fileComment = reader.readString(this.fileCommentLength); // warning, this is true only for zip with madeBy == DOS (plateform dependent feature)

          this.dir = this.externalFileAttributes & 0x00000010 ? true : false;
        },

        /**
         * Parse the ZIP64 extra field and merge the info in the current ZipEntry.
         * @param {DataReader} reader the reader to use.
         */
        parseZIP64ExtraField: function (reader) {
          if (!this.extraFields[0x0001]) {
            return;
          } // should be something, preparing the extra reader


          var extraReader = new StringReader(this.extraFields[0x0001].value); // I really hope that these 64bits integer can fit in 32 bits integer, because js
          // won't let us have more.

          if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {
            this.uncompressedSize = extraReader.readInt(8);
          }

          if (this.compressedSize === utils.MAX_VALUE_32BITS) {
            this.compressedSize = extraReader.readInt(8);
          }

          if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {
            this.localHeaderOffset = extraReader.readInt(8);
          }

          if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {
            this.diskNumberStart = extraReader.readInt(4);
          }
        },

        /**
         * Read the central part of a zip file and add the info in this object.
         * @param {DataReader} reader the reader to use.
         */
        readExtraFields: function (reader) {
          var start = reader.index,
              extraFieldId,
              extraFieldLength,
              extraFieldValue;
          this.extraFields = this.extraFields || {};

          while (reader.index < start + this.extraFieldsLength) {
            extraFieldId = reader.readInt(2);
            extraFieldLength = reader.readInt(2);
            extraFieldValue = reader.readString(extraFieldLength);
            this.extraFields[extraFieldId] = {
              id: extraFieldId,
              length: extraFieldLength,
              value: extraFieldValue
            };
          }
        },

        /**
         * Apply an UTF8 transformation if needed.
         */
        handleUTF8: function () {
          if (this.useUTF8()) {
            this.fileName = jszipProto.utf8decode(this.fileName);
            this.fileComment = jszipProto.utf8decode(this.fileComment);
          } else {
            var upath = this.findExtraFieldUnicodePath();

            if (upath !== null) {
              this.fileName = upath;
            }

            var ucomment = this.findExtraFieldUnicodeComment();

            if (ucomment !== null) {
              this.fileComment = ucomment;
            }
          }
        },

        /**
         * Find the unicode path declared in the extra field, if any.
         * @return {String} the unicode path, null otherwise.
         */
        findExtraFieldUnicodePath: function () {
          var upathField = this.extraFields[0x7075];

          if (upathField) {
            var extraReader = new StringReader(upathField.value); // wrong version

            if (extraReader.readInt(1) !== 1) {
              return null;
            } // the crc of the filename changed, this field is out of date.


            if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {
              return null;
            }

            return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));
          }

          return null;
        },

        /**
         * Find the unicode comment declared in the extra field, if any.
         * @return {String} the unicode comment, null otherwise.
         */
        findExtraFieldUnicodeComment: function () {
          var ucommentField = this.extraFields[0x6375];

          if (ucommentField) {
            var extraReader = new StringReader(ucommentField.value); // wrong version

            if (extraReader.readInt(1) !== 1) {
              return null;
            } // the crc of the comment changed, this field is out of date.


            if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {
              return null;
            }

            return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));
          }

          return null;
        }
      };
      module.exports = ZipEntry;
    }, {
      "./compressedObject": 2,
      "./object": 13,
      "./stringReader": 15,
      "./utils": 21
    }],
    24: [function (_dereq_, module, exports) {
      // Top level file is just a mixin of submodules & constants
      'use strict';

      var assign = _dereq_('./lib/utils/common').assign;

      var deflate = _dereq_('./lib/deflate');

      var inflate = _dereq_('./lib/inflate');

      var constants = _dereq_('./lib/zlib/constants');

      var pako = {};
      assign(pako, deflate, inflate, constants);
      module.exports = pako;
    }, {
      "./lib/deflate": 25,
      "./lib/inflate": 26,
      "./lib/utils/common": 27,
      "./lib/zlib/constants": 30
    }],
    25: [function (_dereq_, module, exports) {
      'use strict';

      var zlib_deflate = _dereq_('./zlib/deflate.js');

      var utils = _dereq_('./utils/common');

      var strings = _dereq_('./utils/strings');

      var msg = _dereq_('./zlib/messages');

      var zstream = _dereq_('./zlib/zstream');
      /* Public constants ==========================================================*/

      /* ===========================================================================*/


      var Z_NO_FLUSH = 0;
      var Z_FINISH = 4;
      var Z_OK = 0;
      var Z_STREAM_END = 1;
      var Z_DEFAULT_COMPRESSION = -1;
      var Z_DEFAULT_STRATEGY = 0;
      var Z_DEFLATED = 8;
      /* ===========================================================================*/

      /**
       * class Deflate
       *
       * Generic JS-style wrapper for zlib calls. If you don't need
       * streaming behaviour - use more simple functions: [[deflate]],
       * [[deflateRaw]] and [[gzip]].
       **/

      /* internal
       * Deflate.chunks -> Array
       *
       * Chunks of output data, if [[Deflate#onData]] not overriden.
       **/

      /**
       * Deflate.result -> Uint8Array|Array
       *
       * Compressed result, generated by default [[Deflate#onData]]
       * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
       * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
       **/

      /**
       * Deflate.err -> Number
       *
       * Error code after deflate finished. 0 (Z_OK) on success.
       * You will not need it in real life, because deflate errors
       * are possible only on wrong options or bad `onData` / `onEnd`
       * custom handlers.
       **/

      /**
       * Deflate.msg -> String
       *
       * Error message, if [[Deflate.err]] != 0
       **/

      /**
       * new Deflate(options)
       * - options (Object): zlib deflate options.
       *
       * Creates new deflator instance with specified params. Throws exception
       * on bad params. Supported options:
       *
       * - `level`
       * - `windowBits`
       * - `memLevel`
       * - `strategy`
       *
       * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
       * for more information on these.
       *
       * Additional options, for internal needs:
       *
       * - `chunkSize` - size of generated data chunks (16K by default)
       * - `raw` (Boolean) - do raw deflate
       * - `gzip` (Boolean) - create gzip wrapper
       * - `to` (String) - if equal to 'string', then result will be "binary string"
       *    (each char code [0..255])
       * - `header` (Object) - custom header for gzip
       *   - `text` (Boolean) - true if compressed data believed to be text
       *   - `time` (Number) - modification time, unix timestamp
       *   - `os` (Number) - operation system code
       *   - `extra` (Array) - array of bytes with extra data (max 65536)
       *   - `name` (String) - file name (binary string)
       *   - `comment` (String) - comment (binary string)
       *   - `hcrc` (Boolean) - true if header crc should be added
       *
       * ##### Example:
       *
       * ```javascript
       * var pako = require('pako')
       *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
       *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
       *
       * var deflate = new pako.Deflate({ level: 3});
       *
       * deflate.push(chunk1, false);
       * deflate.push(chunk2, true);  // true -> last chunk
       *
       * if (deflate.err) { throw new Error(deflate.err); }
       *
       * console.log(deflate.result);
       * ```
       **/

      var Deflate = function (options) {
        this.options = utils.assign({
          level: Z_DEFAULT_COMPRESSION,
          method: Z_DEFLATED,
          chunkSize: 16384,
          windowBits: 15,
          memLevel: 8,
          strategy: Z_DEFAULT_STRATEGY,
          to: ''
        }, options || {});
        var opt = this.options;

        if (opt.raw && opt.windowBits > 0) {
          opt.windowBits = -opt.windowBits;
        } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
          opt.windowBits += 16;
        }

        this.err = 0; // error code, if happens (0 = Z_OK)

        this.msg = ''; // error message

        this.ended = false; // used to avoid multiple onEnd() calls

        this.chunks = []; // chunks of compressed data

        this.strm = new zstream();
        this.strm.avail_out = 0;
        var status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);

        if (status !== Z_OK) {
          throw new Error(msg[status]);
        }

        if (opt.header) {
          zlib_deflate.deflateSetHeader(this.strm, opt.header);
        }
      };
      /**
       * Deflate#push(data[, mode]) -> Boolean
       * - data (Uint8Array|Array|String): input data. Strings will be converted to
       *   utf8 byte sequence.
       * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
       *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
       *
       * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
       * new compressed chunks. Returns `true` on success. The last data block must have
       * mode Z_FINISH (or `true`). That flush internal pending buffers and call
       * [[Deflate#onEnd]].
       *
       * On fail call [[Deflate#onEnd]] with error code and return false.
       *
       * We strongly recommend to use `Uint8Array` on input for best speed (output
       * array format is detected automatically). Also, don't skip last param and always
       * use the same type in your code (boolean or number). That will improve JS speed.
       *
       * For regular `Array`-s make sure all elements are [0..255].
       *
       * ##### Example
       *
       * ```javascript
       * push(chunk, false); // push one of data chunks
       * ...
       * push(chunk, true);  // push last chunk
       * ```
       **/


      Deflate.prototype.push = function (data, mode) {
        var strm = this.strm;
        var chunkSize = this.options.chunkSize;

        var status, _mode;

        if (this.ended) {
          return false;
        }

        _mode = mode === ~~mode ? mode : mode === true ? Z_FINISH : Z_NO_FLUSH; // Convert data if needed

        if (typeof data === 'string') {
          // If we need to compress text, change encoding to utf8.
          strm.input = strings.string2buf(data);
        } else {
          strm.input = data;
        }

        strm.next_in = 0;
        strm.avail_in = strm.input.length;

        do {
          if (strm.avail_out === 0) {
            strm.output = new utils.Buf8(chunkSize);
            strm.next_out = 0;
            strm.avail_out = chunkSize;
          }

          status = zlib_deflate.deflate(strm, _mode);
          /* no bad return value */

          if (status !== Z_STREAM_END && status !== Z_OK) {
            this.onEnd(status);
            this.ended = true;
            return false;
          }

          if (strm.avail_out === 0 || strm.avail_in === 0 && _mode === Z_FINISH) {
            if (this.options.to === 'string') {
              this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
            } else {
              this.onData(utils.shrinkBuf(strm.output, strm.next_out));
            }
          }
        } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END); // Finalize on the last chunk.


        if (_mode === Z_FINISH) {
          status = zlib_deflate.deflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return status === Z_OK;
        }

        return true;
      };
      /**
       * Deflate#onData(chunk) -> Void
       * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
       *   on js engine support. When string output requested, each chunk
       *   will be string.
       *
       * By default, stores data blocks in `chunks[]` property and glue
       * those in `onEnd`. Override this handler, if you need another behaviour.
       **/


      Deflate.prototype.onData = function (chunk) {
        this.chunks.push(chunk);
      };
      /**
       * Deflate#onEnd(status) -> Void
       * - status (Number): deflate status. 0 (Z_OK) on success,
       *   other if not.
       *
       * Called once after you tell deflate that input stream complete
       * or error happenned. By default - join collected chunks,
       * free memory and fill `results` / `err` properties.
       **/


      Deflate.prototype.onEnd = function (status) {
        // On success - join
        if (status === Z_OK) {
          if (this.options.to === 'string') {
            this.result = this.chunks.join('');
          } else {
            this.result = utils.flattenChunks(this.chunks);
          }
        }

        this.chunks = [];
        this.err = status;
        this.msg = this.strm.msg;
      };
      /**
       * deflate(data[, options]) -> Uint8Array|Array|String
       * - data (Uint8Array|Array|String): input data to compress.
       * - options (Object): zlib deflate options.
       *
       * Compress `data` with deflate alrorythm and `options`.
       *
       * Supported options are:
       *
       * - level
       * - windowBits
       * - memLevel
       * - strategy
       *
       * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
       * for more information on these.
       *
       * Sugar (options):
       *
       * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
       *   negative windowBits implicitly.
       * - `to` (String) - if equal to 'string', then result will be "binary string"
       *    (each char code [0..255])
       *
       * ##### Example:
       *
       * ```javascript
       * var pako = require('pako')
       *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
       *
       * console.log(pako.deflate(data));
       * ```
       **/


      function deflate(input, options) {
        var deflator = new Deflate(options);
        deflator.push(input, true); // That will never happens, if you don't cheat with options :)

        if (deflator.err) {
          throw deflator.msg;
        }

        return deflator.result;
      }
      /**
       * deflateRaw(data[, options]) -> Uint8Array|Array|String
       * - data (Uint8Array|Array|String): input data to compress.
       * - options (Object): zlib deflate options.
       *
       * The same as [[deflate]], but creates raw data, without wrapper
       * (header and adler32 crc).
       **/


      function deflateRaw(input, options) {
        options = options || {};
        options.raw = true;
        return deflate(input, options);
      }
      /**
       * gzip(data[, options]) -> Uint8Array|Array|String
       * - data (Uint8Array|Array|String): input data to compress.
       * - options (Object): zlib deflate options.
       *
       * The same as [[deflate]], but create gzip wrapper instead of
       * deflate one.
       **/


      function gzip(input, options) {
        options = options || {};
        options.gzip = true;
        return deflate(input, options);
      }

      exports.Deflate = Deflate;
      exports.deflate = deflate;
      exports.deflateRaw = deflateRaw;
      exports.gzip = gzip;
    }, {
      "./utils/common": 27,
      "./utils/strings": 28,
      "./zlib/deflate.js": 32,
      "./zlib/messages": 37,
      "./zlib/zstream": 39
    }],
    26: [function (_dereq_, module, exports) {
      'use strict';

      var zlib_inflate = _dereq_('./zlib/inflate.js');

      var utils = _dereq_('./utils/common');

      var strings = _dereq_('./utils/strings');

      var c = _dereq_('./zlib/constants');

      var msg = _dereq_('./zlib/messages');

      var zstream = _dereq_('./zlib/zstream');

      var gzheader = _dereq_('./zlib/gzheader');
      /**
       * class Inflate
       *
       * Generic JS-style wrapper for zlib calls. If you don't need
       * streaming behaviour - use more simple functions: [[inflate]]
       * and [[inflateRaw]].
       **/

      /* internal
       * inflate.chunks -> Array
       *
       * Chunks of output data, if [[Inflate#onData]] not overriden.
       **/

      /**
       * Inflate.result -> Uint8Array|Array|String
       *
       * Uncompressed result, generated by default [[Inflate#onData]]
       * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
       * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
       **/

      /**
       * Inflate.err -> Number
       *
       * Error code after inflate finished. 0 (Z_OK) on success.
       * Should be checked if broken data possible.
       **/

      /**
       * Inflate.msg -> String
       *
       * Error message, if [[Inflate.err]] != 0
       **/

      /**
       * new Inflate(options)
       * - options (Object): zlib inflate options.
       *
       * Creates new inflator instance with specified params. Throws exception
       * on bad params. Supported options:
       *
       * - `windowBits`
       *
       * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
       * for more information on these.
       *
       * Additional options, for internal needs:
       *
       * - `chunkSize` - size of generated data chunks (16K by default)
       * - `raw` (Boolean) - do raw inflate
       * - `to` (String) - if equal to 'string', then result will be converted
       *   from utf8 to utf16 (javascript) string. When string output requested,
       *   chunk length can differ from `chunkSize`, depending on content.
       *
       * By default, when no options set, autodetect deflate/gzip data format via
       * wrapper header.
       *
       * ##### Example:
       *
       * ```javascript
       * var pako = require('pako')
       *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
       *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
       *
       * var inflate = new pako.Inflate({ level: 3});
       *
       * inflate.push(chunk1, false);
       * inflate.push(chunk2, true);  // true -> last chunk
       *
       * if (inflate.err) { throw new Error(inflate.err); }
       *
       * console.log(inflate.result);
       * ```
       **/


      var Inflate = function (options) {
        this.options = utils.assign({
          chunkSize: 16384,
          windowBits: 0,
          to: ''
        }, options || {});
        var opt = this.options; // Force window size for `raw` data, if not set directly,
        // because we have no header for autodetect.

        if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
          opt.windowBits = -opt.windowBits;

          if (opt.windowBits === 0) {
            opt.windowBits = -15;
          }
        } // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate


        if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
          opt.windowBits += 32;
        } // Gzip header has no info about windows size, we can do autodetect only
        // for deflate. So, if window size not set, force it to max when gzip possible


        if (opt.windowBits > 15 && opt.windowBits < 48) {
          // bit 3 (16) -> gzipped data
          // bit 4 (32) -> autodetect gzip/deflate
          if ((opt.windowBits & 15) === 0) {
            opt.windowBits |= 15;
          }
        }

        this.err = 0; // error code, if happens (0 = Z_OK)

        this.msg = ''; // error message

        this.ended = false; // used to avoid multiple onEnd() calls

        this.chunks = []; // chunks of compressed data

        this.strm = new zstream();
        this.strm.avail_out = 0;
        var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);

        if (status !== c.Z_OK) {
          throw new Error(msg[status]);
        }

        this.header = new gzheader();
        zlib_inflate.inflateGetHeader(this.strm, this.header);
      };
      /**
       * Inflate#push(data[, mode]) -> Boolean
       * - data (Uint8Array|Array|String): input data
       * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
       *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
       *
       * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
       * new output chunks. Returns `true` on success. The last data block must have
       * mode Z_FINISH (or `true`). That flush internal pending buffers and call
       * [[Inflate#onEnd]].
       *
       * On fail call [[Inflate#onEnd]] with error code and return false.
       *
       * We strongly recommend to use `Uint8Array` on input for best speed (output
       * format is detected automatically). Also, don't skip last param and always
       * use the same type in your code (boolean or number). That will improve JS speed.
       *
       * For regular `Array`-s make sure all elements are [0..255].
       *
       * ##### Example
       *
       * ```javascript
       * push(chunk, false); // push one of data chunks
       * ...
       * push(chunk, true);  // push last chunk
       * ```
       **/


      Inflate.prototype.push = function (data, mode) {
        var strm = this.strm;
        var chunkSize = this.options.chunkSize;

        var status, _mode;

        var next_out_utf8, tail, utf8str;

        if (this.ended) {
          return false;
        }

        _mode = mode === ~~mode ? mode : mode === true ? c.Z_FINISH : c.Z_NO_FLUSH; // Convert data if needed

        if (typeof data === 'string') {
          // Only binary strings can be decompressed on practice
          strm.input = strings.binstring2buf(data);
        } else {
          strm.input = data;
        }

        strm.next_in = 0;
        strm.avail_in = strm.input.length;

        do {
          if (strm.avail_out === 0) {
            strm.output = new utils.Buf8(chunkSize);
            strm.next_out = 0;
            strm.avail_out = chunkSize;
          }

          status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);
          /* no bad return value */

          if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
            this.onEnd(status);
            this.ended = true;
            return false;
          }

          if (strm.next_out) {
            if (strm.avail_out === 0 || status === c.Z_STREAM_END || strm.avail_in === 0 && _mode === c.Z_FINISH) {
              if (this.options.to === 'string') {
                next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
                tail = strm.next_out - next_out_utf8;
                utf8str = strings.buf2string(strm.output, next_out_utf8); // move tail

                strm.next_out = tail;
                strm.avail_out = chunkSize - tail;

                if (tail) {
                  utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);
                }

                this.onData(utf8str);
              } else {
                this.onData(utils.shrinkBuf(strm.output, strm.next_out));
              }
            }
          }
        } while (strm.avail_in > 0 && status !== c.Z_STREAM_END);

        if (status === c.Z_STREAM_END) {
          _mode = c.Z_FINISH;
        } // Finalize on the last chunk.


        if (_mode === c.Z_FINISH) {
          status = zlib_inflate.inflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return status === c.Z_OK;
        }

        return true;
      };
      /**
       * Inflate#onData(chunk) -> Void
       * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
       *   on js engine support. When string output requested, each chunk
       *   will be string.
       *
       * By default, stores data blocks in `chunks[]` property and glue
       * those in `onEnd`. Override this handler, if you need another behaviour.
       **/


      Inflate.prototype.onData = function (chunk) {
        this.chunks.push(chunk);
      };
      /**
       * Inflate#onEnd(status) -> Void
       * - status (Number): inflate status. 0 (Z_OK) on success,
       *   other if not.
       *
       * Called once after you tell inflate that input stream complete
       * or error happenned. By default - join collected chunks,
       * free memory and fill `results` / `err` properties.
       **/


      Inflate.prototype.onEnd = function (status) {
        // On success - join
        if (status === c.Z_OK) {
          if (this.options.to === 'string') {
            // Glue & convert here, until we teach pako to send
            // utf8 alligned strings to onData
            this.result = this.chunks.join('');
          } else {
            this.result = utils.flattenChunks(this.chunks);
          }
        }

        this.chunks = [];
        this.err = status;
        this.msg = this.strm.msg;
      };
      /**
       * inflate(data[, options]) -> Uint8Array|Array|String
       * - data (Uint8Array|Array|String): input data to decompress.
       * - options (Object): zlib inflate options.
       *
       * Decompress `data` with inflate/ungzip and `options`. Autodetect
       * format via wrapper header by default. That's why we don't provide
       * separate `ungzip` method.
       *
       * Supported options are:
       *
       * - windowBits
       *
       * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
       * for more information.
       *
       * Sugar (options):
       *
       * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
       *   negative windowBits implicitly.
       * - `to` (String) - if equal to 'string', then result will be converted
       *   from utf8 to utf16 (javascript) string. When string output requested,
       *   chunk length can differ from `chunkSize`, depending on content.
       *
       *
       * ##### Example:
       *
       * ```javascript
       * var pako = require('pako')
       *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
       *   , output;
       *
       * try {
       *   output = pako.inflate(input);
       * } catch (err)
       *   console.log(err);
       * }
       * ```
       **/


      function inflate(input, options) {
        var inflator = new Inflate(options);
        inflator.push(input, true); // That will never happens, if you don't cheat with options :)

        if (inflator.err) {
          throw inflator.msg;
        }

        return inflator.result;
      }
      /**
       * inflateRaw(data[, options]) -> Uint8Array|Array|String
       * - data (Uint8Array|Array|String): input data to decompress.
       * - options (Object): zlib inflate options.
       *
       * The same as [[inflate]], but creates raw data, without wrapper
       * (header and adler32 crc).
       **/


      function inflateRaw(input, options) {
        options = options || {};
        options.raw = true;
        return inflate(input, options);
      }
      /**
       * ungzip(data[, options]) -> Uint8Array|Array|String
       * - data (Uint8Array|Array|String): input data to decompress.
       * - options (Object): zlib inflate options.
       *
       * Just shortcut to [[inflate]], because it autodetects format
       * by header.content. Done for convenience.
       **/


      exports.Inflate = Inflate;
      exports.inflate = inflate;
      exports.inflateRaw = inflateRaw;
      exports.ungzip = inflate;
    }, {
      "./utils/common": 27,
      "./utils/strings": 28,
      "./zlib/constants": 30,
      "./zlib/gzheader": 33,
      "./zlib/inflate.js": 35,
      "./zlib/messages": 37,
      "./zlib/zstream": 39
    }],
    27: [function (_dereq_, module, exports) {
      'use strict';

      var TYPED_OK = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Int32Array !== 'undefined';

      exports.assign = function (obj
      /*from1, from2, from3, ...*/
      ) {
        var sources = Array.prototype.slice.call(arguments, 1);

        while (sources.length) {
          var source = sources.shift();

          if (!source) {
            continue;
          }

          if (typeof source !== 'object') {
            throw new TypeError(source + 'must be non-object');
          }

          for (var p in source) {
            if (source.hasOwnProperty(p)) {
              obj[p] = source[p];
            }
          }
        }

        return obj;
      }; // reduce buffer size, avoiding mem copy


      exports.shrinkBuf = function (buf, size) {
        if (buf.length === size) {
          return buf;
        }

        if (buf.subarray) {
          return buf.subarray(0, size);
        }

        buf.length = size;
        return buf;
      };

      var fnTyped = {
        arraySet: function (dest, src, src_offs, len, dest_offs) {
          if (src.subarray && dest.subarray) {
            dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
            return;
          } // Fallback to ordinary array


          for (var i = 0; i < len; i++) {
            dest[dest_offs + i] = src[src_offs + i];
          }
        },
        // Join array of chunks to single array.
        flattenChunks: function (chunks) {
          var i, l, len, pos, chunk, result; // calculate data length

          len = 0;

          for (i = 0, l = chunks.length; i < l; i++) {
            len += chunks[i].length;
          } // join chunks


          result = new Uint8Array(len);
          pos = 0;

          for (i = 0, l = chunks.length; i < l; i++) {
            chunk = chunks[i];
            result.set(chunk, pos);
            pos += chunk.length;
          }

          return result;
        }
      };
      var fnUntyped = {
        arraySet: function (dest, src, src_offs, len, dest_offs) {
          for (var i = 0; i < len; i++) {
            dest[dest_offs + i] = src[src_offs + i];
          }
        },
        // Join array of chunks to single array.
        flattenChunks: function (chunks) {
          return [].concat.apply([], chunks);
        }
      }; // Enable/Disable typed arrays use, for testing
      //

      exports.setTyped = function (on) {
        if (on) {
          exports.Buf8 = Uint8Array;
          exports.Buf16 = Uint16Array;
          exports.Buf32 = Int32Array;
          exports.assign(exports, fnTyped);
        } else {
          exports.Buf8 = Array;
          exports.Buf16 = Array;
          exports.Buf32 = Array;
          exports.assign(exports, fnUntyped);
        }
      };

      exports.setTyped(TYPED_OK);
    }, {}],
    28: [function (_dereq_, module, exports) {
      // String encode/decode helpers
      'use strict';

      var utils = _dereq_('./common'); // Quick check if we can use fast array to bin string conversion
      //
      // - apply(Array) can fail on Android 2.2
      // - apply(Uint8Array) can fail on iOS 5.1 Safary
      //


      var STR_APPLY_OK = true;
      var STR_APPLY_UIA_OK = true;

      try {
        String.fromCharCode.apply(null, [0]);
      } catch (__) {
        STR_APPLY_OK = false;
      }

      try {
        String.fromCharCode.apply(null, new Uint8Array(1));
      } catch (__) {
        STR_APPLY_UIA_OK = false;
      } // Table with utf8 lengths (calculated by first byte of sequence)
      // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
      // because max possible codepoint is 0x10ffff


      var _utf8len = new utils.Buf8(256);

      for (var i = 0; i < 256; i++) {
        _utf8len[i] = i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1;
      }

      _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start
      // convert string to array (typed, when possible)

      exports.string2buf = function (str) {
        var buf,
            c,
            c2,
            m_pos,
            i,
            str_len = str.length,
            buf_len = 0; // count binary size

        for (m_pos = 0; m_pos < str_len; m_pos++) {
          c = str.charCodeAt(m_pos);

          if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);

            if ((c2 & 0xfc00) === 0xdc00) {
              c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
              m_pos++;
            }
          }

          buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
        } // allocate buffer


        buf = new utils.Buf8(buf_len); // convert

        for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
          c = str.charCodeAt(m_pos);

          if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);

            if ((c2 & 0xfc00) === 0xdc00) {
              c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
              m_pos++;
            }
          }

          if (c < 0x80) {
            /* one byte */
            buf[i++] = c;
          } else if (c < 0x800) {
            /* two bytes */
            buf[i++] = 0xC0 | c >>> 6;
            buf[i++] = 0x80 | c & 0x3f;
          } else if (c < 0x10000) {
            /* three bytes */
            buf[i++] = 0xE0 | c >>> 12;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
          } else {
            /* four bytes */
            buf[i++] = 0xf0 | c >>> 18;
            buf[i++] = 0x80 | c >>> 12 & 0x3f;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
          }
        }

        return buf;
      }; // Helper (used in 2 places)


      function buf2binstring(buf, len) {
        // use fallback for big arrays to avoid stack overflow
        if (len < 65537) {
          if (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK) {
            return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
          }
        }

        var result = '';

        for (var i = 0; i < len; i++) {
          result += String.fromCharCode(buf[i]);
        }

        return result;
      } // Convert byte array to binary string


      exports.buf2binstring = function (buf) {
        return buf2binstring(buf, buf.length);
      }; // Convert binary string (typed, when possible)


      exports.binstring2buf = function (str) {
        var buf = new utils.Buf8(str.length);

        for (var i = 0, len = buf.length; i < len; i++) {
          buf[i] = str.charCodeAt(i);
        }

        return buf;
      }; // convert array to string


      exports.buf2string = function (buf, max) {
        var i, out, c, c_len;
        var len = max || buf.length; // Reserve max possible length (2 words per char)
        // NB: by unknown reasons, Array is significantly faster for
        //     String.fromCharCode.apply than Uint16Array.

        var utf16buf = new Array(len * 2);

        for (out = 0, i = 0; i < len;) {
          c = buf[i++]; // quick process ascii

          if (c < 0x80) {
            utf16buf[out++] = c;
            continue;
          }

          c_len = _utf8len[c]; // skip 5 & 6 byte codes

          if (c_len > 4) {
            utf16buf[out++] = 0xfffd;
            i += c_len - 1;
            continue;
          } // apply mask on first byte


          c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07; // join the rest

          while (c_len > 1 && i < len) {
            c = c << 6 | buf[i++] & 0x3f;
            c_len--;
          } // terminated by end of string?


          if (c_len > 1) {
            utf16buf[out++] = 0xfffd;
            continue;
          }

          if (c < 0x10000) {
            utf16buf[out++] = c;
          } else {
            c -= 0x10000;
            utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;
            utf16buf[out++] = 0xdc00 | c & 0x3ff;
          }
        }

        return buf2binstring(utf16buf, out);
      }; // Calculate max possible position in utf8 buffer,
      // that will not break sequence. If that's not possible
      // - (very small limits) return max size as is.
      //
      // buf[] - utf8 bytes array
      // max   - length limit (mandatory);


      exports.utf8border = function (buf, max) {
        var pos;
        max = max || buf.length;

        if (max > buf.length) {
          max = buf.length;
        } // go back from last position, until start of sequence found


        pos = max - 1;

        while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) {
          pos--;
        } // Fuckup - very small and broken sequence,
        // return max, because we should return something anyway.


        if (pos < 0) {
          return max;
        } // If we came to start of buffer - that means vuffer is too small,
        // return max too.


        if (pos === 0) {
          return max;
        }

        return pos + _utf8len[buf[pos]] > max ? pos : max;
      };
    }, {
      "./common": 27
    }],
    29: [function (_dereq_, module, exports) {
      'use strict'; // Note: adler32 takes 12% for level 0 and 2% for level 6.
      // It doesn't worth to make additional optimizationa as in original.
      // Small size is preferable.

      function adler32(adler, buf, len, pos) {
        var s1 = adler & 0xffff | 0,
            s2 = adler >>> 16 & 0xffff | 0,
            n = 0;

        while (len !== 0) {
          // Set limit ~ twice less than 5552, to keep
          // s2 in 31-bits, because we force signed ints.
          // in other case %= will fail.
          n = len > 2000 ? 2000 : len;
          len -= n;

          do {
            s1 = s1 + buf[pos++] | 0;
            s2 = s2 + s1 | 0;
          } while (--n);

          s1 %= 65521;
          s2 %= 65521;
        }

        return s1 | s2 << 16 | 0;
      }

      module.exports = adler32;
    }, {}],
    30: [function (_dereq_, module, exports) {
      module.exports = {
        /* Allowed flush values; see deflate() and inflate() below for details */
        Z_NO_FLUSH: 0,
        Z_PARTIAL_FLUSH: 1,
        Z_SYNC_FLUSH: 2,
        Z_FULL_FLUSH: 3,
        Z_FINISH: 4,
        Z_BLOCK: 5,
        Z_TREES: 6,

        /* Return codes for the compression/decompression functions. Negative values
        * are errors, positive values are used for special but normal events.
        */
        Z_OK: 0,
        Z_STREAM_END: 1,
        Z_NEED_DICT: 2,
        Z_ERRNO: -1,
        Z_STREAM_ERROR: -2,
        Z_DATA_ERROR: -3,
        //Z_MEM_ERROR:     -4,
        Z_BUF_ERROR: -5,
        //Z_VERSION_ERROR: -6,

        /* compression levels */
        Z_NO_COMPRESSION: 0,
        Z_BEST_SPEED: 1,
        Z_BEST_COMPRESSION: 9,
        Z_DEFAULT_COMPRESSION: -1,
        Z_FILTERED: 1,
        Z_HUFFMAN_ONLY: 2,
        Z_RLE: 3,
        Z_FIXED: 4,
        Z_DEFAULT_STRATEGY: 0,

        /* Possible values of the data_type field (though see inflate()) */
        Z_BINARY: 0,
        Z_TEXT: 1,
        //Z_ASCII:                1, // = Z_TEXT (deprecated)
        Z_UNKNOWN: 2,

        /* The deflate compression method */
        Z_DEFLATED: 8 //Z_NULL:                 null // Use -1 or null inline, depending on var type

      };
    }, {}],
    31: [function (_dereq_, module, exports) {
      'use strict'; // Note: we can't get significant speed boost here.
      // So write code to minimize size - no pregenerated tables
      // and array tools dependencies.
      // Use ordinary array, since untyped makes no boost here

      function makeTable() {
        var c,
            table = [];

        for (var n = 0; n < 256; n++) {
          c = n;

          for (var k = 0; k < 8; k++) {
            c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
          }

          table[n] = c;
        }

        return table;
      } // Create table on load. Just 255 signed longs. Not a problem.


      var crcTable = makeTable();

      function crc32(crc, buf, len, pos) {
        var t = crcTable,
            end = pos + len;
        crc = crc ^ -1;

        for (var i = pos; i < end; i++) {
          crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
        }

        return crc ^ -1; // >>> 0;
      }

      module.exports = crc32;
    }, {}],
    32: [function (_dereq_, module, exports) {
      'use strict';

      var utils = _dereq_('../utils/common');

      var trees = _dereq_('./trees');

      var adler32 = _dereq_('./adler32');

      var crc32 = _dereq_('./crc32');

      var msg = _dereq_('./messages');
      /* Public constants ==========================================================*/

      /* ===========================================================================*/

      /* Allowed flush values; see deflate() and inflate() below for details */


      var Z_NO_FLUSH = 0;
      var Z_PARTIAL_FLUSH = 1; //var Z_SYNC_FLUSH    = 2;

      var Z_FULL_FLUSH = 3;
      var Z_FINISH = 4;
      var Z_BLOCK = 5; //var Z_TREES         = 6;

      /* Return codes for the compression/decompression functions. Negative values
       * are errors, positive values are used for special but normal events.
       */

      var Z_OK = 0;
      var Z_STREAM_END = 1; //var Z_NEED_DICT     = 2;
      //var Z_ERRNO         = -1;

      var Z_STREAM_ERROR = -2;
      var Z_DATA_ERROR = -3; //var Z_MEM_ERROR     = -4;

      var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;

      /* compression levels */
      //var Z_NO_COMPRESSION      = 0;
      //var Z_BEST_SPEED          = 1;
      //var Z_BEST_COMPRESSION    = 9;

      var Z_DEFAULT_COMPRESSION = -1;
      var Z_FILTERED = 1;
      var Z_HUFFMAN_ONLY = 2;
      var Z_RLE = 3;
      var Z_FIXED = 4;
      var Z_DEFAULT_STRATEGY = 0;
      /* Possible values of the data_type field (though see inflate()) */
      //var Z_BINARY              = 0;
      //var Z_TEXT                = 1;
      //var Z_ASCII               = 1; // = Z_TEXT

      var Z_UNKNOWN = 2;
      /* The deflate compression method */

      var Z_DEFLATED = 8;
      /*============================================================================*/

      var MAX_MEM_LEVEL = 9;
      /* Maximum value for memLevel in deflateInit2 */

      var MAX_WBITS = 15;
      /* 32K LZ77 window */

      var DEF_MEM_LEVEL = 8;
      var LENGTH_CODES = 29;
      /* number of length codes, not counting the special END_BLOCK code */

      var LITERALS = 256;
      /* number of literal bytes 0..255 */

      var L_CODES = LITERALS + 1 + LENGTH_CODES;
      /* number of Literal or Length codes, including the END_BLOCK code */

      var D_CODES = 30;
      /* number of distance codes */

      var BL_CODES = 19;
      /* number of codes used to transfer the bit lengths */

      var HEAP_SIZE = 2 * L_CODES + 1;
      /* maximum heap size */

      var MAX_BITS = 15;
      /* All codes must not exceed MAX_BITS bits */

      var MIN_MATCH = 3;
      var MAX_MATCH = 258;
      var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
      var PRESET_DICT = 0x20;
      var INIT_STATE = 42;
      var EXTRA_STATE = 69;
      var NAME_STATE = 73;
      var COMMENT_STATE = 91;
      var HCRC_STATE = 103;
      var BUSY_STATE = 113;
      var FINISH_STATE = 666;
      var BS_NEED_MORE = 1;
      /* block not completed, need more input or more output */

      var BS_BLOCK_DONE = 2;
      /* block flush performed */

      var BS_FINISH_STARTED = 3;
      /* finish started, need only more output at next deflate */

      var BS_FINISH_DONE = 4;
      /* finish done, accept no more input or output */

      var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

      function err(strm, errorCode) {
        strm.msg = msg[errorCode];
        return errorCode;
      }

      function rank(f) {
        return (f << 1) - (f > 4 ? 9 : 0);
      }

      function zero(buf) {
        var len = buf.length;

        while (--len >= 0) {
          buf[len] = 0;
        }
      }
      /* =========================================================================
       * Flush as much pending output as possible. All deflate() output goes
       * through this function so some applications may wish to modify it
       * to avoid allocating a large strm->output buffer and copying into it.
       * (See also read_buf()).
       */


      function flush_pending(strm) {
        var s = strm.state; //_tr_flush_bits(s);

        var len = s.pending;

        if (len > strm.avail_out) {
          len = strm.avail_out;
        }

        if (len === 0) {
          return;
        }

        utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
        strm.next_out += len;
        s.pending_out += len;
        strm.total_out += len;
        strm.avail_out -= len;
        s.pending -= len;

        if (s.pending === 0) {
          s.pending_out = 0;
        }
      }

      function flush_block_only(s, last) {
        trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);

        s.block_start = s.strstart;
        flush_pending(s.strm);
      }

      function put_byte(s, b) {
        s.pending_buf[s.pending++] = b;
      }
      /* =========================================================================
       * Put a short in the pending buffer. The 16-bit value is put in MSB order.
       * IN assertion: the stream state is correct and there is enough room in
       * pending_buf.
       */


      function putShortMSB(s, b) {
        //  put_byte(s, (Byte)(b >> 8));
        //  put_byte(s, (Byte)(b & 0xff));
        s.pending_buf[s.pending++] = b >>> 8 & 0xff;
        s.pending_buf[s.pending++] = b & 0xff;
      }
      /* ===========================================================================
       * Read a new buffer from the current input stream, update the adler32
       * and total number of bytes read.  All deflate() input goes through
       * this function so some applications may wish to modify it to avoid
       * allocating a large strm->input buffer and copying from it.
       * (See also flush_pending()).
       */


      function read_buf(strm, buf, start, size) {
        var len = strm.avail_in;

        if (len > size) {
          len = size;
        }

        if (len === 0) {
          return 0;
        }

        strm.avail_in -= len;
        utils.arraySet(buf, strm.input, strm.next_in, len, start);

        if (strm.state.wrap === 1) {
          strm.adler = adler32(strm.adler, buf, len, start);
        } else if (strm.state.wrap === 2) {
          strm.adler = crc32(strm.adler, buf, len, start);
        }

        strm.next_in += len;
        strm.total_in += len;
        return len;
      }
      /* ===========================================================================
       * Set match_start to the longest match starting at the given string and
       * return its length. Matches shorter or equal to prev_length are discarded,
       * in which case the result is equal to prev_length and match_start is
       * garbage.
       * IN assertions: cur_match is the head of the hash chain for the current
       *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
       * OUT assertion: the match length is not greater than s->lookahead.
       */


      function longest_match(s, cur_match) {
        var chain_length = s.max_chain_length;
        /* max hash chain length */

        var scan = s.strstart;
        /* current string */

        var match;
        /* matched string */

        var len;
        /* length of current match */

        var best_len = s.prev_length;
        /* best match length so far */

        var nice_match = s.nice_match;
        /* stop if match long enough */

        var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0
        /*NIL*/
        ;
        var _win = s.window; // shortcut

        var wmask = s.w_mask;
        var prev = s.prev;
        /* Stop when cur_match becomes <= limit. To simplify the code,
         * we prevent matches with the string of window index 0.
         */

        var strend = s.strstart + MAX_MATCH;
        var scan_end1 = _win[scan + best_len - 1];
        var scan_end = _win[scan + best_len];
        /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
         * It is easy to get rid of this optimization if necessary.
         */
        // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

        /* Do not waste too much time if we already have a good match: */

        if (s.prev_length >= s.good_match) {
          chain_length >>= 2;
        }
        /* Do not look for matches beyond the end of the input. This is necessary
         * to make deflate deterministic.
         */


        if (nice_match > s.lookahead) {
          nice_match = s.lookahead;
        } // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");


        do {
          // Assert(cur_match < s->strstart, "no future");
          match = cur_match;
          /* Skip to next match if the match length cannot increase
           * or if the match length is less than 2.  Note that the checks below
           * for insufficient lookahead only occur occasionally for performance
           * reasons.  Therefore uninitialized memory will be accessed, and
           * conditional jumps will be made that depend on those values.
           * However the length of the match is limited to the lookahead, so
           * the output of deflate is not affected by the uninitialized values.
           */

          if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
            continue;
          }
          /* The check at best_len-1 can be removed because it will be made
           * again later. (This heuristic is not always a win.)
           * It is not necessary to compare scan[2] and match[2] since they
           * are always equal when the other bytes match, given that
           * the hash keys are equal and that HASH_BITS >= 8.
           */


          scan += 2;
          match++; // Assert(*scan == *match, "match[2]?");

          /* We check for insufficient lookahead only every 8th comparison;
           * the 256th check will be made at strstart+258.
           */

          do {
            /*jshint noempty:false*/
          } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend); // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");


          len = MAX_MATCH - (strend - scan);
          scan = strend - MAX_MATCH;

          if (len > best_len) {
            s.match_start = cur_match;
            best_len = len;

            if (len >= nice_match) {
              break;
            }

            scan_end1 = _win[scan + best_len - 1];
            scan_end = _win[scan + best_len];
          }
        } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

        if (best_len <= s.lookahead) {
          return best_len;
        }

        return s.lookahead;
      }
      /* ===========================================================================
       * Fill the window when the lookahead becomes insufficient.
       * Updates strstart and lookahead.
       *
       * IN assertion: lookahead < MIN_LOOKAHEAD
       * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
       *    At least one byte has been read, or avail_in == 0; reads are
       *    performed for at least two bytes (required for the zip translate_eol
       *    option -- not supported here).
       */


      function fill_window(s) {
        var _w_size = s.w_size;
        var p, n, m, more, str; //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

        do {
          more = s.window_size - s.lookahead - s.strstart; // JS ints have 32 bit, block below not needed

          /* Deal with !@#$% 64K limit: */
          //if (sizeof(int) <= 2) {
          //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
          //        more = wsize;
          //
          //  } else if (more == (unsigned)(-1)) {
          //        /* Very unlikely, but possible on 16 bit machine if
          //         * strstart == 0 && lookahead == 1 (input done a byte at time)
          //         */
          //        more--;
          //    }
          //}

          /* If the window is almost full and there is insufficient lookahead,
           * move the upper half to the lower one to make room in the upper half.
           */

          if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
            utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
            s.match_start -= _w_size;
            s.strstart -= _w_size;
            /* we now have strstart >= MAX_DIST */

            s.block_start -= _w_size;
            /* Slide the hash table (could be avoided with 32 bit values
             at the expense of memory usage). We slide even when level == 0
             to keep the hash table consistent if we switch back to level > 0
             later. (Using level 0 permanently is not an optimal usage of
             zlib, so we don't care about this pathological case.)
             */

            n = s.hash_size;
            p = n;

            do {
              m = s.head[--p];
              s.head[p] = m >= _w_size ? m - _w_size : 0;
            } while (--n);

            n = _w_size;
            p = n;

            do {
              m = s.prev[--p];
              s.prev[p] = m >= _w_size ? m - _w_size : 0;
              /* If n is not on any hash chain, prev[n] is garbage but
               * its value will never be used.
               */
            } while (--n);

            more += _w_size;
          }

          if (s.strm.avail_in === 0) {
            break;
          }
          /* If there was no sliding:
           *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
           *    more == window_size - lookahead - strstart
           * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
           * => more >= window_size - 2*WSIZE + 2
           * In the BIG_MEM or MMAP case (not yet supported),
           *   window_size == input_size + MIN_LOOKAHEAD  &&
           *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
           * Otherwise, window_size == 2*WSIZE so more >= 2.
           * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
           */
          //Assert(more >= 2, "more < 2");


          n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
          s.lookahead += n;
          /* Initialize the hash value now that we have some input: */

          if (s.lookahead + s.insert >= MIN_MATCH) {
            str = s.strstart - s.insert;
            s.ins_h = s.window[str];
            /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */

            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask; //#if MIN_MATCH != 3
            //        Call update_hash() MIN_MATCH-3 more times
            //#endif

            while (s.insert) {
              /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
              s.prev[str & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = str;
              str++;
              s.insert--;

              if (s.lookahead + s.insert < MIN_MATCH) {
                break;
              }
            }
          }
          /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
           * but this is not important since only literal bytes will be emitted.
           */

        } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
        /* If the WIN_INIT bytes after the end of the current data have never been
         * written, then zero those bytes in order to avoid memory check reports of
         * the use of uninitialized (or uninitialised as Julian writes) bytes by
         * the longest match routines.  Update the high water mark for the next
         * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
         * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
         */
        //  if (s.high_water < s.window_size) {
        //    var curr = s.strstart + s.lookahead;
        //    var init = 0;
        //
        //    if (s.high_water < curr) {
        //      /* Previous high water mark below current data -- zero WIN_INIT
        //       * bytes or up to end of window, whichever is less.
        //       */
        //      init = s.window_size - curr;
        //      if (init > WIN_INIT)
        //        init = WIN_INIT;
        //      zmemzero(s->window + curr, (unsigned)init);
        //      s->high_water = curr + init;
        //    }
        //    else if (s->high_water < (ulg)curr + WIN_INIT) {
        //      /* High water mark at or above current data, but below current data
        //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
        //       * to end of window, whichever is less.
        //       */
        //      init = (ulg)curr + WIN_INIT - s->high_water;
        //      if (init > s->window_size - s->high_water)
        //        init = s->window_size - s->high_water;
        //      zmemzero(s->window + s->high_water, (unsigned)init);
        //      s->high_water += init;
        //    }
        //  }
        //
        //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
        //    "not enough room for search");

      }
      /* ===========================================================================
       * Copy without compression as much as possible from the input stream, return
       * the current block state.
       * This function does not insert new strings in the dictionary since
       * uncompressible data is probably not useful. This function is used
       * only for the level=0 compression option.
       * NOTE: this function should be optimized to avoid extra copying from
       * window to pending_buf.
       */


      function deflate_stored(s, flush) {
        /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
         * to pending_buf_size, and each stored block has a 5 byte header:
         */
        var max_block_size = 0xffff;

        if (max_block_size > s.pending_buf_size - 5) {
          max_block_size = s.pending_buf_size - 5;
        }
        /* Copy as much as possible from input to output: */


        for (;;) {
          /* Fill the window as much as possible: */
          if (s.lookahead <= 1) {
            //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
            //  s->block_start >= (long)s->w_size, "slide too late");
            //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
            //        s.block_start >= s.w_size)) {
            //        throw  new Error("slide too late");
            //      }
            fill_window(s);

            if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }

            if (s.lookahead === 0) {
              break;
            }
            /* flush the current block */

          } //Assert(s->block_start >= 0L, "block gone");
          //    if (s.block_start < 0) throw new Error("block gone");


          s.strstart += s.lookahead;
          s.lookahead = 0;
          /* Emit a stored block if pending_buf will be full: */

          var max_start = s.block_start + max_block_size;

          if (s.strstart === 0 || s.strstart >= max_start) {
            /* strstart == 0 is possible when wraparound on 16-bit machine */
            s.lookahead = s.strstart - max_start;
            s.strstart = max_start;
            /*** FLUSH_BLOCK(s, 0); ***/

            flush_block_only(s, false);

            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/

          }
          /* Flush if we may have to slide, otherwise block_start may become
           * negative and the data will be gone:
           */


          if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);

            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/

          }
        }

        s.insert = 0;

        if (flush === Z_FINISH) {
          /*** FLUSH_BLOCK(s, 1); ***/
          flush_block_only(s, true);

          if (s.strm.avail_out === 0) {
            return BS_FINISH_STARTED;
          }
          /***/


          return BS_FINISH_DONE;
        }

        if (s.strstart > s.block_start) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);

          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/

        }

        return BS_NEED_MORE;
      }
      /* ===========================================================================
       * Compress as much as possible from the input stream, return the current
       * block state.
       * This function does not perform lazy evaluation of matches and inserts
       * new strings in the dictionary only for unmatched strings or for short
       * matches. It is used only for the fast compression options.
       */


      function deflate_fast(s, flush) {
        var hash_head;
        /* head of the hash chain */

        var bflush;
        /* set if current block must be flushed */

        for (;;) {
          /* Make sure that we always have enough lookahead, except
           * at the end of the input file. We need MAX_MATCH bytes
           * for the next match, plus MIN_MATCH bytes to insert the
           * string following the next match.
           */
          if (s.lookahead < MIN_LOOKAHEAD) {
            fill_window(s);

            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }

            if (s.lookahead === 0) {
              break;
              /* flush the current block */
            }
          }
          /* Insert the string window[strstart .. strstart+2] in the
           * dictionary, and set hash_head to the head of the hash chain:
           */


          hash_head = 0
          /*NIL*/
          ;

          if (s.lookahead >= MIN_MATCH) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
          }
          /* Find the longest match, discarding those <= prev_length.
           * At this point we have always match_length < MIN_MATCH
           */


          if (hash_head !== 0
          /*NIL*/
          && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
            /* To simplify the code, we prevent matches with the string
             * of window index 0 (in particular we have to avoid a match
             * of the string with itself at the start of the input file).
             */
            s.match_length = longest_match(s, hash_head);
            /* longest_match() sets match_start */
          }

          if (s.match_length >= MIN_MATCH) {
            // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

            /*** _tr_tally_dist(s, s.strstart - s.match_start,
                           s.match_length - MIN_MATCH, bflush); ***/
            bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
            s.lookahead -= s.match_length;
            /* Insert new strings in the hash table only if the match length
             * is not too large. This saves time but degrades compression.
             */

            if (s.match_length <= s.max_lazy_match
            /*max_insert_length*/
            && s.lookahead >= MIN_MATCH) {
              s.match_length--;
              /* string at strstart already in table */

              do {
                s.strstart++;
                /*** INSERT_STRING(s, s.strstart, hash_head); ***/

                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = s.strstart;
                /***/

                /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                 * always MIN_MATCH bytes ahead.
                 */
              } while (--s.match_length !== 0);

              s.strstart++;
            } else {
              s.strstart += s.match_length;
              s.match_length = 0;
              s.ins_h = s.window[s.strstart];
              /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */

              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask; //#if MIN_MATCH != 3
              //                Call UPDATE_HASH() MIN_MATCH-3 more times
              //#endif

              /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
               * matter since it will be recomputed at next deflate call.
               */
            }
          } else {
            /* No match, output a literal byte */
            //Tracevv((stderr,"%c", s.window[s.strstart]));

            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
            bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
            s.lookahead--;
            s.strstart++;
          }

          if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);

            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/

          }
        }

        s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;

        if (flush === Z_FINISH) {
          /*** FLUSH_BLOCK(s, 1); ***/
          flush_block_only(s, true);

          if (s.strm.avail_out === 0) {
            return BS_FINISH_STARTED;
          }
          /***/


          return BS_FINISH_DONE;
        }

        if (s.last_lit) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);

          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/

        }

        return BS_BLOCK_DONE;
      }
      /* ===========================================================================
       * Same as above, but achieves better compression. We use a lazy
       * evaluation for matches: a match is finally adopted only if there is
       * no better match at the next window position.
       */


      function deflate_slow(s, flush) {
        var hash_head;
        /* head of hash chain */

        var bflush;
        /* set if current block must be flushed */

        var max_insert;
        /* Process the input block. */

        for (;;) {
          /* Make sure that we always have enough lookahead, except
           * at the end of the input file. We need MAX_MATCH bytes
           * for the next match, plus MIN_MATCH bytes to insert the
           * string following the next match.
           */
          if (s.lookahead < MIN_LOOKAHEAD) {
            fill_window(s);

            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }

            if (s.lookahead === 0) {
              break;
            }
            /* flush the current block */

          }
          /* Insert the string window[strstart .. strstart+2] in the
           * dictionary, and set hash_head to the head of the hash chain:
           */


          hash_head = 0
          /*NIL*/
          ;

          if (s.lookahead >= MIN_MATCH) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
          }
          /* Find the longest match, discarding those <= prev_length.
           */


          s.prev_length = s.match_length;
          s.prev_match = s.match_start;
          s.match_length = MIN_MATCH - 1;

          if (hash_head !== 0
          /*NIL*/
          && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD
          /*MAX_DIST(s)*/
          ) {
              /* To simplify the code, we prevent matches with the string
               * of window index 0 (in particular we have to avoid a match
               * of the string with itself at the start of the input file).
               */
              s.match_length = longest_match(s, hash_head);
              /* longest_match() sets match_start */

              if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096
              /*TOO_FAR*/
              )) {
                /* If prev_match is also MIN_MATCH, match_start is garbage
                 * but we will ignore the current match anyway.
                 */
                s.match_length = MIN_MATCH - 1;
              }
            }
          /* If there was a match at the previous step and the current
           * match is not better, output the previous match:
           */


          if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
            max_insert = s.strstart + s.lookahead - MIN_MATCH;
            /* Do not insert strings in hash table beyond this. */
            //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

            /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                           s.prev_length - MIN_MATCH, bflush);***/

            bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
            /* Insert in hash table all strings up to the end of the match.
             * strstart-1 and strstart are already inserted. If there is not
             * enough lookahead, the last two strings are not inserted in
             * the hash table.
             */

            s.lookahead -= s.prev_length - 1;
            s.prev_length -= 2;

            do {
              if (++s.strstart <= max_insert) {
                /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = s.strstart;
                /***/
              }
            } while (--s.prev_length !== 0);

            s.match_available = 0;
            s.match_length = MIN_MATCH - 1;
            s.strstart++;

            if (bflush) {
              /*** FLUSH_BLOCK(s, 0); ***/
              flush_block_only(s, false);

              if (s.strm.avail_out === 0) {
                return BS_NEED_MORE;
              }
              /***/

            }
          } else if (s.match_available) {
            /* If there was no match at the previous position, output a
             * single literal. If there was a match but the current match
             * is longer, truncate the previous match to a single literal.
             */
            //Tracevv((stderr,"%c", s->window[s->strstart-1]));

            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
            bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

            if (bflush) {
              /*** FLUSH_BLOCK_ONLY(s, 0) ***/
              flush_block_only(s, false);
              /***/
            }

            s.strstart++;
            s.lookahead--;

            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
          } else {
            /* There is no previous match to compare with, wait for
             * the next step to decide.
             */
            s.match_available = 1;
            s.strstart++;
            s.lookahead--;
          }
        } //Assert (flush != Z_NO_FLUSH, "no flush?");


        if (s.match_available) {
          //Tracevv((stderr,"%c", s->window[s->strstart-1]));

          /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
          bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
          s.match_available = 0;
        }

        s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;

        if (flush === Z_FINISH) {
          /*** FLUSH_BLOCK(s, 1); ***/
          flush_block_only(s, true);

          if (s.strm.avail_out === 0) {
            return BS_FINISH_STARTED;
          }
          /***/


          return BS_FINISH_DONE;
        }

        if (s.last_lit) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);

          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/

        }

        return BS_BLOCK_DONE;
      }
      /* ===========================================================================
       * For Z_RLE, simply look for runs of bytes, generate matches only of distance
       * one.  Do not maintain a hash table.  (It will be regenerated if this run of
       * deflate switches away from Z_RLE.)
       */


      function deflate_rle(s, flush) {
        var bflush;
        /* set if current block must be flushed */

        var prev;
        /* byte at distance one to match */

        var scan, strend;
        /* scan goes up to strend for length of run */

        var _win = s.window;

        for (;;) {
          /* Make sure that we always have enough lookahead, except
           * at the end of the input file. We need MAX_MATCH bytes
           * for the longest run, plus one for the unrolled loop.
           */
          if (s.lookahead <= MAX_MATCH) {
            fill_window(s);

            if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }

            if (s.lookahead === 0) {
              break;
            }
            /* flush the current block */

          }
          /* See how many times the previous byte repeats */


          s.match_length = 0;

          if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
            scan = s.strstart - 1;
            prev = _win[scan];

            if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
              strend = s.strstart + MAX_MATCH;

              do {
                /*jshint noempty:false*/
              } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);

              s.match_length = MAX_MATCH - (strend - scan);

              if (s.match_length > s.lookahead) {
                s.match_length = s.lookahead;
              }
            } //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");

          }
          /* Emit match if have run of MIN_MATCH or longer, else emit literal */


          if (s.match_length >= MIN_MATCH) {
            //check_match(s, s.strstart, s.strstart - 1, s.match_length);

            /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
            bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
            s.lookahead -= s.match_length;
            s.strstart += s.match_length;
            s.match_length = 0;
          } else {
            /* No match, output a literal byte */
            //Tracevv((stderr,"%c", s->window[s->strstart]));

            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
            bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
            s.lookahead--;
            s.strstart++;
          }

          if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);

            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/

          }
        }

        s.insert = 0;

        if (flush === Z_FINISH) {
          /*** FLUSH_BLOCK(s, 1); ***/
          flush_block_only(s, true);

          if (s.strm.avail_out === 0) {
            return BS_FINISH_STARTED;
          }
          /***/


          return BS_FINISH_DONE;
        }

        if (s.last_lit) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);

          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/

        }

        return BS_BLOCK_DONE;
      }
      /* ===========================================================================
       * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
       * (It will be regenerated if this run of deflate switches away from Huffman.)
       */


      function deflate_huff(s, flush) {
        var bflush;
        /* set if current block must be flushed */

        for (;;) {
          /* Make sure that we have a literal to write. */
          if (s.lookahead === 0) {
            fill_window(s);

            if (s.lookahead === 0) {
              if (flush === Z_NO_FLUSH) {
                return BS_NEED_MORE;
              }

              break;
              /* flush the current block */
            }
          }
          /* Output a literal byte */


          s.match_length = 0; //Tracevv((stderr,"%c", s->window[s->strstart]));

          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/

          bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
          s.lookahead--;
          s.strstart++;

          if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);

            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/

          }
        }

        s.insert = 0;

        if (flush === Z_FINISH) {
          /*** FLUSH_BLOCK(s, 1); ***/
          flush_block_only(s, true);

          if (s.strm.avail_out === 0) {
            return BS_FINISH_STARTED;
          }
          /***/


          return BS_FINISH_DONE;
        }

        if (s.last_lit) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);

          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/

        }

        return BS_BLOCK_DONE;
      }
      /* Values for max_lazy_match, good_match and max_chain_length, depending on
       * the desired pack level (0..9). The values given below have been tuned to
       * exclude worst case performance for pathological files. Better values may be
       * found for specific files.
       */


      var Config = function (good_length, max_lazy, nice_length, max_chain, func) {
        this.good_length = good_length;
        this.max_lazy = max_lazy;
        this.nice_length = nice_length;
        this.max_chain = max_chain;
        this.func = func;
      };

      var configuration_table;
      configuration_table = [
      /*      good lazy nice chain */
      new Config(0, 0, 0, 0, deflate_stored),
      /* 0 store only */
      new Config(4, 4, 8, 4, deflate_fast),
      /* 1 max speed, no lazy matches */
      new Config(4, 5, 16, 8, deflate_fast),
      /* 2 */
      new Config(4, 6, 32, 32, deflate_fast),
      /* 3 */
      new Config(4, 4, 16, 16, deflate_slow),
      /* 4 lazy matches */
      new Config(8, 16, 32, 32, deflate_slow),
      /* 5 */
      new Config(8, 16, 128, 128, deflate_slow),
      /* 6 */
      new Config(8, 32, 128, 256, deflate_slow),
      /* 7 */
      new Config(32, 128, 258, 1024, deflate_slow),
      /* 8 */
      new Config(32, 258, 258, 4096, deflate_slow)
      /* 9 max compression */
      ];
      /* ===========================================================================
       * Initialize the "longest match" routines for a new zlib stream
       */

      function lm_init(s) {
        s.window_size = 2 * s.w_size;
        /*** CLEAR_HASH(s); ***/

        zero(s.head); // Fill with NIL (= 0);

        /* Set the default configuration parameters:
         */

        s.max_lazy_match = configuration_table[s.level].max_lazy;
        s.good_match = configuration_table[s.level].good_length;
        s.nice_match = configuration_table[s.level].nice_length;
        s.max_chain_length = configuration_table[s.level].max_chain;
        s.strstart = 0;
        s.block_start = 0;
        s.lookahead = 0;
        s.insert = 0;
        s.match_length = s.prev_length = MIN_MATCH - 1;
        s.match_available = 0;
        s.ins_h = 0;
      }

      function DeflateState() {
        this.strm = null;
        /* pointer back to this zlib stream */

        this.status = 0;
        /* as the name implies */

        this.pending_buf = null;
        /* output still pending */

        this.pending_buf_size = 0;
        /* size of pending_buf */

        this.pending_out = 0;
        /* next pending byte to output to the stream */

        this.pending = 0;
        /* nb of bytes in the pending buffer */

        this.wrap = 0;
        /* bit 0 true for zlib, bit 1 true for gzip */

        this.gzhead = null;
        /* gzip header information to write */

        this.gzindex = 0;
        /* where in extra, name, or comment */

        this.method = Z_DEFLATED;
        /* can only be DEFLATED */

        this.last_flush = -1;
        /* value of flush param for previous deflate call */

        this.w_size = 0;
        /* LZ77 window size (32K by default) */

        this.w_bits = 0;
        /* log2(w_size)  (8..16) */

        this.w_mask = 0;
        /* w_size - 1 */

        this.window = null;
        /* Sliding window. Input bytes are read into the second half of the window,
         * and move to the first half later to keep a dictionary of at least wSize
         * bytes. With this organization, matches are limited to a distance of
         * wSize-MAX_MATCH bytes, but this ensures that IO is always
         * performed with a length multiple of the block size.
         */

        this.window_size = 0;
        /* Actual size of window: 2*wSize, except when the user input buffer
         * is directly used as sliding window.
         */

        this.prev = null;
        /* Link to older string with same hash index. To limit the size of this
         * array to 64K, this link is maintained only for the last 32K strings.
         * An index in this array is thus a window index modulo 32K.
         */

        this.head = null;
        /* Heads of the hash chains or NIL. */

        this.ins_h = 0;
        /* hash index of string to be inserted */

        this.hash_size = 0;
        /* number of elements in hash table */

        this.hash_bits = 0;
        /* log2(hash_size) */

        this.hash_mask = 0;
        /* hash_size-1 */

        this.hash_shift = 0;
        /* Number of bits by which ins_h must be shifted at each input
         * step. It must be such that after MIN_MATCH steps, the oldest
         * byte no longer takes part in the hash key, that is:
         *   hash_shift * MIN_MATCH >= hash_bits
         */

        this.block_start = 0;
        /* Window position at the beginning of the current output block. Gets
         * negative when the window is moved backwards.
         */

        this.match_length = 0;
        /* length of best match */

        this.prev_match = 0;
        /* previous match */

        this.match_available = 0;
        /* set if previous match exists */

        this.strstart = 0;
        /* start of string to insert */

        this.match_start = 0;
        /* start of matching string */

        this.lookahead = 0;
        /* number of valid bytes ahead in window */

        this.prev_length = 0;
        /* Length of the best match at previous step. Matches not greater than this
         * are discarded. This is used in the lazy match evaluation.
         */

        this.max_chain_length = 0;
        /* To speed up deflation, hash chains are never searched beyond this
         * length.  A higher limit improves compression ratio but degrades the
         * speed.
         */

        this.max_lazy_match = 0;
        /* Attempt to find a better match only when the current match is strictly
         * smaller than this value. This mechanism is used only for compression
         * levels >= 4.
         */
        // That's alias to max_lazy_match, don't use directly
        //this.max_insert_length = 0;

        /* Insert new strings in the hash table only if the match length is not
         * greater than this length. This saves time but degrades compression.
         * max_insert_length is used only for compression levels <= 3.
         */

        this.level = 0;
        /* compression level (1..9) */

        this.strategy = 0;
        /* favor or force Huffman coding*/

        this.good_match = 0;
        /* Use a faster search when the previous match is longer than this */

        this.nice_match = 0;
        /* Stop searching when current match exceeds this */

        /* used by trees.c: */

        /* Didn't use ct_data typedef below to suppress compiler warning */
        // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
        // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
        // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
        // Use flat array of DOUBLE size, with interleaved fata,
        // because JS does not support effective

        this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
        this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
        this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
        zero(this.dyn_ltree);
        zero(this.dyn_dtree);
        zero(this.bl_tree);
        this.l_desc = null;
        /* desc. for literal tree */

        this.d_desc = null;
        /* desc. for distance tree */

        this.bl_desc = null;
        /* desc. for bit length tree */
        //ush bl_count[MAX_BITS+1];

        this.bl_count = new utils.Buf16(MAX_BITS + 1);
        /* number of codes at each bit length for an optimal tree */
        //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */

        this.heap = new utils.Buf16(2 * L_CODES + 1);
        /* heap used to build the Huffman trees */

        zero(this.heap);
        this.heap_len = 0;
        /* number of elements in the heap */

        this.heap_max = 0;
        /* element of largest frequency */

        /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
         * The same heap array is used to build all trees.
         */

        this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];

        zero(this.depth);
        /* Depth of each subtree used as tie breaker for trees of equal frequency
         */

        this.l_buf = 0;
        /* buffer index for literals or lengths */

        this.lit_bufsize = 0;
        /* Size of match buffer for literals/lengths.  There are 4 reasons for
         * limiting lit_bufsize to 64K:
         *   - frequencies can be kept in 16 bit counters
         *   - if compression is not successful for the first block, all input
         *     data is still in the window so we can still emit a stored block even
         *     when input comes from standard input.  (This can also be done for
         *     all blocks if lit_bufsize is not greater than 32K.)
         *   - if compression is not successful for a file smaller than 64K, we can
         *     even emit a stored file instead of a stored block (saving 5 bytes).
         *     This is applicable only for zip (not gzip or zlib).
         *   - creating new Huffman trees less frequently may not provide fast
         *     adaptation to changes in the input data statistics. (Take for
         *     example a binary file with poorly compressible code followed by
         *     a highly compressible string table.) Smaller buffer sizes give
         *     fast adaptation but have of course the overhead of transmitting
         *     trees more frequently.
         *   - I can't count above 4
         */

        this.last_lit = 0;
        /* running index in l_buf */

        this.d_buf = 0;
        /* Buffer index for distances. To simplify the code, d_buf and l_buf have
         * the same number of elements. To use different lengths, an extra flag
         * array would be necessary.
         */

        this.opt_len = 0;
        /* bit length of current block with optimal trees */

        this.static_len = 0;
        /* bit length of current block with static trees */

        this.matches = 0;
        /* number of string matches in current block */

        this.insert = 0;
        /* bytes at end of window left to insert */

        this.bi_buf = 0;
        /* Output buffer. bits are inserted starting at the bottom (least
         * significant bits).
         */

        this.bi_valid = 0;
        /* Number of valid bits in bi_buf.  All bits above the last valid bit
         * are always zero.
         */
        // Used for window memory init. We safely ignore it for JS. That makes
        // sense only for pointers and memory check tools.
        //this.high_water = 0;

        /* High water mark offset in window for initialized bytes -- bytes above
         * this are set to zero in order to avoid memory check warnings when
         * longest match routines access bytes past the input.  This is then
         * updated to the new high water mark.
         */
      }

      function deflateResetKeep(strm) {
        var s;

        if (!strm || !strm.state) {
          return err(strm, Z_STREAM_ERROR);
        }

        strm.total_in = strm.total_out = 0;
        strm.data_type = Z_UNKNOWN;
        s = strm.state;
        s.pending = 0;
        s.pending_out = 0;

        if (s.wrap < 0) {
          s.wrap = -s.wrap;
          /* was made negative by deflate(..., Z_FINISH); */
        }

        s.status = s.wrap ? INIT_STATE : BUSY_STATE;
        strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
        : 1; // adler32(0, Z_NULL, 0)

        s.last_flush = Z_NO_FLUSH;

        trees._tr_init(s);

        return Z_OK;
      }

      function deflateReset(strm) {
        var ret = deflateResetKeep(strm);

        if (ret === Z_OK) {
          lm_init(strm.state);
        }

        return ret;
      }

      function deflateSetHeader(strm, head) {
        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        if (strm.state.wrap !== 2) {
          return Z_STREAM_ERROR;
        }

        strm.state.gzhead = head;
        return Z_OK;
      }

      function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
        if (!strm) {
          // === Z_NULL
          return Z_STREAM_ERROR;
        }

        var wrap = 1;

        if (level === Z_DEFAULT_COMPRESSION) {
          level = 6;
        }

        if (windowBits < 0) {
          /* suppress zlib wrapper */
          wrap = 0;
          windowBits = -windowBits;
        } else if (windowBits > 15) {
          wrap = 2;
          /* write gzip wrapper instead */

          windowBits -= 16;
        }

        if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
          return err(strm, Z_STREAM_ERROR);
        }

        if (windowBits === 8) {
          windowBits = 9;
        }
        /* until 256-byte window bug fixed */


        var s = new DeflateState();
        strm.state = s;
        s.strm = strm;
        s.wrap = wrap;
        s.gzhead = null;
        s.w_bits = windowBits;
        s.w_size = 1 << s.w_bits;
        s.w_mask = s.w_size - 1;
        s.hash_bits = memLevel + 7;
        s.hash_size = 1 << s.hash_bits;
        s.hash_mask = s.hash_size - 1;
        s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
        s.window = new utils.Buf8(s.w_size * 2);
        s.head = new utils.Buf16(s.hash_size);
        s.prev = new utils.Buf16(s.w_size); // Don't need mem init magic for JS.
        //s.high_water = 0;  /* nothing written to s->window yet */

        s.lit_bufsize = 1 << memLevel + 6;
        /* 16K elements by default */

        s.pending_buf_size = s.lit_bufsize * 4;
        s.pending_buf = new utils.Buf8(s.pending_buf_size);
        s.d_buf = s.lit_bufsize >> 1;
        s.l_buf = (1 + 2) * s.lit_bufsize;
        s.level = level;
        s.strategy = strategy;
        s.method = method;
        return deflateReset(strm);
      }

      function deflateInit(strm, level) {
        return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
      }

      function deflate(strm, flush) {
        var old_flush, s;
        var beg, val; // for gzip header write only

        if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
          return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
        }

        s = strm.state;

        if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
          return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
        }

        s.strm = strm;
        /* just in case */

        old_flush = s.last_flush;
        s.last_flush = flush;
        /* Write the header */

        if (s.status === INIT_STATE) {
          if (s.wrap === 2) {
            // GZIP header
            strm.adler = 0; //crc32(0L, Z_NULL, 0);

            put_byte(s, 31);
            put_byte(s, 139);
            put_byte(s, 8);

            if (!s.gzhead) {
              // s->gzhead == Z_NULL
              put_byte(s, 0);
              put_byte(s, 0);
              put_byte(s, 0);
              put_byte(s, 0);
              put_byte(s, 0);
              put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
              put_byte(s, OS_CODE);
              s.status = BUSY_STATE;
            } else {
              put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
              put_byte(s, s.gzhead.time & 0xff);
              put_byte(s, s.gzhead.time >> 8 & 0xff);
              put_byte(s, s.gzhead.time >> 16 & 0xff);
              put_byte(s, s.gzhead.time >> 24 & 0xff);
              put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
              put_byte(s, s.gzhead.os & 0xff);

              if (s.gzhead.extra && s.gzhead.extra.length) {
                put_byte(s, s.gzhead.extra.length & 0xff);
                put_byte(s, s.gzhead.extra.length >> 8 & 0xff);
              }

              if (s.gzhead.hcrc) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
              }

              s.gzindex = 0;
              s.status = EXTRA_STATE;
            }
          } else // DEFLATE header
            {
              var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
              var level_flags = -1;

              if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
                level_flags = 0;
              } else if (s.level < 6) {
                level_flags = 1;
              } else if (s.level === 6) {
                level_flags = 2;
              } else {
                level_flags = 3;
              }

              header |= level_flags << 6;

              if (s.strstart !== 0) {
                header |= PRESET_DICT;
              }

              header += 31 - header % 31;
              s.status = BUSY_STATE;
              putShortMSB(s, header);
              /* Save the adler32 of the preset dictionary: */

              if (s.strstart !== 0) {
                putShortMSB(s, strm.adler >>> 16);
                putShortMSB(s, strm.adler & 0xffff);
              }

              strm.adler = 1; // adler32(0L, Z_NULL, 0);
            }
        } //#ifdef GZIP


        if (s.status === EXTRA_STATE) {
          if (s.gzhead.extra
          /* != Z_NULL*/
          ) {
              beg = s.pending;
              /* start of bytes to update crc */

              while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
                if (s.pending === s.pending_buf_size) {
                  if (s.gzhead.hcrc && s.pending > beg) {
                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                  }

                  flush_pending(strm);
                  beg = s.pending;

                  if (s.pending === s.pending_buf_size) {
                    break;
                  }
                }

                put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
                s.gzindex++;
              }

              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }

              if (s.gzindex === s.gzhead.extra.length) {
                s.gzindex = 0;
                s.status = NAME_STATE;
              }
            } else {
            s.status = NAME_STATE;
          }
        }

        if (s.status === NAME_STATE) {
          if (s.gzhead.name
          /* != Z_NULL*/
          ) {
              beg = s.pending;
              /* start of bytes to update crc */
              //int val;

              do {
                if (s.pending === s.pending_buf_size) {
                  if (s.gzhead.hcrc && s.pending > beg) {
                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                  }

                  flush_pending(strm);
                  beg = s.pending;

                  if (s.pending === s.pending_buf_size) {
                    val = 1;
                    break;
                  }
                } // JS specific: little magic to add zero terminator to end of string


                if (s.gzindex < s.gzhead.name.length) {
                  val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
                } else {
                  val = 0;
                }

                put_byte(s, val);
              } while (val !== 0);

              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }

              if (val === 0) {
                s.gzindex = 0;
                s.status = COMMENT_STATE;
              }
            } else {
            s.status = COMMENT_STATE;
          }
        }

        if (s.status === COMMENT_STATE) {
          if (s.gzhead.comment
          /* != Z_NULL*/
          ) {
              beg = s.pending;
              /* start of bytes to update crc */
              //int val;

              do {
                if (s.pending === s.pending_buf_size) {
                  if (s.gzhead.hcrc && s.pending > beg) {
                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                  }

                  flush_pending(strm);
                  beg = s.pending;

                  if (s.pending === s.pending_buf_size) {
                    val = 1;
                    break;
                  }
                } // JS specific: little magic to add zero terminator to end of string


                if (s.gzindex < s.gzhead.comment.length) {
                  val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
                } else {
                  val = 0;
                }

                put_byte(s, val);
              } while (val !== 0);

              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }

              if (val === 0) {
                s.status = HCRC_STATE;
              }
            } else {
            s.status = HCRC_STATE;
          }
        }

        if (s.status === HCRC_STATE) {
          if (s.gzhead.hcrc) {
            if (s.pending + 2 > s.pending_buf_size) {
              flush_pending(strm);
            }

            if (s.pending + 2 <= s.pending_buf_size) {
              put_byte(s, strm.adler & 0xff);
              put_byte(s, strm.adler >> 8 & 0xff);
              strm.adler = 0; //crc32(0L, Z_NULL, 0);

              s.status = BUSY_STATE;
            }
          } else {
            s.status = BUSY_STATE;
          }
        } //#endif

        /* Flush as much pending output as possible */


        if (s.pending !== 0) {
          flush_pending(strm);

          if (strm.avail_out === 0) {
            /* Since avail_out is 0, deflate will be called again with
             * more output space, but possibly with both pending and
             * avail_in equal to zero. There won't be anything to do,
             * but this is not an error situation so make sure we
             * return OK instead of BUF_ERROR at next call of deflate:
             */
            s.last_flush = -1;
            return Z_OK;
          }
          /* Make sure there is something to do and avoid duplicate consecutive
           * flushes. For repeated and useless calls with Z_FINISH, we keep
           * returning Z_STREAM_END instead of Z_BUF_ERROR.
           */

        } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
          return err(strm, Z_BUF_ERROR);
        }
        /* User must not provide more input after the first FINISH: */


        if (s.status === FINISH_STATE && strm.avail_in !== 0) {
          return err(strm, Z_BUF_ERROR);
        }
        /* Start a new block or continue the current one.
         */


        if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
          var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);

          if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
            s.status = FINISH_STATE;
          }

          if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
            if (strm.avail_out === 0) {
              s.last_flush = -1;
              /* avoid BUF_ERROR next call, see above */
            }

            return Z_OK;
            /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
             * of deflate should use the same flush parameter to make sure
             * that the flush is complete. So we don't have to output an
             * empty block here, this will be done at next call. This also
             * ensures that for a very small output buffer, we emit at most
             * one empty block.
             */
          }

          if (bstate === BS_BLOCK_DONE) {
            if (flush === Z_PARTIAL_FLUSH) {
              trees._tr_align(s);
            } else if (flush !== Z_BLOCK) {
              /* FULL_FLUSH or SYNC_FLUSH */
              trees._tr_stored_block(s, 0, 0, false);
              /* For a full flush, this empty block will be recognized
               * as a special marker by inflate_sync().
               */


              if (flush === Z_FULL_FLUSH) {
                /*** CLEAR_HASH(s); ***/

                /* forget history */
                zero(s.head); // Fill with NIL (= 0);

                if (s.lookahead === 0) {
                  s.strstart = 0;
                  s.block_start = 0;
                  s.insert = 0;
                }
              }
            }

            flush_pending(strm);

            if (strm.avail_out === 0) {
              s.last_flush = -1;
              /* avoid BUF_ERROR at next call, see above */

              return Z_OK;
            }
          }
        } //Assert(strm->avail_out > 0, "bug2");
        //if (strm.avail_out <= 0) { throw new Error("bug2");}


        if (flush !== Z_FINISH) {
          return Z_OK;
        }

        if (s.wrap <= 0) {
          return Z_STREAM_END;
        }
        /* Write the trailer */


        if (s.wrap === 2) {
          put_byte(s, strm.adler & 0xff);
          put_byte(s, strm.adler >> 8 & 0xff);
          put_byte(s, strm.adler >> 16 & 0xff);
          put_byte(s, strm.adler >> 24 & 0xff);
          put_byte(s, strm.total_in & 0xff);
          put_byte(s, strm.total_in >> 8 & 0xff);
          put_byte(s, strm.total_in >> 16 & 0xff);
          put_byte(s, strm.total_in >> 24 & 0xff);
        } else {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 0xffff);
        }

        flush_pending(strm);
        /* If avail_out is zero, the application will call deflate again
         * to flush the rest.
         */

        if (s.wrap > 0) {
          s.wrap = -s.wrap;
        }
        /* write the trailer only once! */


        return s.pending !== 0 ? Z_OK : Z_STREAM_END;
      }

      function deflateEnd(strm) {
        var status;

        if (!strm
        /*== Z_NULL*/
        || !strm.state
        /*== Z_NULL*/
        ) {
            return Z_STREAM_ERROR;
          }

        status = strm.state.status;

        if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
          return err(strm, Z_STREAM_ERROR);
        }

        strm.state = null;
        return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
      }
      /* =========================================================================
       * Copy the source state to the destination state
       */
      //function deflateCopy(dest, source) {
      //
      //}


      exports.deflateInit = deflateInit;
      exports.deflateInit2 = deflateInit2;
      exports.deflateReset = deflateReset;
      exports.deflateResetKeep = deflateResetKeep;
      exports.deflateSetHeader = deflateSetHeader;
      exports.deflate = deflate;
      exports.deflateEnd = deflateEnd;
      exports.deflateInfo = 'pako deflate (from Nodeca project)';
      /* Not implemented
      exports.deflateBound = deflateBound;
      exports.deflateCopy = deflateCopy;
      exports.deflateSetDictionary = deflateSetDictionary;
      exports.deflateParams = deflateParams;
      exports.deflatePending = deflatePending;
      exports.deflatePrime = deflatePrime;
      exports.deflateTune = deflateTune;
      */
    }, {
      "../utils/common": 27,
      "./adler32": 29,
      "./crc32": 31,
      "./messages": 37,
      "./trees": 38
    }],
    33: [function (_dereq_, module, exports) {
      'use strict';

      function GZheader() {
        /* true if compressed data believed to be text */
        this.text = 0;
        /* modification time */

        this.time = 0;
        /* extra flags (not used when writing a gzip file) */

        this.xflags = 0;
        /* operating system */

        this.os = 0;
        /* pointer to extra field or Z_NULL if none */

        this.extra = null;
        /* extra field length (valid if extra != Z_NULL) */

        this.extra_len = 0; // Actually, we don't need it in JS,
        // but leave for few code modifications
        //
        // Setup limits is not necessary because in js we should not preallocate memory
        // for inflate use constant limit in 65536 bytes
        //

        /* space at extra (only when reading header) */
        // this.extra_max  = 0;

        /* pointer to zero-terminated file name or Z_NULL */

        this.name = '';
        /* space at name (only when reading header) */
        // this.name_max   = 0;

        /* pointer to zero-terminated comment or Z_NULL */

        this.comment = '';
        /* space at comment (only when reading header) */
        // this.comm_max   = 0;

        /* true if there was or will be a header crc */

        this.hcrc = 0;
        /* true when done reading gzip header (not used when writing a gzip file) */

        this.done = false;
      }

      module.exports = GZheader;
    }, {}],
    34: [function (_dereq_, module, exports) {
      'use strict'; // See state defs from inflate.js

      var BAD = 30;
      /* got a data error -- remain here until reset */

      var TYPE = 12;
      /* i: waiting for type bits, including last-flag bit */

      /*
         Decode literal, length, and distance codes and write out the resulting
         literal and match bytes until either not enough input or output is
         available, an end-of-block is encountered, or a data error is encountered.
         When large enough input and output buffers are supplied to inflate(), for
         example, a 16K input buffer and a 64K output buffer, more than 95% of the
         inflate execution time is spent in this routine.
      
         Entry assumptions:
      
              state.mode === LEN
              strm.avail_in >= 6
              strm.avail_out >= 258
              start >= strm.avail_out
              state.bits < 8
      
         On return, state.mode is one of:
      
              LEN -- ran out of enough output space or enough available input
              TYPE -- reached end of block code, inflate() to interpret next block
              BAD -- error in block data
      
         Notes:
      
          - The maximum input bits used by a length/distance pair is 15 bits for the
            length code, 5 bits for the length extra, 15 bits for the distance code,
            and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
            Therefore if strm.avail_in >= 6, then there is enough input to avoid
            checking for available input while decoding.
      
          - The maximum bytes that a single length/distance pair can output is 258
            bytes, which is the maximum length that can be coded.  inflate_fast()
            requires strm.avail_out >= 258 for each loop to avoid checking for
            output space.
       */

      module.exports = function inflate_fast(strm, start) {
        var state;

        var _in;
        /* local strm.input */


        var last;
        /* have enough input while in < last */

        var _out;
        /* local strm.output */


        var beg;
        /* inflate()'s initial strm.output */

        var end;
        /* while out < end, enough space available */
        //#ifdef INFLATE_STRICT

        var dmax;
        /* maximum distance from zlib header */
        //#endif

        var wsize;
        /* window size or zero if not using window */

        var whave;
        /* valid bytes in the window */

        var wnext;
        /* window write index */

        var window;
        /* allocated sliding window, if wsize != 0 */

        var hold;
        /* local strm.hold */

        var bits;
        /* local strm.bits */

        var lcode;
        /* local strm.lencode */

        var dcode;
        /* local strm.distcode */

        var lmask;
        /* mask for first level of length codes */

        var dmask;
        /* mask for first level of distance codes */

        var here;
        /* retrieved table entry */

        var op;
        /* code bits, operation, extra bits, or */

        /*  window position, window bytes to copy */

        var len;
        /* match length, unused bytes */

        var dist;
        /* match distance */

        var from;
        /* where to copy match from */

        var from_source;
        var input, output; // JS specific, because we have no pointers

        /* copy state to local variables */

        state = strm.state; //here = state.here;

        _in = strm.next_in;
        input = strm.input;
        last = _in + (strm.avail_in - 5);
        _out = strm.next_out;
        output = strm.output;
        beg = _out - (start - strm.avail_out);
        end = _out + (strm.avail_out - 257); //#ifdef INFLATE_STRICT

        dmax = state.dmax; //#endif

        wsize = state.wsize;
        whave = state.whave;
        wnext = state.wnext;
        window = state.window;
        hold = state.hold;
        bits = state.bits;
        lcode = state.lencode;
        dcode = state.distcode;
        lmask = (1 << state.lenbits) - 1;
        dmask = (1 << state.distbits) - 1;
        /* decode literals and length/distances until end-of-block or not enough
           input data or output space */

        top: do {
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }

          here = lcode[hold & lmask];

          dolen: for (;;) {
            // Goto emulation
            op = here >>> 24
            /*here.bits*/
            ;
            hold >>>= op;
            bits -= op;
            op = here >>> 16 & 0xff
            /*here.op*/
            ;

            if (op === 0) {
              /* literal */
              //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
              //        "inflate:         literal '%c'\n" :
              //        "inflate:         literal 0x%02x\n", here.val));
              output[_out++] = here & 0xffff
              /*here.val*/
              ;
            } else if (op & 16) {
              /* length base */
              len = here & 0xffff
              /*here.val*/
              ;
              op &= 15;
              /* number of extra bits */

              if (op) {
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }

                len += hold & (1 << op) - 1;
                hold >>>= op;
                bits -= op;
              } //Tracevv((stderr, "inflate:         length %u\n", len));


              if (bits < 15) {
                hold += input[_in++] << bits;
                bits += 8;
                hold += input[_in++] << bits;
                bits += 8;
              }

              here = dcode[hold & dmask];

              dodist: for (;;) {
                // goto emulation
                op = here >>> 24
                /*here.bits*/
                ;
                hold >>>= op;
                bits -= op;
                op = here >>> 16 & 0xff
                /*here.op*/
                ;

                if (op & 16) {
                  /* distance base */
                  dist = here & 0xffff
                  /*here.val*/
                  ;
                  op &= 15;
                  /* number of extra bits */

                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;

                    if (bits < op) {
                      hold += input[_in++] << bits;
                      bits += 8;
                    }
                  }

                  dist += hold & (1 << op) - 1; //#ifdef INFLATE_STRICT

                  if (dist > dmax) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD;
                    break top;
                  } //#endif


                  hold >>>= op;
                  bits -= op; //Tracevv((stderr, "inflate:         distance %u\n", dist));

                  op = _out - beg;
                  /* max distance in output */

                  if (dist > op) {
                    /* see if copy from window */
                    op = dist - op;
                    /* distance back in window */

                    if (op > whave) {
                      if (state.sane) {
                        strm.msg = 'invalid distance too far back';
                        state.mode = BAD;
                        break top;
                      } // (!) This block is disabled in zlib defailts,
                      // don't enable it for binary compatibility
                      //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                      //                if (len <= op - whave) {
                      //                  do {
                      //                    output[_out++] = 0;
                      //                  } while (--len);
                      //                  continue top;
                      //                }
                      //                len -= op - whave;
                      //                do {
                      //                  output[_out++] = 0;
                      //                } while (--op > whave);
                      //                if (op === 0) {
                      //                  from = _out - dist;
                      //                  do {
                      //                    output[_out++] = output[from++];
                      //                  } while (--len);
                      //                  continue top;
                      //                }
                      //#endif

                    }

                    from = 0; // window index

                    from_source = window;

                    if (wnext === 0) {
                      /* very common case */
                      from += wsize - op;

                      if (op < len) {
                        /* some from window */
                        len -= op;

                        do {
                          output[_out++] = window[from++];
                        } while (--op);

                        from = _out - dist;
                        /* rest from output */

                        from_source = output;
                      }
                    } else if (wnext < op) {
                      /* wrap around window */
                      from += wsize + wnext - op;
                      op -= wnext;

                      if (op < len) {
                        /* some from end of window */
                        len -= op;

                        do {
                          output[_out++] = window[from++];
                        } while (--op);

                        from = 0;

                        if (wnext < len) {
                          /* some from start of window */
                          op = wnext;
                          len -= op;

                          do {
                            output[_out++] = window[from++];
                          } while (--op);

                          from = _out - dist;
                          /* rest from output */

                          from_source = output;
                        }
                      }
                    } else {
                      /* contiguous in window */
                      from += wnext - op;

                      if (op < len) {
                        /* some from window */
                        len -= op;

                        do {
                          output[_out++] = window[from++];
                        } while (--op);

                        from = _out - dist;
                        /* rest from output */

                        from_source = output;
                      }
                    }

                    while (len > 2) {
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      len -= 3;
                    }

                    if (len) {
                      output[_out++] = from_source[from++];

                      if (len > 1) {
                        output[_out++] = from_source[from++];
                      }
                    }
                  } else {
                    from = _out - dist;
                    /* copy direct from output */

                    do {
                      /* minimum length is three */
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      len -= 3;
                    } while (len > 2);

                    if (len) {
                      output[_out++] = output[from++];

                      if (len > 1) {
                        output[_out++] = output[from++];
                      }
                    }
                  }
                } else if ((op & 64) === 0) {
                  /* 2nd level distance code */
                  here = dcode[(here & 0xffff) + (
                  /*here.val*/
                  hold & (1 << op) - 1)];
                  continue dodist;
                } else {
                  strm.msg = 'invalid distance code';
                  state.mode = BAD;
                  break top;
                }

                break; // need to emulate goto via "continue"
              }
            } else if ((op & 64) === 0) {
              /* 2nd level length code */
              here = lcode[(here & 0xffff) + (
              /*here.val*/
              hold & (1 << op) - 1)];
              continue dolen;
            } else if (op & 32) {
              /* end-of-block */
              //Tracevv((stderr, "inflate:         end of block\n"));
              state.mode = TYPE;
              break top;
            } else {
              strm.msg = 'invalid literal/length code';
              state.mode = BAD;
              break top;
            }

            break; // need to emulate goto via "continue"
          }
        } while (_in < last && _out < end);
        /* return unused bytes (on entry, bits < 8, so in won't go too far back) */


        len = bits >> 3;
        _in -= len;
        bits -= len << 3;
        hold &= (1 << bits) - 1;
        /* update state and return */

        strm.next_in = _in;
        strm.next_out = _out;
        strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
        strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
        state.hold = hold;
        state.bits = bits;
        return;
      };
    }, {}],
    35: [function (_dereq_, module, exports) {
      'use strict';

      var utils = _dereq_('../utils/common');

      var adler32 = _dereq_('./adler32');

      var crc32 = _dereq_('./crc32');

      var inflate_fast = _dereq_('./inffast');

      var inflate_table = _dereq_('./inftrees');

      var CODES = 0;
      var LENS = 1;
      var DISTS = 2;
      /* Public constants ==========================================================*/

      /* ===========================================================================*/

      /* Allowed flush values; see deflate() and inflate() below for details */
      //var Z_NO_FLUSH      = 0;
      //var Z_PARTIAL_FLUSH = 1;
      //var Z_SYNC_FLUSH    = 2;
      //var Z_FULL_FLUSH    = 3;

      var Z_FINISH = 4;
      var Z_BLOCK = 5;
      var Z_TREES = 6;
      /* Return codes for the compression/decompression functions. Negative values
       * are errors, positive values are used for special but normal events.
       */

      var Z_OK = 0;
      var Z_STREAM_END = 1;
      var Z_NEED_DICT = 2; //var Z_ERRNO         = -1;

      var Z_STREAM_ERROR = -2;
      var Z_DATA_ERROR = -3;
      var Z_MEM_ERROR = -4;
      var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;

      /* The deflate compression method */

      var Z_DEFLATED = 8;
      /* STATES ====================================================================*/

      /* ===========================================================================*/

      var HEAD = 1;
      /* i: waiting for magic header */

      var FLAGS = 2;
      /* i: waiting for method and flags (gzip) */

      var TIME = 3;
      /* i: waiting for modification time (gzip) */

      var OS = 4;
      /* i: waiting for extra flags and operating system (gzip) */

      var EXLEN = 5;
      /* i: waiting for extra length (gzip) */

      var EXTRA = 6;
      /* i: waiting for extra bytes (gzip) */

      var NAME = 7;
      /* i: waiting for end of file name (gzip) */

      var COMMENT = 8;
      /* i: waiting for end of comment (gzip) */

      var HCRC = 9;
      /* i: waiting for header crc (gzip) */

      var DICTID = 10;
      /* i: waiting for dictionary check value */

      var DICT = 11;
      /* waiting for inflateSetDictionary() call */

      var TYPE = 12;
      /* i: waiting for type bits, including last-flag bit */

      var TYPEDO = 13;
      /* i: same, but skip check to exit inflate on new block */

      var STORED = 14;
      /* i: waiting for stored size (length and complement) */

      var COPY_ = 15;
      /* i/o: same as COPY below, but only first time in */

      var COPY = 16;
      /* i/o: waiting for input or output to copy stored block */

      var TABLE = 17;
      /* i: waiting for dynamic block table lengths */

      var LENLENS = 18;
      /* i: waiting for code length code lengths */

      var CODELENS = 19;
      /* i: waiting for length/lit and distance code lengths */

      var LEN_ = 20;
      /* i: same as LEN below, but only first time in */

      var LEN = 21;
      /* i: waiting for length/lit/eob code */

      var LENEXT = 22;
      /* i: waiting for length extra bits */

      var DIST = 23;
      /* i: waiting for distance code */

      var DISTEXT = 24;
      /* i: waiting for distance extra bits */

      var MATCH = 25;
      /* o: waiting for output space to copy string */

      var LIT = 26;
      /* o: waiting for output space to write literal */

      var CHECK = 27;
      /* i: waiting for 32-bit check value */

      var LENGTH = 28;
      /* i: waiting for 32-bit length (gzip) */

      var DONE = 29;
      /* finished check, done -- remain here until reset */

      var BAD = 30;
      /* got a data error -- remain here until reset */

      var MEM = 31;
      /* got an inflate() memory error -- remain here until reset */

      var SYNC = 32;
      /* looking for synchronization bytes to restart inflate() */

      /* ===========================================================================*/

      var ENOUGH_LENS = 852;
      var ENOUGH_DISTS = 592; //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

      var MAX_WBITS = 15;
      /* 32K LZ77 window */

      var DEF_WBITS = MAX_WBITS;

      function ZSWAP32(q) {
        return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
      }

      function InflateState() {
        this.mode = 0;
        /* current inflate mode */

        this.last = false;
        /* true if processing last block */

        this.wrap = 0;
        /* bit 0 true for zlib, bit 1 true for gzip */

        this.havedict = false;
        /* true if dictionary provided */

        this.flags = 0;
        /* gzip header method and flags (0 if zlib) */

        this.dmax = 0;
        /* zlib header max distance (INFLATE_STRICT) */

        this.check = 0;
        /* protected copy of check value */

        this.total = 0;
        /* protected copy of output count */
        // TODO: may be {}

        this.head = null;
        /* where to save gzip header information */

        /* sliding window */

        this.wbits = 0;
        /* log base 2 of requested window size */

        this.wsize = 0;
        /* window size or zero if not using window */

        this.whave = 0;
        /* valid bytes in the window */

        this.wnext = 0;
        /* window write index */

        this.window = null;
        /* allocated sliding window, if needed */

        /* bit accumulator */

        this.hold = 0;
        /* input bit accumulator */

        this.bits = 0;
        /* number of bits in "in" */

        /* for string and stored block copying */

        this.length = 0;
        /* literal or length of data to copy */

        this.offset = 0;
        /* distance back to copy string from */

        /* for table and code decoding */

        this.extra = 0;
        /* extra bits needed */

        /* fixed and dynamic code tables */

        this.lencode = null;
        /* starting table for length/literal codes */

        this.distcode = null;
        /* starting table for distance codes */

        this.lenbits = 0;
        /* index bits for lencode */

        this.distbits = 0;
        /* index bits for distcode */

        /* dynamic table building */

        this.ncode = 0;
        /* number of code length code lengths */

        this.nlen = 0;
        /* number of length code lengths */

        this.ndist = 0;
        /* number of distance code lengths */

        this.have = 0;
        /* number of code lengths in lens[] */

        this.next = null;
        /* next available space in codes[] */

        this.lens = new utils.Buf16(320);
        /* temporary storage for code lengths */

        this.work = new utils.Buf16(288);
        /* work area for code table building */

        /*
         because we don't have pointers in js, we use lencode and distcode directly
         as buffers so we don't need codes
        */
        //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */

        this.lendyn = null;
        /* dynamic table for length/literal codes (JS specific) */

        this.distdyn = null;
        /* dynamic table for distance codes (JS specific) */

        this.sane = 0;
        /* if false, allow invalid distance too far */

        this.back = 0;
        /* bits back of last unprocessed length/lit */

        this.was = 0;
        /* initial length of match */
      }

      function inflateResetKeep(strm) {
        var state;

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;
        strm.total_in = strm.total_out = state.total = 0;
        strm.msg = '';
        /*Z_NULL*/

        if (state.wrap) {
          /* to support ill-conceived Java test suite */
          strm.adler = state.wrap & 1;
        }

        state.mode = HEAD;
        state.last = 0;
        state.havedict = 0;
        state.dmax = 32768;
        state.head = null
        /*Z_NULL*/
        ;
        state.hold = 0;
        state.bits = 0; //state.lencode = state.distcode = state.next = state.codes;

        state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
        state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
        state.sane = 1;
        state.back = -1; //Tracev((stderr, "inflate: reset\n"));

        return Z_OK;
      }

      function inflateReset(strm) {
        var state;

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;
        state.wsize = 0;
        state.whave = 0;
        state.wnext = 0;
        return inflateResetKeep(strm);
      }

      function inflateReset2(strm, windowBits) {
        var wrap;
        var state;
        /* get the state */

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;
        /* extract wrap request from windowBits parameter */

        if (windowBits < 0) {
          wrap = 0;
          windowBits = -windowBits;
        } else {
          wrap = (windowBits >> 4) + 1;

          if (windowBits < 48) {
            windowBits &= 15;
          }
        }
        /* set number of window bits, free window if different */


        if (windowBits && (windowBits < 8 || windowBits > 15)) {
          return Z_STREAM_ERROR;
        }

        if (state.window !== null && state.wbits !== windowBits) {
          state.window = null;
        }
        /* update state and reset the rest of it */


        state.wrap = wrap;
        state.wbits = windowBits;
        return inflateReset(strm);
      }

      function inflateInit2(strm, windowBits) {
        var ret;
        var state;

        if (!strm) {
          return Z_STREAM_ERROR;
        } //strm.msg = Z_NULL;                 /* in case we return an error */


        state = new InflateState(); //if (state === Z_NULL) return Z_MEM_ERROR;
        //Tracev((stderr, "inflate: allocated\n"));

        strm.state = state;
        state.window = null
        /*Z_NULL*/
        ;
        ret = inflateReset2(strm, windowBits);

        if (ret !== Z_OK) {
          strm.state = null
          /*Z_NULL*/
          ;
        }

        return ret;
      }

      function inflateInit(strm) {
        return inflateInit2(strm, DEF_WBITS);
      }
      /*
       Return state with length and distance decoding tables and index sizes set to
       fixed code decoding.  Normally this returns fixed tables from inffixed.h.
       If BUILDFIXED is defined, then instead this routine builds the tables the
       first time it's called, and returns those tables the first time and
       thereafter.  This reduces the size of the code by about 2K bytes, in
       exchange for a little execution time.  However, BUILDFIXED should not be
       used for threaded applications, since the rewriting of the tables and virgin
       may not be thread-safe.
       */


      var virgin = true;
      var lenfix, distfix; // We have no pointers in JS, so keep tables separate

      function fixedtables(state) {
        /* build fixed huffman tables if first call (may not be thread safe) */
        if (virgin) {
          var sym;
          lenfix = new utils.Buf32(512);
          distfix = new utils.Buf32(32);
          /* literal/length table */

          sym = 0;

          while (sym < 144) {
            state.lens[sym++] = 8;
          }

          while (sym < 256) {
            state.lens[sym++] = 9;
          }

          while (sym < 280) {
            state.lens[sym++] = 7;
          }

          while (sym < 288) {
            state.lens[sym++] = 8;
          }

          inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
            bits: 9
          });
          /* distance table */

          sym = 0;

          while (sym < 32) {
            state.lens[sym++] = 5;
          }

          inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
            bits: 5
          });
          /* do this just once */

          virgin = false;
        }

        state.lencode = lenfix;
        state.lenbits = 9;
        state.distcode = distfix;
        state.distbits = 5;
      }
      /*
       Update the window with the last wsize (normally 32K) bytes written before
       returning.  If window does not exist yet, create it.  This is only called
       when a window is already in use, or when output has been written during this
       inflate call, but the end of the deflate stream has not been reached yet.
       It is also called to create a window for dictionary data when a dictionary
       is loaded.
      
       Providing output buffers larger than 32K to inflate() should provide a speed
       advantage, since only the last 32K of output is copied to the sliding window
       upon return from inflate(), and since all distances after the first 32K of
       output will fall in the output data, making match copies simpler and faster.
       The advantage may be dependent on the size of the processor's data caches.
       */


      function updatewindow(strm, src, end, copy) {
        var dist;
        var state = strm.state;
        /* if it hasn't been done already, allocate space for the window */

        if (state.window === null) {
          state.wsize = 1 << state.wbits;
          state.wnext = 0;
          state.whave = 0;
          state.window = new utils.Buf8(state.wsize);
        }
        /* copy state->wsize or less output bytes into the circular window */


        if (copy >= state.wsize) {
          utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
          state.wnext = 0;
          state.whave = state.wsize;
        } else {
          dist = state.wsize - state.wnext;

          if (dist > copy) {
            dist = copy;
          } //zmemcpy(state->window + state->wnext, end - copy, dist);


          utils.arraySet(state.window, src, end - copy, dist, state.wnext);
          copy -= dist;

          if (copy) {
            //zmemcpy(state->window, end - copy, copy);
            utils.arraySet(state.window, src, end - copy, copy, 0);
            state.wnext = copy;
            state.whave = state.wsize;
          } else {
            state.wnext += dist;

            if (state.wnext === state.wsize) {
              state.wnext = 0;
            }

            if (state.whave < state.wsize) {
              state.whave += dist;
            }
          }
        }

        return 0;
      }

      function inflate(strm, flush) {
        var state;
        var input, output; // input/output buffers

        var next;
        /* next input INDEX */

        var put;
        /* next output INDEX */

        var have, left;
        /* available input and output */

        var hold;
        /* bit buffer */

        var bits;
        /* bits in bit buffer */

        var _in, _out;
        /* save starting available input and output */


        var copy;
        /* number of stored or match bytes to copy */

        var from;
        /* where to copy match bytes from */

        var from_source;
        var here = 0;
        /* current decoding table entry */

        var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
        //var last;                   /* parent table entry */

        var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)

        var len;
        /* length to copy for repeats, bits to drop */

        var ret;
        /* return code */

        var hbuf = new utils.Buf8(4);
        /* buffer for gzip header crc calculation */

        var opts;
        var n; // temporary var for NEED_BITS

        var order =
        /* permutation of code lengths */
        [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

        if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;

        if (state.mode === TYPE) {
          state.mode = TYPEDO;
        }
        /* skip check */
        //--- LOAD() ---


        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits; //---

        _in = have;
        _out = left;
        ret = Z_OK;

        inf_leave: // goto emulation
        for (;;) {
          switch (state.mode) {
            case HEAD:
              if (state.wrap === 0) {
                state.mode = TYPEDO;
                break;
              } //=== NEEDBITS(16);


              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if (state.wrap & 2 && hold === 0x8b1f) {
                /* gzip header */
                state.check = 0
                /*crc32(0L, Z_NULL, 0)*/
                ; //=== CRC2(state.check, hold);

                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0); //===//
                //=== INITBITS();

                hold = 0;
                bits = 0; //===//

                state.mode = FLAGS;
                break;
              }

              state.flags = 0;
              /* expect zlib header */

              if (state.head) {
                state.head.done = false;
              }

              if (!(state.wrap & 1) ||
              /* check if zlib header allowed */
              (((hold & 0xff) <<
              /*BITS(8)*/
              8) + (hold >> 8)) % 31) {
                strm.msg = 'incorrect header check';
                state.mode = BAD;
                break;
              }

              if ((hold & 0x0f) !==
              /*BITS(4)*/
              Z_DEFLATED) {
                strm.msg = 'unknown compression method';
                state.mode = BAD;
                break;
              } //--- DROPBITS(4) ---//


              hold >>>= 4;
              bits -= 4; //---//

              len = (hold & 0x0f) +
              /*BITS(4)*/
              8;

              if (state.wbits === 0) {
                state.wbits = len;
              } else if (len > state.wbits) {
                strm.msg = 'invalid window size';
                state.mode = BAD;
                break;
              }

              state.dmax = 1 << len; //Tracev((stderr, "inflate:   zlib header ok\n"));

              strm.adler = state.check = 1
              /*adler32(0L, Z_NULL, 0)*/
              ;
              state.mode = hold & 0x200 ? DICTID : TYPE; //=== INITBITS();

              hold = 0;
              bits = 0; //===//

              break;

            case FLAGS:
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              state.flags = hold;

              if ((state.flags & 0xff) !== Z_DEFLATED) {
                strm.msg = 'unknown compression method';
                state.mode = BAD;
                break;
              }

              if (state.flags & 0xe000) {
                strm.msg = 'unknown header flags set';
                state.mode = BAD;
                break;
              }

              if (state.head) {
                state.head.text = hold >> 8 & 1;
              }

              if (state.flags & 0x0200) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0); //===//
              } //=== INITBITS();


              hold = 0;
              bits = 0; //===//

              state.mode = TIME;

            /* falls through */

            case TIME:
              //=== NEEDBITS(32); */
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if (state.head) {
                state.head.time = hold;
              }

              if (state.flags & 0x0200) {
                //=== CRC4(state.check, hold)
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                hbuf[2] = hold >>> 16 & 0xff;
                hbuf[3] = hold >>> 24 & 0xff;
                state.check = crc32(state.check, hbuf, 4, 0); //===
              } //=== INITBITS();


              hold = 0;
              bits = 0; //===//

              state.mode = OS;

            /* falls through */

            case OS:
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if (state.head) {
                state.head.xflags = hold & 0xff;
                state.head.os = hold >> 8;
              }

              if (state.flags & 0x0200) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0); //===//
              } //=== INITBITS();


              hold = 0;
              bits = 0; //===//

              state.mode = EXLEN;

            /* falls through */

            case EXLEN:
              if (state.flags & 0x0400) {
                //=== NEEDBITS(16); */
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.length = hold;

                if (state.head) {
                  state.head.extra_len = hold;
                }

                if (state.flags & 0x0200) {
                  //=== CRC2(state.check, hold);
                  hbuf[0] = hold & 0xff;
                  hbuf[1] = hold >>> 8 & 0xff;
                  state.check = crc32(state.check, hbuf, 2, 0); //===//
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
              } else if (state.head) {
                state.head.extra = null
                /*Z_NULL*/
                ;
              }

              state.mode = EXTRA;

            /* falls through */

            case EXTRA:
              if (state.flags & 0x0400) {
                copy = state.length;

                if (copy > have) {
                  copy = have;
                }

                if (copy) {
                  if (state.head) {
                    len = state.head.extra_len - state.length;

                    if (!state.head.extra) {
                      // Use untyped array for more conveniend processing later
                      state.head.extra = new Array(state.head.extra_len);
                    }

                    utils.arraySet(state.head.extra, input, next, // extra field is limited to 65536 bytes
                    // - no need for additional size check
                    copy,
                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                    len); //zmemcpy(state.head.extra + len, next,
                    //        len + copy > state.head.extra_max ?
                    //        state.head.extra_max - len : copy);
                  }

                  if (state.flags & 0x0200) {
                    state.check = crc32(state.check, input, copy, next);
                  }

                  have -= copy;
                  next += copy;
                  state.length -= copy;
                }

                if (state.length) {
                  break inf_leave;
                }
              }

              state.length = 0;
              state.mode = NAME;

            /* falls through */

            case NAME:
              if (state.flags & 0x0800) {
                if (have === 0) {
                  break inf_leave;
                }

                copy = 0;

                do {
                  // TODO: 2 or 1 bytes?
                  len = input[next + copy++];
                  /* use constant limit because in js we should not preallocate memory */

                  if (state.head && len && state.length < 65536
                  /*state.head.name_max*/
                  ) {
                    state.head.name += String.fromCharCode(len);
                  }
                } while (len && copy < have);

                if (state.flags & 0x0200) {
                  state.check = crc32(state.check, input, copy, next);
                }

                have -= copy;
                next += copy;

                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.name = null;
              }

              state.length = 0;
              state.mode = COMMENT;

            /* falls through */

            case COMMENT:
              if (state.flags & 0x1000) {
                if (have === 0) {
                  break inf_leave;
                }

                copy = 0;

                do {
                  len = input[next + copy++];
                  /* use constant limit because in js we should not preallocate memory */

                  if (state.head && len && state.length < 65536
                  /*state.head.comm_max*/
                  ) {
                    state.head.comment += String.fromCharCode(len);
                  }
                } while (len && copy < have);

                if (state.flags & 0x0200) {
                  state.check = crc32(state.check, input, copy, next);
                }

                have -= copy;
                next += copy;

                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.comment = null;
              }

              state.mode = HCRC;

            /* falls through */

            case HCRC:
              if (state.flags & 0x0200) {
                //=== NEEDBITS(16); */
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                if (hold !== (state.check & 0xffff)) {
                  strm.msg = 'header crc mismatch';
                  state.mode = BAD;
                  break;
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
              }

              if (state.head) {
                state.head.hcrc = state.flags >> 9 & 1;
                state.head.done = true;
              }

              strm.adler = state.check = 0
              /*crc32(0L, Z_NULL, 0)*/
              ;
              state.mode = TYPE;
              break;

            case DICTID:
              //=== NEEDBITS(32); */
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              strm.adler = state.check = ZSWAP32(hold); //=== INITBITS();

              hold = 0;
              bits = 0; //===//

              state.mode = DICT;

            /* falls through */

            case DICT:
              if (state.havedict === 0) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits; //---

                return Z_NEED_DICT;
              }

              strm.adler = state.check = 1
              /*adler32(0L, Z_NULL, 0)*/
              ;
              state.mode = TYPE;

            /* falls through */

            case TYPE:
              if (flush === Z_BLOCK || flush === Z_TREES) {
                break inf_leave;
              }

            /* falls through */

            case TYPEDO:
              if (state.last) {
                //--- BYTEBITS() ---//
                hold >>>= bits & 7;
                bits -= bits & 7; //---//

                state.mode = CHECK;
                break;
              } //=== NEEDBITS(3); */


              while (bits < 3) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              state.last = hold & 0x01
              /*BITS(1)*/
              ; //--- DROPBITS(1) ---//

              hold >>>= 1;
              bits -= 1; //---//

              switch (hold & 0x03) {
                /*BITS(2)*/
                case 0:
                  /* stored block */
                  //Tracev((stderr, "inflate:     stored block%s\n",
                  //        state.last ? " (last)" : ""));
                  state.mode = STORED;
                  break;

                case 1:
                  /* fixed block */
                  fixedtables(state); //Tracev((stderr, "inflate:     fixed codes block%s\n",
                  //        state.last ? " (last)" : ""));

                  state.mode = LEN_;
                  /* decode codes */

                  if (flush === Z_TREES) {
                    //--- DROPBITS(2) ---//
                    hold >>>= 2;
                    bits -= 2; //---//

                    break inf_leave;
                  }

                  break;

                case 2:
                  /* dynamic block */
                  //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                  //        state.last ? " (last)" : ""));
                  state.mode = TABLE;
                  break;

                case 3:
                  strm.msg = 'invalid block type';
                  state.mode = BAD;
              } //--- DROPBITS(2) ---//


              hold >>>= 2;
              bits -= 2; //---//

              break;

            case STORED:
              //--- BYTEBITS() ---// /* go to byte boundary */
              hold >>>= bits & 7;
              bits -= bits & 7; //---//
              //=== NEEDBITS(32); */

              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
                strm.msg = 'invalid stored block lengths';
                state.mode = BAD;
                break;
              }

              state.length = hold & 0xffff; //Tracev((stderr, "inflate:       stored length %u\n",
              //        state.length));
              //=== INITBITS();

              hold = 0;
              bits = 0; //===//

              state.mode = COPY_;

              if (flush === Z_TREES) {
                break inf_leave;
              }

            /* falls through */

            case COPY_:
              state.mode = COPY;

            /* falls through */

            case COPY:
              copy = state.length;

              if (copy) {
                if (copy > have) {
                  copy = have;
                }

                if (copy > left) {
                  copy = left;
                }

                if (copy === 0) {
                  break inf_leave;
                } //--- zmemcpy(put, next, copy); ---


                utils.arraySet(output, input, next, copy, put); //---//

                have -= copy;
                next += copy;
                left -= copy;
                put += copy;
                state.length -= copy;
                break;
              } //Tracev((stderr, "inflate:       stored end\n"));


              state.mode = TYPE;
              break;

            case TABLE:
              //=== NEEDBITS(14); */
              while (bits < 14) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              state.nlen = (hold & 0x1f) +
              /*BITS(5)*/
              257; //--- DROPBITS(5) ---//

              hold >>>= 5;
              bits -= 5; //---//

              state.ndist = (hold & 0x1f) +
              /*BITS(5)*/
              1; //--- DROPBITS(5) ---//

              hold >>>= 5;
              bits -= 5; //---//

              state.ncode = (hold & 0x0f) +
              /*BITS(4)*/
              4; //--- DROPBITS(4) ---//

              hold >>>= 4;
              bits -= 4; //---//
              //#ifndef PKZIP_BUG_WORKAROUND

              if (state.nlen > 286 || state.ndist > 30) {
                strm.msg = 'too many length or distance symbols';
                state.mode = BAD;
                break;
              } //#endif
              //Tracev((stderr, "inflate:       table sizes ok\n"));


              state.have = 0;
              state.mode = LENLENS;

            /* falls through */

            case LENLENS:
              while (state.have < state.ncode) {
                //=== NEEDBITS(3);
                while (bits < 3) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
                //--- DROPBITS(3) ---//

                hold >>>= 3;
                bits -= 3; //---//
              }

              while (state.have < 19) {
                state.lens[order[state.have++]] = 0;
              } // We have separate tables & no pointers. 2 commented lines below not needed.
              //state.next = state.codes;
              //state.lencode = state.next;
              // Switch to use dynamic table


              state.lencode = state.lendyn;
              state.lenbits = 7;
              opts = {
                bits: state.lenbits
              };
              ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
              state.lenbits = opts.bits;

              if (ret) {
                strm.msg = 'invalid code lengths set';
                state.mode = BAD;
                break;
              } //Tracev((stderr, "inflate:       code lengths ok\n"));


              state.have = 0;
              state.mode = CODELENS;

            /* falls through */

            case CODELENS:
              while (state.have < state.nlen + state.ndist) {
                for (;;) {
                  here = state.lencode[hold & (1 << state.lenbits) - 1];
                  /*BITS(state.lenbits)*/

                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 0xff;
                  here_val = here & 0xffff;

                  if (here_bits <= bits) {
                    break;
                  } //--- PULLBYTE() ---//


                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8; //---//
                }

                if (here_val < 16) {
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits; //---//

                  state.lens[state.have++] = here_val;
                } else {
                  if (here_val === 16) {
                    //=== NEEDBITS(here.bits + 2);
                    n = here_bits + 2;

                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//
                    //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    if (state.have === 0) {
                      strm.msg = 'invalid bit length repeat';
                      state.mode = BAD;
                      break;
                    }

                    len = state.lens[state.have - 1];
                    copy = 3 + (hold & 0x03); //BITS(2);
                    //--- DROPBITS(2) ---//

                    hold >>>= 2;
                    bits -= 2; //---//
                  } else if (here_val === 17) {
                    //=== NEEDBITS(here.bits + 3);
                    n = here_bits + 3;

                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//
                    //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    len = 0;
                    copy = 3 + (hold & 0x07); //BITS(3);
                    //--- DROPBITS(3) ---//

                    hold >>>= 3;
                    bits -= 3; //---//
                  } else {
                    //=== NEEDBITS(here.bits + 7);
                    n = here_bits + 7;

                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//
                    //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    len = 0;
                    copy = 11 + (hold & 0x7f); //BITS(7);
                    //--- DROPBITS(7) ---//

                    hold >>>= 7;
                    bits -= 7; //---//
                  }

                  if (state.have + copy > state.nlen + state.ndist) {
                    strm.msg = 'invalid bit length repeat';
                    state.mode = BAD;
                    break;
                  }

                  while (copy--) {
                    state.lens[state.have++] = len;
                  }
                }
              }
              /* handle error breaks in while */


              if (state.mode === BAD) {
                break;
              }
              /* check for end-of-block code (better have one) */


              if (state.lens[256] === 0) {
                strm.msg = 'invalid code -- missing end-of-block';
                state.mode = BAD;
                break;
              }
              /* build code tables -- note: do not change the lenbits or distbits
                 values here (9 and 6) without reading the comments in inftrees.h
                 concerning the ENOUGH constants, which depend on those values */


              state.lenbits = 9;
              opts = {
                bits: state.lenbits
              };
              ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
              // state.next_index = opts.table_index;

              state.lenbits = opts.bits; // state.lencode = state.next;

              if (ret) {
                strm.msg = 'invalid literal/lengths set';
                state.mode = BAD;
                break;
              }

              state.distbits = 6; //state.distcode.copy(state.codes);
              // Switch to use dynamic table

              state.distcode = state.distdyn;
              opts = {
                bits: state.distbits
              };
              ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
              // state.next_index = opts.table_index;

              state.distbits = opts.bits; // state.distcode = state.next;

              if (ret) {
                strm.msg = 'invalid distances set';
                state.mode = BAD;
                break;
              } //Tracev((stderr, 'inflate:       codes ok\n'));


              state.mode = LEN_;

              if (flush === Z_TREES) {
                break inf_leave;
              }

            /* falls through */

            case LEN_:
              state.mode = LEN;

            /* falls through */

            case LEN:
              if (have >= 6 && left >= 258) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits; //---

                inflate_fast(strm, _out); //--- LOAD() ---

                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state.hold;
                bits = state.bits; //---

                if (state.mode === TYPE) {
                  state.back = -1;
                }

                break;
              }

              state.back = 0;

              for (;;) {
                here = state.lencode[hold & (1 << state.lenbits) - 1];
                /*BITS(state.lenbits)*/

                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;

                if (here_bits <= bits) {
                  break;
                } //--- PULLBYTE() ---//


                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8; //---//
              }

              if (here_op && (here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;

                for (;;) {
                  here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
                  /*BITS(last.bits + last.op)*/
                  last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 0xff;
                  here_val = here & 0xffff;

                  if (last_bits + here_bits <= bits) {
                    break;
                  } //--- PULLBYTE() ---//


                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8; //---//
                } //--- DROPBITS(last.bits) ---//


                hold >>>= last_bits;
                bits -= last_bits; //---//

                state.back += last_bits;
              } //--- DROPBITS(here.bits) ---//


              hold >>>= here_bits;
              bits -= here_bits; //---//

              state.back += here_bits;
              state.length = here_val;

              if (here_op === 0) {
                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                //        "inflate:         literal '%c'\n" :
                //        "inflate:         literal 0x%02x\n", here.val));
                state.mode = LIT;
                break;
              }

              if (here_op & 32) {
                //Tracevv((stderr, "inflate:         end of block\n"));
                state.back = -1;
                state.mode = TYPE;
                break;
              }

              if (here_op & 64) {
                strm.msg = 'invalid literal/length code';
                state.mode = BAD;
                break;
              }

              state.extra = here_op & 15;
              state.mode = LENEXT;

            /* falls through */

            case LENEXT:
              if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;

                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.length += hold & (1 << state.extra) - 1
                /*BITS(state.extra)*/
                ; //--- DROPBITS(state.extra) ---//

                hold >>>= state.extra;
                bits -= state.extra; //---//

                state.back += state.extra;
              } //Tracevv((stderr, "inflate:         length %u\n", state.length));


              state.was = state.length;
              state.mode = DIST;

            /* falls through */

            case DIST:
              for (;;) {
                here = state.distcode[hold & (1 << state.distbits) - 1];
                /*BITS(state.distbits)*/

                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;

                if (here_bits <= bits) {
                  break;
                } //--- PULLBYTE() ---//


                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8; //---//
              }

              if ((here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;

                for (;;) {
                  here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
                  /*BITS(last.bits + last.op)*/
                  last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 0xff;
                  here_val = here & 0xffff;

                  if (last_bits + here_bits <= bits) {
                    break;
                  } //--- PULLBYTE() ---//


                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8; //---//
                } //--- DROPBITS(last.bits) ---//


                hold >>>= last_bits;
                bits -= last_bits; //---//

                state.back += last_bits;
              } //--- DROPBITS(here.bits) ---//


              hold >>>= here_bits;
              bits -= here_bits; //---//

              state.back += here_bits;

              if (here_op & 64) {
                strm.msg = 'invalid distance code';
                state.mode = BAD;
                break;
              }

              state.offset = here_val;
              state.extra = here_op & 15;
              state.mode = DISTEXT;

            /* falls through */

            case DISTEXT:
              if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;

                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.offset += hold & (1 << state.extra) - 1
                /*BITS(state.extra)*/
                ; //--- DROPBITS(state.extra) ---//

                hold >>>= state.extra;
                bits -= state.extra; //---//

                state.back += state.extra;
              } //#ifdef INFLATE_STRICT


              if (state.offset > state.dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD;
                break;
              } //#endif
              //Tracevv((stderr, "inflate:         distance %u\n", state.offset));


              state.mode = MATCH;

            /* falls through */

            case MATCH:
              if (left === 0) {
                break inf_leave;
              }

              copy = _out - left;

              if (state.offset > copy) {
                /* copy from window */
                copy = state.offset - copy;

                if (copy > state.whave) {
                  if (state.sane) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD;
                    break;
                  } // (!) This block is disabled in zlib defailts,
                  // don't enable it for binary compatibility
                  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                  //          Trace((stderr, "inflate.c too far\n"));
                  //          copy -= state.whave;
                  //          if (copy > state.length) { copy = state.length; }
                  //          if (copy > left) { copy = left; }
                  //          left -= copy;
                  //          state.length -= copy;
                  //          do {
                  //            output[put++] = 0;
                  //          } while (--copy);
                  //          if (state.length === 0) { state.mode = LEN; }
                  //          break;
                  //#endif

                }

                if (copy > state.wnext) {
                  copy -= state.wnext;
                  from = state.wsize - copy;
                } else {
                  from = state.wnext - copy;
                }

                if (copy > state.length) {
                  copy = state.length;
                }

                from_source = state.window;
              } else {
                /* copy from output */
                from_source = output;
                from = put - state.offset;
                copy = state.length;
              }

              if (copy > left) {
                copy = left;
              }

              left -= copy;
              state.length -= copy;

              do {
                output[put++] = from_source[from++];
              } while (--copy);

              if (state.length === 0) {
                state.mode = LEN;
              }

              break;

            case LIT:
              if (left === 0) {
                break inf_leave;
              }

              output[put++] = state.length;
              left--;
              state.mode = LEN;
              break;

            case CHECK:
              if (state.wrap) {
                //=== NEEDBITS(32);
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--; // Use '|' insdead of '+' to make sure that result is signed

                  hold |= input[next++] << bits;
                  bits += 8;
                } //===//


                _out -= left;
                strm.total_out += _out;
                state.total += _out;

                if (_out) {
                  strm.adler = state.check =
                  /*UPDATE(state.check, put - _out, _out);*/
                  state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
                }

                _out = left; // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too

                if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {
                  strm.msg = 'incorrect data check';
                  state.mode = BAD;
                  break;
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
                //Tracev((stderr, "inflate:   check matches trailer\n"));
              }

              state.mode = LENGTH;

            /* falls through */

            case LENGTH:
              if (state.wrap && state.flags) {
                //=== NEEDBITS(32);
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                if (hold !== (state.total & 0xffffffff)) {
                  strm.msg = 'incorrect length check';
                  state.mode = BAD;
                  break;
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
                //Tracev((stderr, "inflate:   length matches trailer\n"));
              }

              state.mode = DONE;

            /* falls through */

            case DONE:
              ret = Z_STREAM_END;
              break inf_leave;

            case BAD:
              ret = Z_DATA_ERROR;
              break inf_leave;

            case MEM:
              return Z_MEM_ERROR;

            case SYNC:
            /* falls through */

            default:
              return Z_STREAM_ERROR;
          }
        } // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

        /*
           Return from inflate(), updating the total counts and the check value.
           If there was no progress during the inflate() call, return a buffer
           error.  Call updatewindow() to create and/or update the window state.
           Note: a memory error from inflate() is non-recoverable.
         */
        //--- RESTORE() ---


        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits; //---

        if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
          if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
            state.mode = MEM;
            return Z_MEM_ERROR;
          }
        }

        _in -= strm.avail_in;
        _out -= strm.avail_out;
        strm.total_in += _in;
        strm.total_out += _out;
        state.total += _out;

        if (state.wrap && _out) {
          strm.adler = state.check =
          /*UPDATE(state.check, strm.next_out - _out, _out);*/
          state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
        }

        strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);

        if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
          ret = Z_BUF_ERROR;
        }

        return ret;
      }

      function inflateEnd(strm) {
        if (!strm || !strm.state
        /*|| strm->zfree == (free_func)0*/
        ) {
            return Z_STREAM_ERROR;
          }

        var state = strm.state;

        if (state.window) {
          state.window = null;
        }

        strm.state = null;
        return Z_OK;
      }

      function inflateGetHeader(strm, head) {
        var state;
        /* check state */

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;

        if ((state.wrap & 2) === 0) {
          return Z_STREAM_ERROR;
        }
        /* save header structure */


        state.head = head;
        head.done = false;
        return Z_OK;
      }

      exports.inflateReset = inflateReset;
      exports.inflateReset2 = inflateReset2;
      exports.inflateResetKeep = inflateResetKeep;
      exports.inflateInit = inflateInit;
      exports.inflateInit2 = inflateInit2;
      exports.inflate = inflate;
      exports.inflateEnd = inflateEnd;
      exports.inflateGetHeader = inflateGetHeader;
      exports.inflateInfo = 'pako inflate (from Nodeca project)';
      /* Not implemented
      exports.inflateCopy = inflateCopy;
      exports.inflateGetDictionary = inflateGetDictionary;
      exports.inflateMark = inflateMark;
      exports.inflatePrime = inflatePrime;
      exports.inflateSetDictionary = inflateSetDictionary;
      exports.inflateSync = inflateSync;
      exports.inflateSyncPoint = inflateSyncPoint;
      exports.inflateUndermine = inflateUndermine;
      */
    }, {
      "../utils/common": 27,
      "./adler32": 29,
      "./crc32": 31,
      "./inffast": 34,
      "./inftrees": 36
    }],
    36: [function (_dereq_, module, exports) {
      'use strict';

      var utils = _dereq_('../utils/common');

      var MAXBITS = 15;
      var ENOUGH_LENS = 852;
      var ENOUGH_DISTS = 592; //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

      var CODES = 0;
      var LENS = 1;
      var DISTS = 2;
      var lbase = [
      /* Length codes 257..285 base */
      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
      var lext = [
      /* Length codes 257..285 extra */
      16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];
      var dbase = [
      /* Distance codes 0..29 base */
      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];
      var dext = [
      /* Distance codes 0..29 extra */
      16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];

      module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
        var bits = opts.bits; //here = opts.here; /* table entry for duplication */

        var len = 0;
        /* a code's length in bits */

        var sym = 0;
        /* index of code symbols */

        var min = 0,
            max = 0;
        /* minimum and maximum code lengths */

        var root = 0;
        /* number of index bits for root table */

        var curr = 0;
        /* number of index bits for current table */

        var drop = 0;
        /* code bits to drop for sub-table */

        var left = 0;
        /* number of prefix codes available */

        var used = 0;
        /* code entries in table used */

        var huff = 0;
        /* Huffman code */

        var incr;
        /* for incrementing code, index */

        var fill;
        /* index for replicating entries */

        var low;
        /* low bits for current root entry */

        var mask;
        /* mask for low root bits */

        var next;
        /* next available space in table */

        var base = null;
        /* base value table to use */

        var base_index = 0; //  var shoextra;    /* extra bits table to use */

        var end;
        /* use base and extra for symbol > end */

        var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */

        var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */

        var extra = null;
        var extra_index = 0;
        var here_bits, here_op, here_val;
        /*
         Process a set of code lengths to create a canonical Huffman code.  The
         code lengths are lens[0..codes-1].  Each length corresponds to the
         symbols 0..codes-1.  The Huffman code is generated by first sorting the
         symbols by length from short to long, and retaining the symbol order
         for codes with equal lengths.  Then the code starts with all zero bits
         for the first code of the shortest length, and the codes are integer
         increments for the same length, and zeros are appended as the length
         increases.  For the deflate format, these bits are stored backwards
         from their more natural integer increment ordering, and so when the
         decoding tables are built in the large loop below, the integer codes
         are incremented backwards.
          This routine assumes, but does not check, that all of the entries in
         lens[] are in the range 0..MAXBITS.  The caller must assure this.
         1..MAXBITS is interpreted as that code length.  zero means that that
         symbol does not occur in this code.
          The codes are sorted by computing a count of codes for each length,
         creating from that a table of starting indices for each length in the
         sorted table, and then entering the symbols in order in the sorted
         table.  The sorted table is work[], with that space being provided by
         the caller.
          The length counts are used for other purposes as well, i.e. finding
         the minimum and maximum length codes, determining if there are any
         codes at all, checking for a valid set of lengths, and looking ahead
         at length counts to determine sub-table sizes when building the
         decoding tables.
         */

        /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */

        for (len = 0; len <= MAXBITS; len++) {
          count[len] = 0;
        }

        for (sym = 0; sym < codes; sym++) {
          count[lens[lens_index + sym]]++;
        }
        /* bound code lengths, force root to be within code lengths */


        root = bits;

        for (max = MAXBITS; max >= 1; max--) {
          if (count[max] !== 0) {
            break;
          }
        }

        if (root > max) {
          root = max;
        }

        if (max === 0) {
          /* no symbols to code at all */
          //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
          //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
          //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
          table[table_index++] = 1 << 24 | 64 << 16 | 0; //table.op[opts.table_index] = 64;
          //table.bits[opts.table_index] = 1;
          //table.val[opts.table_index++] = 0;

          table[table_index++] = 1 << 24 | 64 << 16 | 0;
          opts.bits = 1;
          return 0;
          /* no symbols, but wait for decoding to report error */
        }

        for (min = 1; min < max; min++) {
          if (count[min] !== 0) {
            break;
          }
        }

        if (root < min) {
          root = min;
        }
        /* check for an over-subscribed or incomplete set of lengths */


        left = 1;

        for (len = 1; len <= MAXBITS; len++) {
          left <<= 1;
          left -= count[len];

          if (left < 0) {
            return -1;
          }
          /* over-subscribed */

        }

        if (left > 0 && (type === CODES || max !== 1)) {
          return -1;
          /* incomplete set */
        }
        /* generate offsets into symbol table for each length for sorting */


        offs[1] = 0;

        for (len = 1; len < MAXBITS; len++) {
          offs[len + 1] = offs[len] + count[len];
        }
        /* sort symbols by length, by symbol order within each length */


        for (sym = 0; sym < codes; sym++) {
          if (lens[lens_index + sym] !== 0) {
            work[offs[lens[lens_index + sym]]++] = sym;
          }
        }
        /*
         Create and fill in decoding tables.  In this loop, the table being
         filled is at next and has curr index bits.  The code being used is huff
         with length len.  That code is converted to an index by dropping drop
         bits off of the bottom.  For codes where len is less than drop + curr,
         those top drop + curr - len bits are incremented through all values to
         fill the table with replicated entries.
          root is the number of index bits for the root table.  When len exceeds
         root, sub-tables are created pointed to by the root entry with an index
         of the low root bits of huff.  This is saved in low to check for when a
         new sub-table should be started.  drop is zero when the root table is
         being filled, and drop is root when sub-tables are being filled.
          When a new sub-table is needed, it is necessary to look ahead in the
         code lengths to determine what size sub-table is needed.  The length
         counts are used for this, and so count[] is decremented as codes are
         entered in the tables.
          used keeps track of how many table entries have been allocated from the
         provided *table space.  It is checked for LENS and DIST tables against
         the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
         the initial root table size constants.  See the comments in inftrees.h
         for more information.
          sym increments through all symbols, and the loop terminates when
         all codes of length max, i.e. all codes, have been processed.  This
         routine permits incomplete codes, so another loop after this one fills
         in the rest of the decoding tables with invalid code markers.
         */

        /* set up for code type */
        // poor man optimization - use if-else instead of switch,
        // to avoid deopts in old v8


        if (type === CODES) {
          base = extra = work;
          /* dummy value--not used */

          end = 19;
        } else if (type === LENS) {
          base = lbase;
          base_index -= 257;
          extra = lext;
          extra_index -= 257;
          end = 256;
        } else {
          /* DISTS */
          base = dbase;
          extra = dext;
          end = -1;
        }
        /* initialize opts for loop */


        huff = 0;
        /* starting code */

        sym = 0;
        /* starting code symbol */

        len = min;
        /* starting code length */

        next = table_index;
        /* current table to fill in */

        curr = root;
        /* current table index bits */

        drop = 0;
        /* current bits to drop from code for index */

        low = -1;
        /* trigger new sub-table when len > root */

        used = 1 << root;
        /* use root table entries */

        mask = used - 1;
        /* mask for comparing low */

        /* check available table space */

        if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
          return 1;
        }

        var i = 0;
        /* process all codes and make table entries */

        for (;;) {
          i++;
          /* create table entry */

          here_bits = len - drop;

          if (work[sym] < end) {
            here_op = 0;
            here_val = work[sym];
          } else if (work[sym] > end) {
            here_op = extra[extra_index + work[sym]];
            here_val = base[base_index + work[sym]];
          } else {
            here_op = 32 + 64;
            /* end of block */

            here_val = 0;
          }
          /* replicate for those indices with low len bits equal to huff */


          incr = 1 << len - drop;
          fill = 1 << curr;
          min = fill;
          /* save offset to next table */

          do {
            fill -= incr;
            table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
          } while (fill !== 0);
          /* backwards increment the len-bit code huff */


          incr = 1 << len - 1;

          while (huff & incr) {
            incr >>= 1;
          }

          if (incr !== 0) {
            huff &= incr - 1;
            huff += incr;
          } else {
            huff = 0;
          }
          /* go to next symbol, update count, len */


          sym++;

          if (--count[len] === 0) {
            if (len === max) {
              break;
            }

            len = lens[lens_index + work[sym]];
          }
          /* create new sub-table if needed */


          if (len > root && (huff & mask) !== low) {
            /* if first time, transition to sub-tables */
            if (drop === 0) {
              drop = root;
            }
            /* increment past last table */


            next += min;
            /* here min is 1 << curr */

            /* determine length of next table */

            curr = len - drop;
            left = 1 << curr;

            while (curr + drop < max) {
              left -= count[curr + drop];

              if (left <= 0) {
                break;
              }

              curr++;
              left <<= 1;
            }
            /* check for enough space */


            used += 1 << curr;

            if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
              return 1;
            }
            /* point entry in root table to sub-table */


            low = huff & mask;
            /*table.op[low] = curr;
            table.bits[low] = root;
            table.val[low] = next - opts.table_index;*/

            table[low] = root << 24 | curr << 16 | next - table_index | 0;
          }
        }
        /* fill in remaining table entry if code is incomplete (guaranteed to have
         at most one remaining entry, since if the code is incomplete, the
         maximum code length that was allowed to get this far is one bit) */


        if (huff !== 0) {
          //table.op[next + huff] = 64;            /* invalid code marker */
          //table.bits[next + huff] = len - drop;
          //table.val[next + huff] = 0;
          table[next + huff] = len - drop << 24 | 64 << 16 | 0;
        }
        /* set return parameters */
        //opts.table_index += used;


        opts.bits = root;
        return 0;
      };
    }, {
      "../utils/common": 27
    }],
    37: [function (_dereq_, module, exports) {
      'use strict';

      module.exports = {
        '2': 'need dictionary',

        /* Z_NEED_DICT       2  */
        '1': 'stream end',

        /* Z_STREAM_END      1  */
        '0': '',

        /* Z_OK              0  */
        '-1': 'file error',

        /* Z_ERRNO         (-1) */
        '-2': 'stream error',

        /* Z_STREAM_ERROR  (-2) */
        '-3': 'data error',

        /* Z_DATA_ERROR    (-3) */
        '-4': 'insufficient memory',

        /* Z_MEM_ERROR     (-4) */
        '-5': 'buffer error',

        /* Z_BUF_ERROR     (-5) */
        '-6': 'incompatible version'
        /* Z_VERSION_ERROR (-6) */

      };
    }, {}],
    38: [function (_dereq_, module, exports) {
      'use strict';

      var utils = _dereq_('../utils/common');
      /* Public constants ==========================================================*/

      /* ===========================================================================*/
      //var Z_FILTERED          = 1;
      //var Z_HUFFMAN_ONLY      = 2;
      //var Z_RLE               = 3;


      var Z_FIXED = 4; //var Z_DEFAULT_STRATEGY  = 0;

      /* Possible values of the data_type field (though see inflate()) */

      var Z_BINARY = 0;
      var Z_TEXT = 1; //var Z_ASCII             = 1; // = Z_TEXT

      var Z_UNKNOWN = 2;
      /*============================================================================*/

      function zero(buf) {
        var len = buf.length;

        while (--len >= 0) {
          buf[len] = 0;
        }
      } // From zutil.h


      var STORED_BLOCK = 0;
      var STATIC_TREES = 1;
      var DYN_TREES = 2;
      /* The three kinds of block type */

      var MIN_MATCH = 3;
      var MAX_MATCH = 258;
      /* The minimum and maximum match lengths */
      // From deflate.h

      /* ===========================================================================
       * Internal compression state.
       */

      var LENGTH_CODES = 29;
      /* number of length codes, not counting the special END_BLOCK code */

      var LITERALS = 256;
      /* number of literal bytes 0..255 */

      var L_CODES = LITERALS + 1 + LENGTH_CODES;
      /* number of Literal or Length codes, including the END_BLOCK code */

      var D_CODES = 30;
      /* number of distance codes */

      var BL_CODES = 19;
      /* number of codes used to transfer the bit lengths */

      var HEAP_SIZE = 2 * L_CODES + 1;
      /* maximum heap size */

      var MAX_BITS = 15;
      /* All codes must not exceed MAX_BITS bits */

      var Buf_size = 16;
      /* size of bit buffer in bi_buf */

      /* ===========================================================================
       * Constants
       */

      var MAX_BL_BITS = 7;
      /* Bit length codes must not exceed MAX_BL_BITS bits */

      var END_BLOCK = 256;
      /* end of block literal code */

      var REP_3_6 = 16;
      /* repeat previous bit length 3-6 times (2 bits of repeat count) */

      var REPZ_3_10 = 17;
      /* repeat a zero length 3-10 times  (3 bits of repeat count) */

      var REPZ_11_138 = 18;
      /* repeat a zero length 11-138 times  (7 bits of repeat count) */

      var extra_lbits =
      /* extra bits for each length code */
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
      var extra_dbits =
      /* extra bits for each distance code */
      [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
      var extra_blbits =
      /* extra bits for each bit length code */
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
      var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
      /* The lengths of the bit length codes are sent in order of decreasing
       * probability, to avoid transmitting the lengths for unused bit length codes.
       */

      /* ===========================================================================
       * Local data. These are initialized only once.
       */
      // We pre-fill arrays with 0 to avoid uninitialized gaps

      var DIST_CODE_LEN = 512;
      /* see definition of array dist_code below */
      // !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1

      var static_ltree = new Array((L_CODES + 2) * 2);
      zero(static_ltree);
      /* The static literal tree. Since the bit lengths are imposed, there is no
       * need for the L_CODES extra codes used during heap construction. However
       * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
       * below).
       */

      var static_dtree = new Array(D_CODES * 2);
      zero(static_dtree);
      /* The static distance tree. (Actually a trivial tree since all codes use
       * 5 bits.)
       */

      var _dist_code = new Array(DIST_CODE_LEN);

      zero(_dist_code);
      /* Distance codes. The first 256 values correspond to the distances
       * 3 .. 258, the last 256 values correspond to the top 8 bits of
       * the 15 bit distances.
       */

      var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);

      zero(_length_code);
      /* length code for each normalized match length (0 == MIN_MATCH) */

      var base_length = new Array(LENGTH_CODES);
      zero(base_length);
      /* First normalized length for each code (0 = MIN_MATCH) */

      var base_dist = new Array(D_CODES);
      zero(base_dist);
      /* First normalized distance for each code (0 = distance of 1) */

      var StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {
        this.static_tree = static_tree;
        /* static tree or NULL */

        this.extra_bits = extra_bits;
        /* extra bits for each code or NULL */

        this.extra_base = extra_base;
        /* base index for extra_bits */

        this.elems = elems;
        /* max number of elements in the tree */

        this.max_length = max_length;
        /* max bit length for the codes */
        // show if `static_tree` has data or dummy - needed for monomorphic objects

        this.has_stree = static_tree && static_tree.length;
      };

      var static_l_desc;
      var static_d_desc;
      var static_bl_desc;

      var TreeDesc = function (dyn_tree, stat_desc) {
        this.dyn_tree = dyn_tree;
        /* the dynamic tree */

        this.max_code = 0;
        /* largest code with non zero frequency */

        this.stat_desc = stat_desc;
        /* the corresponding static tree */
      };

      function d_code(dist) {
        return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
      }
      /* ===========================================================================
       * Output a short LSB first on the stream.
       * IN assertion: there is enough room in pendingBuf.
       */


      function put_short(s, w) {
        //    put_byte(s, (uch)((w) & 0xff));
        //    put_byte(s, (uch)((ush)(w) >> 8));
        s.pending_buf[s.pending++] = w & 0xff;
        s.pending_buf[s.pending++] = w >>> 8 & 0xff;
      }
      /* ===========================================================================
       * Send a value on a given number of bits.
       * IN assertion: length <= 16 and value fits in length bits.
       */


      function send_bits(s, value, length) {
        if (s.bi_valid > Buf_size - length) {
          s.bi_buf |= value << s.bi_valid & 0xffff;
          put_short(s, s.bi_buf);
          s.bi_buf = value >> Buf_size - s.bi_valid;
          s.bi_valid += length - Buf_size;
        } else {
          s.bi_buf |= value << s.bi_valid & 0xffff;
          s.bi_valid += length;
        }
      }

      function send_code(s, c, tree) {
        send_bits(s, tree[c * 2]
        /*.Code*/
        , tree[c * 2 + 1]
        /*.Len*/
        );
      }
      /* ===========================================================================
       * Reverse the first len bits of a code, using straightforward code (a faster
       * method would use a table)
       * IN assertion: 1 <= len <= 15
       */


      function bi_reverse(code, len) {
        var res = 0;

        do {
          res |= code & 1;
          code >>>= 1;
          res <<= 1;
        } while (--len > 0);

        return res >>> 1;
      }
      /* ===========================================================================
       * Flush the bit buffer, keeping at most 7 bits in it.
       */


      function bi_flush(s) {
        if (s.bi_valid === 16) {
          put_short(s, s.bi_buf);
          s.bi_buf = 0;
          s.bi_valid = 0;
        } else if (s.bi_valid >= 8) {
          s.pending_buf[s.pending++] = s.bi_buf & 0xff;
          s.bi_buf >>= 8;
          s.bi_valid -= 8;
        }
      }
      /* ===========================================================================
       * Compute the optimal bit lengths for a tree and update the total bit length
       * for the current block.
       * IN assertion: the fields freq and dad are set, heap[heap_max] and
       *    above are the tree nodes sorted by increasing frequency.
       * OUT assertions: the field len is set to the optimal bit length, the
       *     array bl_count contains the frequencies for each bit length.
       *     The length opt_len is updated; static_len is also updated if stree is
       *     not null.
       */


      function gen_bitlen(s, desc) //    deflate_state *s;
      //    tree_desc *desc;    /* the tree descriptor */
      {
        var tree = desc.dyn_tree;
        var max_code = desc.max_code;
        var stree = desc.stat_desc.static_tree;
        var has_stree = desc.stat_desc.has_stree;
        var extra = desc.stat_desc.extra_bits;
        var base = desc.stat_desc.extra_base;
        var max_length = desc.stat_desc.max_length;
        var h;
        /* heap index */

        var n, m;
        /* iterate over the tree elements */

        var bits;
        /* bit length */

        var xbits;
        /* extra bits */

        var f;
        /* frequency */

        var overflow = 0;
        /* number of elements with bit length too large */

        for (bits = 0; bits <= MAX_BITS; bits++) {
          s.bl_count[bits] = 0;
        }
        /* In a first pass, compute the optimal bit lengths (which may
         * overflow in the case of the bit length tree).
         */


        tree[s.heap[s.heap_max] * 2 + 1]
        /*.Len*/
        = 0;
        /* root of the heap */

        for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
          n = s.heap[h];
          bits = tree[tree[n * 2 + 1]
          /*.Dad*/
          * 2 + 1]
          /*.Len*/
          + 1;

          if (bits > max_length) {
            bits = max_length;
            overflow++;
          }

          tree[n * 2 + 1]
          /*.Len*/
          = bits;
          /* We overwrite tree[n].Dad which is no longer needed */

          if (n > max_code) {
            continue;
          }
          /* not a leaf node */


          s.bl_count[bits]++;
          xbits = 0;

          if (n >= base) {
            xbits = extra[n - base];
          }

          f = tree[n * 2]
          /*.Freq*/
          ;
          s.opt_len += f * (bits + xbits);

          if (has_stree) {
            s.static_len += f * (stree[n * 2 + 1]
            /*.Len*/
            + xbits);
          }
        }

        if (overflow === 0) {
          return;
        } // Trace((stderr,"\nbit length overflow\n"));

        /* This happens for example on obj2 and pic of the Calgary corpus */

        /* Find the first bit length which could increase: */


        do {
          bits = max_length - 1;

          while (s.bl_count[bits] === 0) {
            bits--;
          }

          s.bl_count[bits]--;
          /* move one leaf down the tree */

          s.bl_count[bits + 1] += 2;
          /* move one overflow item as its brother */

          s.bl_count[max_length]--;
          /* The brother of the overflow item also moves one step up,
           * but this does not affect bl_count[max_length]
           */

          overflow -= 2;
        } while (overflow > 0);
        /* Now recompute all bit lengths, scanning in increasing frequency.
         * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
         * lengths instead of fixing only the wrong ones. This idea is taken
         * from 'ar' written by Haruhiko Okumura.)
         */


        for (bits = max_length; bits !== 0; bits--) {
          n = s.bl_count[bits];

          while (n !== 0) {
            m = s.heap[--h];

            if (m > max_code) {
              continue;
            }

            if (tree[m * 2 + 1]
            /*.Len*/
            !== bits) {
              // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
              s.opt_len += (bits - tree[m * 2 + 1]
              /*.Len*/
              ) * tree[m * 2]
              /*.Freq*/
              ;
              tree[m * 2 + 1]
              /*.Len*/
              = bits;
            }

            n--;
          }
        }
      }
      /* ===========================================================================
       * Generate the codes for a given tree and bit counts (which need not be
       * optimal).
       * IN assertion: the array bl_count contains the bit length statistics for
       * the given tree and the field len is set for all tree elements.
       * OUT assertion: the field code is set for all tree elements of non
       *     zero code length.
       */


      function gen_codes(tree, max_code, bl_count) //    ct_data *tree;             /* the tree to decorate */
      //    int max_code;              /* largest code with non zero frequency */
      //    ushf *bl_count;            /* number of codes at each bit length */
      {
        var next_code = new Array(MAX_BITS + 1);
        /* next code value for each bit length */

        var code = 0;
        /* running code value */

        var bits;
        /* bit index */

        var n;
        /* code index */

        /* The distribution counts are first used to generate the code values
         * without bit reversal.
         */

        for (bits = 1; bits <= MAX_BITS; bits++) {
          next_code[bits] = code = code + bl_count[bits - 1] << 1;
        }
        /* Check that the bit counts in bl_count are consistent. The last code
         * must be all ones.
         */
        //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
        //        "inconsistent bit counts");
        //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));


        for (n = 0; n <= max_code; n++) {
          var len = tree[n * 2 + 1]
          /*.Len*/
          ;

          if (len === 0) {
            continue;
          }
          /* Now reverse the bits */


          tree[n * 2]
          /*.Code*/
          = bi_reverse(next_code[len]++, len); //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
          //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
        }
      }
      /* ===========================================================================
       * Initialize the various 'constant' tables.
       */


      function tr_static_init() {
        var n;
        /* iterates over tree elements */

        var bits;
        /* bit counter */

        var length;
        /* length value */

        var code;
        /* code value */

        var dist;
        /* distance index */

        var bl_count = new Array(MAX_BITS + 1);
        /* number of codes at each bit length for an optimal tree */
        // do check in _tr_init()
        //if (static_init_done) return;

        /* For some embedded targets, global variables are not initialized: */

        /*#ifdef NO_INIT_GLOBAL_POINTERS
          static_l_desc.static_tree = static_ltree;
          static_l_desc.extra_bits = extra_lbits;
          static_d_desc.static_tree = static_dtree;
          static_d_desc.extra_bits = extra_dbits;
          static_bl_desc.extra_bits = extra_blbits;
        #endif*/

        /* Initialize the mapping length (0..255) -> length code (0..28) */

        length = 0;

        for (code = 0; code < LENGTH_CODES - 1; code++) {
          base_length[code] = length;

          for (n = 0; n < 1 << extra_lbits[code]; n++) {
            _length_code[length++] = code;
          }
        } //Assert (length == 256, "tr_static_init: length != 256");

        /* Note that the length 255 (match length 258) can be represented
         * in two different ways: code 284 + 5 bits or code 285, so we
         * overwrite length_code[255] to use the best encoding:
         */


        _length_code[length - 1] = code;
        /* Initialize the mapping dist (0..32K) -> dist code (0..29) */

        dist = 0;

        for (code = 0; code < 16; code++) {
          base_dist[code] = dist;

          for (n = 0; n < 1 << extra_dbits[code]; n++) {
            _dist_code[dist++] = code;
          }
        } //Assert (dist == 256, "tr_static_init: dist != 256");


        dist >>= 7;
        /* from now on, all distances are divided by 128 */

        for (; code < D_CODES; code++) {
          base_dist[code] = dist << 7;

          for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
            _dist_code[256 + dist++] = code;
          }
        } //Assert (dist == 256, "tr_static_init: 256+dist != 512");

        /* Construct the codes of the static literal tree */


        for (bits = 0; bits <= MAX_BITS; bits++) {
          bl_count[bits] = 0;
        }

        n = 0;

        while (n <= 143) {
          static_ltree[n * 2 + 1]
          /*.Len*/
          = 8;
          n++;
          bl_count[8]++;
        }

        while (n <= 255) {
          static_ltree[n * 2 + 1]
          /*.Len*/
          = 9;
          n++;
          bl_count[9]++;
        }

        while (n <= 279) {
          static_ltree[n * 2 + 1]
          /*.Len*/
          = 7;
          n++;
          bl_count[7]++;
        }

        while (n <= 287) {
          static_ltree[n * 2 + 1]
          /*.Len*/
          = 8;
          n++;
          bl_count[8]++;
        }
        /* Codes 286 and 287 do not exist, but we must include them in the
         * tree construction to get a canonical Huffman tree (longest code
         * all ones)
         */


        gen_codes(static_ltree, L_CODES + 1, bl_count);
        /* The static distance tree is trivial: */

        for (n = 0; n < D_CODES; n++) {
          static_dtree[n * 2 + 1]
          /*.Len*/
          = 5;
          static_dtree[n * 2]
          /*.Code*/
          = bi_reverse(n, 5);
        } // Now data ready and we can init static trees


        static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
        static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
        static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS); //static_init_done = true;
      }
      /* ===========================================================================
       * Initialize a new block.
       */


      function init_block(s) {
        var n;
        /* iterates over tree elements */

        /* Initialize the trees. */

        for (n = 0; n < L_CODES; n++) {
          s.dyn_ltree[n * 2]
          /*.Freq*/
          = 0;
        }

        for (n = 0; n < D_CODES; n++) {
          s.dyn_dtree[n * 2]
          /*.Freq*/
          = 0;
        }

        for (n = 0; n < BL_CODES; n++) {
          s.bl_tree[n * 2]
          /*.Freq*/
          = 0;
        }

        s.dyn_ltree[END_BLOCK * 2]
        /*.Freq*/
        = 1;
        s.opt_len = s.static_len = 0;
        s.last_lit = s.matches = 0;
      }
      /* ===========================================================================
       * Flush the bit buffer and align the output on a byte boundary
       */


      function bi_windup(s) {
        if (s.bi_valid > 8) {
          put_short(s, s.bi_buf);
        } else if (s.bi_valid > 0) {
          //put_byte(s, (Byte)s->bi_buf);
          s.pending_buf[s.pending++] = s.bi_buf;
        }

        s.bi_buf = 0;
        s.bi_valid = 0;
      }
      /* ===========================================================================
       * Copy a stored block, storing first the length and its
       * one's complement if requested.
       */


      function copy_block(s, buf, len, header) //DeflateState *s;
      //charf    *buf;    /* the input data */
      //unsigned len;     /* its length */
      //int      header;  /* true if block header must be written */
      {
        bi_windup(s);
        /* align on byte boundary */

        if (header) {
          put_short(s, len);
          put_short(s, ~len);
        } //  while (len--) {
        //    put_byte(s, *buf++);
        //  }


        utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
        s.pending += len;
      }
      /* ===========================================================================
       * Compares to subtrees, using the tree depth as tie breaker when
       * the subtrees have equal frequency. This minimizes the worst case length.
       */


      function smaller(tree, n, m, depth) {
        var _n2 = n * 2;

        var _m2 = m * 2;

        return tree[_n2]
        /*.Freq*/
        < tree[_m2]
        /*.Freq*/
        || tree[_n2]
        /*.Freq*/
        === tree[_m2]
        /*.Freq*/
        && depth[n] <= depth[m];
      }
      /* ===========================================================================
       * Restore the heap property by moving down the tree starting at node k,
       * exchanging a node with the smallest of its two sons if necessary, stopping
       * when the heap property is re-established (each father smaller than its
       * two sons).
       */


      function pqdownheap(s, tree, k) //    deflate_state *s;
      //    ct_data *tree;  /* the tree to restore */
      //    int k;               /* node to move down */
      {
        var v = s.heap[k];
        var j = k << 1;
        /* left son of k */

        while (j <= s.heap_len) {
          /* Set j to the smallest of the two sons: */
          if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
            j++;
          }
          /* Exit if v is smaller than both sons */


          if (smaller(tree, v, s.heap[j], s.depth)) {
            break;
          }
          /* Exchange v with the smallest son */


          s.heap[k] = s.heap[j];
          k = j;
          /* And continue down the tree, setting j to the left son of k */

          j <<= 1;
        }

        s.heap[k] = v;
      } // inlined manually
      // var SMALLEST = 1;

      /* ===========================================================================
       * Send the block data compressed using the given Huffman trees
       */


      function compress_block(s, ltree, dtree) //    deflate_state *s;
      //    const ct_data *ltree; /* literal tree */
      //    const ct_data *dtree; /* distance tree */
      {
        var dist;
        /* distance of matched string */

        var lc;
        /* match length or unmatched char (if dist == 0) */

        var lx = 0;
        /* running index in l_buf */

        var code;
        /* the code to send */

        var extra;
        /* number of extra bits to send */

        if (s.last_lit !== 0) {
          do {
            dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
            lc = s.pending_buf[s.l_buf + lx];
            lx++;

            if (dist === 0) {
              send_code(s, lc, ltree);
              /* send a literal byte */
              //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
            } else {
              /* Here, lc is the match length - MIN_MATCH */
              code = _length_code[lc];
              send_code(s, code + LITERALS + 1, ltree);
              /* send the length code */

              extra = extra_lbits[code];

              if (extra !== 0) {
                lc -= base_length[code];
                send_bits(s, lc, extra);
                /* send the extra length bits */
              }

              dist--;
              /* dist is now the match distance - 1 */

              code = d_code(dist); //Assert (code < D_CODES, "bad d_code");

              send_code(s, code, dtree);
              /* send the distance code */

              extra = extra_dbits[code];

              if (extra !== 0) {
                dist -= base_dist[code];
                send_bits(s, dist, extra);
                /* send the extra distance bits */
              }
            }
            /* literal or match pair ? */

            /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
            //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
            //       "pendingBuf overflow");

          } while (lx < s.last_lit);
        }

        send_code(s, END_BLOCK, ltree);
      }
      /* ===========================================================================
       * Construct one Huffman tree and assigns the code bit strings and lengths.
       * Update the total bit length for the current block.
       * IN assertion: the field freq is set for all tree elements.
       * OUT assertions: the fields len and code are set to the optimal bit length
       *     and corresponding code. The length opt_len is updated; static_len is
       *     also updated if stree is not null. The field max_code is set.
       */


      function build_tree(s, desc) //    deflate_state *s;
      //    tree_desc *desc; /* the tree descriptor */
      {
        var tree = desc.dyn_tree;
        var stree = desc.stat_desc.static_tree;
        var has_stree = desc.stat_desc.has_stree;
        var elems = desc.stat_desc.elems;
        var n, m;
        /* iterate over heap elements */

        var max_code = -1;
        /* largest code with non zero frequency */

        var node;
        /* new node being created */

        /* Construct the initial heap, with least frequent element in
         * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
         * heap[0] is not used.
         */

        s.heap_len = 0;
        s.heap_max = HEAP_SIZE;

        for (n = 0; n < elems; n++) {
          if (tree[n * 2]
          /*.Freq*/
          !== 0) {
            s.heap[++s.heap_len] = max_code = n;
            s.depth[n] = 0;
          } else {
            tree[n * 2 + 1]
            /*.Len*/
            = 0;
          }
        }
        /* The pkzip format requires that at least one distance code exists,
         * and that at least one bit should be sent even if there is only one
         * possible code. So to avoid special checks later on we force at least
         * two codes of non zero frequency.
         */


        while (s.heap_len < 2) {
          node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
          tree[node * 2]
          /*.Freq*/
          = 1;
          s.depth[node] = 0;
          s.opt_len--;

          if (has_stree) {
            s.static_len -= stree[node * 2 + 1]
            /*.Len*/
            ;
          }
          /* node is 0 or 1 so it does not have extra bits */

        }

        desc.max_code = max_code;
        /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
         * establish sub-heaps of increasing lengths:
         */

        for (n = s.heap_len >> 1
        /*int /2*/
        ; n >= 1; n--) {
          pqdownheap(s, tree, n);
        }
        /* Construct the Huffman tree by repeatedly combining the least two
         * frequent nodes.
         */


        node = elems;
        /* next internal node of the tree */

        do {
          //pqremove(s, tree, n);  /* n = node of least frequency */

          /*** pqremove ***/
          n = s.heap[1
          /*SMALLEST*/
          ];
          s.heap[1
          /*SMALLEST*/
          ] = s.heap[s.heap_len--];
          pqdownheap(s, tree, 1
          /*SMALLEST*/
          );
          /***/

          m = s.heap[1
          /*SMALLEST*/
          ];
          /* m = node of next least frequency */

          s.heap[--s.heap_max] = n;
          /* keep the nodes sorted by frequency */

          s.heap[--s.heap_max] = m;
          /* Create a new node father of n and m */

          tree[node * 2]
          /*.Freq*/
          = tree[n * 2]
          /*.Freq*/
          + tree[m * 2]
          /*.Freq*/
          ;
          s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
          tree[n * 2 + 1]
          /*.Dad*/
          = tree[m * 2 + 1]
          /*.Dad*/
          = node;
          /* and insert the new node in the heap */

          s.heap[1
          /*SMALLEST*/
          ] = node++;
          pqdownheap(s, tree, 1
          /*SMALLEST*/
          );
        } while (s.heap_len >= 2);

        s.heap[--s.heap_max] = s.heap[1
        /*SMALLEST*/
        ];
        /* At this point, the fields freq and dad are set. We can now
         * generate the bit lengths.
         */

        gen_bitlen(s, desc);
        /* The field len is now set, we can generate the bit codes */

        gen_codes(tree, max_code, s.bl_count);
      }
      /* ===========================================================================
       * Scan a literal or distance tree to determine the frequencies of the codes
       * in the bit length tree.
       */


      function scan_tree(s, tree, max_code) //    deflate_state *s;
      //    ct_data *tree;   /* the tree to be scanned */
      //    int max_code;    /* and its largest code of non zero frequency */
      {
        var n;
        /* iterates over all tree elements */

        var prevlen = -1;
        /* last emitted length */

        var curlen;
        /* length of current code */

        var nextlen = tree[0 * 2 + 1]
        /*.Len*/
        ;
        /* length of next code */

        var count = 0;
        /* repeat count of the current code */

        var max_count = 7;
        /* max repeat count */

        var min_count = 4;
        /* min repeat count */

        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        }

        tree[(max_code + 1) * 2 + 1]
        /*.Len*/
        = 0xffff;
        /* guard */

        for (n = 0; n <= max_code; n++) {
          curlen = nextlen;
          nextlen = tree[(n + 1) * 2 + 1]
          /*.Len*/
          ;

          if (++count < max_count && curlen === nextlen) {
            continue;
          } else if (count < min_count) {
            s.bl_tree[curlen * 2]
            /*.Freq*/
            += count;
          } else if (curlen !== 0) {
            if (curlen !== prevlen) {
              s.bl_tree[curlen * 2] /*.Freq*/++;
            }

            s.bl_tree[REP_3_6 * 2] /*.Freq*/++;
          } else if (count <= 10) {
            s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;
          } else {
            s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;
          }

          count = 0;
          prevlen = curlen;

          if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
          } else if (curlen === nextlen) {
            max_count = 6;
            min_count = 3;
          } else {
            max_count = 7;
            min_count = 4;
          }
        }
      }
      /* ===========================================================================
       * Send a literal or distance tree in compressed form, using the codes in
       * bl_tree.
       */


      function send_tree(s, tree, max_code) //    deflate_state *s;
      //    ct_data *tree; /* the tree to be scanned */
      //    int max_code;       /* and its largest code of non zero frequency */
      {
        var n;
        /* iterates over all tree elements */

        var prevlen = -1;
        /* last emitted length */

        var curlen;
        /* length of current code */

        var nextlen = tree[0 * 2 + 1]
        /*.Len*/
        ;
        /* length of next code */

        var count = 0;
        /* repeat count of the current code */

        var max_count = 7;
        /* max repeat count */

        var min_count = 4;
        /* min repeat count */

        /* tree[max_code+1].Len = -1; */

        /* guard already set */

        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        }

        for (n = 0; n <= max_code; n++) {
          curlen = nextlen;
          nextlen = tree[(n + 1) * 2 + 1]
          /*.Len*/
          ;

          if (++count < max_count && curlen === nextlen) {
            continue;
          } else if (count < min_count) {
            do {
              send_code(s, curlen, s.bl_tree);
            } while (--count !== 0);
          } else if (curlen !== 0) {
            if (curlen !== prevlen) {
              send_code(s, curlen, s.bl_tree);
              count--;
            } //Assert(count >= 3 && count <= 6, " 3_6?");


            send_code(s, REP_3_6, s.bl_tree);
            send_bits(s, count - 3, 2);
          } else if (count <= 10) {
            send_code(s, REPZ_3_10, s.bl_tree);
            send_bits(s, count - 3, 3);
          } else {
            send_code(s, REPZ_11_138, s.bl_tree);
            send_bits(s, count - 11, 7);
          }

          count = 0;
          prevlen = curlen;

          if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
          } else if (curlen === nextlen) {
            max_count = 6;
            min_count = 3;
          } else {
            max_count = 7;
            min_count = 4;
          }
        }
      }
      /* ===========================================================================
       * Construct the Huffman tree for the bit lengths and return the index in
       * bl_order of the last bit length code to send.
       */


      function build_bl_tree(s) {
        var max_blindex;
        /* index of last bit length code of non zero freq */

        /* Determine the bit length frequencies for literal and distance trees */

        scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
        scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
        /* Build the bit length tree: */

        build_tree(s, s.bl_desc);
        /* opt_len now includes the length of the tree representations, except
         * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
         */

        /* Determine the number of bit length codes to send. The pkzip format
         * requires that at least 4 bit length codes be sent. (appnote.txt says
         * 3 but the actual value used is 4.)
         */

        for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
          if (s.bl_tree[bl_order[max_blindex] * 2 + 1]
          /*.Len*/
          !== 0) {
            break;
          }
        }
        /* Update opt_len to include the bit length tree and counts */


        s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4; //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
        //        s->opt_len, s->static_len));

        return max_blindex;
      }
      /* ===========================================================================
       * Send the header for a block using dynamic Huffman trees: the counts, the
       * lengths of the bit length codes, the literal tree and the distance tree.
       * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
       */


      function send_all_trees(s, lcodes, dcodes, blcodes) //    deflate_state *s;
      //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
      {
        var rank;
        /* index in bl_order */
        //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
        //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
        //        "too many codes");
        //Tracev((stderr, "\nbl counts: "));

        send_bits(s, lcodes - 257, 5);
        /* not +255 as stated in appnote.txt */

        send_bits(s, dcodes - 1, 5);
        send_bits(s, blcodes - 4, 4);
        /* not -3 as stated in appnote.txt */

        for (rank = 0; rank < blcodes; rank++) {
          //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
          send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]
          /*.Len*/
          , 3);
        } //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));


        send_tree(s, s.dyn_ltree, lcodes - 1);
        /* literal tree */
        //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

        send_tree(s, s.dyn_dtree, dcodes - 1);
        /* distance tree */
        //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
      }
      /* ===========================================================================
       * Check if the data type is TEXT or BINARY, using the following algorithm:
       * - TEXT if the two conditions below are satisfied:
       *    a) There are no non-portable control characters belonging to the
       *       "black list" (0..6, 14..25, 28..31).
       *    b) There is at least one printable character belonging to the
       *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
       * - BINARY otherwise.
       * - The following partially-portable control characters form a
       *   "gray list" that is ignored in this detection algorithm:
       *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
       * IN assertion: the fields Freq of dyn_ltree are set.
       */


      function detect_data_type(s) {
        /* black_mask is the bit mask of black-listed bytes
         * set bits 0..6, 14..25, and 28..31
         * 0xf3ffc07f = binary 11110011111111111100000001111111
         */
        var black_mask = 0xf3ffc07f;
        var n;
        /* Check for non-textual ("black-listed") bytes. */

        for (n = 0; n <= 31; n++, black_mask >>>= 1) {
          if (black_mask & 1 && s.dyn_ltree[n * 2]
          /*.Freq*/
          !== 0) {
            return Z_BINARY;
          }
        }
        /* Check for textual ("white-listed") bytes. */


        if (s.dyn_ltree[9 * 2]
        /*.Freq*/
        !== 0 || s.dyn_ltree[10 * 2]
        /*.Freq*/
        !== 0 || s.dyn_ltree[13 * 2]
        /*.Freq*/
        !== 0) {
          return Z_TEXT;
        }

        for (n = 32; n < LITERALS; n++) {
          if (s.dyn_ltree[n * 2]
          /*.Freq*/
          !== 0) {
            return Z_TEXT;
          }
        }
        /* There are no "black-listed" or "white-listed" bytes:
         * this stream either is empty or has tolerated ("gray-listed") bytes only.
         */


        return Z_BINARY;
      }

      var static_init_done = false;
      /* ===========================================================================
       * Initialize the tree data structures for a new zlib stream.
       */

      function _tr_init(s) {
        if (!static_init_done) {
          tr_static_init();
          static_init_done = true;
        }

        s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
        s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
        s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
        s.bi_buf = 0;
        s.bi_valid = 0;
        /* Initialize the first block of the first file: */

        init_block(s);
      }
      /* ===========================================================================
       * Send a stored block
       */


      function _tr_stored_block(s, buf, stored_len, last) //DeflateState *s;
      //charf *buf;       /* input block */
      //ulg stored_len;   /* length of input block */
      //int last;         /* one if this is the last block for a file */
      {
        send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
        /* send block type */

        copy_block(s, buf, stored_len, true);
        /* with header */
      }
      /* ===========================================================================
       * Send one empty static block to give enough lookahead for inflate.
       * This takes 10 bits, of which 7 may remain in the bit buffer.
       */


      function _tr_align(s) {
        send_bits(s, STATIC_TREES << 1, 3);
        send_code(s, END_BLOCK, static_ltree);
        bi_flush(s);
      }
      /* ===========================================================================
       * Determine the best encoding for the current block: dynamic trees, static
       * trees or store, and output the encoded block to the zip file.
       */


      function _tr_flush_block(s, buf, stored_len, last) //DeflateState *s;
      //charf *buf;       /* input block, or NULL if too old */
      //ulg stored_len;   /* length of input block */
      //int last;         /* one if this is the last block for a file */
      {
        var opt_lenb, static_lenb;
        /* opt_len and static_len in bytes */

        var max_blindex = 0;
        /* index of last bit length code of non zero freq */

        /* Build the Huffman trees unless a stored block is forced */

        if (s.level > 0) {
          /* Check if the file is binary or text */
          if (s.strm.data_type === Z_UNKNOWN) {
            s.strm.data_type = detect_data_type(s);
          }
          /* Construct the literal and distance trees */


          build_tree(s, s.l_desc); // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
          //        s->static_len));

          build_tree(s, s.d_desc); // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
          //        s->static_len));

          /* At this point, opt_len and static_len are the total bit lengths of
           * the compressed block data, excluding the tree representations.
           */

          /* Build the bit length tree for the above two trees, and get the index
           * in bl_order of the last bit length code to send.
           */

          max_blindex = build_bl_tree(s);
          /* Determine the best encoding. Compute the block lengths in bytes. */

          opt_lenb = s.opt_len + 3 + 7 >>> 3;
          static_lenb = s.static_len + 3 + 7 >>> 3; // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
          //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
          //        s->last_lit));

          if (static_lenb <= opt_lenb) {
            opt_lenb = static_lenb;
          }
        } else {
          // Assert(buf != (char*)0, "lost buf");
          opt_lenb = static_lenb = stored_len + 5;
          /* force a stored block */
        }

        if (stored_len + 4 <= opt_lenb && buf !== -1) {
          /* 4: two words for the lengths */

          /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
           * Otherwise we can't have processed more than WSIZE input bytes since
           * the last block flush, because compression would have been
           * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
           * transform a block into a stored block.
           */
          _tr_stored_block(s, buf, stored_len, last);
        } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
          send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
          compress_block(s, static_ltree, static_dtree);
        } else {
          send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
          send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
          compress_block(s, s.dyn_ltree, s.dyn_dtree);
        } // Assert (s->compressed_len == s->bits_sent, "bad compressed size");

        /* The above check is made mod 2^32, for files larger than 512 MB
         * and uLong implemented on 32 bits.
         */


        init_block(s);

        if (last) {
          bi_windup(s);
        } // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
        //       s->compressed_len-7*last));

      }
      /* ===========================================================================
       * Save the match info and tally the frequency counts. Return true if
       * the current block must be flushed.
       */


      function _tr_tally(s, dist, lc) //    deflate_state *s;
      //    unsigned dist;  /* distance of matched string */
      //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
      {
        //var out_length, in_length, dcode;
        s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 0xff;
        s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
        s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
        s.last_lit++;

        if (dist === 0) {
          /* lc is the unmatched char */
          s.dyn_ltree[lc * 2] /*.Freq*/++;
        } else {
          s.matches++;
          /* Here, lc is the match length - MIN_MATCH */

          dist--;
          /* dist = match distance - 1 */
          //Assert((ush)dist < (ush)MAX_DIST(s) &&
          //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
          //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

          s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/++;
          s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;
        } // (!) This block is disabled in zlib defailts,
        // don't enable it for binary compatibility
        //#ifdef TRUNCATE_BLOCK
        //  /* Try to guess if it is profitable to stop the current block here */
        //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
        //    /* Compute an upper bound for the compressed length */
        //    out_length = s.last_lit*8;
        //    in_length = s.strstart - s.block_start;
        //
        //    for (dcode = 0; dcode < D_CODES; dcode++) {
        //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
        //    }
        //    out_length >>>= 3;
        //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
        //    //       s->last_lit, in_length, out_length,
        //    //       100L - out_length*100L/in_length));
        //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
        //      return true;
        //    }
        //  }
        //#endif


        return s.last_lit === s.lit_bufsize - 1;
        /* We avoid equality with lit_bufsize because of wraparound at 64K
         * on 16 bit machines and because stored blocks are restricted to
         * 64K-1 bytes.
         */
      }

      exports._tr_init = _tr_init;
      exports._tr_stored_block = _tr_stored_block;
      exports._tr_flush_block = _tr_flush_block;
      exports._tr_tally = _tr_tally;
      exports._tr_align = _tr_align;
    }, {
      "../utils/common": 27
    }],
    39: [function (_dereq_, module, exports) {
      'use strict';

      function ZStream() {
        /* next input byte */
        this.input = null; // JS specific, because we have no pointers

        this.next_in = 0;
        /* number of bytes available at input */

        this.avail_in = 0;
        /* total number of input bytes read so far */

        this.total_in = 0;
        /* next output byte should be put there */

        this.output = null; // JS specific, because we have no pointers

        this.next_out = 0;
        /* remaining free space at output */

        this.avail_out = 0;
        /* total number of bytes output so far */

        this.total_out = 0;
        /* last error message, NULL if no error */

        this.msg = ''
        /*Z_NULL*/
        ;
        /* not visible by applications */

        this.state = null;
        /* best guess about the data type: binary or text */

        this.data_type = 2
        /*Z_UNKNOWN*/
        ;
        /* adler32 value of the uncompressed data */

        this.adler = 0;
      }

      module.exports = ZStream;
    }, {}]
  }, {}, [9])(9);
});
},{"buffer":"../../node_modules/parcel-bundler/src/builtins/_empty.js"}],"../../node_modules/xlsx/xlsx.js":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("buffer").Buffer;
var process = require("process");
var define;
/*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */

/* vim: set ts=2: */

/*exported XLSX */

/*global global, exports, module, require:false, process:false, Buffer:false, ArrayBuffer:false */
var XLSX = {};

function make_xlsx_lib(XLSX) {
  XLSX.version = '0.17.0';
  var current_codepage = 1200,
      current_ansi = 1252;
  /*global cptable:true, window */

  if (typeof module !== "undefined" && typeof require !== 'undefined') {
    if (typeof cptable === 'undefined') {
      if (typeof global !== 'undefined') global.cptable = require('./dist/cpexcel.js');else if (typeof window !== 'undefined') window.cptable = require('./dist/cpexcel.js');
    }
  }

  var VALID_ANSI = [874, 932, 936, 949, 950];

  for (var i = 0; i <= 8; ++i) VALID_ANSI.push(1250 + i);
  /* ECMA-376 Part I 18.4.1 charset to codepage mapping */


  var CS2CP = {
    0: 1252,

    /* ANSI */
    1: 65001,

    /* DEFAULT */
    2: 65001,

    /* SYMBOL */
    77: 10000,

    /* MAC */
    128: 932,

    /* SHIFTJIS */
    129: 949,

    /* HANGUL */
    130: 1361,

    /* JOHAB */
    134: 936,

    /* GB2312 */
    136: 950,

    /* CHINESEBIG5 */
    161: 1253,

    /* GREEK */
    162: 1254,

    /* TURKISH */
    163: 1258,

    /* VIETNAMESE */
    177: 1255,

    /* HEBREW */
    178: 1256,

    /* ARABIC */
    186: 1257,

    /* BALTIC */
    204: 1251,

    /* RUSSIAN */
    222: 874,

    /* THAI */
    238: 1250,

    /* EASTEUROPE */
    255: 1252,

    /* OEM */
    69: 6969
    /* MISC */

  };

  var set_ansi = function (cp) {
    if (VALID_ANSI.indexOf(cp) == -1) return;
    current_ansi = CS2CP[0] = cp;
  };

  function reset_ansi() {
    set_ansi(1252);
  }

  var set_cp = function (cp) {
    current_codepage = cp;
    set_ansi(cp);
  };

  function reset_cp() {
    set_cp(1200);
    reset_ansi();
  }

  function char_codes(data) {
    var o = [];

    for (var i = 0, len = data.length; i < len; ++i) o[i] = data.charCodeAt(i);

    return o;
  }

  function utf16leread(data) {
    var o = [];

    for (var i = 0; i < data.length >> 1; ++i) o[i] = String.fromCharCode(data.charCodeAt(2 * i) + (data.charCodeAt(2 * i + 1) << 8));

    return o.join("");
  }

  function utf16beread(data) {
    var o = [];

    for (var i = 0; i < data.length >> 1; ++i) o[i] = String.fromCharCode(data.charCodeAt(2 * i + 1) + (data.charCodeAt(2 * i) << 8));

    return o.join("");
  }

  var debom = function (data) {
    var c1 = data.charCodeAt(0),
        c2 = data.charCodeAt(1);
    if (c1 == 0xFF && c2 == 0xFE) return utf16leread(data.slice(2));
    if (c1 == 0xFE && c2 == 0xFF) return utf16beread(data.slice(2));
    if (c1 == 0xFEFF) return data.slice(1);
    return data;
  };

  var _getchar = function _gc1(x) {
    return String.fromCharCode(x);
  };

  var _getansi = function _ga1(x) {
    return String.fromCharCode(x);
  };

  if (typeof cptable !== 'undefined') {
    set_cp = function (cp) {
      current_codepage = cp;
      set_ansi(cp);
    };

    debom = function (data) {
      if (data.charCodeAt(0) === 0xFF && data.charCodeAt(1) === 0xFE) {
        return cptable.utils.decode(1200, char_codes(data.slice(2)));
      }

      return data;
    };

    _getchar = function _gc2(x) {
      if (current_codepage === 1200) return String.fromCharCode(x);
      return cptable.utils.decode(current_codepage, [x & 255, x >> 8])[0];
    };

    _getansi = function _ga2(x) {
      return cptable.utils.decode(current_ansi, [x])[0];
    };
  }

  var DENSE = null;
  var DIF_XL = true;

  var Base64 = function make_b64() {
    var map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    return {
      encode: function (input) {
        var o = "";
        var c1 = 0,
            c2 = 0,
            c3 = 0,
            e1 = 0,
            e2 = 0,
            e3 = 0,
            e4 = 0;

        for (var i = 0; i < input.length;) {
          c1 = input.charCodeAt(i++);
          e1 = c1 >> 2;
          c2 = input.charCodeAt(i++);
          e2 = (c1 & 3) << 4 | c2 >> 4;
          c3 = input.charCodeAt(i++);
          e3 = (c2 & 15) << 2 | c3 >> 6;
          e4 = c3 & 63;

          if (isNaN(c2)) {
            e3 = e4 = 64;
          } else if (isNaN(c3)) {
            e4 = 64;
          }

          o += map.charAt(e1) + map.charAt(e2) + map.charAt(e3) + map.charAt(e4);
        }

        return o;
      },
      decode: function b64_decode(input) {
        var o = "";
        var c1 = 0,
            c2 = 0,
            c3 = 0,
            e1 = 0,
            e2 = 0,
            e3 = 0,
            e4 = 0;
        input = input.replace(/[^\w\+\/\=]/g, "");

        for (var i = 0; i < input.length;) {
          e1 = map.indexOf(input.charAt(i++));
          e2 = map.indexOf(input.charAt(i++));
          c1 = e1 << 2 | e2 >> 4;
          o += String.fromCharCode(c1);
          e3 = map.indexOf(input.charAt(i++));
          c2 = (e2 & 15) << 4 | e3 >> 2;

          if (e3 !== 64) {
            o += String.fromCharCode(c2);
          }

          e4 = map.indexOf(input.charAt(i++));
          c3 = (e3 & 3) << 6 | e4;

          if (e4 !== 64) {
            o += String.fromCharCode(c3);
          }
        }

        return o;
      }
    };
  }();

  var has_buf = typeof Buffer !== 'undefined' && typeof process !== 'undefined' && typeof process.versions !== 'undefined' && !!process.versions.node;

  var Buffer_from = function () {};

  if (typeof Buffer !== 'undefined') {
    var nbfs = !Buffer.from;
    if (!nbfs) try {
      Buffer.from("foo", "utf8");
    } catch (e) {
      nbfs = true;
    }
    Buffer_from = nbfs ? function (buf, enc) {
      return enc ? new Buffer(buf, enc) : new Buffer(buf);
    } : Buffer.from.bind(Buffer); // $FlowIgnore

    if (!Buffer.alloc) Buffer.alloc = function (n) {
      return new Buffer(n);
    }; // $FlowIgnore

    if (!Buffer.allocUnsafe) Buffer.allocUnsafe = function (n) {
      return new Buffer(n);
    };
  }

  function new_raw_buf(len) {
    /* jshint -W056 */
    return has_buf ? Buffer.alloc(len) : new Array(len);
    /* jshint +W056 */
  }

  function new_unsafe_buf(len) {
    /* jshint -W056 */
    return has_buf ? Buffer.allocUnsafe(len) : new Array(len);
    /* jshint +W056 */
  }

  var s2a = function s2a(s) {
    if (has_buf) return Buffer_from(s, "binary");
    return s.split("").map(function (x) {
      return x.charCodeAt(0) & 0xff;
    });
  };

  function s2ab(s) {
    if (typeof ArrayBuffer === 'undefined') return s2a(s);
    var buf = new ArrayBuffer(s.length),
        view = new Uint8Array(buf);

    for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;

    return buf;
  }

  function a2s(data) {
    if (Array.isArray(data)) return data.map(function (c) {
      return String.fromCharCode(c);
    }).join("");
    var o = [];

    for (var i = 0; i < data.length; ++i) o[i] = String.fromCharCode(data[i]);

    return o.join("");
  }

  function a2u(data) {
    if (typeof Uint8Array === 'undefined') throw new Error("Unsupported");
    return new Uint8Array(data);
  }

  function ab2a(data) {
    if (typeof ArrayBuffer == 'undefined') throw new Error("Unsupported");
    if (data instanceof ArrayBuffer) return ab2a(new Uint8Array(data));
    var o = new Array(data.length);

    for (var i = 0; i < data.length; ++i) o[i] = data[i];

    return o;
  }

  var bconcat = function (bufs) {
    return [].concat.apply([], bufs);
  };

  var chr0 = /\u0000/g,
      chr1 = /[\u0001-\u0006]/g;
  /* ssf.js (C) 2013-present SheetJS -- http://sheetjs.com */

  /*jshint -W041 */

  var SSF = {};

  var make_ssf = function make_ssf(SSF) {
    SSF.version = '0.11.2';

    function _strrev(x) {
      var o = "",
          i = x.length - 1;

      while (i >= 0) o += x.charAt(i--);

      return o;
    }

    function fill(c, l) {
      var o = "";

      while (o.length < l) o += c;

      return o;
    }

    function pad0(v, d) {
      var t = "" + v;
      return t.length >= d ? t : fill('0', d - t.length) + t;
    }

    function pad_(v, d) {
      var t = "" + v;
      return t.length >= d ? t : fill(' ', d - t.length) + t;
    }

    function rpad_(v, d) {
      var t = "" + v;
      return t.length >= d ? t : t + fill(' ', d - t.length);
    }

    function pad0r1(v, d) {
      var t = "" + Math.round(v);
      return t.length >= d ? t : fill('0', d - t.length) + t;
    }

    function pad0r2(v, d) {
      var t = "" + v;
      return t.length >= d ? t : fill('0', d - t.length) + t;
    }

    var p2_32 = Math.pow(2, 32);

    function pad0r(v, d) {
      if (v > p2_32 || v < -p2_32) return pad0r1(v, d);
      var i = Math.round(v);
      return pad0r2(i, d);
    }

    function isgeneral(s, i) {
      i = i || 0;
      return s.length >= 7 + i && (s.charCodeAt(i) | 32) === 103 && (s.charCodeAt(i + 1) | 32) === 101 && (s.charCodeAt(i + 2) | 32) === 110 && (s.charCodeAt(i + 3) | 32) === 101 && (s.charCodeAt(i + 4) | 32) === 114 && (s.charCodeAt(i + 5) | 32) === 97 && (s.charCodeAt(i + 6) | 32) === 108;
    }

    var days = [['Sun', 'Sunday'], ['Mon', 'Monday'], ['Tue', 'Tuesday'], ['Wed', 'Wednesday'], ['Thu', 'Thursday'], ['Fri', 'Friday'], ['Sat', 'Saturday']];
    var months = [['J', 'Jan', 'January'], ['F', 'Feb', 'February'], ['M', 'Mar', 'March'], ['A', 'Apr', 'April'], ['M', 'May', 'May'], ['J', 'Jun', 'June'], ['J', 'Jul', 'July'], ['A', 'Aug', 'August'], ['S', 'Sep', 'September'], ['O', 'Oct', 'October'], ['N', 'Nov', 'November'], ['D', 'Dec', 'December']];

    function init_table(t) {
      t[0] = 'General';
      t[1] = '0';
      t[2] = '0.00';
      t[3] = '#,##0';
      t[4] = '#,##0.00';
      t[9] = '0%';
      t[10] = '0.00%';
      t[11] = '0.00E+00';
      t[12] = '# ?/?';
      t[13] = '# ??/??';
      t[14] = 'm/d/yy';
      t[15] = 'd-mmm-yy';
      t[16] = 'd-mmm';
      t[17] = 'mmm-yy';
      t[18] = 'h:mm AM/PM';
      t[19] = 'h:mm:ss AM/PM';
      t[20] = 'h:mm';
      t[21] = 'h:mm:ss';
      t[22] = 'm/d/yy h:mm';
      t[37] = '#,##0 ;(#,##0)';
      t[38] = '#,##0 ;[Red](#,##0)';
      t[39] = '#,##0.00;(#,##0.00)';
      t[40] = '#,##0.00;[Red](#,##0.00)';
      t[45] = 'mm:ss';
      t[46] = '[h]:mm:ss';
      t[47] = 'mmss.0';
      t[48] = '##0.0E+0';
      t[49] = '@';
      t[56] = '"ä¸å/ä¸å "hh"æ"mm"å"ss"ç§ "';
    }

    var table_fmt = {};
    init_table(table_fmt);
    /* Defaults determined by systematically testing in Excel 2019 */

    /* These formats appear to default to other formats in the table */

    var default_map = [];
    var defi = 0; //  5 -> 37 ...  8 -> 40

    for (defi = 5; defi <= 8; ++defi) default_map[defi] = 32 + defi; // 23 ->  0 ... 26 ->  0


    for (defi = 23; defi <= 26; ++defi) default_map[defi] = 0; // 27 -> 14 ... 31 -> 14


    for (defi = 27; defi <= 31; ++defi) default_map[defi] = 14; // 50 -> 14 ... 58 -> 14


    for (defi = 50; defi <= 58; ++defi) default_map[defi] = 14; // 59 ->  1 ... 62 ->  4


    for (defi = 59; defi <= 62; ++defi) default_map[defi] = defi - 58; // 67 ->  9 ... 68 -> 10


    for (defi = 67; defi <= 68; ++defi) default_map[defi] = defi - 58; // 72 -> 14 ... 75 -> 17


    for (defi = 72; defi <= 75; ++defi) default_map[defi] = defi - 58; // 69 -> 12 ... 71 -> 14


    for (defi = 67; defi <= 68; ++defi) default_map[defi] = defi - 57; // 76 -> 20 ... 78 -> 22


    for (defi = 76; defi <= 78; ++defi) default_map[defi] = defi - 56; // 79 -> 45 ... 81 -> 47


    for (defi = 79; defi <= 81; ++defi) default_map[defi] = defi - 34; // 82 ->  0 ... 65536 -> 0 (omitted)

    /* These formats technically refer to Accounting formats with no equivalent */


    var default_str = []; //  5 -- Currency,   0 decimal, black negative

    default_str[5] = default_str[63] = '"$"#,##0_);\\("$"#,##0\\)'; //  6 -- Currency,   0 decimal, red   negative

    default_str[6] = default_str[64] = '"$"#,##0_);[Red]\\("$"#,##0\\)'; //  7 -- Currency,   2 decimal, black negative

    default_str[7] = default_str[65] = '"$"#,##0.00_);\\("$"#,##0.00\\)'; //  8 -- Currency,   2 decimal, red   negative

    default_str[8] = default_str[66] = '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)'; // 41 -- Accounting, 0 decimal, No Symbol

    default_str[41] = '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)'; // 42 -- Accounting, 0 decimal, $  Symbol

    default_str[42] = '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)'; // 43 -- Accounting, 2 decimal, No Symbol

    default_str[43] = '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)'; // 44 -- Accounting, 2 decimal, $  Symbol

    default_str[44] = '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)';

    function frac(x, D, mixed) {
      var sgn = x < 0 ? -1 : 1;
      var B = x * sgn;
      var P_2 = 0,
          P_1 = 1,
          P = 0;
      var Q_2 = 1,
          Q_1 = 0,
          Q = 0;
      var A = Math.floor(B);

      while (Q_1 < D) {
        A = Math.floor(B);
        P = A * P_1 + P_2;
        Q = A * Q_1 + Q_2;
        if (B - A < 0.00000005) break;
        B = 1 / (B - A);
        P_2 = P_1;
        P_1 = P;
        Q_2 = Q_1;
        Q_1 = Q;
      }

      if (Q > D) {
        if (Q_1 > D) {
          Q = Q_2;
          P = P_2;
        } else {
          Q = Q_1;
          P = P_1;
        }
      }

      if (!mixed) return [0, sgn * P, Q];
      var q = Math.floor(sgn * P / Q);
      return [q, sgn * P - q * Q, Q];
    }

    function parse_date_code(v, opts, b2) {
      if (v > 2958465 || v < 0) return null;
      var date = v | 0,
          time = Math.floor(86400 * (v - date)),
          dow = 0;
      var dout = [];
      var out = {
        D: date,
        T: time,
        u: 86400 * (v - date) - time,
        y: 0,
        m: 0,
        d: 0,
        H: 0,
        M: 0,
        S: 0,
        q: 0
      };
      if (Math.abs(out.u) < 1e-6) out.u = 0;
      if (opts && opts.date1904) date += 1462;

      if (out.u > 0.9999) {
        out.u = 0;

        if (++time == 86400) {
          out.T = time = 0;
          ++date;
          ++out.D;
        }
      }

      if (date === 60) {
        dout = b2 ? [1317, 10, 29] : [1900, 2, 29];
        dow = 3;
      } else if (date === 0) {
        dout = b2 ? [1317, 8, 29] : [1900, 1, 0];
        dow = 6;
      } else {
        if (date > 60) --date;
        /* 1 = Jan 1 1900 in Gregorian */

        var d = new Date(1900, 0, 1);
        d.setDate(d.getDate() + date - 1);
        dout = [d.getFullYear(), d.getMonth() + 1, d.getDate()];
        dow = d.getDay();
        if (date < 60) dow = (dow + 6) % 7;
        if (b2) dow = fix_hijri(d, dout);
      }

      out.y = dout[0];
      out.m = dout[1];
      out.d = dout[2];
      out.S = time % 60;
      time = Math.floor(time / 60);
      out.M = time % 60;
      time = Math.floor(time / 60);
      out.H = time;
      out.q = dow;
      return out;
    }

    SSF.parse_date_code = parse_date_code;
    var basedate = new Date(1899, 11, 31, 0, 0, 0);
    var dnthresh = basedate.getTime();
    var base1904 = new Date(1900, 2, 1, 0, 0, 0);

    function datenum_local(v, date1904) {
      var epoch = v.getTime();
      if (date1904) epoch -= 1461 * 24 * 60 * 60 * 1000;else if (v >= base1904) epoch += 24 * 60 * 60 * 1000;
      return (epoch - (dnthresh + (v.getTimezoneOffset() - basedate.getTimezoneOffset()) * 60000)) / (24 * 60 * 60 * 1000);
    }
    /* The longest 32-bit integer text is "-4294967296", exactly 11 chars */


    function general_fmt_int(v) {
      return v.toString(10);
    }

    SSF._general_int = general_fmt_int;
    /* ECMA-376 18.8.30 numFmt*/

    /* Note: `toPrecision` uses standard form when prec > E and E >= -6 */

    var general_fmt_num = function make_general_fmt_num() {
      var trailing_zeroes_and_decimal = /(?:\.0*|(\.\d*[1-9])0+)$/;

      function strip_decimal(o) {
        return o.indexOf(".") == -1 ? o : o.replace(trailing_zeroes_and_decimal, "$1");
      }
      /* General Exponential always shows 2 digits exp and trims the mantissa */


      var mantissa_zeroes_and_decimal = /(?:\.0*|(\.\d*[1-9])0+)[Ee]/;
      var exp_with_single_digit = /(E[+-])(\d)$/;

      function normalize_exp(o) {
        if (o.indexOf("E") == -1) return o;
        return o.replace(mantissa_zeroes_and_decimal, "$1E").replace(exp_with_single_digit, "$10$2");
      }
      /* exponent >= -9 and <= 9 */


      function small_exp(v) {
        var w = v < 0 ? 12 : 11;
        var o = strip_decimal(v.toFixed(12));
        if (o.length <= w) return o;
        o = v.toPrecision(10);
        if (o.length <= w) return o;
        return v.toExponential(5);
      }
      /* exponent >= 11 or <= -10 likely exponential */


      function large_exp(v) {
        var o = strip_decimal(v.toFixed(11));
        return o.length > (v < 0 ? 12 : 11) || o === "0" || o === "-0" ? v.toPrecision(6) : o;
      }

      function general_fmt_num_base(v) {
        var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E),
            o;
        if (V >= -4 && V <= -1) o = v.toPrecision(10 + V);else if (Math.abs(V) <= 9) o = small_exp(v);else if (V === 10) o = v.toFixed(10).substr(0, 12);else o = large_exp(v);
        return strip_decimal(normalize_exp(o.toUpperCase()));
      }

      return general_fmt_num_base;
    }();

    SSF._general_num = general_fmt_num;
    /*
    	"General" rules:
    	- text is passed through ("@")
    	- booleans are rendered as TRUE/FALSE
    	- "up to 11 characters" displayed for numbers
    	- Default date format (code 14) used for Dates
    
    	TODO: technically the display depends on the width of the cell
    */

    function general_fmt(v, opts) {
      switch (typeof v) {
        case 'string':
          return v;

        case 'boolean':
          return v ? "TRUE" : "FALSE";

        case 'number':
          return (v | 0) === v ? v.toString(10) : general_fmt_num(v);

        case 'undefined':
          return "";

        case 'object':
          if (v == null) return "";
          if (v instanceof Date) return format(14, datenum_local(v, opts && opts.date1904), opts);
      }

      throw new Error("unsupported value in General format: " + v);
    }

    SSF._general = general_fmt;

    function fix_hijri(date, o) {
      /* TODO: properly adjust y/m/d and  */
      o[0] -= 581;
      var dow = date.getDay();
      if (date < 60) dow = (dow + 6) % 7;
      return dow;
    } //var THAI_DIGITS = "\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59".split("");

    /*jshint -W086 */


    function write_date(type, fmt, val, ss0) {
      var o = "",
          ss = 0,
          tt = 0,
          y = val.y,
          out,
          outl = 0;

      switch (type) {
        case 98:
          /* 'b' buddhist year */
          y = val.y + 543;

        /* falls through */

        case 121:
          /* 'y' year */
          switch (fmt.length) {
            case 1:
            case 2:
              out = y % 100;
              outl = 2;
              break;

            default:
              out = y % 10000;
              outl = 4;
              break;
          }

          break;

        case 109:
          /* 'm' month */
          switch (fmt.length) {
            case 1:
            case 2:
              out = val.m;
              outl = fmt.length;
              break;

            case 3:
              return months[val.m - 1][1];

            case 5:
              return months[val.m - 1][0];

            default:
              return months[val.m - 1][2];
          }

          break;

        case 100:
          /* 'd' day */
          switch (fmt.length) {
            case 1:
            case 2:
              out = val.d;
              outl = fmt.length;
              break;

            case 3:
              return days[val.q][0];

            default:
              return days[val.q][1];
          }

          break;

        case 104:
          /* 'h' 12-hour */
          switch (fmt.length) {
            case 1:
            case 2:
              out = 1 + (val.H + 11) % 12;
              outl = fmt.length;
              break;

            default:
              throw 'bad hour format: ' + fmt;
          }

          break;

        case 72:
          /* 'H' 24-hour */
          switch (fmt.length) {
            case 1:
            case 2:
              out = val.H;
              outl = fmt.length;
              break;

            default:
              throw 'bad hour format: ' + fmt;
          }

          break;

        case 77:
          /* 'M' minutes */
          switch (fmt.length) {
            case 1:
            case 2:
              out = val.M;
              outl = fmt.length;
              break;

            default:
              throw 'bad minute format: ' + fmt;
          }

          break;

        case 115:
          /* 's' seconds */
          if (fmt != 's' && fmt != 'ss' && fmt != '.0' && fmt != '.00' && fmt != '.000') throw 'bad second format: ' + fmt;
          if (val.u === 0 && (fmt == "s" || fmt == "ss")) return pad0(val.S, fmt.length);
          if (ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;else tt = ss0 === 1 ? 10 : 1;
          ss = Math.round(tt * (val.S + val.u));
          if (ss >= 60 * tt) ss = 0;
          if (fmt === 's') return ss === 0 ? "0" : "" + ss / tt;
          o = pad0(ss, 2 + ss0);
          if (fmt === 'ss') return o.substr(0, 2);
          return "." + o.substr(2, fmt.length - 1);

        case 90:
          /* 'Z' absolute time */
          switch (fmt) {
            case '[h]':
            case '[hh]':
              out = val.D * 24 + val.H;
              break;

            case '[m]':
            case '[mm]':
              out = (val.D * 24 + val.H) * 60 + val.M;
              break;

            case '[s]':
            case '[ss]':
              out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);
              break;

            default:
              throw 'bad abstime format: ' + fmt;
          }

          outl = fmt.length === 3 ? 1 : 2;
          break;

        case 101:
          /* 'e' era */
          out = y;
          outl = 1;
          break;
      }

      var outstr = outl > 0 ? pad0(out, outl) : "";
      return outstr;
    }
    /*jshint +W086 */


    function commaify(s) {
      var w = 3;
      if (s.length <= w) return s;
      var j = s.length % w,
          o = s.substr(0, j);

      for (; j != s.length; j += w) o += (o.length > 0 ? "," : "") + s.substr(j, w);

      return o;
    }

    var write_num = function make_write_num() {
      var pct1 = /%/g;

      function write_num_pct(type, fmt, val) {
        var sfmt = fmt.replace(pct1, ""),
            mul = fmt.length - sfmt.length;
        return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
      }

      function write_num_cm(type, fmt, val) {
        var idx = fmt.length - 1;

        while (fmt.charCodeAt(idx - 1) === 44) --idx;

        return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
      }

      function write_num_exp(fmt, val) {
        var o;
        var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;

        if (fmt.match(/^#+0.0E\+0$/)) {
          if (val == 0) return "0.0E+0";else if (val < 0) return "-" + write_num_exp(fmt, -val);
          var period = fmt.indexOf(".");
          if (period === -1) period = fmt.indexOf('E');
          var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
          if (ee < 0) ee += period;
          o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);

          if (o.indexOf("e") === -1) {
            var fakee = Math.floor(Math.log(val) * Math.LOG10E);
            if (o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee);else o += "E+" + (fakee - ee);

            while (o.substr(0, 2) === "0.") {
              o = o.charAt(0) + o.substr(2, period) + "." + o.substr(2 + period);
              o = o.replace(/^0+([1-9])/, "$1").replace(/^0+\./, "0.");
            }

            o = o.replace(/\+-/, "-");
          }

          o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function ($$, $1, $2, $3) {
            return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
          });
        } else o = val.toExponential(idx);

        if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
        if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, "e");
        return o.replace("e", "E");
      }

      var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;

      function write_num_f1(r, aval, sign) {
        var den = parseInt(r[4], 10),
            rr = Math.round(aval * den),
            base = Math.floor(rr / den);
        var myn = rr - base * den,
            myd = den;
        return sign + (base === 0 ? "" : "" + base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn, r[1].length) + r[2] + "/" + r[3] + pad0(myd, r[4].length));
      }

      function write_num_f2(r, aval, sign) {
        return sign + (aval === 0 ? "" : "" + aval) + fill(" ", r[1].length + 2 + r[4].length);
      }

      var dec1 = /^#*0*\.([0#]+)/;
      var closeparen = /\).*[0#]/;
      var phone = /\(###\) ###\\?-####/;

      function hashq(str) {
        var o = "",
            cc;

        for (var i = 0; i != str.length; ++i) switch (cc = str.charCodeAt(i)) {
          case 35:
            break;

          case 63:
            o += " ";
            break;

          case 48:
            o += "0";
            break;

          default:
            o += String.fromCharCode(cc);
        }

        return o;
      }

      function rnd(val, d) {
        var dd = Math.pow(10, d);
        return "" + Math.round(val * dd) / dd;
      }

      function dec(val, d) {
        var _frac = val - Math.floor(val),
            dd = Math.pow(10, d);

        if (d < ('' + Math.round(_frac * dd)).length) return 0;
        return Math.round(_frac * dd);
      }

      function carry(val, d) {
        if (d < ('' + Math.round((val - Math.floor(val)) * Math.pow(10, d))).length) {
          return 1;
        }

        return 0;
      }

      function flr(val) {
        if (val < 2147483647 && val > -2147483648) return "" + (val >= 0 ? val | 0 : val - 1 | 0);
        return "" + Math.floor(val);
      }

      function write_num_flt(type, fmt, val) {
        if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
          var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
          if (val >= 0) return write_num_flt('n', ffmt, val);
          return '(' + write_num_flt('n', ffmt, -val) + ')';
        }

        if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);
        if (fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val);
        if (fmt.indexOf('E') !== -1) return write_num_exp(fmt, val);
        if (fmt.charCodeAt(0) === 36) return "$" + write_num_flt(type, fmt.substr(fmt.charAt(1) == ' ' ? 2 : 1), val);
        var o;
        var r,
            ri,
            ff,
            aval = Math.abs(val),
            sign = val < 0 ? "-" : "";
        if (fmt.match(/^00+$/)) return sign + pad0r(aval, fmt.length);

        if (fmt.match(/^[#?]+$/)) {
          o = pad0r(val, 0);
          if (o === "0") o = "";
          return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
        }

        if (r = fmt.match(frac1)) return write_num_f1(r, aval, sign);
        if (fmt.match(/^#+0+$/)) return sign + pad0r(aval, fmt.length - fmt.indexOf("0"));

        if (r = fmt.match(dec1)) {
          o = rnd(val, r[1].length).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1])).replace(/\.(\d*)$/, function ($$, $1) {
            return "." + $1 + fill("0", hashq(r[1]).length - $1.length);
          });
          return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
        }

        fmt = fmt.replace(/^#+([0.])/, "$1");

        if (r = fmt.match(/^(0*)\.(#*)$/)) {
          return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
        }

        if (r = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify(pad0r(aval, 0));

        if (r = fmt.match(/^#,##0\.([#0]*0)$/)) {
          return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify("" + (Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length), r[1].length);
        }

        if (r = fmt.match(/^#,#*,#0/)) return write_num_flt(type, fmt.replace(/^#,#*,/, ""), val);

        if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
          o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g, ""), val));
          ri = 0;
          return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function (x) {
            return ri < o.length ? o.charAt(ri++) : x === '0' ? '0' : "";
          }));
        }

        if (fmt.match(phone)) {
          o = write_num_flt(type, "##########", val);
          return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
        }

        var oa = "";

        if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
          ri = Math.min(r[4].length, 7);
          ff = frac(aval, Math.pow(10, ri) - 1, false);
          o = "" + sign;
          oa = write_num("n", r[1], ff[1]);
          if (oa.charAt(oa.length - 1) == " ") oa = oa.substr(0, oa.length - 1) + "0";
          o += oa + r[2] + "/" + r[3];
          oa = rpad_(ff[2], ri);
          if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
          o += oa;
          return o;
        }

        if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
          ri = Math.min(Math.max(r[1].length, r[4].length), 7);
          ff = frac(aval, Math.pow(10, ri) - 1, true);
          return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
        }

        if (r = fmt.match(/^[#0?]+$/)) {
          o = pad0r(val, 0);
          if (fmt.length <= o.length) return o;
          return hashq(fmt.substr(0, fmt.length - o.length)) + o;
        }

        if (r = fmt.match(/^([#0?]+)\.([#0]+)$/)) {
          o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
          ri = o.indexOf(".");
          var lres = fmt.indexOf(".") - ri,
              rres = fmt.length - o.length - lres;
          return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
        }

        if (r = fmt.match(/^00,000\.([#0]*0)$/)) {
          ri = dec(val, r[1].length);
          return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function ($$) {
            return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
          }) + "." + pad0(ri, r[1].length);
        }

        switch (fmt) {
          case "###,##0.00":
            return write_num_flt(type, "#,##0.00", val);

          case "###,###":
          case "##,###":
          case "#,###":
            var x = commaify(pad0r(aval, 0));
            return x !== "0" ? sign + x : "";

          case "###,###.00":
            return write_num_flt(type, "###,##0.00", val).replace(/^0\./, ".");

          case "#,###.00":
            return write_num_flt(type, "#,##0.00", val).replace(/^0\./, ".");

          default:
        }

        throw new Error("unsupported format |" + fmt + "|");
      }

      function write_num_cm2(type, fmt, val) {
        var idx = fmt.length - 1;

        while (fmt.charCodeAt(idx - 1) === 44) --idx;

        return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
      }

      function write_num_pct2(type, fmt, val) {
        var sfmt = fmt.replace(pct1, ""),
            mul = fmt.length - sfmt.length;
        return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
      }

      function write_num_exp2(fmt, val) {
        var o;
        var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;

        if (fmt.match(/^#+0.0E\+0$/)) {
          if (val == 0) return "0.0E+0";else if (val < 0) return "-" + write_num_exp2(fmt, -val);
          var period = fmt.indexOf(".");
          if (period === -1) period = fmt.indexOf('E');
          var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
          if (ee < 0) ee += period;
          o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);

          if (!o.match(/[Ee]/)) {
            var fakee = Math.floor(Math.log(val) * Math.LOG10E);
            if (o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee);else o += "E+" + (fakee - ee);
            o = o.replace(/\+-/, "-");
          }

          o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function ($$, $1, $2, $3) {
            return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
          });
        } else o = val.toExponential(idx);

        if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
        if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, "e");
        return o.replace("e", "E");
      }

      function write_num_int(type, fmt, val) {
        if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
          var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
          if (val >= 0) return write_num_int('n', ffmt, val);
          return '(' + write_num_int('n', ffmt, -val) + ')';
        }

        if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);
        if (fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val);
        if (fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val);
        if (fmt.charCodeAt(0) === 36) return "$" + write_num_int(type, fmt.substr(fmt.charAt(1) == ' ' ? 2 : 1), val);
        var o;
        var r,
            ri,
            ff,
            aval = Math.abs(val),
            sign = val < 0 ? "-" : "";
        if (fmt.match(/^00+$/)) return sign + pad0(aval, fmt.length);

        if (fmt.match(/^[#?]+$/)) {
          o = "" + val;
          if (val === 0) o = "";
          return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
        }

        if (r = fmt.match(frac1)) return write_num_f2(r, aval, sign);
        if (fmt.match(/^#+0+$/)) return sign + pad0(aval, fmt.length - fmt.indexOf("0"));

        if (r = fmt.match(dec1)) {
          o = ("" + val).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1]));
          o = o.replace(/\.(\d*)$/, function ($$, $1) {
            return "." + $1 + fill("0", hashq(r[1]).length - $1.length);
          });
          return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
        }

        fmt = fmt.replace(/^#+([0.])/, "$1");

        if (r = fmt.match(/^(0*)\.(#*)$/)) {
          return sign + ("" + aval).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
        }

        if (r = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify("" + aval);

        if (r = fmt.match(/^#,##0\.([#0]*0)$/)) {
          return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val) + "." + fill('0', r[1].length);
        }

        if (r = fmt.match(/^#,#*,#0/)) return write_num_int(type, fmt.replace(/^#,#*,/, ""), val);

        if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
          o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g, ""), val));
          ri = 0;
          return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function (x) {
            return ri < o.length ? o.charAt(ri++) : x === '0' ? '0' : "";
          }));
        }

        if (fmt.match(phone)) {
          o = write_num_int(type, "##########", val);
          return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
        }

        var oa = "";

        if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
          ri = Math.min(r[4].length, 7);
          ff = frac(aval, Math.pow(10, ri) - 1, false);
          o = "" + sign;
          oa = write_num("n", r[1], ff[1]);
          if (oa.charAt(oa.length - 1) == " ") oa = oa.substr(0, oa.length - 1) + "0";
          o += oa + r[2] + "/" + r[3];
          oa = rpad_(ff[2], ri);
          if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
          o += oa;
          return o;
        }

        if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
          ri = Math.min(Math.max(r[1].length, r[4].length), 7);
          ff = frac(aval, Math.pow(10, ri) - 1, true);
          return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
        }

        if (r = fmt.match(/^[#0?]+$/)) {
          o = "" + val;
          if (fmt.length <= o.length) return o;
          return hashq(fmt.substr(0, fmt.length - o.length)) + o;
        }

        if (r = fmt.match(/^([#0]+)\.([#0]+)$/)) {
          o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
          ri = o.indexOf(".");
          var lres = fmt.indexOf(".") - ri,
              rres = fmt.length - o.length - lres;
          return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
        }

        if (r = fmt.match(/^00,000\.([#0]*0)$/)) {
          return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function ($$) {
            return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
          }) + "." + pad0(0, r[1].length);
        }

        switch (fmt) {
          case "###,###":
          case "##,###":
          case "#,###":
            var x = commaify("" + aval);
            return x !== "0" ? sign + x : "";

          default:
            if (fmt.match(/\.[0#?]*$/)) return write_num_int(type, fmt.slice(0, fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
        }

        throw new Error("unsupported format |" + fmt + "|");
      }

      return function write_num(type, fmt, val) {
        return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
      };
    }();

    function split_fmt(fmt) {
      var out = [];
      var in_str = false
      /*, cc*/
      ;

      for (var i = 0, j = 0; i < fmt.length; ++i) switch (
      /*cc=*/
      fmt.charCodeAt(i)) {
        case 34:
          /* '"' */
          in_str = !in_str;
          break;

        case 95:
        case 42:
        case 92:
          /* '_' '*' '\\' */
          ++i;
          break;

        case 59:
          /* ';' */
          out[out.length] = fmt.substr(j, i - j);
          j = i + 1;
      }

      out[out.length] = fmt.substr(j);
      if (in_str === true) throw new Error("Format |" + fmt + "| unterminated string ");
      return out;
    }

    SSF._split = split_fmt;
    var abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;

    function fmt_is_date(fmt) {
      var i = 0,

      /*cc = 0,*/
      c = "",
          o = "";

      while (i < fmt.length) {
        switch (c = fmt.charAt(i)) {
          case 'G':
            if (isgeneral(fmt, i)) i += 6;
            i++;
            break;

          case '"':
            for (;
            /*cc=*/
            fmt.charCodeAt(++i) !== 34 && i < fmt.length;) {
              /*empty*/
            }

            ++i;
            break;

          case '\\':
            i += 2;
            break;

          case '_':
            i += 2;
            break;

          case '@':
            ++i;
            break;

          case 'B':
          case 'b':
            if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2") return true;

          /* falls through */

          case 'M':
          case 'D':
          case 'Y':
          case 'H':
          case 'S':
          case 'E':
          /* falls through */

          case 'm':
          case 'd':
          case 'y':
          case 'h':
          case 's':
          case 'e':
          case 'g':
            return true;

          case 'A':
          case 'a':
          case 'ä¸':
            if (fmt.substr(i, 3).toUpperCase() === "A/P") return true;
            if (fmt.substr(i, 5).toUpperCase() === "AM/PM") return true;
            if (fmt.substr(i, 5).toUpperCase() === "ä¸å/ä¸å") return true;
            ++i;
            break;

          case '[':
            o = c;

            while (fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);

            if (o.match(abstime)) return true;
            break;

          case '.':
          /* falls through */

          case '0':
          case '#':
            while (i < fmt.length && ("0#?.,E+-%".indexOf(c = fmt.charAt(++i)) > -1 || c == '\\' && fmt.charAt(i + 1) == "-" && "0#".indexOf(fmt.charAt(i + 2)) > -1)) {
              /* empty */
            }

            break;

          case '?':
            while (fmt.charAt(++i) === c) {
              /* empty */
            }

            break;

          case '*':
            ++i;
            if (fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i;
            break;

          case '(':
          case ')':
            ++i;
            break;

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            while (i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1) {
              /* empty */
            }

            break;

          case ' ':
            ++i;
            break;

          default:
            ++i;
            break;
        }
      }

      return false;
    }

    SSF.is_date = fmt_is_date;

    function eval_fmt(fmt, v, opts, flen) {
      var out = [],
          o = "",
          i = 0,
          c = "",
          lst = 't',
          dt,
          j,
          cc;
      var hr = 'H';
      /* Tokenize */

      while (i < fmt.length) {
        switch (c = fmt.charAt(i)) {
          case 'G':
            /* General */
            if (!isgeneral(fmt, i)) throw new Error('unrecognized character ' + c + ' in ' + fmt);
            out[out.length] = {
              t: 'G',
              v: 'General'
            };
            i += 7;
            break;

          case '"':
            /* Literal text */
            for (o = ""; (cc = fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) o += String.fromCharCode(cc);

            out[out.length] = {
              t: 't',
              v: o
            };
            ++i;
            break;

          case '\\':
            var w = fmt.charAt(++i),
                t = w === "(" || w === ")" ? w : 't';
            out[out.length] = {
              t: t,
              v: w
            };
            ++i;
            break;

          case '_':
            out[out.length] = {
              t: 't',
              v: " "
            };
            i += 2;
            break;

          case '@':
            /* Text Placeholder */
            out[out.length] = {
              t: 'T',
              v: v
            };
            ++i;
            break;

          case 'B':
          case 'b':
            if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2") {
              if (dt == null) {
                dt = parse_date_code(v, opts, fmt.charAt(i + 1) === "2");
                if (dt == null) return "";
              }

              out[out.length] = {
                t: 'X',
                v: fmt.substr(i, 2)
              };
              lst = c;
              i += 2;
              break;
            }

          /* falls through */

          case 'M':
          case 'D':
          case 'Y':
          case 'H':
          case 'S':
          case 'E':
            c = c.toLowerCase();

          /* falls through */

          case 'm':
          case 'd':
          case 'y':
          case 'h':
          case 's':
          case 'e':
          case 'g':
            if (v < 0) return "";

            if (dt == null) {
              dt = parse_date_code(v, opts);
              if (dt == null) return "";
            }

            o = c;

            while (++i < fmt.length && fmt.charAt(i).toLowerCase() === c) o += c;

            if (c === 'm' && lst.toLowerCase() === 'h') c = 'M';
            if (c === 'h') c = hr;
            out[out.length] = {
              t: c,
              v: o
            };
            lst = c;
            break;

          case 'A':
          case 'a':
          case 'ä¸':
            var q = {
              t: c,
              v: c
            };
            if (dt == null) dt = parse_date_code(v, opts);

            if (fmt.substr(i, 3).toUpperCase() === "A/P") {
              if (dt != null) q.v = dt.H >= 12 ? "P" : "A";
              q.t = 'T';
              hr = 'h';
              i += 3;
            } else if (fmt.substr(i, 5).toUpperCase() === "AM/PM") {
              if (dt != null) q.v = dt.H >= 12 ? "PM" : "AM";
              q.t = 'T';
              i += 5;
              hr = 'h';
            } else if (fmt.substr(i, 5).toUpperCase() === "ä¸å/ä¸å") {
              if (dt != null) q.v = dt.H >= 12 ? "ä¸å" : "ä¸å";
              q.t = 'T';
              i += 5;
              hr = 'h';
            } else {
              q.t = "t";
              ++i;
            }

            if (dt == null && q.t === 'T') return "";
            out[out.length] = q;
            lst = c;
            break;

          case '[':
            o = c;

            while (fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);

            if (o.slice(-1) !== ']') throw 'unterminated "[" block: |' + o + '|';

            if (o.match(abstime)) {
              if (dt == null) {
                dt = parse_date_code(v, opts);
                if (dt == null) return "";
              }

              out[out.length] = {
                t: 'Z',
                v: o.toLowerCase()
              };
              lst = o.charAt(1);
            } else if (o.indexOf("$") > -1) {
              o = (o.match(/\$([^-\[\]]*)/) || [])[1] || "$";
              if (!fmt_is_date(fmt)) out[out.length] = {
                t: 't',
                v: o
              };
            }

            break;

          /* Numbers */

          case '.':
            if (dt != null) {
              o = c;

              while (++i < fmt.length && (c = fmt.charAt(i)) === "0") o += c;

              out[out.length] = {
                t: 's',
                v: o
              };
              break;
            }

          /* falls through */

          case '0':
          case '#':
            o = c;

            while (++i < fmt.length && "0#?.,E+-%".indexOf(c = fmt.charAt(i)) > -1) o += c;

            out[out.length] = {
              t: 'n',
              v: o
            };
            break;

          case '?':
            o = c;

            while (fmt.charAt(++i) === c) o += c;

            out[out.length] = {
              t: c,
              v: o
            };
            lst = c;
            break;

          case '*':
            ++i;
            if (fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i;
            break;
          // **

          case '(':
          case ')':
            out[out.length] = {
              t: flen === 1 ? 't' : c,
              v: c
            };
            ++i;
            break;

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            o = c;

            while (i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1) o += fmt.charAt(i);

            out[out.length] = {
              t: 'D',
              v: o
            };
            break;

          case ' ':
            out[out.length] = {
              t: c,
              v: c
            };
            ++i;
            break;

          case '$':
            out[out.length] = {
              t: 't',
              v: '$'
            };
            ++i;
            break;

          default:
            if (",$-+/():!^&'~{}<>=â¬acfijklopqrtuvwxzP".indexOf(c) === -1) throw new Error('unrecognized character ' + c + ' in ' + fmt);
            out[out.length] = {
              t: 't',
              v: c
            };
            ++i;
            break;
        }
      }
      /* Scan for date/time parts */


      var bt = 0,
          ss0 = 0,
          ssm;

      for (i = out.length - 1, lst = 't'; i >= 0; --i) {
        switch (out[i].t) {
          case 'h':
          case 'H':
            out[i].t = hr;
            lst = 'h';
            if (bt < 1) bt = 1;
            break;

          case 's':
            if (ssm = out[i].v.match(/\.0+$/)) ss0 = Math.max(ss0, ssm[0].length - 1);
            if (bt < 3) bt = 3;

          /* falls through */

          case 'd':
          case 'y':
          case 'M':
          case 'e':
            lst = out[i].t;
            break;

          case 'm':
            if (lst === 's') {
              out[i].t = 'M';
              if (bt < 2) bt = 2;
            }

            break;

          case 'X':
            /*if(out[i].v === "B2");*/
            break;

          case 'Z':
            if (bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;
            if (bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;
            if (bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;
        }
      }
      /* time rounding depends on presence of minute / second / usec fields */


      switch (bt) {
        case 0:
          break;

        case 1:
          if (dt.u >= 0.5) {
            dt.u = 0;
            ++dt.S;
          }

          if (dt.S >= 60) {
            dt.S = 0;
            ++dt.M;
          }

          if (dt.M >= 60) {
            dt.M = 0;
            ++dt.H;
          }

          break;

        case 2:
          if (dt.u >= 0.5) {
            dt.u = 0;
            ++dt.S;
          }

          if (dt.S >= 60) {
            dt.S = 0;
            ++dt.M;
          }

          break;
      }
      /* replace fields */


      var nstr = "",
          jj;

      for (i = 0; i < out.length; ++i) {
        switch (out[i].t) {
          case 't':
          case 'T':
          case ' ':
          case 'D':
            break;

          case 'X':
            out[i].v = "";
            out[i].t = ";";
            break;

          case 'd':
          case 'm':
          case 'y':
          case 'h':
          case 'H':
          case 'M':
          case 's':
          case 'e':
          case 'b':
          case 'Z':
            out[i].v = write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
            out[i].t = 't';
            break;

          case 'n':
          case '?':
            jj = i + 1;

            while (out[jj] != null && ((c = out[jj].t) === "?" || c === "D" || (c === " " || c === "t") && out[jj + 1] != null && (out[jj + 1].t === '?' || out[jj + 1].t === "t" && out[jj + 1].v === '/') || out[i].t === '(' && (c === ' ' || c === 'n' || c === ')') || c === 't' && (out[jj].v === '/' || out[jj].v === ' ' && out[jj + 1] != null && out[jj + 1].t == '?'))) {
              out[i].v += out[jj].v;
              out[jj] = {
                v: "",
                t: ";"
              };
              ++jj;
            }

            nstr += out[i].v;
            i = jj - 1;
            break;

          case 'G':
            out[i].t = 't';
            out[i].v = general_fmt(v, opts);
            break;
        }
      }

      var vv = "",
          myv,
          ostr;

      if (nstr.length > 0) {
        if (nstr.charCodeAt(0) == 40)
          /* '(' */
          {
            myv = v < 0 && nstr.charCodeAt(0) === 45 ? -v : v;
            ostr = write_num('n', nstr, myv);
          } else {
          myv = v < 0 && flen > 1 ? -v : v;
          ostr = write_num('n', nstr, myv);

          if (myv < 0 && out[0] && out[0].t == 't') {
            ostr = ostr.substr(1);
            out[0].v = "-" + out[0].v;
          }
        }

        jj = ostr.length - 1;
        var decpt = out.length;

        for (i = 0; i < out.length; ++i) if (out[i] != null && out[i].t != 't' && out[i].v.indexOf(".") > -1) {
          decpt = i;
          break;
        }

        var lasti = out.length;

        if (decpt === out.length && ostr.indexOf("E") === -1) {
          for (i = out.length - 1; i >= 0; --i) {
            if (out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;

            if (jj >= out[i].v.length - 1) {
              jj -= out[i].v.length;
              out[i].v = ostr.substr(jj + 1, out[i].v.length);
            } else if (jj < 0) out[i].v = "";else {
              out[i].v = ostr.substr(0, jj + 1);
              jj = -1;
            }

            out[i].t = 't';
            lasti = i;
          }

          if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
        } else if (decpt !== out.length && ostr.indexOf("E") === -1) {
          jj = ostr.indexOf(".") - 1;

          for (i = decpt; i >= 0; --i) {
            if (out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;
            j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") - 1 : out[i].v.length - 1;
            vv = out[i].v.substr(j + 1);

            for (; j >= 0; --j) {
              if (jj >= 0 && (out[i].v.charAt(j) === "0" || out[i].v.charAt(j) === "#")) vv = ostr.charAt(jj--) + vv;
            }

            out[i].v = vv;
            out[i].t = 't';
            lasti = i;
          }

          if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
          jj = ostr.indexOf(".") + 1;

          for (i = decpt; i < out.length; ++i) {
            if (out[i] == null || 'n?('.indexOf(out[i].t) === -1 && i !== decpt) continue;
            j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") + 1 : 0;
            vv = out[i].v.substr(0, j);

            for (; j < out[i].v.length; ++j) {
              if (jj < ostr.length) vv += ostr.charAt(jj++);
            }

            out[i].v = vv;
            out[i].t = 't';
            lasti = i;
          }
        }
      }

      for (i = 0; i < out.length; ++i) if (out[i] != null && 'n?'.indexOf(out[i].t) > -1) {
        myv = flen > 1 && v < 0 && i > 0 && out[i - 1].v === "-" ? -v : v;
        out[i].v = write_num(out[i].t, out[i].v, myv);
        out[i].t = 't';
      }

      var retval = "";

      for (i = 0; i !== out.length; ++i) if (out[i] != null) retval += out[i].v;

      return retval;
    }

    SSF._eval = eval_fmt;
    var cfregex = /\[[=<>]/;
    var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;

    function chkcond(v, rr) {
      if (rr == null) return false;
      var thresh = parseFloat(rr[2]);

      switch (rr[1]) {
        case "=":
          if (v == thresh) return true;
          break;

        case ">":
          if (v > thresh) return true;
          break;

        case "<":
          if (v < thresh) return true;
          break;

        case "<>":
          if (v != thresh) return true;
          break;

        case ">=":
          if (v >= thresh) return true;
          break;

        case "<=":
          if (v <= thresh) return true;
          break;
      }

      return false;
    }

    function choose_fmt(f, v) {
      var fmt = split_fmt(f);
      var l = fmt.length,
          lat = fmt[l - 1].indexOf("@");
      if (l < 4 && lat > -1) --l;
      if (fmt.length > 4) throw new Error("cannot find right format for |" + fmt.join("|") + "|");
      if (typeof v !== "number") return [4, fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : "@"];

      switch (fmt.length) {
        case 1:
          fmt = lat > -1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"];
          break;

        case 2:
          fmt = lat > -1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"];
          break;

        case 3:
          fmt = lat > -1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"];
          break;

        case 4:
          break;
      }

      var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
      if (fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1) return [l, ff];

      if (fmt[0].match(cfregex) != null || fmt[1].match(cfregex) != null) {
        var m1 = fmt[0].match(cfregex2);
        var m2 = fmt[1].match(cfregex2);
        return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];
      }

      return [l, ff];
    }

    function format(fmt, v, o) {
      if (o == null) o = {};
      var sfmt = "";

      switch (typeof fmt) {
        case "string":
          if (fmt == "m/d/yy" && o.dateNF) sfmt = o.dateNF;else sfmt = fmt;
          break;

        case "number":
          if (fmt == 14 && o.dateNF) sfmt = o.dateNF;else sfmt = (o.table != null ? o.table : table_fmt)[fmt];
          if (sfmt == null) sfmt = o.table && o.table[default_map[fmt]] || table_fmt[default_map[fmt]];
          if (sfmt == null) sfmt = default_str[fmt] || "General";
          break;
      }

      if (isgeneral(sfmt, 0)) return general_fmt(v, o);
      if (v instanceof Date) v = datenum_local(v, o.date1904);
      var f = choose_fmt(sfmt, v);
      if (isgeneral(f[1])) return general_fmt(v, o);
      if (v === true) v = "TRUE";else if (v === false) v = "FALSE";else if (v === "" || v == null) return "";
      return eval_fmt(f[1], v, o, f[0]);
    }

    function load_entry(fmt, idx) {
      if (typeof idx != 'number') {
        idx = +idx || -1;

        for (var i = 0; i < 0x0188; ++i) {
          if (table_fmt[i] == undefined) {
            if (idx < 0) idx = i;
            continue;
          }

          if (table_fmt[i] == fmt) {
            idx = i;
            break;
          }
        }

        if (idx < 0) idx = 0x187;
      }

      table_fmt[idx] = fmt;
      return idx;
    }

    SSF.load = load_entry;
    SSF._table = table_fmt;

    SSF.get_table = function get_table() {
      return table_fmt;
    };

    SSF.load_table = function load_table(tbl) {
      for (var i = 0; i != 0x0188; ++i) if (tbl[i] !== undefined) load_entry(tbl[i], i);
    };

    SSF.init_table = init_table;
    SSF.format = format;
  };

  make_ssf(SSF);
  /* map from xlml named formats to SSF TODO: localize */

  var XLMLFormatMap
  /*{[string]:string}*/
  = {
    "General Number": "General",
    "General Date": SSF._table[22],
    "Long Date": "dddd, mmmm dd, yyyy",
    "Medium Date": SSF._table[15],
    "Short Date": SSF._table[14],
    "Long Time": SSF._table[19],
    "Medium Time": SSF._table[18],
    "Short Time": SSF._table[20],
    "Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    "Fixed": SSF._table[2],
    "Standard": SSF._table[4],
    "Percent": SSF._table[10],
    "Scientific": SSF._table[11],
    "Yes/No": '"Yes";"Yes";"No";@',
    "True/False": '"True";"True";"False";@',
    "On/Off": '"Yes";"Yes";"No";@'
  };
  var SSFImplicit
  /*{[number]:string}*/
  = {
    "5": '"$"#,##0_);\\("$"#,##0\\)',
    "6": '"$"#,##0_);[Red]\\("$"#,##0\\)',
    "7": '"$"#,##0.00_);\\("$"#,##0.00\\)',
    "8": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    "23": 'General',
    "24": 'General',
    "25": 'General',
    "26": 'General',
    "27": 'm/d/yy',
    "28": 'm/d/yy',
    "29": 'm/d/yy',
    "30": 'm/d/yy',
    "31": 'm/d/yy',
    "32": 'h:mm:ss',
    "33": 'h:mm:ss',
    "34": 'h:mm:ss',
    "35": 'h:mm:ss',
    "36": 'm/d/yy',
    "41": '_(* #,##0_);_(* \(#,##0\);_(* "-"_);_(@_)',
    "42": '_("$"* #,##0_);_("$"* \(#,##0\);_("$"* "-"_);_(@_)',
    "43": '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
    "44": '_("$"* #,##0.00_);_("$"* \(#,##0.00\);_("$"* "-"??_);_(@_)',
    "50": 'm/d/yy',
    "51": 'm/d/yy',
    "52": 'm/d/yy',
    "53": 'm/d/yy',
    "54": 'm/d/yy',
    "55": 'm/d/yy',
    "56": 'm/d/yy',
    "57": 'm/d/yy',
    "58": 'm/d/yy',
    "59": '0',
    "60": '0.00',
    "61": '#,##0',
    "62": '#,##0.00',
    "63": '"$"#,##0_);\\("$"#,##0\\)',
    "64": '"$"#,##0_);[Red]\\("$"#,##0\\)',
    "65": '"$"#,##0.00_);\\("$"#,##0.00\\)',
    "66": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    "67": '0%',
    "68": '0.00%',
    "69": '# ?/?',
    "70": '# ??/??',
    "71": 'm/d/yy',
    "72": 'm/d/yy',
    "73": 'd-mmm-yy',
    "74": 'd-mmm',
    "75": 'mmm-yy',
    "76": 'h:mm',
    "77": 'h:mm:ss',
    "78": 'm/d/yy h:mm',
    "79": 'mm:ss',
    "80": '[h]:mm:ss',
    "81": 'mmss.0'
  };
  /* dateNF parse TODO: move to SSF */

  var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;

  function dateNF_regex(dateNF) {
    var fmt = typeof dateNF == "number" ? SSF._table[dateNF] : dateNF;
    fmt = fmt.replace(dateNFregex, "(\\d+)");
    return new RegExp("^" + fmt + "$");
  }

  function dateNF_fix(str, dateNF, match) {
    var Y = -1,
        m = -1,
        d = -1,
        H = -1,
        M = -1,
        S = -1;
    (dateNF.match(dateNFregex) || []).forEach(function (n, i) {
      var v = parseInt(match[i + 1], 10);

      switch (n.toLowerCase().charAt(0)) {
        case 'y':
          Y = v;
          break;

        case 'd':
          d = v;
          break;

        case 'h':
          H = v;
          break;

        case 's':
          S = v;
          break;

        case 'm':
          if (H >= 0) M = v;else m = v;
          break;
      }
    });

    if (S >= 0 && M == -1 && m >= 0) {
      M = m;
      m = -1;
    }

    var datestr = ("" + (Y >= 0 ? Y : new Date().getFullYear())).slice(-4) + "-" + ("00" + (m >= 1 ? m : 1)).slice(-2) + "-" + ("00" + (d >= 1 ? d : 1)).slice(-2);
    if (datestr.length == 7) datestr = "0" + datestr;
    if (datestr.length == 8) datestr = "20" + datestr;
    var timestr = ("00" + (H >= 0 ? H : 0)).slice(-2) + ":" + ("00" + (M >= 0 ? M : 0)).slice(-2) + ":" + ("00" + (S >= 0 ? S : 0)).slice(-2);
    if (H == -1 && M == -1 && S == -1) return datestr;
    if (Y == -1 && m == -1 && d == -1) return timestr;
    return datestr + "T" + timestr;
  }

  var DO_NOT_EXPORT_CFB = true;
  /* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */

  /* vim: set ts=2: */

  /*jshint eqnull:true */

  /*exported CFB */

  /*global Uint8Array:false, Uint16Array:false */

  /* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */

  /* vim: set ts=2: */

  /*exported CRC32 */

  var CRC32;

  (function (factory) {
    /*jshint ignore:start */

    /*eslint-disable */
    factory(CRC32 = {});
    /*eslint-enable */

    /*jshint ignore:end */
  })(function (CRC32) {
    CRC32.version = '1.2.0';
    /* see perf/crc32table.js */

    /*global Int32Array */

    function signed_crc_table() {
      var c = 0,
          table = new Array(256);

      for (var n = 0; n != 256; ++n) {
        c = n;
        c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
        c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
        c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
        c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
        c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
        c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
        c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
        c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
        table[n] = c;
      }

      return typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;
    }

    var T = signed_crc_table();

    function crc32_bstr(bstr, seed) {
      var C = seed ^ -1,
          L = bstr.length - 1;

      for (var i = 0; i < L;) {
        C = C >>> 8 ^ T[(C ^ bstr.charCodeAt(i++)) & 0xFF];
        C = C >>> 8 ^ T[(C ^ bstr.charCodeAt(i++)) & 0xFF];
      }

      if (i === L) C = C >>> 8 ^ T[(C ^ bstr.charCodeAt(i)) & 0xFF];
      return C ^ -1;
    }

    function crc32_buf(buf, seed) {
      if (buf.length > 10000) return crc32_buf_8(buf, seed);
      var C = seed ^ -1,
          L = buf.length - 3;

      for (var i = 0; i < L;) {
        C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];
        C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];
        C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];
        C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];
      }

      while (i < L + 3) C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];

      return C ^ -1;
    }

    function crc32_buf_8(buf, seed) {
      var C = seed ^ -1,
          L = buf.length - 7;

      for (var i = 0; i < L;) {
        C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];
        C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];
        C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];
        C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];
        C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];
        C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];
        C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];
        C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];
      }

      while (i < L + 7) C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];

      return C ^ -1;
    }

    function crc32_str(str, seed) {
      var C = seed ^ -1;

      for (var i = 0, L = str.length, c, d; i < L;) {
        c = str.charCodeAt(i++);

        if (c < 0x80) {
          C = C >>> 8 ^ T[(C ^ c) & 0xFF];
        } else if (c < 0x800) {
          C = C >>> 8 ^ T[(C ^ (192 | c >> 6 & 31)) & 0xFF];
          C = C >>> 8 ^ T[(C ^ (128 | c & 63)) & 0xFF];
        } else if (c >= 0xD800 && c < 0xE000) {
          c = (c & 1023) + 64;
          d = str.charCodeAt(i++) & 1023;
          C = C >>> 8 ^ T[(C ^ (240 | c >> 8 & 7)) & 0xFF];
          C = C >>> 8 ^ T[(C ^ (128 | c >> 2 & 63)) & 0xFF];
          C = C >>> 8 ^ T[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 0xFF];
          C = C >>> 8 ^ T[(C ^ (128 | d & 63)) & 0xFF];
        } else {
          C = C >>> 8 ^ T[(C ^ (224 | c >> 12 & 15)) & 0xFF];
          C = C >>> 8 ^ T[(C ^ (128 | c >> 6 & 63)) & 0xFF];
          C = C >>> 8 ^ T[(C ^ (128 | c & 63)) & 0xFF];
        }
      }

      return C ^ -1;
    }

    CRC32.table = T;
    CRC32.bstr = crc32_bstr;
    CRC32.buf = crc32_buf;
    CRC32.str = crc32_str;
  });
  /* [MS-CFB] v20171201 */


  var CFB = function _CFB() {
    var exports = {};
    exports.version = '1.1.4';
    /* [MS-CFB] 2.6.4 */

    function namecmp(l, r) {
      var L = l.split("/"),
          R = r.split("/");

      for (var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i) {
        if (c = L[i].length - R[i].length) return c;
        if (L[i] != R[i]) return L[i] < R[i] ? -1 : 1;
      }

      return L.length - R.length;
    }

    function dirname(p) {
      if (p.charAt(p.length - 1) == "/") return p.slice(0, -1).indexOf("/") === -1 ? p : dirname(p.slice(0, -1));
      var c = p.lastIndexOf("/");
      return c === -1 ? p : p.slice(0, c + 1);
    }

    function filename(p) {
      if (p.charAt(p.length - 1) == "/") return filename(p.slice(0, -1));
      var c = p.lastIndexOf("/");
      return c === -1 ? p : p.slice(c + 1);
    }
    /* -------------------------------------------------------------------------- */

    /* DOS Date format:
       high|YYYYYYYm.mmmddddd.HHHHHMMM.MMMSSSSS|low
       add 1980 to stored year
       stored second should be doubled
    */

    /* write JS date to buf as a DOS date */


    function write_dos_date(buf, date) {
      if (typeof date === "string") date = new Date(date);
      var hms = date.getHours();
      hms = hms << 6 | date.getMinutes();
      hms = hms << 5 | date.getSeconds() >>> 1;
      buf.write_shift(2, hms);
      var ymd = date.getFullYear() - 1980;
      ymd = ymd << 4 | date.getMonth() + 1;
      ymd = ymd << 5 | date.getDate();
      buf.write_shift(2, ymd);
    }
    /* read four bytes from buf and interpret as a DOS date */


    function parse_dos_date(buf) {
      var hms = buf.read_shift(2) & 0xFFFF;
      var ymd = buf.read_shift(2) & 0xFFFF;
      var val = new Date();
      var d = ymd & 0x1F;
      ymd >>>= 5;
      var m = ymd & 0x0F;
      ymd >>>= 4;
      val.setMilliseconds(0);
      val.setFullYear(ymd + 1980);
      val.setMonth(m - 1);
      val.setDate(d);
      var S = hms & 0x1F;
      hms >>>= 5;
      var M = hms & 0x3F;
      hms >>>= 6;
      val.setHours(hms);
      val.setMinutes(M);
      val.setSeconds(S << 1);
      return val;
    }

    function parse_extra_field(blob) {
      prep_blob(blob, 0);
      var o = {};
      var flags = 0;

      while (blob.l <= blob.length - 4) {
        var type = blob.read_shift(2);
        var sz = blob.read_shift(2),
            tgt = blob.l + sz;
        var p = {};

        switch (type) {
          /* UNIX-style Timestamps */
          case 0x5455:
            {
              flags = blob.read_shift(1);
              if (flags & 1) p.mtime = blob.read_shift(4);
              /* for some reason, CD flag corresponds to LFH */

              if (sz > 5) {
                if (flags & 2) p.atime = blob.read_shift(4);
                if (flags & 4) p.ctime = blob.read_shift(4);
              }

              if (p.mtime) p.mt = new Date(p.mtime * 1000);
            }
            break;
        }

        blob.l = tgt;
        o[type] = p;
      }

      return o;
    }

    var fs;

    function get_fs() {
      return fs || (fs = require('fs'));
    }

    function parse(file, options) {
      if (file[0] == 0x50 && file[1] == 0x4b) return parse_zip(file, options);
      if (file.length < 512) throw new Error("CFB file size " + file.length + " < 512");
      var mver = 3;
      var ssz = 512;
      var nmfs = 0; // number of mini FAT sectors

      var difat_sec_cnt = 0;
      var dir_start = 0;
      var minifat_start = 0;
      var difat_start = 0;
      var fat_addrs = []; // locations of FAT sectors

      /* [MS-CFB] 2.2 Compound File Header */

      var blob = file.slice(0, 512);
      prep_blob(blob, 0);
      /* major version */

      var mv = check_get_mver(blob);
      mver = mv[0];

      switch (mver) {
        case 3:
          ssz = 512;
          break;

        case 4:
          ssz = 4096;
          break;

        case 0:
          if (mv[1] == 0) return parse_zip(file, options);

        /* falls through */

        default:
          throw new Error("Major Version: Expected 3 or 4 saw " + mver);
      }
      /* reprocess header */


      if (ssz !== 512) {
        blob = file.slice(0, ssz);
        prep_blob(blob, 28
        /* blob.l */
        );
      }
      /* Save header for final object */


      var header = file.slice(0, ssz);
      check_shifts(blob, mver); // Number of Directory Sectors

      var dir_cnt = blob.read_shift(4, 'i');
      if (mver === 3 && dir_cnt !== 0) throw new Error('# Directory Sectors: Expected 0 saw ' + dir_cnt); // Number of FAT Sectors

      blob.l += 4; // First Directory Sector Location

      dir_start = blob.read_shift(4, 'i'); // Transaction Signature

      blob.l += 4; // Mini Stream Cutoff Size

      blob.chk('00100000', 'Mini Stream Cutoff Size: '); // First Mini FAT Sector Location

      minifat_start = blob.read_shift(4, 'i'); // Number of Mini FAT Sectors

      nmfs = blob.read_shift(4, 'i'); // First DIFAT sector location

      difat_start = blob.read_shift(4, 'i'); // Number of DIFAT Sectors

      difat_sec_cnt = blob.read_shift(4, 'i'); // Grab FAT Sector Locations

      for (var q = -1, j = 0; j < 109; ++j) {
        /* 109 = (512 - blob.l)>>>2; */
        q = blob.read_shift(4, 'i');
        if (q < 0) break;
        fat_addrs[j] = q;
      }
      /** Break the file up into sectors */


      var sectors = sectorify(file, ssz);
      sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);
      /** Chains */

      var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);
      sector_list[dir_start].name = "!Directory";
      if (nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = "!MiniFAT";
      sector_list[fat_addrs[0]].name = "!FAT";
      sector_list.fat_addrs = fat_addrs;
      sector_list.ssz = ssz;
      /* [MS-CFB] 2.6.1 Compound File Directory Entry */

      var files = {},
          Paths = [],
          FileIndex = [],
          FullPaths = [];
      read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);
      build_full_paths(FileIndex, FullPaths, Paths);
      Paths.shift();
      var o = {
        FileIndex: FileIndex,
        FullPaths: FullPaths
      }; // $FlowIgnore

      if (options && options.raw) o.raw = {
        header: header,
        sectors: sectors
      };
      return o;
    } // parse

    /* [MS-CFB] 2.2 Compound File Header -- read up to major version */


    function check_get_mver(blob) {
      if (blob[blob.l] == 0x50 && blob[blob.l + 1] == 0x4b) return [0, 0]; // header signature 8

      blob.chk(HEADER_SIGNATURE, 'Header Signature: '); // clsid 16
      //blob.chk(HEADER_CLSID, 'CLSID: ');

      blob.l += 16; // minor version 2

      var mver = blob.read_shift(2, 'u');
      return [blob.read_shift(2, 'u'), mver];
    }

    function check_shifts(blob, mver) {
      var shift = 0x09; // Byte Order
      //blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff

      blob.l += 2; // Sector Shift

      switch (shift = blob.read_shift(2)) {
        case 0x09:
          if (mver != 3) throw new Error('Sector Shift: Expected 9 saw ' + shift);
          break;

        case 0x0c:
          if (mver != 4) throw new Error('Sector Shift: Expected 12 saw ' + shift);
          break;

        default:
          throw new Error('Sector Shift: Expected 9 or 12 saw ' + shift);
      } // Mini Sector Shift


      blob.chk('0600', 'Mini Sector Shift: '); // Reserved

      blob.chk('000000000000', 'Reserved: ');
    }
    /** Break the file up into sectors */


    function sectorify(file, ssz) {
      var nsectors = Math.ceil(file.length / ssz) - 1;
      var sectors = [];

      for (var i = 1; i < nsectors; ++i) sectors[i - 1] = file.slice(i * ssz, (i + 1) * ssz);

      sectors[nsectors - 1] = file.slice(nsectors * ssz);
      return sectors;
    }
    /* [MS-CFB] 2.6.4 Red-Black Tree */


    function build_full_paths(FI, FP, Paths) {
      var i = 0,
          L = 0,
          R = 0,
          C = 0,
          j = 0,
          pl = Paths.length;
      var dad = [],
          q = [];

      for (; i < pl; ++i) {
        dad[i] = q[i] = i;
        FP[i] = Paths[i];
      }

      for (; j < q.length; ++j) {
        i = q[j];
        L = FI[i].L;
        R = FI[i].R;
        C = FI[i].C;

        if (dad[i] === i) {
          if (L !== -1
          /*NOSTREAM*/
          && dad[L] !== L) dad[i] = dad[L];
          if (R !== -1 && dad[R] !== R) dad[i] = dad[R];
        }

        if (C !== -1
        /*NOSTREAM*/
        ) dad[C] = i;

        if (L !== -1 && i != dad[i]) {
          dad[L] = dad[i];
          if (q.lastIndexOf(L) < j) q.push(L);
        }

        if (R !== -1 && i != dad[i]) {
          dad[R] = dad[i];
          if (q.lastIndexOf(R) < j) q.push(R);
        }
      }

      for (i = 1; i < pl; ++i) if (dad[i] === i) {
        if (R !== -1
        /*NOSTREAM*/
        && dad[R] !== R) dad[i] = dad[R];else if (L !== -1 && dad[L] !== L) dad[i] = dad[L];
      }

      for (i = 1; i < pl; ++i) {
        if (FI[i].type === 0
        /* unknown */
        ) continue;
        j = i;
        if (j != dad[j]) do {
          j = dad[j];
          FP[i] = FP[j] + "/" + FP[i];
        } while (j !== 0 && -1 !== dad[j] && j != dad[j]);
        dad[i] = -1;
      }

      FP[0] += "/";

      for (i = 1; i < pl; ++i) {
        if (FI[i].type !== 2
        /* stream */
        ) FP[i] += "/";
      }
    }

    function get_mfat_entry(entry, payload, mini) {
      var start = entry.start,
          size = entry.size; //return (payload.slice(start*MSSZ, start*MSSZ + size));

      var o = [];
      var idx = start;

      while (mini && size > 0 && idx >= 0) {
        o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
        size -= MSSZ;
        idx = __readInt32LE(mini, idx * 4);
      }

      if (o.length === 0) return new_buf(0);
      return bconcat(o).slice(0, entry.size);
    }
    /** Chase down the rest of the DIFAT chain to build a comprehensive list
        DIFAT chains by storing the next sector number as the last 32 bits */


    function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {
      var q = ENDOFCHAIN;

      if (idx === ENDOFCHAIN) {
        if (cnt !== 0) throw new Error("DIFAT chain shorter than expected");
      } else if (idx !== -1
      /*FREESECT*/
      ) {
          var sector = sectors[idx],
              m = (ssz >>> 2) - 1;
          if (!sector) return;

          for (var i = 0; i < m; ++i) {
            if ((q = __readInt32LE(sector, i * 4)) === ENDOFCHAIN) break;
            fat_addrs.push(q);
          }

          sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);
        }
    }
    /** Follow the linked list of sectors for a given starting point */


    function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {
      var buf = [],
          buf_chain = [];
      if (!chkd) chkd = [];
      var modulus = ssz - 1,
          j = 0,
          jj = 0;

      for (j = start; j >= 0;) {
        chkd[j] = true;
        buf[buf.length] = j;
        buf_chain.push(sectors[j]);
        var addr = fat_addrs[Math.floor(j * 4 / ssz)];
        jj = j * 4 & modulus;
        if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
        if (!sectors[addr]) break;
        j = __readInt32LE(sectors[addr], jj);
      }

      return {
        nodes: buf,
        data: __toBuffer([buf_chain])
      };
    }
    /** Chase down the sector linked lists */


    function make_sector_list(sectors, dir_start, fat_addrs, ssz) {
      var sl = sectors.length,
          sector_list = [];
      var chkd = [],
          buf = [],
          buf_chain = [];
      var modulus = ssz - 1,
          i = 0,
          j = 0,
          k = 0,
          jj = 0;

      for (i = 0; i < sl; ++i) {
        buf = [];
        k = i + dir_start;
        if (k >= sl) k -= sl;
        if (chkd[k]) continue;
        buf_chain = [];
        var seen = [];

        for (j = k; j >= 0;) {
          seen[j] = true;
          chkd[j] = true;
          buf[buf.length] = j;
          buf_chain.push(sectors[j]);
          var addr = fat_addrs[Math.floor(j * 4 / ssz)];
          jj = j * 4 & modulus;
          if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
          if (!sectors[addr]) break;
          j = __readInt32LE(sectors[addr], jj);
          if (seen[j]) break;
        }

        sector_list[k] = {
          nodes: buf,
          data: __toBuffer([buf_chain])
        };
      }

      return sector_list;
    }
    /* [MS-CFB] 2.6.1 Compound File Directory Entry */


    function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {
      var minifat_store = 0,
          pl = Paths.length ? 2 : 0;
      var sector = sector_list[dir_start].data;
      var i = 0,
          namelen = 0,
          name;

      for (; i < sector.length; i += 128) {
        var blob = sector.slice(i, i + 128);
        prep_blob(blob, 64);
        namelen = blob.read_shift(2);
        name = __utf16le(blob, 0, namelen - pl);
        Paths.push(name);
        var o = {
          name: name,
          type: blob.read_shift(1),
          color: blob.read_shift(1),
          L: blob.read_shift(4, 'i'),
          R: blob.read_shift(4, 'i'),
          C: blob.read_shift(4, 'i'),
          clsid: blob.read_shift(16),
          state: blob.read_shift(4, 'i'),
          start: 0,
          size: 0
        };
        var ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
        if (ctime !== 0) o.ct = read_date(blob, blob.l - 8);
        var mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
        if (mtime !== 0) o.mt = read_date(blob, blob.l - 8);
        o.start = blob.read_shift(4, 'i');
        o.size = blob.read_shift(4, 'i');

        if (o.size < 0 && o.start < 0) {
          o.size = o.type = 0;
          o.start = ENDOFCHAIN;
          o.name = "";
        }

        if (o.type === 5) {
          /* root */
          minifat_store = o.start;
          if (nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = "!StreamData";
          /*minifat_size = o.size;*/
        } else if (o.size >= 4096
        /* MSCSZ */
        ) {
            o.storage = 'fat';
            if (sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);
            sector_list[o.start].name = o.name;
            o.content = sector_list[o.start].data.slice(0, o.size);
          } else {
          o.storage = 'minifat';
          if (o.size < 0) o.size = 0;else if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {
            o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini] || {}).data);
          }
        }

        if (o.content) prep_blob(o.content, 0);
        files[name] = o;
        FileIndex.push(o);
      }
    }

    function read_date(blob, offset) {
      return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1000);
    }

    function read_file(filename, options) {
      get_fs();
      return parse(fs.readFileSync(filename), options);
    }

    function read(blob, options) {
      switch (options && options.type || "base64") {
        case "file":
          return read_file(blob, options);

        case "base64":
          return parse(s2a(Base64.decode(blob)), options);

        case "binary":
          return parse(s2a(blob), options);
      }

      return parse(blob, options);
    }

    function init_cfb(cfb, opts) {
      var o = opts || {},
          root = o.root || "Root Entry";
      if (!cfb.FullPaths) cfb.FullPaths = [];
      if (!cfb.FileIndex) cfb.FileIndex = [];
      if (cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error("inconsistent CFB structure");

      if (cfb.FullPaths.length === 0) {
        cfb.FullPaths[0] = root + "/";
        cfb.FileIndex[0] = {
          name: root,
          type: 5
        };
      }

      if (o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;
      seed_cfb(cfb);
    }

    function seed_cfb(cfb) {
      var nm = "\u0001Sh33tJ5";
      if (CFB.find(cfb, "/" + nm)) return;
      var p = new_buf(4);
      p[0] = 55;
      p[1] = p[3] = 50;
      p[2] = 54;
      cfb.FileIndex.push({
        name: nm,
        type: 2,
        content: p,
        size: 4,
        L: 69,
        R: 69,
        C: 69
      });
      cfb.FullPaths.push(cfb.FullPaths[0] + nm);
      rebuild_cfb(cfb);
    }

    function rebuild_cfb(cfb, f) {
      init_cfb(cfb);
      var gc = false,
          s = false;

      for (var i = cfb.FullPaths.length - 1; i >= 0; --i) {
        var _file = cfb.FileIndex[i];

        switch (_file.type) {
          case 0:
            if (s) gc = true;else {
              cfb.FileIndex.pop();
              cfb.FullPaths.pop();
            }
            break;

          case 1:
          case 2:
          case 5:
            s = true;
            if (isNaN(_file.R * _file.L * _file.C)) gc = true;
            if (_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;
            break;

          default:
            gc = true;
            break;
        }
      }

      if (!gc && !f) return;
      var now = new Date(1987, 1, 19),
          j = 0;
      var data = [];

      for (i = 0; i < cfb.FullPaths.length; ++i) {
        if (cfb.FileIndex[i].type === 0) continue;
        data.push([cfb.FullPaths[i], cfb.FileIndex[i]]);
      }

      for (i = 0; i < data.length; ++i) {
        var dad = dirname(data[i][0]);
        s = false;

        for (j = 0; j < data.length; ++j) if (data[j][0] === dad) s = true;

        if (!s) data.push([dad, {
          name: filename(dad).replace("/", ""),
          type: 1,
          clsid: HEADER_CLSID,
          ct: now,
          mt: now,
          content: null
        }]);
      }

      data.sort(function (x, y) {
        return namecmp(x[0], y[0]);
      });
      cfb.FullPaths = [];
      cfb.FileIndex = [];

      for (i = 0; i < data.length; ++i) {
        cfb.FullPaths[i] = data[i][0];
        cfb.FileIndex[i] = data[i][1];
      }

      for (i = 0; i < data.length; ++i) {
        var elt = cfb.FileIndex[i];
        var nm = cfb.FullPaths[i];
        elt.name = filename(nm).replace("/", "");
        elt.L = elt.R = elt.C = -(elt.color = 1);
        elt.size = elt.content ? elt.content.length : 0;
        elt.start = 0;
        elt.clsid = elt.clsid || HEADER_CLSID;

        if (i === 0) {
          elt.C = data.length > 1 ? 1 : -1;
          elt.size = 0;
          elt.type = 5;
        } else if (nm.slice(-1) == "/") {
          for (j = i + 1; j < data.length; ++j) if (dirname(cfb.FullPaths[j]) == nm) break;

          elt.C = j >= data.length ? -1 : j;

          for (j = i + 1; j < data.length; ++j) if (dirname(cfb.FullPaths[j]) == dirname(nm)) break;

          elt.R = j >= data.length ? -1 : j;
          elt.type = 1;
        } else {
          if (dirname(cfb.FullPaths[i + 1] || "") == dirname(nm)) elt.R = i + 1;
          elt.type = 2;
        }
      }
    }

    function _write(cfb, options) {
      var _opts = options || {};

      rebuild_cfb(cfb);
      if (_opts.fileType == 'zip') return write_zip(cfb, _opts);

      var L = function (cfb) {
        var mini_size = 0,
            fat_size = 0;

        for (var i = 0; i < cfb.FileIndex.length; ++i) {
          var file = cfb.FileIndex[i];
          if (!file.content) continue;
          var flen = file.content.length;

          if (flen > 0) {
            if (flen < 0x1000) mini_size += flen + 0x3F >> 6;else fat_size += flen + 0x01FF >> 9;
          }
        }

        var dir_cnt = cfb.FullPaths.length + 3 >> 2;
        var mini_cnt = mini_size + 7 >> 3;
        var mfat_cnt = mini_size + 0x7F >> 7;
        var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
        var fat_cnt = fat_base + 0x7F >> 7;
        var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);

        while (fat_base + fat_cnt + difat_cnt + 0x7F >> 7 > fat_cnt) difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);

        var L = [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];
        cfb.FileIndex[0].size = mini_size << 6;
        L[7] = (cfb.FileIndex[0].start = L[0] + L[1] + L[2] + L[3] + L[4] + L[5]) + (L[6] + 7 >> 3);
        return L;
      }(cfb);

      var o = new_buf(L[7] << 9);
      var i = 0,
          T = 0;
      {
        for (i = 0; i < 8; ++i) o.write_shift(1, HEADER_SIG[i]);

        for (i = 0; i < 8; ++i) o.write_shift(2, 0);

        o.write_shift(2, 0x003E);
        o.write_shift(2, 0x0003);
        o.write_shift(2, 0xFFFE);
        o.write_shift(2, 0x0009);
        o.write_shift(2, 0x0006);

        for (i = 0; i < 3; ++i) o.write_shift(2, 0);

        o.write_shift(4, 0);
        o.write_shift(4, L[2]);
        o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);
        o.write_shift(4, 0);
        o.write_shift(4, 1 << 12);
        o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1 : ENDOFCHAIN);
        o.write_shift(4, L[3]);
        o.write_shift(-4, L[1] ? L[0] - 1 : ENDOFCHAIN);
        o.write_shift(4, L[1]);

        for (i = 0; i < 109; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);
      }

      if (L[1]) {
        for (T = 0; T < L[1]; ++T) {
          for (; i < 236 + T * 127; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);

          o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);
        }
      }

      var chainit = function (w) {
        for (T += w; i < T - 1; ++i) o.write_shift(-4, i + 1);

        if (w) {
          ++i;
          o.write_shift(-4, ENDOFCHAIN);
        }
      };

      T = i = 0;

      for (T += L[1]; i < T; ++i) o.write_shift(-4, consts.DIFSECT);

      for (T += L[2]; i < T; ++i) o.write_shift(-4, consts.FATSECT);

      chainit(L[3]);
      chainit(L[4]);
      var j = 0,
          flen = 0;
      var file = cfb.FileIndex[0];

      for (; j < cfb.FileIndex.length; ++j) {
        file = cfb.FileIndex[j];
        if (!file.content) continue;
        flen = file.content.length;
        if (flen < 0x1000) continue;
        file.start = T;
        chainit(flen + 0x01FF >> 9);
      }

      chainit(L[6] + 7 >> 3);

      while (o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);

      T = i = 0;

      for (j = 0; j < cfb.FileIndex.length; ++j) {
        file = cfb.FileIndex[j];
        if (!file.content) continue;
        flen = file.content.length;
        if (!flen || flen >= 0x1000) continue;
        file.start = T;
        chainit(flen + 0x3F >> 6);
      }

      while (o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);

      for (i = 0; i < L[4] << 2; ++i) {
        var nm = cfb.FullPaths[i];

        if (!nm || nm.length === 0) {
          for (j = 0; j < 17; ++j) o.write_shift(4, 0);

          for (j = 0; j < 3; ++j) o.write_shift(4, -1);

          for (j = 0; j < 12; ++j) o.write_shift(4, 0);

          continue;
        }

        file = cfb.FileIndex[i];
        if (i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;

        var _nm = i === 0 && _opts.root || file.name;

        flen = 2 * (_nm.length + 1);
        o.write_shift(64, _nm, "utf16le");
        o.write_shift(2, flen);
        o.write_shift(1, file.type);
        o.write_shift(1, file.color);
        o.write_shift(-4, file.L);
        o.write_shift(-4, file.R);
        o.write_shift(-4, file.C);
        if (!file.clsid) for (j = 0; j < 4; ++j) o.write_shift(4, 0);else o.write_shift(16, file.clsid, "hex");
        o.write_shift(4, file.state || 0);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(4, file.start);
        o.write_shift(4, file.size);
        o.write_shift(4, 0);
      }

      for (i = 1; i < cfb.FileIndex.length; ++i) {
        file = cfb.FileIndex[i];

        if (file.size >= 0x1000) {
          o.l = file.start + 1 << 9;

          for (j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);

          for (; j & 0x1FF; ++j) o.write_shift(1, 0);
        }
      }

      for (i = 1; i < cfb.FileIndex.length; ++i) {
        file = cfb.FileIndex[i];

        if (file.size > 0 && file.size < 0x1000) {
          for (j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);

          for (; j & 0x3F; ++j) o.write_shift(1, 0);
        }
      }

      while (o.l < o.length) o.write_shift(1, 0);

      return o;
    }
    /* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */


    function find(cfb, path) {
      var UCFullPaths = cfb.FullPaths.map(function (x) {
        return x.toUpperCase();
      });
      var UCPaths = UCFullPaths.map(function (x) {
        var y = x.split("/");
        return y[y.length - (x.slice(-1) == "/" ? 2 : 1)];
      });
      var k = false;

      if (path.charCodeAt(0) === 47
      /* "/" */
      ) {
          k = true;
          path = UCFullPaths[0].slice(0, -1) + path;
        } else k = path.indexOf("/") !== -1;

      var UCPath = path.toUpperCase();
      var w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
      if (w !== -1) return cfb.FileIndex[w];
      var m = !UCPath.match(chr1);
      UCPath = UCPath.replace(chr0, '');
      if (m) UCPath = UCPath.replace(chr1, '!');

      for (w = 0; w < UCFullPaths.length; ++w) {
        if ((m ? UCFullPaths[w].replace(chr1, '!') : UCFullPaths[w]).replace(chr0, '') == UCPath) return cfb.FileIndex[w];
        if ((m ? UCPaths[w].replace(chr1, '!') : UCPaths[w]).replace(chr0, '') == UCPath) return cfb.FileIndex[w];
      }

      return null;
    }
    /** CFB Constants */


    var MSSZ = 64;
    /* Mini Sector Size = 1<<6 */
    //var MSCSZ = 4096; /* Mini Stream Cutoff Size */

    /* 2.1 Compound File Sector Numbers and Types */

    var ENDOFCHAIN = -2;
    /* 2.2 Compound File Header */

    var HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';
    var HEADER_SIG = [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1];
    var HEADER_CLSID = '00000000000000000000000000000000';
    var consts = {
      /* 2.1 Compund File Sector Numbers and Types */
      MAXREGSECT: -6,
      DIFSECT: -4,
      FATSECT: -3,
      ENDOFCHAIN: ENDOFCHAIN,
      FREESECT: -1,

      /* 2.2 Compound File Header */
      HEADER_SIGNATURE: HEADER_SIGNATURE,
      HEADER_MINOR_VERSION: '3e00',
      MAXREGSID: -6,
      NOSTREAM: -1,
      HEADER_CLSID: HEADER_CLSID,

      /* 2.6.1 Compound File Directory Entry */
      EntryTypes: ['unknown', 'storage', 'stream', 'lockbytes', 'property', 'root']
    };

    function write_file(cfb, filename, options) {
      get_fs();

      var o = _write(cfb, options);

      fs.writeFileSync(filename, o);
    }

    function a2s(o) {
      var out = new Array(o.length);

      for (var i = 0; i < o.length; ++i) out[i] = String.fromCharCode(o[i]);

      return out.join("");
    }

    function write(cfb, options) {
      var o = _write(cfb, options);

      switch (options && options.type) {
        case "file":
          get_fs();
          fs.writeFileSync(options.filename, o);
          return o;

        case "binary":
          return a2s(o);

        case "base64":
          return Base64.encode(a2s(o));
      }

      return o;
    }
    /* node < 8.1 zlib does not expose bytesRead, so default to pure JS */


    var _zlib;

    function use_zlib(zlib) {
      try {
        var InflateRaw = zlib.InflateRaw;
        var InflRaw = new InflateRaw();

        InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);

        if (InflRaw.bytesRead) _zlib = zlib;else throw new Error("zlib does not expose bytesRead");
      } catch (e) {
        console.error("cannot use native zlib: " + (e.message || e));
      }
    }

    function _inflateRawSync(payload, usz) {
      if (!_zlib) return _inflate(payload, usz);
      var InflateRaw = _zlib.InflateRaw;
      var InflRaw = new InflateRaw();

      var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);

      payload.l += InflRaw.bytesRead;
      return out;
    }

    function _deflateRawSync(payload) {
      return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
    }

    var CLEN_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    /*  LEN_ID = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 ]; */

    var LEN_LN = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];
    /*  DST_ID = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  14,  15,  16,  17,  18,  19,   20,   21,   22,   23,   24,   25,   26,    27,    28,    29 ]; */

    var DST_LN = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];

    function bit_swap_8(n) {
      var t = (n << 1 | n << 11) & 0x22110 | (n << 5 | n << 15) & 0x88440;
      return (t >> 16 | t >> 8 | t) & 0xFF;
    }

    var use_typed_arrays = typeof Uint8Array !== 'undefined';
    var bitswap8 = use_typed_arrays ? new Uint8Array(1 << 8) : [];

    for (var q = 0; q < 1 << 8; ++q) bitswap8[q] = bit_swap_8(q);

    function bit_swap_n(n, b) {
      var rev = bitswap8[n & 0xFF];
      if (b <= 8) return rev >>> 8 - b;
      rev = rev << 8 | bitswap8[n >> 8 & 0xFF];
      if (b <= 16) return rev >>> 16 - b;
      rev = rev << 8 | bitswap8[n >> 16 & 0xFF];
      return rev >>> 24 - b;
    }
    /* helpers for unaligned bit reads */


    function read_bits_2(buf, bl) {
      var w = bl & 7,
          h = bl >>> 3;
      return (buf[h] | (w <= 6 ? 0 : buf[h + 1] << 8)) >>> w & 0x03;
    }

    function read_bits_3(buf, bl) {
      var w = bl & 7,
          h = bl >>> 3;
      return (buf[h] | (w <= 5 ? 0 : buf[h + 1] << 8)) >>> w & 0x07;
    }

    function read_bits_4(buf, bl) {
      var w = bl & 7,
          h = bl >>> 3;
      return (buf[h] | (w <= 4 ? 0 : buf[h + 1] << 8)) >>> w & 0x0F;
    }

    function read_bits_5(buf, bl) {
      var w = bl & 7,
          h = bl >>> 3;
      return (buf[h] | (w <= 3 ? 0 : buf[h + 1] << 8)) >>> w & 0x1F;
    }

    function read_bits_7(buf, bl) {
      var w = bl & 7,
          h = bl >>> 3;
      return (buf[h] | (w <= 1 ? 0 : buf[h + 1] << 8)) >>> w & 0x7F;
    }
    /* works up to n = 3 * 8 + 1 = 25 */


    function read_bits_n(buf, bl, n) {
      var w = bl & 7,
          h = bl >>> 3,
          f = (1 << n) - 1;
      var v = buf[h] >>> w;
      if (n < 8 - w) return v & f;
      v |= buf[h + 1] << 8 - w;
      if (n < 16 - w) return v & f;
      v |= buf[h + 2] << 16 - w;
      if (n < 24 - w) return v & f;
      v |= buf[h + 3] << 24 - w;
      return v & f;
    }
    /* until ArrayBuffer#realloc is a thing, fake a realloc */


    function realloc(b, sz) {
      var L = b.length,
          M = 2 * L > sz ? 2 * L : sz + 5,
          i = 0;
      if (L >= sz) return b;

      if (has_buf) {
        var o = new_unsafe_buf(M); // $FlowIgnore

        if (b.copy) b.copy(o);else for (; i < b.length; ++i) o[i] = b[i];
        return o;
      } else if (use_typed_arrays) {
        var a = new Uint8Array(M);
        if (a.set) a.set(b);else for (; i < b.length; ++i) a[i] = b[i];
        return a;
      }

      b.length = M;
      return b;
    }
    /* zero-filled arrays for older browsers */


    function zero_fill_array(n) {
      var o = new Array(n);

      for (var i = 0; i < n; ++i) o[i] = 0;

      return o;
    }

    var _deflate = function () {
      var _deflateRaw = function () {
        return function deflateRaw(data, out) {
          var boff = 0;

          while (boff < data.length) {
            var L = Math.min(0xFFFF, data.length - boff);
            var h = boff + L == data.length;
            /* TODO: this is only type 0 stored */

            out.write_shift(1, +h);
            out.write_shift(2, L);
            out.write_shift(2, ~L & 0xFFFF);

            while (L-- > 0) out[out.l++] = data[boff++];
          }

          return out.l;
        };
      }();

      return function (data) {
        var buf = new_buf(50 + Math.floor(data.length * 1.1));

        var off = _deflateRaw(data, buf);

        return buf.slice(0, off);
      };
    }();
    /* modified inflate function also moves original read head */

    /* build tree (used for literals and lengths) */


    function build_tree(clens, cmap, MAX) {
      var maxlen = 1,
          w = 0,
          i = 0,
          j = 0,
          ccode = 0,
          L = clens.length;
      var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);

      for (i = 0; i < 32; ++i) bl_count[i] = 0;

      for (i = L; i < MAX; ++i) clens[i] = 0;

      L = clens.length;
      var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L); // []

      /* build code tree */

      for (i = 0; i < L; ++i) {
        bl_count[w = clens[i]]++;
        if (maxlen < w) maxlen = w;
        ctree[i] = 0;
      }

      bl_count[0] = 0;

      for (i = 1; i <= maxlen; ++i) bl_count[i + 16] = ccode = ccode + bl_count[i - 1] << 1;

      for (i = 0; i < L; ++i) {
        ccode = clens[i];
        if (ccode != 0) ctree[i] = bl_count[ccode + 16]++;
      }
      /* cmap[maxlen + 4 bits] = (off&15) + (lit<<4) reverse mapping */


      var cleni = 0;

      for (i = 0; i < L; ++i) {
        cleni = clens[i];

        if (cleni != 0) {
          ccode = bit_swap_n(ctree[i], maxlen) >> maxlen - cleni;

          for (j = (1 << maxlen + 4 - cleni) - 1; j >= 0; --j) cmap[ccode | j << cleni] = cleni & 15 | i << 4;
        }
      }

      return maxlen;
    }

    var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
    var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);

    if (!use_typed_arrays) {
      for (var i = 0; i < 512; ++i) fix_lmap[i] = 0;

      for (i = 0; i < 32; ++i) fix_dmap[i] = 0;
    }

    (function () {
      var dlens = [];
      var i = 0;

      for (; i < 32; i++) dlens.push(5);

      build_tree(dlens, fix_dmap, 32);
      var clens = [];
      i = 0;

      for (; i <= 143; i++) clens.push(8);

      for (; i <= 255; i++) clens.push(9);

      for (; i <= 279; i++) clens.push(7);

      for (; i <= 287; i++) clens.push(8);

      build_tree(clens, fix_lmap, 288);
    })();

    var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
    var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
    var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);
    var dyn_len_1 = 1,
        dyn_len_2 = 1;
    /* 5.5.3 Expanding Huffman Codes */

    function dyn(data, boff) {
      /* nomenclature from RFC1951 refers to bit values; these are offset by the implicit constant */
      var _HLIT = read_bits_5(data, boff) + 257;

      boff += 5;

      var _HDIST = read_bits_5(data, boff) + 1;

      boff += 5;

      var _HCLEN = read_bits_4(data, boff) + 4;

      boff += 4;
      var w = 0;
      /* grab and store code lengths */

      var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
      var ctree = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var maxlen = 1;
      var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
      var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
      var L = clens.length;
      /* 19 */

      for (var i = 0; i < _HCLEN; ++i) {
        clens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);
        if (maxlen < w) maxlen = w;
        bl_count[w]++;
        boff += 3;
      }
      /* build code tree */


      var ccode = 0;
      bl_count[0] = 0;

      for (i = 1; i <= maxlen; ++i) next_code[i] = ccode = ccode + bl_count[i - 1] << 1;

      for (i = 0; i < L; ++i) if ((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;
      /* cmap[7 bits from stream] = (off&7) + (lit<<3) */


      var cleni = 0;

      for (i = 0; i < L; ++i) {
        cleni = clens[i];

        if (cleni != 0) {
          ccode = bitswap8[ctree[i]] >> 8 - cleni;

          for (var j = (1 << 7 - cleni) - 1; j >= 0; --j) dyn_cmap[ccode | j << cleni] = cleni & 7 | i << 3;
        }
      }
      /* read literal and dist codes at once */


      var hcodes = [];
      maxlen = 1;

      for (; hcodes.length < _HLIT + _HDIST;) {
        ccode = dyn_cmap[read_bits_7(data, boff)];
        boff += ccode & 7;

        switch (ccode >>>= 3) {
          case 16:
            w = 3 + read_bits_2(data, boff);
            boff += 2;
            ccode = hcodes[hcodes.length - 1];

            while (w-- > 0) hcodes.push(ccode);

            break;

          case 17:
            w = 3 + read_bits_3(data, boff);
            boff += 3;

            while (w-- > 0) hcodes.push(0);

            break;

          case 18:
            w = 11 + read_bits_7(data, boff);
            boff += 7;

            while (w-- > 0) hcodes.push(0);

            break;

          default:
            hcodes.push(ccode);
            if (maxlen < ccode) maxlen = ccode;
            break;
        }
      }
      /* build literal / length trees */


      var h1 = hcodes.slice(0, _HLIT),
          h2 = hcodes.slice(_HLIT);

      for (i = _HLIT; i < 286; ++i) h1[i] = 0;

      for (i = _HDIST; i < 30; ++i) h2[i] = 0;

      dyn_len_1 = build_tree(h1, dyn_lmap, 286);
      dyn_len_2 = build_tree(h2, dyn_dmap, 30);
      return boff;
    }
    /* return [ data, bytesRead ] */


    function inflate(data, usz) {
      /* shortcircuit for empty buffer [0x03, 0x00] */
      if (data[0] == 3 && !(data[1] & 0x3)) {
        return [new_raw_buf(usz), 2];
      }
      /* bit offset */


      var boff = 0;
      /* header includes final bit and type bits */

      var header = 0;
      var outbuf = new_unsafe_buf(usz ? usz : 1 << 18);
      var woff = 0;
      var OL = outbuf.length >>> 0;
      var max_len_1 = 0,
          max_len_2 = 0;

      while ((header & 1) == 0) {
        header = read_bits_3(data, boff);
        boff += 3;

        if (header >>> 1 == 0) {
          /* Stored block */
          if (boff & 7) boff += 8 - (boff & 7);
          /* 2 bytes sz, 2 bytes bit inverse */

          var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;
          boff += 32;
          /* push sz bytes */

          if (!usz && OL < woff + sz) {
            outbuf = realloc(outbuf, woff + sz);
            OL = outbuf.length;
          }

          if (typeof data.copy === 'function') {
            // $FlowIgnore
            data.copy(outbuf, woff, boff >>> 3, (boff >>> 3) + sz);
            woff += sz;
            boff += 8 * sz;
          } else while (sz-- > 0) {
            outbuf[woff++] = data[boff >>> 3];
            boff += 8;
          }

          continue;
        } else if (header >>> 1 == 1) {
          /* Fixed Huffman */
          max_len_1 = 9;
          max_len_2 = 5;
        } else {
          /* Dynamic Huffman */
          boff = dyn(data, boff);
          max_len_1 = dyn_len_1;
          max_len_2 = dyn_len_2;
        }

        if (!usz && OL < woff + 32767) {
          outbuf = realloc(outbuf, woff + 32767);
          OL = outbuf.length;
        }

        for (;;) {
          // while(true) is apparently out of vogue in modern JS circles

          /* ingest code and move read head */
          var bits = read_bits_n(data, boff, max_len_1);
          var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];
          boff += code & 15;
          code >>>= 4;
          /* 0-255 are literals, 256 is end of block token, 257+ are copy tokens */

          if ((code >>> 8 & 0xFF) === 0) outbuf[woff++] = code;else if (code == 256) break;else {
            code -= 257;
            var len_eb = code < 8 ? 0 : code - 4 >> 2;
            if (len_eb > 5) len_eb = 0;
            var tgt = woff + LEN_LN[code];
            /* length extra bits */

            if (len_eb > 0) {
              tgt += read_bits_n(data, boff, len_eb);
              boff += len_eb;
            }
            /* dist code */


            bits = read_bits_n(data, boff, max_len_2);
            code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];
            boff += code & 15;
            code >>>= 4;
            var dst_eb = code < 4 ? 0 : code - 2 >> 1;
            var dst = DST_LN[code];
            /* dist extra bits */

            if (dst_eb > 0) {
              dst += read_bits_n(data, boff, dst_eb);
              boff += dst_eb;
            }
            /* in the common case, manual byte copy is faster than TA set / Buffer copy */


            if (!usz && OL < tgt) {
              outbuf = realloc(outbuf, tgt);
              OL = outbuf.length;
            }

            while (woff < tgt) {
              outbuf[woff] = outbuf[woff - dst];
              ++woff;
            }
          }
        }
      }

      return [usz ? outbuf : outbuf.slice(0, woff), boff + 7 >>> 3];
    }

    function _inflate(payload, usz) {
      var data = payload.slice(payload.l || 0);
      var out = inflate(data, usz);
      payload.l += out[1];
      return out[0];
    }

    function warn_or_throw(wrn, msg) {
      if (wrn) {
        if (typeof console !== 'undefined') console.error(msg);
      } else throw new Error(msg);
    }

    function parse_zip(file, options) {
      var blob = file;
      prep_blob(blob, 0);
      var FileIndex = [],
          FullPaths = [];
      var o = {
        FileIndex: FileIndex,
        FullPaths: FullPaths
      };
      init_cfb(o, {
        root: options.root
      });
      /* find end of central directory, start just after signature */

      var i = blob.length - 4;

      while ((blob[i] != 0x50 || blob[i + 1] != 0x4b || blob[i + 2] != 0x05 || blob[i + 3] != 0x06) && i >= 0) --i;

      blob.l = i + 4;
      /* parse end of central directory */

      blob.l += 4;
      var fcnt = blob.read_shift(2);
      blob.l += 6;
      var start_cd = blob.read_shift(4);
      /* parse central directory */

      blob.l = start_cd;

      for (i = 0; i < fcnt; ++i) {
        /* trust local file header instead of CD entry */
        blob.l += 20;
        var csz = blob.read_shift(4);
        var usz = blob.read_shift(4);
        var namelen = blob.read_shift(2);
        var efsz = blob.read_shift(2);
        var fcsz = blob.read_shift(2);
        blob.l += 8;
        var offset = blob.read_shift(4);
        var EF = parse_extra_field(blob.slice(blob.l + namelen, blob.l + namelen + efsz));
        blob.l += namelen + efsz + fcsz;
        var L = blob.l;
        blob.l = offset + 4;
        parse_local_file(blob, csz, usz, o, EF);
        blob.l = L;
      }

      return o;
    }
    /* head starts just after local file header signature */


    function parse_local_file(blob, csz, usz, o, EF) {
      /* [local file header] */
      blob.l += 2;
      var flags = blob.read_shift(2);
      var meth = blob.read_shift(2);
      var date = parse_dos_date(blob);
      if (flags & 0x2041) throw new Error("Unsupported ZIP encryption");
      var crc32 = blob.read_shift(4);

      var _csz = blob.read_shift(4);

      var _usz = blob.read_shift(4);

      var namelen = blob.read_shift(2);
      var efsz = blob.read_shift(2); // TODO: flags & (1<<11) // UTF8

      var name = "";

      for (var i = 0; i < namelen; ++i) name += String.fromCharCode(blob[blob.l++]);

      if (efsz) {
        var ef = parse_extra_field(blob.slice(blob.l, blob.l + efsz));
        if ((ef[0x5455] || {}).mt) date = ef[0x5455].mt;
        if (((EF || {})[0x5455] || {}).mt) date = EF[0x5455].mt;
      }

      blob.l += efsz;
      /* [encryption header] */

      /* [file data] */

      var data = blob.slice(blob.l, blob.l + _csz);

      switch (meth) {
        case 8:
          data = _inflateRawSync(blob, _usz);
          break;

        case 0:
          break;

        default:
          throw new Error("Unsupported ZIP Compression method " + meth);
      }
      /* [data descriptor] */


      var wrn = false;

      if (flags & 8) {
        crc32 = blob.read_shift(4);

        if (crc32 == 0x08074b50) {
          crc32 = blob.read_shift(4);
          wrn = true;
        }

        _csz = blob.read_shift(4);
        _usz = blob.read_shift(4);
      }

      if (_csz != csz) warn_or_throw(wrn, "Bad compressed size: " + csz + " != " + _csz);
      if (_usz != usz) warn_or_throw(wrn, "Bad uncompressed size: " + usz + " != " + _usz);

      var _crc32 = CRC32.buf(data, 0);

      if (crc32 >> 0 != _crc32 >> 0) warn_or_throw(wrn, "Bad CRC32 checksum: " + crc32 + " != " + _crc32);
      cfb_add(o, name, data, {
        unsafe: true,
        mt: date
      });
    }

    function write_zip(cfb, options) {
      var _opts = options || {};

      var out = [],
          cdirs = [];
      var o = new_buf(1);
      var method = _opts.compression ? 8 : 0,
          flags = 0;
      var desc = false;
      if (desc) flags |= 8;
      var i = 0,
          j = 0;
      var start_cd = 0,
          fcnt = 0;
      var root = cfb.FullPaths[0],
          fp = root,
          fi = cfb.FileIndex[0];
      var crcs = [];
      var sz_cd = 0;

      for (i = 1; i < cfb.FullPaths.length; ++i) {
        fp = cfb.FullPaths[i].slice(root.length);
        fi = cfb.FileIndex[i];
        if (!fi.size || !fi.content || fp == "\u0001Sh33tJ5") continue;
        var start = start_cd;
        /* TODO: CP437 filename */

        var namebuf = new_buf(fp.length);

        for (j = 0; j < fp.length; ++j) namebuf.write_shift(1, fp.charCodeAt(j) & 0x7F);

        namebuf = namebuf.slice(0, namebuf.l);
        crcs[fcnt] = CRC32.buf(fi.content, 0);
        var outbuf = fi.content;
        if (method == 8) outbuf = _deflateRawSync(outbuf);
        /* local file header */

        o = new_buf(30);
        o.write_shift(4, 0x04034b50);
        o.write_shift(2, 20);
        o.write_shift(2, flags);
        o.write_shift(2, method);
        /* TODO: last mod file time/date */

        if (fi.mt) write_dos_date(o, fi.mt);else o.write_shift(4, 0);
        o.write_shift(-4, flags & 8 ? 0 : crcs[fcnt]);
        o.write_shift(4, flags & 8 ? 0 : outbuf.length);
        o.write_shift(4, flags & 8 ? 0 : fi.content.length);
        o.write_shift(2, namebuf.length);
        o.write_shift(2, 0);
        start_cd += o.length;
        out.push(o);
        start_cd += namebuf.length;
        out.push(namebuf);
        /* TODO: encryption header ? */

        start_cd += outbuf.length;
        out.push(outbuf);
        /* data descriptor */

        if (flags & 8) {
          o = new_buf(12);
          o.write_shift(-4, crcs[fcnt]);
          o.write_shift(4, outbuf.length);
          o.write_shift(4, fi.content.length);
          start_cd += o.l;
          out.push(o);
        }
        /* central directory */


        o = new_buf(46);
        o.write_shift(4, 0x02014b50);
        o.write_shift(2, 0);
        o.write_shift(2, 20);
        o.write_shift(2, flags);
        o.write_shift(2, method);
        o.write_shift(4, 0);
        /* TODO: last mod file time/date */

        o.write_shift(-4, crcs[fcnt]);
        o.write_shift(4, outbuf.length);
        o.write_shift(4, fi.content.length);
        o.write_shift(2, namebuf.length);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(4, 0);
        o.write_shift(4, start);
        sz_cd += o.l;
        cdirs.push(o);
        sz_cd += namebuf.length;
        cdirs.push(namebuf);
        ++fcnt;
      }
      /* end of central directory */


      o = new_buf(22);
      o.write_shift(4, 0x06054b50);
      o.write_shift(2, 0);
      o.write_shift(2, 0);
      o.write_shift(2, fcnt);
      o.write_shift(2, fcnt);
      o.write_shift(4, sz_cd);
      o.write_shift(4, start_cd);
      o.write_shift(2, 0);
      return bconcat([bconcat(out), bconcat(cdirs), o]);
    }

    function cfb_new(opts) {
      var o = {};
      init_cfb(o, opts);
      return o;
    }

    function cfb_add(cfb, name, content, opts) {
      var unsafe = opts && opts.unsafe;
      if (!unsafe) init_cfb(cfb);
      var file = !unsafe && CFB.find(cfb, name);

      if (!file) {
        var fpath = cfb.FullPaths[0];
        if (name.slice(0, fpath.length) == fpath) fpath = name;else {
          if (fpath.slice(-1) != "/") fpath += "/";
          fpath = (fpath + name).replace("//", "/");
        }
        file = {
          name: filename(name),
          type: 2
        };
        cfb.FileIndex.push(file);
        cfb.FullPaths.push(fpath);
        if (!unsafe) CFB.utils.cfb_gc(cfb);
      }

      file.content = content;
      file.size = content ? content.length : 0;

      if (opts) {
        if (opts.CLSID) file.clsid = opts.CLSID;
        if (opts.mt) file.mt = opts.mt;
        if (opts.ct) file.ct = opts.ct;
      }

      return file;
    }

    function cfb_del(cfb, name) {
      init_cfb(cfb);
      var file = CFB.find(cfb, name);
      if (file) for (var j = 0; j < cfb.FileIndex.length; ++j) if (cfb.FileIndex[j] == file) {
        cfb.FileIndex.splice(j, 1);
        cfb.FullPaths.splice(j, 1);
        return true;
      }
      return false;
    }

    function cfb_mov(cfb, old_name, new_name) {
      init_cfb(cfb);
      var file = CFB.find(cfb, old_name);
      if (file) for (var j = 0; j < cfb.FileIndex.length; ++j) if (cfb.FileIndex[j] == file) {
        cfb.FileIndex[j].name = filename(new_name);
        cfb.FullPaths[j] = new_name;
        return true;
      }
      return false;
    }

    function cfb_gc(cfb) {
      rebuild_cfb(cfb, true);
    }

    exports.find = find;
    exports.read = read;
    exports.parse = parse;
    exports.write = write;
    exports.writeFile = write_file;
    exports.utils = {
      cfb_new: cfb_new,
      cfb_add: cfb_add,
      cfb_del: cfb_del,
      cfb_mov: cfb_mov,
      cfb_gc: cfb_gc,
      ReadShift: ReadShift,
      CheckField: CheckField,
      prep_blob: prep_blob,
      bconcat: bconcat,
      use_zlib: use_zlib,
      _deflateRaw: _deflate,
      _inflateRaw: _inflate,
      consts: consts
    };
    return exports;
  }();

  if (typeof require !== 'undefined' && typeof module !== 'undefined' && typeof DO_NOT_EXPORT_CFB === 'undefined') {
    module.exports = CFB;
  }

  var _fs;

  if (typeof require !== 'undefined') try {
    _fs = require('fs');
  } catch (e) {}
  /* normalize data for blob ctor */

  function blobify(data) {
    if (typeof data === "string") return s2ab(data);
    if (Array.isArray(data)) return a2u(data);
    return data;
  }
  /* write or download file */


  function write_dl(fname, payload, enc) {
    /*global IE_SaveFile, Blob, navigator, saveAs, document, File, chrome */
    if (typeof _fs !== 'undefined' && _fs.writeFileSync) return enc ? _fs.writeFileSync(fname, payload, enc) : _fs.writeFileSync(fname, payload);
    var data = enc == "utf8" ? utf8write(payload) : payload;
    if (typeof IE_SaveFile !== 'undefined') return IE_SaveFile(data, fname);

    if (typeof Blob !== 'undefined') {
      var blob = new Blob([blobify(data)], {
        type: "application/octet-stream"
      });
      if (typeof navigator !== 'undefined' && navigator.msSaveBlob) return navigator.msSaveBlob(blob, fname);
      if (typeof saveAs !== 'undefined') return saveAs(blob, fname);

      if (typeof URL !== 'undefined' && typeof document !== 'undefined' && document.createElement && URL.createObjectURL) {
        var url = URL.createObjectURL(blob);

        if (typeof chrome === 'object' && typeof (chrome.downloads || {}).download == "function") {
          if (URL.revokeObjectURL && typeof setTimeout !== 'undefined') setTimeout(function () {
            URL.revokeObjectURL(url);
          }, 60000);
          return chrome.downloads.download({
            url: url,
            filename: fname,
            saveAs: true
          });
        }

        var a = document.createElement("a");

        if (a.download != null) {
          a.download = fname;
          a.href = url;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          if (URL.revokeObjectURL && typeof setTimeout !== 'undefined') setTimeout(function () {
            URL.revokeObjectURL(url);
          }, 60000);
          return url;
        }
      }
    } // $FlowIgnore


    if (typeof $ !== 'undefined' && typeof File !== 'undefined' && typeof Folder !== 'undefined') try {
      // extendscript
      // $FlowIgnore
      var out = File(fname);
      out.open("w");
      out.encoding = "binary";
      if (Array.isArray(payload)) payload = a2s(payload);
      out.write(payload);
      out.close();
      return payload;
    } catch (e) {
      if (!e.message || !e.message.match(/onstruct/)) throw e;
    }
    throw new Error("cannot save file " + fname);
  }
  /* read binary data from file */


  function read_binary(path) {
    if (typeof _fs !== 'undefined') return _fs.readFileSync(path); // $FlowIgnore

    if (typeof $ !== 'undefined' && typeof File !== 'undefined' && typeof Folder !== 'undefined') try {
      // extendscript
      // $FlowIgnore
      var infile = File(path);
      infile.open("r");
      infile.encoding = "binary";
      var data = infile.read();
      infile.close();
      return data;
    } catch (e) {
      if (!e.message || !e.message.match(/onstruct/)) throw e;
    }
    throw new Error("Cannot access file " + path);
  }

  function keys(o) {
    var ks = Object.keys(o),
        o2 = [];

    for (var i = 0; i < ks.length; ++i) if (Object.prototype.hasOwnProperty.call(o, ks[i])) o2.push(ks[i]);

    return o2;
  }

  function evert_key(obj, key) {
    var o = [],
        K = keys(obj);

    for (var i = 0; i !== K.length; ++i) if (o[obj[K[i]][key]] == null) o[obj[K[i]][key]] = K[i];

    return o;
  }

  function evert(obj) {
    var o = [],
        K = keys(obj);

    for (var i = 0; i !== K.length; ++i) o[obj[K[i]]] = K[i];

    return o;
  }

  function evert_num(obj) {
    var o = [],
        K = keys(obj);

    for (var i = 0; i !== K.length; ++i) o[obj[K[i]]] = parseInt(K[i], 10);

    return o;
  }

  function evert_arr(obj) {
    var o = [],
        K = keys(obj);

    for (var i = 0; i !== K.length; ++i) {
      if (o[obj[K[i]]] == null) o[obj[K[i]]] = [];
      o[obj[K[i]]].push(K[i]);
    }

    return o;
  }

  var basedate = new Date(1899, 11, 30, 0, 0, 0); // 2209161600000

  function datenum(v, date1904) {
    var epoch = v.getTime();
    if (date1904) epoch -= 1462 * 24 * 60 * 60 * 1000;
    var dnthresh = basedate.getTime() + (v.getTimezoneOffset() - basedate.getTimezoneOffset()) * 60000;
    return (epoch - dnthresh) / (24 * 60 * 60 * 1000);
  }

  var refdate = new Date();
  var dnthresh = basedate.getTime() + (refdate.getTimezoneOffset() - basedate.getTimezoneOffset()) * 60000;
  var refoffset = refdate.getTimezoneOffset();

  function numdate(v) {
    var out = new Date();
    out.setTime(v * 24 * 60 * 60 * 1000 + dnthresh);

    if (out.getTimezoneOffset() !== refoffset) {
      out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 60000);
    }

    return out;
  }
  /* ISO 8601 Duration */


  function parse_isodur(s) {
    var sec = 0,
        mt = 0,
        time = false;
    var m = s.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
    if (!m) throw new Error("|" + s + "| is not an ISO8601 Duration");

    for (var i = 1; i != m.length; ++i) {
      if (!m[i]) continue;
      mt = 1;
      if (i > 3) time = true;

      switch (m[i].slice(m[i].length - 1)) {
        case 'Y':
          throw new Error("Unsupported ISO Duration Field: " + m[i].slice(m[i].length - 1));

        case 'D':
          mt *= 24;

        /* falls through */

        case 'H':
          mt *= 60;

        /* falls through */

        case 'M':
          if (!time) throw new Error("Unsupported ISO Duration Field: M");else mt *= 60;

        /* falls through */

        case 'S':
          break;
      }

      sec += mt * parseInt(m[i], 10);
    }

    return sec;
  }

  var good_pd_date = new Date('2017-02-19T19:06:09.000Z');
  if (isNaN(good_pd_date.getFullYear())) good_pd_date = new Date('2/19/17');
  var good_pd = good_pd_date.getFullYear() == 2017;
  /* parses a date as a local date */

  function parseDate(str, fixdate) {
    var d = new Date(str);

    if (good_pd) {
      if (fixdate > 0) d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1000);else if (fixdate < 0) d.setTime(d.getTime() - d.getTimezoneOffset() * 60 * 1000);
      return d;
    }

    if (str instanceof Date) return str;

    if (good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {
      var s = d.getFullYear();
      if (str.indexOf("" + s) > -1) return d;
      d.setFullYear(d.getFullYear() + 100);
      return d;
    }

    var n = str.match(/\d+/g) || ["2017", "2", "19", "0", "0", "0"];
    var out = new Date(+n[0], +n[1] - 1, +n[2], +n[3] || 0, +n[4] || 0, +n[5] || 0);
    if (str.indexOf("Z") > -1) out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1000);
    return out;
  }

  function cc2str(arr) {
    var o = "";

    for (var i = 0; i != arr.length; ++i) o += String.fromCharCode(arr[i]);

    return o;
  }

  function dup(o) {
    if (typeof JSON != 'undefined' && !Array.isArray(o)) return JSON.parse(JSON.stringify(o));
    if (typeof o != 'object' || o == null) return o;
    if (o instanceof Date) return new Date(o.getTime());
    var out = {};

    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) out[k] = dup(o[k]);

    return out;
  }

  function fill(c, l) {
    var o = "";

    while (o.length < l) o += c;

    return o;
  }
  /* TODO: stress test */


  function fuzzynum(s) {
    var v = Number(s);
    if (!isNaN(v)) return v;
    if (!/\d/.test(s)) return v;
    var wt = 1;
    var ss = s.replace(/([\d]),([\d])/g, "$1$2").replace(/[$]/g, "").replace(/[%]/g, function () {
      wt *= 100;
      return "";
    });
    if (!isNaN(v = Number(ss))) return v / wt;
    ss = ss.replace(/[(](.*)[)]/, function ($$, $1) {
      wt = -wt;
      return $1;
    });
    if (!isNaN(v = Number(ss))) return v / wt;
    return v;
  }

  function fuzzydate(s) {
    var o = new Date(s),
        n = new Date(NaN);
    var y = o.getYear(),
        m = o.getMonth(),
        d = o.getDate();
    if (isNaN(d)) return n;
    if (y < 0 || y > 8099) return n;
    if ((m > 0 || d > 1) && y != 101) return o;
    if (s.toLowerCase().match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) return o;
    if (s.match(/[^-0-9:,\/\\]/)) return n;
    return o;
  }

  var safe_split_regex = "abacaba".split(/(:?b)/i).length == 5;

  function split_regex(str, re, def) {
    if (safe_split_regex || typeof re == "string") return str.split(re);
    var p = str.split(re),
        o = [p[0]];

    for (var i = 1; i < p.length; ++i) {
      o.push(def);
      o.push(p[i]);
    }

    return o;
  }

  function getdatastr(data) {
    if (!data) return null;
    if (data.data) return debom(data.data);
    if (data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString('binary'));
    if (data.asBinary) return debom(data.asBinary());
    if (data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));
    if (data.content && data.type) return debom(cc2str(data.content));
    return null;
  }

  function getdatabin(data) {
    if (!data) return null;
    if (data.data) return char_codes(data.data);
    if (data.asNodeBuffer && has_buf) return data.asNodeBuffer();

    if (data._data && data._data.getContent) {
      var o = data._data.getContent();

      if (typeof o == "string") return char_codes(o);
      return Array.prototype.slice.call(o);
    }

    if (data.content && data.type) return data.content;
    return null;
  }

  function getdata(data) {
    return data && data.name.slice(-4) === ".bin" ? getdatabin(data) : getdatastr(data);
  }
  /* Part 2 Section 10.1.2 "Mapping Content Types" Names are case-insensitive */

  /* OASIS does not comment on filename case sensitivity */


  function safegetzipfile(zip, file) {
    var k = zip.FullPaths || keys(zip.files);
    var f = file.toLowerCase(),
        g = f.replace(/\//g, '\\');

    for (var i = 0; i < k.length; ++i) {
      var n = k[i].toLowerCase();
      if (f == n || g == n) return zip.files[k[i]];
    }

    return null;
  }

  function getzipfile(zip, file) {
    var o = safegetzipfile(zip, file);
    if (o == null) throw new Error("Cannot find file " + file + " in zip");
    return o;
  }

  function getzipdata(zip, file, safe) {
    if (!safe) return getdata(getzipfile(zip, file));
    if (!file) return null;

    try {
      return getzipdata(zip, file);
    } catch (e) {
      return null;
    }
  }

  function getzipstr(zip, file, safe) {
    if (!safe) return getdatastr(getzipfile(zip, file));
    if (!file) return null;

    try {
      return getzipstr(zip, file);
    } catch (e) {
      return null;
    }
  }

  function zipentries(zip) {
    var k = zip.FullPaths || keys(zip.files),
        o = [];

    for (var i = 0; i < k.length; ++i) if (k[i].slice(-1) != '/') o.push(k[i]);

    return o.sort();
  }

  function zip_add_file(zip, path, content) {
    if (zip.FullPaths) CFB.utils.cfb_add(zip, path, content);else zip.file(path, content);
  }

  var jszip;
  /*global JSZipSync:true */

  if (typeof JSZipSync !== 'undefined') jszip = JSZipSync;

  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      if (typeof jszip === 'undefined') jszip = require('./jszip.js');
    }
  }

  function zip_new() {
    if (!jszip) return CFB.utils.cfb_new();
    return new jszip();
  }

  function zip_read(d, o) {
    var zip;
    if (jszip) switch (o.type) {
      case "base64":
        zip = new jszip(d, {
          base64: true
        });
        break;

      case "binary":
      case "array":
        zip = new jszip(d, {
          base64: false
        });
        break;

      case "buffer":
        zip = new jszip(d);
        break;

      default:
        throw new Error("Unrecognized type " + o.type);
    } else switch (o.type) {
      case "base64":
        zip = CFB.read(d, {
          type: "base64"
        });
        break;

      case "binary":
        zip = CFB.read(d, {
          type: "binary"
        });
        break;

      case "buffer":
      case "array":
        zip = CFB.read(d, {
          type: "buffer"
        });
        break;

      default:
        throw new Error("Unrecognized type " + o.type);
    }
    return zip;
  }

  function resolve_path(path, base) {
    if (path.charAt(0) == "/") return path.slice(1);
    var result = base.split('/');
    if (base.slice(-1) != "/") result.pop(); // folder path

    var target = path.split('/');

    while (target.length !== 0) {
      var step = target.shift();
      if (step === '..') result.pop();else if (step !== '.') result.push(step);
    }

    return result.join('/');
  }

  var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
  var attregexg = /([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
  var tagregex = /<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg;
  if (!XML_HEADER.match(tagregex)) tagregex = /<[^>]*>/g;
  var nsregex = /<\w*:/,
      nsregex2 = /<(\/?)\w+:/;

  function parsexmltag(tag, skip_root, skip_LC) {
    var z = {};
    var eq = 0,
        c = 0;

    for (; eq !== tag.length; ++eq) if ((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;

    if (!skip_root) z[0] = tag.slice(0, eq);
    if (eq === tag.length) return z;
    var m = tag.match(attregexg),
        j = 0,
        v = "",
        i = 0,
        q = "",
        cc = "",
        quot = 1;
    if (m) for (i = 0; i != m.length; ++i) {
      cc = m[i];

      for (c = 0; c != cc.length; ++c) if (cc.charCodeAt(c) === 61) break;

      q = cc.slice(0, c).trim();

      while (cc.charCodeAt(c + 1) == 32) ++c;

      quot = (eq = cc.charCodeAt(c + 1)) == 34 || eq == 39 ? 1 : 0;
      v = cc.slice(c + 1 + quot, cc.length - quot);

      for (j = 0; j != q.length; ++j) if (q.charCodeAt(j) === 58) break;

      if (j === q.length) {
        if (q.indexOf("_") > 0) q = q.slice(0, q.indexOf("_")); // from ods

        z[q] = v;
        if (!skip_LC) z[q.toLowerCase()] = v;
      } else {
        var k = (j === 5 && q.slice(0, 5) === "xmlns" ? "xmlns" : "") + q.slice(j + 1);
        if (z[k] && q.slice(j - 3, j) == "ext") continue; // from ods

        z[k] = v;
        if (!skip_LC) z[k.toLowerCase()] = v;
      }
    }
    return z;
  }

  function strip_ns(x) {
    return x.replace(nsregex2, "<$1");
  }

  var encodings = {
    '&quot;': '"',
    '&apos;': "'",
    '&gt;': '>',
    '&lt;': '<',
    '&amp;': '&'
  };
  var rencoding = evert(encodings); //var rencstr = "&<>'\"".split("");
  // TODO: CP remap (need to read file version to determine OS)

  var unescapexml = function () {
    /* 22.4.2.4 bstr (Basic String) */
    var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig,
        coderegex = /_x([\da-fA-F]{4})_/ig;
    return function unescapexml(text) {
      var s = text + '',
          i = s.indexOf("<![CDATA[");
      if (i == -1) return s.replace(encregex, function ($$, $1) {
        return encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf("x") > -1 ? 16 : 10)) || $$;
      }).replace(coderegex, function (m, c) {
        return String.fromCharCode(parseInt(c, 16));
      });
      var j = s.indexOf("]]>");
      return unescapexml(s.slice(0, i)) + s.slice(i + 9, j) + unescapexml(s.slice(j + 3));
    };
  }();

  var decregex = /[&<>'"]/g,
      charegex = /[\u0000-\u0008\u000b-\u001f]/g;

  function escapexml(text) {
    var s = text + '';
    return s.replace(decregex, function (y) {
      return rencoding[y];
    }).replace(charegex, function (s) {
      return "_x" + ("000" + s.charCodeAt(0).toString(16)).slice(-4) + "_";
    });
  }

  function escapexmltag(text) {
    return escapexml(text).replace(/ /g, "_x0020_");
  }

  var htmlcharegex = /[\u0000-\u001f]/g;

  function escapehtml(text) {
    var s = text + '';
    return s.replace(decregex, function (y) {
      return rencoding[y];
    }).replace(/\n/g, "<br/>").replace(htmlcharegex, function (s) {
      return "&#x" + ("000" + s.charCodeAt(0).toString(16)).slice(-4) + ";";
    });
  }

  function escapexlml(text) {
    var s = text + '';
    return s.replace(decregex, function (y) {
      return rencoding[y];
    }).replace(htmlcharegex, function (s) {
      return "&#x" + s.charCodeAt(0).toString(16).toUpperCase() + ";";
    });
  }
  /* TODO: handle codepages */


  var xlml_fixstr = function () {
    var entregex = /&#(\d+);/g;

    function entrepl($$, $1) {
      return String.fromCharCode(parseInt($1, 10));
    }

    return function xlml_fixstr(str) {
      return str.replace(entregex, entrepl);
    };
  }();

  var xlml_unfixstr = function () {
    return function xlml_unfixstr(str) {
      return str.replace(/(\r\n|[\r\n])/g, "\&#10;");
    };
  }();

  function parsexmlbool(value) {
    switch (value) {
      case 1:
      case true:
      case '1':
      case 'true':
      case 'TRUE':
        return true;

      /* case '0': case 'false': case 'FALSE':*/

      default:
        return false;
    }
  }

  var utf8read = function utf8reada(orig) {
    var out = "",
        i = 0,
        c = 0,
        d = 0,
        e = 0,
        f = 0,
        w = 0;

    while (i < orig.length) {
      c = orig.charCodeAt(i++);

      if (c < 128) {
        out += String.fromCharCode(c);
        continue;
      }

      d = orig.charCodeAt(i++);

      if (c > 191 && c < 224) {
        f = (c & 31) << 6;
        f |= d & 63;
        out += String.fromCharCode(f);
        continue;
      }

      e = orig.charCodeAt(i++);

      if (c < 240) {
        out += String.fromCharCode((c & 15) << 12 | (d & 63) << 6 | e & 63);
        continue;
      }

      f = orig.charCodeAt(i++);
      w = ((c & 7) << 18 | (d & 63) << 12 | (e & 63) << 6 | f & 63) - 65536;
      out += String.fromCharCode(0xD800 + (w >>> 10 & 1023));
      out += String.fromCharCode(0xDC00 + (w & 1023));
    }

    return out;
  };

  var utf8write = function (orig) {
    var out = [],
        i = 0,
        c = 0,
        d = 0;

    while (i < orig.length) {
      c = orig.charCodeAt(i++);

      switch (true) {
        case c < 128:
          out.push(String.fromCharCode(c));
          break;

        case c < 2048:
          out.push(String.fromCharCode(192 + (c >> 6)));
          out.push(String.fromCharCode(128 + (c & 63)));
          break;

        case c >= 55296 && c < 57344:
          c -= 55296;
          d = orig.charCodeAt(i++) - 56320 + (c << 10);
          out.push(String.fromCharCode(240 + (d >> 18 & 7)));
          out.push(String.fromCharCode(144 + (d >> 12 & 63)));
          out.push(String.fromCharCode(128 + (d >> 6 & 63)));
          out.push(String.fromCharCode(128 + (d & 63)));
          break;

        default:
          out.push(String.fromCharCode(224 + (c >> 12)));
          out.push(String.fromCharCode(128 + (c >> 6 & 63)));
          out.push(String.fromCharCode(128 + (c & 63)));
      }
    }

    return out.join("");
  };

  if (has_buf) {
    var utf8readb = function utf8readb(data) {
      var out = Buffer.alloc(2 * data.length),
          w,
          i,
          j = 1,
          k = 0,
          ww = 0,
          c;

      for (i = 0; i < data.length; i += j) {
        j = 1;
        if ((c = data.charCodeAt(i)) < 128) w = c;else if (c < 224) {
          w = (c & 31) * 64 + (data.charCodeAt(i + 1) & 63);
          j = 2;
        } else if (c < 240) {
          w = (c & 15) * 4096 + (data.charCodeAt(i + 1) & 63) * 64 + (data.charCodeAt(i + 2) & 63);
          j = 3;
        } else {
          j = 4;
          w = (c & 7) * 262144 + (data.charCodeAt(i + 1) & 63) * 4096 + (data.charCodeAt(i + 2) & 63) * 64 + (data.charCodeAt(i + 3) & 63);
          w -= 65536;
          ww = 0xD800 + (w >>> 10 & 1023);
          w = 0xDC00 + (w & 1023);
        }

        if (ww !== 0) {
          out[k++] = ww & 255;
          out[k++] = ww >>> 8;
          ww = 0;
        }

        out[k++] = w % 256;
        out[k++] = w >>> 8;
      }

      return out.slice(0, k).toString('ucs2');
    };

    var corpus = "foo bar baz\u00e2\u0098\u0083\u00f0\u009f\u008d\u00a3";
    if (utf8read(corpus) == utf8readb(corpus)) utf8read = utf8readb;

    var utf8readc = function utf8readc(data) {
      return Buffer_from(data, 'binary').toString('utf8');
    };

    if (utf8read(corpus) == utf8readc(corpus)) utf8read = utf8readc;

    utf8write = function (data) {
      return Buffer_from(data, 'utf8').toString("binary");
    };
  } // matches <foo>...</foo> extracts content


  var matchtag = function () {
    var mtcache = {};
    return function matchtag(f, g) {
      var t = f + "|" + (g || "");
      if (mtcache[t]) return mtcache[t];
      return mtcache[t] = new RegExp('<(?:\\w+:)?' + f + '(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?' + f + '>', g || "");
    };
  }();

  var htmldecode = function () {
    var entities = [['nbsp', ' '], ['middot', 'Â·'], ['quot', '"'], ['apos', "'"], ['gt', '>'], ['lt', '<'], ['amp', '&']].map(function (x) {
      return [new RegExp('&' + x[0] + ';', "ig"), x[1]];
    });
    return function htmldecode(str) {
      var o = str // Remove new lines and spaces from start of content
      .replace(/^[\t\n\r ]+/, "") // Remove new lines and spaces from end of content
      .replace(/[\t\n\r ]+$/, "") // Added line which removes any white space characters after and before html tags
      .replace(/>\s+/g, ">").replace(/\s+</g, "<") // Replace remaining new lines and spaces with space
      .replace(/[\t\n\r ]+/g, " ") // Replace <br> tags with new lines
      .replace(/<\s*[bB][rR]\s*\/?>/g, "\n") // Strip HTML elements
      .replace(/<[^>]*>/g, "");

      for (var i = 0; i < entities.length; ++i) o = o.replace(entities[i][0], entities[i][1]);

      return o;
    };
  }();

  var vtregex = function () {
    var vt_cache = {};
    return function vt_regex(bt) {
      if (vt_cache[bt] !== undefined) return vt_cache[bt];
      return vt_cache[bt] = new RegExp("<(?:vt:)?" + bt + ">([\\s\\S]*?)</(?:vt:)?" + bt + ">", 'g');
    };
  }();

  var vtvregex = /<\/?(?:vt:)?variant>/g,
      vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;

  function parseVector(data, opts) {
    var h = parsexmltag(data);
    var matches = data.match(vtregex(h.baseType)) || [];
    var res = [];

    if (matches.length != h.size) {
      if (opts.WTF) throw new Error("unexpected vector length " + matches.length + " != " + h.size);
      return res;
    }

    matches.forEach(function (x) {
      var v = x.replace(vtvregex, "").match(vtmregex);
      if (v) res.push({
        v: utf8read(v[2]),
        t: v[1]
      });
    });
    return res;
  }

  var wtregex = /(^\s|\s$|\n)/;

  function writetag(f, g) {
    return '<' + f + (g.match(wtregex) ? ' xml:space="preserve"' : "") + '>' + g + '</' + f + '>';
  }

  function wxt_helper(h) {
    return keys(h).map(function (k) {
      return " " + k + '="' + h[k] + '"';
    }).join("");
  }

  function writextag(f, g, h) {
    return '<' + f + (h != null ? wxt_helper(h) : "") + (g != null ? (g.match(wtregex) ? ' xml:space="preserve"' : "") + '>' + g + '</' + f : "/") + '>';
  }

  function write_w3cdtf(d, t) {
    try {
      return d.toISOString().replace(/\.\d*/, "");
    } catch (e) {
      if (t) throw e;
    }

    return "";
  }

  function write_vt(s, xlsx) {
    switch (typeof s) {
      case 'string':
        var o = writextag('vt:lpwstr', escapexml(s));
        if (xlsx) o = o.replace(/&quot;/g, "_x0022_");
        return o;

      case 'number':
        return writextag((s | 0) == s ? 'vt:i4' : 'vt:r8', escapexml(String(s)));

      case 'boolean':
        return writextag('vt:bool', s ? 'true' : 'false');
    }

    if (s instanceof Date) return writextag('vt:filetime', write_w3cdtf(s));
    throw new Error("Unable to serialize " + s);
  }

  var XMLNS = {
    'dc': 'http://purl.org/dc/elements/1.1/',
    'dcterms': 'http://purl.org/dc/terms/',
    'dcmitype': 'http://purl.org/dc/dcmitype/',
    'mx': 'http://schemas.microsoft.com/office/mac/excel/2008/main',
    'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',
    'sjs': 'http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties',
    'vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',
    'xsi': 'http://www.w3.org/2001/XMLSchema-instance',
    'xsd': 'http://www.w3.org/2001/XMLSchema'
  };
  XMLNS.main = ['http://schemas.openxmlformats.org/spreadsheetml/2006/main', 'http://purl.oclc.org/ooxml/spreadsheetml/main', 'http://schemas.microsoft.com/office/excel/2006/main', 'http://schemas.microsoft.com/office/excel/2006/2'];
  var XLMLNS = {
    'o': 'urn:schemas-microsoft-com:office:office',
    'x': 'urn:schemas-microsoft-com:office:excel',
    'ss': 'urn:schemas-microsoft-com:office:spreadsheet',
    'dt': 'uuid:C2F41010-65B3-11d1-A29F-00AA00C14882',
    'mv': 'http://macVmlSchemaUri',
    'v': 'urn:schemas-microsoft-com:vml',
    'html': 'http://www.w3.org/TR/REC-html40'
  };

  function read_double_le(b, idx) {
    var s = 1 - 2 * (b[idx + 7] >>> 7);
    var e = ((b[idx + 7] & 0x7f) << 4) + (b[idx + 6] >>> 4 & 0x0f);
    var m = b[idx + 6] & 0x0f;

    for (var i = 5; i >= 0; --i) m = m * 256 + b[idx + i];

    if (e == 0x7ff) return m == 0 ? s * Infinity : NaN;
    if (e == 0) e = -1022;else {
      e -= 1023;
      m += Math.pow(2, 52);
    }
    return s * Math.pow(2, e - 52) * m;
  }

  function write_double_le(b, v, idx) {
    var bs = (v < 0 || 1 / v == -Infinity ? 1 : 0) << 7,
        e = 0,
        m = 0;
    var av = bs ? -v : v;

    if (!isFinite(av)) {
      e = 0x7ff;
      m = isNaN(v) ? 0x6969 : 0;
    } else if (av == 0) e = m = 0;else {
      e = Math.floor(Math.log(av) / Math.LN2);
      m = av * Math.pow(2, 52 - e);

      if (e <= -1023 && (!isFinite(m) || m < Math.pow(2, 52))) {
        e = -1022;
      } else {
        m -= Math.pow(2, 52);
        e += 1023;
      }
    }

    for (var i = 0; i <= 5; ++i, m /= 256) b[idx + i] = m & 0xff;

    b[idx + 6] = (e & 0x0f) << 4 | m & 0xf;
    b[idx + 7] = e >> 4 | bs;
  }

  var __toBuffer = function (bufs) {
    var x = [],
        w = 10240;

    for (var i = 0; i < bufs[0].length; ++i) if (bufs[0][i]) for (var j = 0, L = bufs[0][i].length; j < L; j += w) x.push.apply(x, bufs[0][i].slice(j, j + w));

    return x;
  };

  var ___toBuffer = __toBuffer;

  var __utf16le = function (b, s, e) {
    var ss = [];

    for (var i = s; i < e; i += 2) ss.push(String.fromCharCode(__readUInt16LE(b, i)));

    return ss.join("").replace(chr0, '');
  };

  var ___utf16le = __utf16le;

  var __hexlify = function (b, s, l) {
    var ss = [];

    for (var i = s; i < s + l; ++i) ss.push(("0" + b[i].toString(16)).slice(-2));

    return ss.join("");
  };

  var ___hexlify = __hexlify;

  var __utf8 = function (b, s, e) {
    var ss = [];

    for (var i = s; i < e; i++) ss.push(String.fromCharCode(__readUInt8(b, i)));

    return ss.join("");
  };

  var ___utf8 = __utf8;

  var __lpstr = function (b, i) {
    var len = __readUInt32LE(b, i);

    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
  };

  var ___lpstr = __lpstr;

  var __cpstr = function (b, i) {
    var len = __readUInt32LE(b, i);

    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
  };

  var ___cpstr = __cpstr;

  var __lpwstr = function (b, i) {
    var len = 2 * __readUInt32LE(b, i);

    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
  };

  var ___lpwstr = __lpwstr;

  var __lpp4, ___lpp4;

  __lpp4 = ___lpp4 = function lpp4_(b, i) {
    var len = __readUInt32LE(b, i);

    return len > 0 ? __utf16le(b, i + 4, i + 4 + len) : "";
  };

  var __8lpp4 = function (b, i) {
    var len = __readUInt32LE(b, i);

    return len > 0 ? __utf8(b, i + 4, i + 4 + len) : "";
  };

  var ___8lpp4 = __8lpp4;

  var __double, ___double;

  __double = ___double = function (b, idx) {
    return read_double_le(b, idx);
  };

  var is_buf = function is_buf_a(a) {
    return Array.isArray(a);
  };

  if (has_buf) {
    __utf16le = function (b, s, e) {
      if (!Buffer.isBuffer(b)) return ___utf16le(b, s, e);
      return b.toString('utf16le', s, e).replace(chr0, '')
      /*.replace(chr1,'!')*/
      ;
    };

    __hexlify = function (b, s, l) {
      return Buffer.isBuffer(b) ? b.toString('hex', s, s + l) : ___hexlify(b, s, l);
    };

    __lpstr = function lpstr_b(b, i) {
      if (!Buffer.isBuffer(b)) return ___lpstr(b, i);
      var len = b.readUInt32LE(i);
      return len > 0 ? b.toString('utf8', i + 4, i + 4 + len - 1) : "";
    };

    __cpstr = function cpstr_b(b, i) {
      if (!Buffer.isBuffer(b)) return ___cpstr(b, i);
      var len = b.readUInt32LE(i);
      return len > 0 ? b.toString('utf8', i + 4, i + 4 + len - 1) : "";
    };

    __lpwstr = function lpwstr_b(b, i) {
      if (!Buffer.isBuffer(b)) return ___lpwstr(b, i);
      var len = 2 * b.readUInt32LE(i);
      return b.toString('utf16le', i + 4, i + 4 + len - 1);
    };

    __lpp4 = function lpp4_b(b, i) {
      if (!Buffer.isBuffer(b)) return ___lpp4(b, i);
      var len = b.readUInt32LE(i);
      return b.toString('utf16le', i + 4, i + 4 + len);
    };

    __8lpp4 = function lpp4_8b(b, i) {
      if (!Buffer.isBuffer(b)) return ___8lpp4(b, i);
      var len = b.readUInt32LE(i);
      return b.toString('utf8', i + 4, i + 4 + len);
    };

    __utf8 = function utf8_b(b, s, e) {
      return Buffer.isBuffer(b) ? b.toString('utf8', s, e) : ___utf8(b, s, e);
    };

    __toBuffer = function (bufs) {
      return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0]) : ___toBuffer(bufs);
    };

    bconcat = function (bufs) {
      return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : [].concat.apply([], bufs);
    };

    __double = function double_(b, i) {
      if (Buffer.isBuffer(b)) return b.readDoubleLE(i);
      return ___double(b, i);
    };

    is_buf = function is_buf_b(a) {
      return Buffer.isBuffer(a) || Array.isArray(a);
    };
  }
  /* from js-xls */


  if (typeof cptable !== 'undefined') {
    __utf16le = function (b, s, e) {
      return cptable.utils.decode(1200, b.slice(s, e)).replace(chr0, '');
    };

    __utf8 = function (b, s, e) {
      return cptable.utils.decode(65001, b.slice(s, e));
    };

    __lpstr = function (b, i) {
      var len = __readUInt32LE(b, i);

      return len > 0 ? cptable.utils.decode(current_ansi, b.slice(i + 4, i + 4 + len - 1)) : "";
    };

    __cpstr = function (b, i) {
      var len = __readUInt32LE(b, i);

      return len > 0 ? cptable.utils.decode(current_codepage, b.slice(i + 4, i + 4 + len - 1)) : "";
    };

    __lpwstr = function (b, i) {
      var len = 2 * __readUInt32LE(b, i);

      return len > 0 ? cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len - 1)) : "";
    };

    __lpp4 = function (b, i) {
      var len = __readUInt32LE(b, i);

      return len > 0 ? cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len)) : "";
    };

    __8lpp4 = function (b, i) {
      var len = __readUInt32LE(b, i);

      return len > 0 ? cptable.utils.decode(65001, b.slice(i + 4, i + 4 + len)) : "";
    };
  }

  var __readUInt8 = function (b, idx) {
    return b[idx];
  };

  var __readUInt16LE = function (b, idx) {
    return b[idx + 1] * (1 << 8) + b[idx];
  };

  var __readInt16LE = function (b, idx) {
    var u = b[idx + 1] * (1 << 8) + b[idx];
    return u < 0x8000 ? u : (0xffff - u + 1) * -1;
  };

  var __readUInt32LE = function (b, idx) {
    return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];
  };

  var __readInt32LE = function (b, idx) {
    return b[idx + 3] << 24 | b[idx + 2] << 16 | b[idx + 1] << 8 | b[idx];
  };

  var __readInt32BE = function (b, idx) {
    return b[idx] << 24 | b[idx + 1] << 16 | b[idx + 2] << 8 | b[idx + 3];
  };

  function ReadShift(size, t) {
    var o = "",
        oI,
        oR,
        oo = [],
        w,
        vv,
        i,
        loc;

    switch (t) {
      case 'dbcs':
        loc = this.l;
        if (has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l + 2 * size).toString("utf16le");else for (i = 0; i < size; ++i) {
          o += String.fromCharCode(__readUInt16LE(this, loc));
          loc += 2;
        }
        size *= 2;
        break;

      case 'utf8':
        o = __utf8(this, this.l, this.l + size);
        break;

      case 'utf16le':
        size *= 2;
        o = __utf16le(this, this.l, this.l + size);
        break;

      case 'wstr':
        if (typeof cptable !== 'undefined') o = cptable.utils.decode(current_codepage, this.slice(this.l, this.l + 2 * size));else return ReadShift.call(this, size, 'dbcs');
        size = 2 * size;
        break;

      /* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */

      case 'lpstr-ansi':
        o = __lpstr(this, this.l);
        size = 4 + __readUInt32LE(this, this.l);
        break;

      case 'lpstr-cp':
        o = __cpstr(this, this.l);
        size = 4 + __readUInt32LE(this, this.l);
        break;

      /* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */

      case 'lpwstr':
        o = __lpwstr(this, this.l);
        size = 4 + 2 * __readUInt32LE(this, this.l);
        break;

      /* [MS-OFFCRYPTO] 2.1.2 Length-Prefixed Padded Unicode String (UNICODE-LP-P4) */

      case 'lpp4':
        size = 4 + __readUInt32LE(this, this.l);
        o = __lpp4(this, this.l);
        if (size & 0x02) size += 2;
        break;

      /* [MS-OFFCRYPTO] 2.1.3 Length-Prefixed UTF-8 String (UTF-8-LP-P4) */

      case '8lpp4':
        size = 4 + __readUInt32LE(this, this.l);
        o = __8lpp4(this, this.l);
        if (size & 0x03) size += 4 - (size & 0x03);
        break;

      case 'cstr':
        size = 0;
        o = "";

        while ((w = __readUInt8(this, this.l + size++)) !== 0) oo.push(_getchar(w));

        o = oo.join("");
        break;

      case '_wstr':
        size = 0;
        o = "";

        while ((w = __readUInt16LE(this, this.l + size)) !== 0) {
          oo.push(_getchar(w));
          size += 2;
        }

        size += 2;
        o = oo.join("");
        break;

      /* sbcs and dbcs support continue records in the SST way TODO codepages */

      case 'dbcs-cont':
        o = "";
        loc = this.l;

        for (i = 0; i < size; ++i) {
          if (this.lens && this.lens.indexOf(loc) !== -1) {
            w = __readUInt8(this, loc);
            this.l = loc + 1;
            vv = ReadShift.call(this, size - i, w ? 'dbcs-cont' : 'sbcs-cont');
            return oo.join("") + vv;
          }

          oo.push(_getchar(__readUInt16LE(this, loc)));
          loc += 2;
        }

        o = oo.join("");
        size *= 2;
        break;

      case 'cpstr':
        if (typeof cptable !== 'undefined') {
          o = cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));
          break;
        }

      /* falls through */

      case 'sbcs-cont':
        o = "";
        loc = this.l;

        for (i = 0; i != size; ++i) {
          if (this.lens && this.lens.indexOf(loc) !== -1) {
            w = __readUInt8(this, loc);
            this.l = loc + 1;
            vv = ReadShift.call(this, size - i, w ? 'dbcs-cont' : 'sbcs-cont');
            return oo.join("") + vv;
          }

          oo.push(_getchar(__readUInt8(this, loc)));
          loc += 1;
        }

        o = oo.join("");
        break;

      default:
        switch (size) {
          case 1:
            oI = __readUInt8(this, this.l);
            this.l++;
            return oI;

          case 2:
            oI = (t === 'i' ? __readInt16LE : __readUInt16LE)(this, this.l);
            this.l += 2;
            return oI;

          case 4:
          case -4:
            if (t === 'i' || (this[this.l + 3] & 0x80) === 0) {
              oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l);
              this.l += 4;
              return oI;
            } else {
              oR = __readUInt32LE(this, this.l);
              this.l += 4;
            }

            return oR;

          case 8:
          case -8:
            if (t === 'f') {
              if (size == 8) oR = __double(this, this.l);else oR = __double([this[this.l + 7], this[this.l + 6], this[this.l + 5], this[this.l + 4], this[this.l + 3], this[this.l + 2], this[this.l + 1], this[this.l + 0]], 0);
              this.l += 8;
              return oR;
            } else size = 8;

          /* falls through */

          case 16:
            o = __hexlify(this, this.l, size);
            break;
        }

    }

    this.l += size;
    return o;
  }

  var __writeUInt32LE = function (b, val, idx) {
    b[idx] = val & 0xFF;
    b[idx + 1] = val >>> 8 & 0xFF;
    b[idx + 2] = val >>> 16 & 0xFF;
    b[idx + 3] = val >>> 24 & 0xFF;
  };

  var __writeInt32LE = function (b, val, idx) {
    b[idx] = val & 0xFF;
    b[idx + 1] = val >> 8 & 0xFF;
    b[idx + 2] = val >> 16 & 0xFF;
    b[idx + 3] = val >> 24 & 0xFF;
  };

  var __writeUInt16LE = function (b, val, idx) {
    b[idx] = val & 0xFF;
    b[idx + 1] = val >>> 8 & 0xFF;
  };

  function WriteShift(t, val, f) {
    var size = 0,
        i = 0;

    if (f === 'dbcs') {
      for (i = 0; i != val.length; ++i) __writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);

      size = 2 * val.length;
    } else if (f === 'sbcs') {
      if (typeof cptable !== 'undefined' && current_ansi == 874) {
        /* TODO: use tables directly, don't encode */
        for (i = 0; i != val.length; ++i) {
          var cppayload = cptable.utils.encode(current_ansi, val.charAt(i));
          this[this.l + i] = cppayload[0];
        }
      } else {
        val = val.replace(/[^\x00-\x7F]/g, "_");

        for (i = 0; i != val.length; ++i) this[this.l + i] = val.charCodeAt(i) & 0xFF;
      }

      size = val.length;
    } else if (f === 'hex') {
      for (; i < t; ++i) {
        this[this.l++] = parseInt(val.slice(2 * i, 2 * i + 2), 16) || 0;
      }

      return this;
    } else if (f === 'utf16le') {
      var end = Math.min(this.l + t, this.length);

      for (i = 0; i < Math.min(val.length, t); ++i) {
        var cc = val.charCodeAt(i);
        this[this.l++] = cc & 0xff;
        this[this.l++] = cc >> 8;
      }

      while (this.l < end) this[this.l++] = 0;

      return this;
    } else switch (t) {
      case 1:
        size = 1;
        this[this.l] = val & 0xFF;
        break;

      case 2:
        size = 2;
        this[this.l] = val & 0xFF;
        val >>>= 8;
        this[this.l + 1] = val & 0xFF;
        break;

      case 3:
        size = 3;
        this[this.l] = val & 0xFF;
        val >>>= 8;
        this[this.l + 1] = val & 0xFF;
        val >>>= 8;
        this[this.l + 2] = val & 0xFF;
        break;

      case 4:
        size = 4;

        __writeUInt32LE(this, val, this.l);

        break;

      case 8:
        size = 8;

        if (f === 'f') {
          write_double_le(this, val, this.l);
          break;
        }

      /* falls through */

      case 16:
        break;

      case -4:
        size = 4;

        __writeInt32LE(this, val, this.l);

        break;
    }

    this.l += size;
    return this;
  }

  function CheckField(hexstr, fld) {
    var m = __hexlify(this, this.l, hexstr.length >> 1);

    if (m !== hexstr) throw new Error(fld + 'Expected ' + hexstr + ' saw ' + m);
    this.l += hexstr.length >> 1;
  }

  function prep_blob(blob, pos) {
    blob.l = pos;
    blob.read_shift = ReadShift;
    blob.chk = CheckField;
    blob.write_shift = WriteShift;
  }

  function parsenoop(blob, length) {
    blob.l += length;
  }

  function new_buf(sz) {
    var o = new_raw_buf(sz);
    prep_blob(o, 0);
    return o;
  }
  /* [MS-XLSB] 2.1.4 Record */


  function recordhopper(data, cb, opts) {
    if (!data) return;
    var tmpbyte, cntbyte, length;
    prep_blob(data, data.l || 0);
    var L = data.length,
        RT = 0,
        tgt = 0;

    while (data.l < L) {
      RT = data.read_shift(1);
      if (RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F) << 7);
      var R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];
      tmpbyte = data.read_shift(1);
      length = tmpbyte & 0x7F;

      for (cntbyte = 1; cntbyte < 4 && tmpbyte & 0x80; ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 0x7F) << 7 * cntbyte;

      tgt = data.l + length;
      var d = (R.f || parsenoop)(data, length, opts);
      data.l = tgt;
      if (cb(d, R.n, RT)) return;
    }
  }
  /* control buffer usage for fixed-length buffers */


  function buf_array() {
    var bufs = [],
        blksz = has_buf ? 256 : 2048;

    var newblk = function ba_newblk(sz) {
      var o = new_buf(sz);
      prep_blob(o, 0);
      return o;
    };

    var curbuf = newblk(blksz);

    var endbuf = function ba_endbuf() {
      if (!curbuf) return;

      if (curbuf.length > curbuf.l) {
        curbuf = curbuf.slice(0, curbuf.l);
        curbuf.l = curbuf.length;
      }

      if (curbuf.length > 0) bufs.push(curbuf);
      curbuf = null;
    };

    var next = function ba_next(sz) {
      if (curbuf && sz < curbuf.length - curbuf.l) return curbuf;
      endbuf();
      return curbuf = newblk(Math.max(sz + 1, blksz));
    };

    var end = function ba_end() {
      endbuf();
      return __toBuffer([bufs]);
    };

    var push = function ba_push(buf) {
      endbuf();
      curbuf = buf;
      if (curbuf.l == null) curbuf.l = curbuf.length;
      next(blksz);
    };

    return {
      next: next,
      push: push,
      end: end,
      _bufs: bufs
    };
  }

  function write_record(ba, type, payload, length) {
    var t = +XLSBRE[type],
        l;
    if (isNaN(t)) return; // TODO: throw something here?

    if (!length) length = XLSBRecordEnum[t].p || (payload || []).length || 0;
    l = 1 + (t >= 0x80 ? 1 : 0) + 1
    /* + length*/
    ;
    if (length >= 0x80) ++l;
    if (length >= 0x4000) ++l;
    if (length >= 0x200000) ++l;
    var o = ba.next(l);
    if (t <= 0x7F) o.write_shift(1, t);else {
      o.write_shift(1, (t & 0x7F) + 0x80);
      o.write_shift(1, t >> 7);
    }

    for (var i = 0; i != 4; ++i) {
      if (length >= 0x80) {
        o.write_shift(1, (length & 0x7F) + 0x80);
        length >>= 7;
      } else {
        o.write_shift(1, length);
        break;
      }
    }

    if (length > 0 && is_buf(payload)) ba.push(payload);
  }
  /* XLS ranges enforced */


  function shift_cell_xls(cell, tgt, opts) {
    var out = dup(cell);

    if (tgt.s) {
      if (out.cRel) out.c += tgt.s.c;
      if (out.rRel) out.r += tgt.s.r;
    } else {
      if (out.cRel) out.c += tgt.c;
      if (out.rRel) out.r += tgt.r;
    }

    if (!opts || opts.biff < 12) {
      while (out.c >= 0x100) out.c -= 0x100;

      while (out.r >= 0x10000) out.r -= 0x10000;
    }

    return out;
  }

  function shift_range_xls(cell, range, opts) {
    var out = dup(cell);
    out.s = shift_cell_xls(out.s, range.s, opts);
    out.e = shift_cell_xls(out.e, range.s, opts);
    return out;
  }

  function encode_cell_xls(c, biff) {
    if (c.cRel && c.c < 0) {
      c = dup(c);

      while (c.c < 0) c.c += biff > 8 ? 0x4000 : 0x100;
    }

    if (c.rRel && c.r < 0) {
      c = dup(c);

      while (c.r < 0) c.r += biff > 8 ? 0x100000 : biff > 5 ? 0x10000 : 0x4000;
    }

    var s = encode_cell(c);
    if (!c.cRel && c.cRel != null) s = fix_col(s);
    if (!c.rRel && c.rRel != null) s = fix_row(s);
    return s;
  }

  function encode_range_xls(r, opts) {
    if (r.s.r == 0 && !r.s.rRel) {
      if (r.e.r == (opts.biff >= 12 ? 0xFFFFF : opts.biff >= 8 ? 0x10000 : 0x4000) && !r.e.rRel) {
        return (r.s.cRel ? "" : "$") + encode_col(r.s.c) + ":" + (r.e.cRel ? "" : "$") + encode_col(r.e.c);
      }
    }

    if (r.s.c == 0 && !r.s.cRel) {
      if (r.e.c == (opts.biff >= 12 ? 0x3FFF : 0xFF) && !r.e.cRel) {
        return (r.s.rRel ? "" : "$") + encode_row(r.s.r) + ":" + (r.e.rRel ? "" : "$") + encode_row(r.e.r);
      }
    }

    return encode_cell_xls(r.s, opts.biff) + ":" + encode_cell_xls(r.e, opts.biff);
  }

  var OFFCRYPTO = {};

  var make_offcrypto = function (O, _crypto) {
    var crypto;
    if (typeof _crypto !== 'undefined') crypto = _crypto;else if (typeof require !== 'undefined') {
      try {
        crypto = require('crypto');
      } catch (e) {
        crypto = null;
      }
    }

    O.rc4 = function (key, data) {
      var S = new Array(256);
      var c = 0,
          i = 0,
          j = 0,
          t = 0;

      for (i = 0; i != 256; ++i) S[i] = i;

      for (i = 0; i != 256; ++i) {
        j = j + S[i] + key[i % key.length].charCodeAt(0) & 255;
        t = S[i];
        S[i] = S[j];
        S[j] = t;
      } // $FlowIgnore


      i = j = 0;
      var out = new_raw_buf(data.length);

      for (c = 0; c != data.length; ++c) {
        i = i + 1 & 255;
        j = (j + S[i]) % 256;
        t = S[i];
        S[i] = S[j];
        S[j] = t;
        out[c] = data[c] ^ S[S[i] + S[j] & 255];
      }

      return out;
    };

    O.md5 = function (hex) {
      if (!crypto) throw new Error("Unsupported crypto");
      return crypto.createHash('md5').update(hex).digest('hex');
    };
  };
  /*global crypto:true */


  make_offcrypto(OFFCRYPTO, typeof crypto !== "undefined" ? crypto : undefined);

  function decode_row(rowstr) {
    return parseInt(unfix_row(rowstr), 10) - 1;
  }

  function encode_row(row) {
    return "" + (row + 1);
  }

  function fix_row(cstr) {
    return cstr.replace(/([A-Z]|^)(\d+)$/, "$1$$$2");
  }

  function unfix_row(cstr) {
    return cstr.replace(/\$(\d+)$/, "$1");
  }

  function decode_col(colstr) {
    var c = unfix_col(colstr),
        d = 0,
        i = 0;

    for (; i !== c.length; ++i) d = 26 * d + c.charCodeAt(i) - 64;

    return d - 1;
  }

  function encode_col(col) {
    if (col < 0) throw new Error("invalid column " + col);
    var s = "";

    for (++col; col; col = Math.floor((col - 1) / 26)) s = String.fromCharCode((col - 1) % 26 + 65) + s;

    return s;
  }

  function fix_col(cstr) {
    return cstr.replace(/^([A-Z])/, "$$$1");
  }

  function unfix_col(cstr) {
    return cstr.replace(/^\$([A-Z])/, "$1");
  }

  function split_cell(cstr) {
    return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, "$1,$2").split(",");
  } //function decode_cell(cstr) { var splt = split_cell(cstr); return { c:decode_col(splt[0]), r:decode_row(splt[1]) }; }


  function decode_cell(cstr) {
    var R = 0,
        C = 0;

    for (var i = 0; i < cstr.length; ++i) {
      var cc = cstr.charCodeAt(i);
      if (cc >= 48 && cc <= 57) R = 10 * R + (cc - 48);else if (cc >= 65 && cc <= 90) C = 26 * C + (cc - 64);
    }

    return {
      c: C - 1,
      r: R - 1
    };
  } //function encode_cell(cell) { return encode_col(cell.c) + encode_row(cell.r); }


  function encode_cell(cell) {
    var col = cell.c + 1;
    var s = "";

    for (; col; col = (col - 1) / 26 | 0) s = String.fromCharCode((col - 1) % 26 + 65) + s;

    return s + (cell.r + 1);
  }

  function decode_range(range) {
    var idx = range.indexOf(":");
    if (idx == -1) return {
      s: decode_cell(range),
      e: decode_cell(range)
    };
    return {
      s: decode_cell(range.slice(0, idx)),
      e: decode_cell(range.slice(idx + 1))
    };
  }

  function encode_range(cs, ce) {
    if (typeof ce === 'undefined' || typeof ce === 'number') {
      return encode_range(cs.s, cs.e);
    }

    if (typeof cs !== 'string') cs = encode_cell(cs);
    if (typeof ce !== 'string') ce = encode_cell(ce);
    return cs == ce ? cs : cs + ":" + ce;
  }

  function safe_decode_range(range) {
    var o = {
      s: {
        c: 0,
        r: 0
      },
      e: {
        c: 0,
        r: 0
      }
    };
    var idx = 0,
        i = 0,
        cc = 0;
    var len = range.length;

    for (idx = 0; i < len; ++i) {
      if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;
      idx = 26 * idx + cc;
    }

    o.s.c = --idx;

    for (idx = 0; i < len; ++i) {
      if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;
      idx = 10 * idx + cc;
    }

    o.s.r = --idx;

    if (i === len || range.charCodeAt(++i) === 58) {
      o.e.c = o.s.c;
      o.e.r = o.s.r;
      return o;
    }

    for (idx = 0; i != len; ++i) {
      if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;
      idx = 26 * idx + cc;
    }

    o.e.c = --idx;

    for (idx = 0; i != len; ++i) {
      if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;
      idx = 10 * idx + cc;
    }

    o.e.r = --idx;
    return o;
  }

  function safe_format_cell(cell, v) {
    var q = cell.t == 'd' && v instanceof Date;
    if (cell.z != null) try {
      return cell.w = SSF.format(cell.z, q ? datenum(v) : v);
    } catch (e) {}

    try {
      return cell.w = SSF.format((cell.XF || {}).numFmtId || (q ? 14 : 0), q ? datenum(v) : v);
    } catch (e) {
      return '' + v;
    }
  }

  function format_cell(cell, v, o) {
    if (cell == null || cell.t == null || cell.t == 'z') return "";
    if (cell.w !== undefined) return cell.w;
    if (cell.t == 'd' && !cell.z && o && o.dateNF) cell.z = o.dateNF;
    if (v == undefined) return safe_format_cell(cell, cell.v);
    return safe_format_cell(cell, v);
  }

  function sheet_to_workbook(sheet, opts) {
    var n = opts && opts.sheet ? opts.sheet : "Sheet1";
    var sheets = {};
    sheets[n] = sheet;
    return {
      SheetNames: [n],
      Sheets: sheets
    };
  }

  function sheet_add_aoa(_ws, data, opts) {
    var o = opts || {};
    var dense = _ws ? Array.isArray(_ws) : o.dense;
    if (DENSE != null && dense == null) dense = DENSE;
    var ws = _ws || (dense ? [] : {});
    var _R = 0,
        _C = 0;

    if (ws && o.origin != null) {
      if (typeof o.origin == 'number') _R = o.origin;else {
        var _origin = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;

        _R = _origin.r;
        _C = _origin.c;
      }
      if (!ws["!ref"]) ws["!ref"] = "A1:A1";
    }

    var range = {
      s: {
        c: 10000000,
        r: 10000000
      },
      e: {
        c: 0,
        r: 0
      }
    };

    if (ws['!ref']) {
      var _range = safe_decode_range(ws['!ref']);

      range.s.c = _range.s.c;
      range.s.r = _range.s.r;
      range.e.c = Math.max(range.e.c, _range.e.c);
      range.e.r = Math.max(range.e.r, _range.e.r);
      if (_R == -1) range.e.r = _R = _range.e.r + 1;
    }

    for (var R = 0; R != data.length; ++R) {
      if (!data[R]) continue;
      if (!Array.isArray(data[R])) throw new Error("aoa_to_sheet expects an array of arrays");

      for (var C = 0; C != data[R].length; ++C) {
        if (typeof data[R][C] === 'undefined') continue;
        var cell = {
          v: data[R][C]
        };

        var __R = _R + R,
            __C = _C + C;

        if (range.s.r > __R) range.s.r = __R;
        if (range.s.c > __C) range.s.c = __C;
        if (range.e.r < __R) range.e.r = __R;
        if (range.e.c < __C) range.e.c = __C;
        if (data[R][C] && typeof data[R][C] === 'object' && !Array.isArray(data[R][C]) && !(data[R][C] instanceof Date)) cell = data[R][C];else {
          if (Array.isArray(cell.v)) {
            cell.f = data[R][C][1];
            cell.v = cell.v[0];
          }

          if (cell.v === null) {
            if (cell.f) cell.t = 'n';else if (!o.sheetStubs) continue;else cell.t = 'z';
          } else if (typeof cell.v === 'number') cell.t = 'n';else if (typeof cell.v === 'boolean') cell.t = 'b';else if (cell.v instanceof Date) {
            cell.z = o.dateNF || SSF._table[14];

            if (o.cellDates) {
              cell.t = 'd';
              cell.w = SSF.format(cell.z, datenum(cell.v));
            } else {
              cell.t = 'n';
              cell.v = datenum(cell.v);
              cell.w = SSF.format(cell.z, cell.v);
            }
          } else cell.t = 's';
        }

        if (dense) {
          if (!ws[__R]) ws[__R] = [];
          if (ws[__R][__C] && ws[__R][__C].z) cell.z = ws[__R][__C].z;
          ws[__R][__C] = cell;
        } else {
          var cell_ref = encode_cell({
            c: __C,
            r: __R
          });
          if (ws[cell_ref] && ws[cell_ref].z) cell.z = ws[cell_ref].z;
          ws[cell_ref] = cell;
        }
      }
    }

    if (range.s.c < 10000000) ws['!ref'] = encode_range(range);
    return ws;
  }

  function aoa_to_sheet(data, opts) {
    return sheet_add_aoa(null, data, opts);
  }

  function write_UInt32LE(x, o) {
    if (!o) o = new_buf(4);
    o.write_shift(4, x);
    return o;
  }
  /* [MS-XLSB] 2.5.168 */


  function parse_XLWideString(data) {
    var cchCharacters = data.read_shift(4);
    return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, 'dbcs');
  }

  function write_XLWideString(data, o) {
    var _null = false;

    if (o == null) {
      _null = true;
      o = new_buf(4 + 2 * data.length);
    }

    o.write_shift(4, data.length);
    if (data.length > 0) o.write_shift(0, data, 'dbcs');
    return _null ? o.slice(0, o.l) : o;
  }
  /* [MS-XLSB] 2.5.91 */
  //function parse_LPWideString(data) {
  //	var cchCharacters = data.read_shift(2);
  //	return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "utf16le");
  //}

  /* [MS-XLSB] 2.5.143 */


  function parse_StrRun(data) {
    return {
      ich: data.read_shift(2),
      ifnt: data.read_shift(2)
    };
  }

  function write_StrRun(run, o) {
    if (!o) o = new_buf(4);
    o.write_shift(2, run.ich || 0);
    o.write_shift(2, run.ifnt || 0);
    return o;
  }
  /* [MS-XLSB] 2.5.121 */


  function parse_RichStr(data, length) {
    var start = data.l;
    var flags = data.read_shift(1);
    var str = parse_XLWideString(data);
    var rgsStrRun = [];
    var z = {
      t: str,
      h: str
    };

    if ((flags & 1) !== 0) {
      /* fRichStr */

      /* TODO: formatted string */
      var dwSizeStrRun = data.read_shift(4);

      for (var i = 0; i != dwSizeStrRun; ++i) rgsStrRun.push(parse_StrRun(data));

      z.r = rgsStrRun;
    } else z.r = [{
      ich: 0,
      ifnt: 0
    }]; //if((flags & 2) !== 0) { /* fExtStr */
    //	/* TODO: phonetic string */
    //}


    data.l = start + length;
    return z;
  }

  function write_RichStr(str, o) {
    /* TODO: formatted string */
    var _null = false;

    if (o == null) {
      _null = true;
      o = new_buf(15 + 4 * str.t.length);
    }

    o.write_shift(1, 0);
    write_XLWideString(str.t, o);
    return _null ? o.slice(0, o.l) : o;
  }
  /* [MS-XLSB] 2.4.328 BrtCommentText (RichStr w/1 run) */


  var parse_BrtCommentText = parse_RichStr;

  function write_BrtCommentText(str, o) {
    /* TODO: formatted string */
    var _null = false;

    if (o == null) {
      _null = true;
      o = new_buf(23 + 4 * str.t.length);
    }

    o.write_shift(1, 1);
    write_XLWideString(str.t, o);
    o.write_shift(4, 1);
    write_StrRun({
      ich: 0,
      ifnt: 0
    }, o);
    return _null ? o.slice(0, o.l) : o;
  }
  /* [MS-XLSB] 2.5.9 */


  function parse_XLSBCell(data) {
    var col = data.read_shift(4);
    var iStyleRef = data.read_shift(2);
    iStyleRef += data.read_shift(1) << 16;
    data.l++; //var fPhShow = data.read_shift(1);

    return {
      c: col,
      iStyleRef: iStyleRef
    };
  }

  function write_XLSBCell(cell, o) {
    if (o == null) o = new_buf(8);
    o.write_shift(-4, cell.c);
    o.write_shift(3, cell.iStyleRef || cell.s);
    o.write_shift(1, 0);
    /* fPhShow */

    return o;
  }
  /* [MS-XLSB] 2.5.21 */


  var parse_XLSBCodeName = parse_XLWideString;
  var write_XLSBCodeName = write_XLWideString;
  /* [MS-XLSB] 2.5.166 */

  function parse_XLNullableWideString(data) {
    var cchCharacters = data.read_shift(4);
    return cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? "" : data.read_shift(cchCharacters, 'dbcs');
  }

  function write_XLNullableWideString(data, o) {
    var _null = false;

    if (o == null) {
      _null = true;
      o = new_buf(127);
    }

    o.write_shift(4, data.length > 0 ? data.length : 0xFFFFFFFF);
    if (data.length > 0) o.write_shift(0, data, 'dbcs');
    return _null ? o.slice(0, o.l) : o;
  }
  /* [MS-XLSB] 2.5.165 */


  var parse_XLNameWideString = parse_XLWideString; //var write_XLNameWideString = write_XLWideString;

  /* [MS-XLSB] 2.5.114 */

  var parse_RelID = parse_XLNullableWideString;
  var write_RelID = write_XLNullableWideString;
  /* [MS-XLS] 2.5.217 ; [MS-XLSB] 2.5.122 */

  function parse_RkNumber(data) {
    var b = data.slice(data.l, data.l + 4);
    var fX100 = b[0] & 1,
        fInt = b[0] & 2;
    data.l += 4;
    b[0] &= 0xFC; // b[0] &= ~3;

    var RK = fInt === 0 ? __double([0, 0, 0, 0, b[0], b[1], b[2], b[3]], 0) : __readInt32LE(b, 0) >> 2;
    return fX100 ? RK / 100 : RK;
  }

  function write_RkNumber(data, o) {
    if (o == null) o = new_buf(4);
    var fX100 = 0,
        fInt = 0,
        d100 = data * 100;

    if (data == (data | 0) && data >= -(1 << 29) && data < 1 << 29) {
      fInt = 1;
    } else if (d100 == (d100 | 0) && d100 >= -(1 << 29) && d100 < 1 << 29) {
      fInt = 1;
      fX100 = 1;
    }

    if (fInt) o.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2));else throw new Error("unsupported RkNumber " + data); // TODO
  }
  /* [MS-XLSB] 2.5.117 RfX */


  function parse_RfX(data) {
    var cell = {
      s: {},
      e: {}
    };
    cell.s.r = data.read_shift(4);
    cell.e.r = data.read_shift(4);
    cell.s.c = data.read_shift(4);
    cell.e.c = data.read_shift(4);
    return cell;
  }

  function write_RfX(r, o) {
    if (!o) o = new_buf(16);
    o.write_shift(4, r.s.r);
    o.write_shift(4, r.e.r);
    o.write_shift(4, r.s.c);
    o.write_shift(4, r.e.c);
    return o;
  }
  /* [MS-XLSB] 2.5.153 UncheckedRfX */


  var parse_UncheckedRfX = parse_RfX;
  var write_UncheckedRfX = write_RfX;
  /* [MS-XLSB] 2.5.155 UncheckedSqRfX */
  //function parse_UncheckedSqRfX(data) {
  //	var cnt = data.read_shift(4);
  //	var out = [];
  //	for(var i = 0; i < cnt; ++i) {
  //		var rng = parse_UncheckedRfX(data);
  //		out.push(encode_range(rng));
  //	}
  //	return out.join(",");
  //}
  //function write_UncheckedSqRfX(sqrfx) {
  //	var parts = sqrfx.split(/\s*,\s*/);
  //	var o = new_buf(4); o.write_shift(4, parts.length);
  //	var out = [o];
  //	parts.forEach(function(rng) {
  //		out.push(write_UncheckedRfX(safe_decode_range(rng)));
  //	});
  //	return bconcat(out);
  //}

  /* [MS-XLS] 2.5.342 ; [MS-XLSB] 2.5.171 */

  /* TODO: error checking, NaN and Infinity values are not valid Xnum */

  function parse_Xnum(data) {
    if (data.length - data.l < 8) throw "XLS Xnum Buffer underflow";
    return data.read_shift(8, 'f');
  }

  function write_Xnum(data, o) {
    return (o || new_buf(8)).write_shift(8, data, 'f');
  }
  /* [MS-XLSB] 2.4.324 BrtColor */


  function parse_BrtColor(data) {
    var out = {};
    var d = data.read_shift(1); //var fValidRGB = d & 1;

    var xColorType = d >>> 1;
    var index = data.read_shift(1);
    var nTS = data.read_shift(2, 'i');
    var bR = data.read_shift(1);
    var bG = data.read_shift(1);
    var bB = data.read_shift(1);
    data.l++; //var bAlpha = data.read_shift(1);

    switch (xColorType) {
      case 0:
        out.auto = 1;
        break;

      case 1:
        out.index = index;
        var icv = XLSIcv[index];
        /* automatic pseudo index 81 */

        if (icv) out.rgb = rgb2Hex(icv);
        break;

      case 2:
        /* if(!fValidRGB) throw new Error("invalid"); */
        out.rgb = rgb2Hex([bR, bG, bB]);
        break;

      case 3:
        out.theme = index;
        break;
    }

    if (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;
    return out;
  }

  function write_BrtColor(color, o) {
    if (!o) o = new_buf(8);

    if (!color || color.auto) {
      o.write_shift(4, 0);
      o.write_shift(4, 0);
      return o;
    }

    if (color.index != null) {
      o.write_shift(1, 0x02);
      o.write_shift(1, color.index);
    } else if (color.theme != null) {
      o.write_shift(1, 0x06);
      o.write_shift(1, color.theme);
    } else {
      o.write_shift(1, 0x05);
      o.write_shift(1, 0);
    }

    var nTS = color.tint || 0;
    if (nTS > 0) nTS *= 32767;else if (nTS < 0) nTS *= 32768;
    o.write_shift(2, nTS);

    if (!color.rgb || color.theme != null) {
      o.write_shift(2, 0);
      o.write_shift(1, 0);
      o.write_shift(1, 0);
    } else {
      var rgb = color.rgb || 'FFFFFF';
      if (typeof rgb == 'number') rgb = ("000000" + rgb.toString(16)).slice(-6);
      o.write_shift(1, parseInt(rgb.slice(0, 2), 16));
      o.write_shift(1, parseInt(rgb.slice(2, 4), 16));
      o.write_shift(1, parseInt(rgb.slice(4, 6), 16));
      o.write_shift(1, 0xFF);
    }

    return o;
  }
  /* [MS-XLSB] 2.5.52 */


  function parse_FontFlags(data) {
    var d = data.read_shift(1);
    data.l++;
    var out = {
      fBold: d & 0x01,
      fItalic: d & 0x02,
      fUnderline: d & 0x04,
      fStrikeout: d & 0x08,
      fOutline: d & 0x10,
      fShadow: d & 0x20,
      fCondense: d & 0x40,
      fExtend: d & 0x80
    };
    return out;
  }

  function write_FontFlags(font, o) {
    if (!o) o = new_buf(2);
    var grbit = (font.italic ? 0x02 : 0) | (font.strike ? 0x08 : 0) | (font.outline ? 0x10 : 0) | (font.shadow ? 0x20 : 0) | (font.condense ? 0x40 : 0) | (font.extend ? 0x80 : 0);
    o.write_shift(1, grbit);
    o.write_shift(1, 0);
    return o;
  }
  /* [MS-OLEDS] 2.3.1 and 2.3.2 */


  function parse_ClipboardFormatOrString(o, w) {
    // $FlowIgnore
    var ClipFmt = {
      2: "BITMAP",
      3: "METAFILEPICT",
      8: "DIB",
      14: "ENHMETAFILE"
    };
    var m = o.read_shift(4);

    switch (m) {
      case 0x00000000:
        return "";

      case 0xffffffff:
      case 0xfffffffe:
        return ClipFmt[o.read_shift(4)] || "";
    }

    if (m > 0x190) throw new Error("Unsupported Clipboard: " + m.toString(16));
    o.l -= 4;
    return o.read_shift(0, w == 1 ? "lpstr" : "lpwstr");
  }

  function parse_ClipboardFormatOrAnsiString(o) {
    return parse_ClipboardFormatOrString(o, 1);
  }

  function parse_ClipboardFormatOrUnicodeString(o) {
    return parse_ClipboardFormatOrString(o, 2);
  }
  /* [MS-OLEPS] 2.2 PropertyType */
  //var VT_EMPTY    = 0x0000;
  //var VT_NULL     = 0x0001;


  var VT_I2 = 0x0002;
  var VT_I4 = 0x0003; //var VT_R4       = 0x0004;
  //var VT_R8       = 0x0005;
  //var VT_CY       = 0x0006;
  //var VT_DATE     = 0x0007;
  //var VT_BSTR     = 0x0008;
  //var VT_ERROR    = 0x000A;

  var VT_BOOL = 0x000B;
  var VT_VARIANT = 0x000C; //var VT_DECIMAL  = 0x000E;
  //var VT_I1       = 0x0010;
  //var VT_UI1      = 0x0011;
  //var VT_UI2      = 0x0012;

  var VT_UI4 = 0x0013; //var VT_I8       = 0x0014;
  //var VT_UI8      = 0x0015;
  //var VT_INT      = 0x0016;
  //var VT_UINT     = 0x0017;

  var VT_LPSTR = 0x001E; //var VT_LPWSTR   = 0x001F;

  var VT_FILETIME = 0x0040;
  var VT_BLOB = 0x0041; //var VT_STREAM   = 0x0042;
  //var VT_STORAGE  = 0x0043;
  //var VT_STREAMED_Object  = 0x0044;
  //var VT_STORED_Object    = 0x0045;
  //var VT_BLOB_Object      = 0x0046;

  var VT_CF = 0x0047; //var VT_CLSID    = 0x0048;
  //var VT_VERSIONED_STREAM = 0x0049;

  var VT_VECTOR = 0x1000; //var VT_ARRAY    = 0x2000;

  var VT_STRING = 0x0050; // 2.3.3.1.11 VtString

  var VT_USTR = 0x0051; // 2.3.3.1.12 VtUnalignedString

  var VT_CUSTOM = [VT_STRING, VT_USTR];
  /* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */

  var DocSummaryPIDDSI = {
    0x01: {
      n: 'CodePage',
      t: VT_I2
    },
    0x02: {
      n: 'Category',
      t: VT_STRING
    },
    0x03: {
      n: 'PresentationFormat',
      t: VT_STRING
    },
    0x04: {
      n: 'ByteCount',
      t: VT_I4
    },
    0x05: {
      n: 'LineCount',
      t: VT_I4
    },
    0x06: {
      n: 'ParagraphCount',
      t: VT_I4
    },
    0x07: {
      n: 'SlideCount',
      t: VT_I4
    },
    0x08: {
      n: 'NoteCount',
      t: VT_I4
    },
    0x09: {
      n: 'HiddenCount',
      t: VT_I4
    },
    0x0a: {
      n: 'MultimediaClipCount',
      t: VT_I4
    },
    0x0b: {
      n: 'ScaleCrop',
      t: VT_BOOL
    },
    0x0c: {
      n: 'HeadingPairs',
      t: VT_VECTOR | VT_VARIANT
    },
    0x0d: {
      n: 'TitlesOfParts',
      t: VT_VECTOR | VT_LPSTR
    },
    0x0e: {
      n: 'Manager',
      t: VT_STRING
    },
    0x0f: {
      n: 'Company',
      t: VT_STRING
    },
    0x10: {
      n: 'LinksUpToDate',
      t: VT_BOOL
    },
    0x11: {
      n: 'CharacterCount',
      t: VT_I4
    },
    0x13: {
      n: 'SharedDoc',
      t: VT_BOOL
    },
    0x16: {
      n: 'HyperlinksChanged',
      t: VT_BOOL
    },
    0x17: {
      n: 'AppVersion',
      t: VT_I4,
      p: 'version'
    },
    0x18: {
      n: 'DigSig',
      t: VT_BLOB
    },
    0x1A: {
      n: 'ContentType',
      t: VT_STRING
    },
    0x1B: {
      n: 'ContentStatus',
      t: VT_STRING
    },
    0x1C: {
      n: 'Language',
      t: VT_STRING
    },
    0x1D: {
      n: 'Version',
      t: VT_STRING
    },
    0xFF: {}
  };
  /* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */

  var SummaryPIDSI = {
    0x01: {
      n: 'CodePage',
      t: VT_I2
    },
    0x02: {
      n: 'Title',
      t: VT_STRING
    },
    0x03: {
      n: 'Subject',
      t: VT_STRING
    },
    0x04: {
      n: 'Author',
      t: VT_STRING
    },
    0x05: {
      n: 'Keywords',
      t: VT_STRING
    },
    0x06: {
      n: 'Comments',
      t: VT_STRING
    },
    0x07: {
      n: 'Template',
      t: VT_STRING
    },
    0x08: {
      n: 'LastAuthor',
      t: VT_STRING
    },
    0x09: {
      n: 'RevNumber',
      t: VT_STRING
    },
    0x0A: {
      n: 'EditTime',
      t: VT_FILETIME
    },
    0x0B: {
      n: 'LastPrinted',
      t: VT_FILETIME
    },
    0x0C: {
      n: 'CreatedDate',
      t: VT_FILETIME
    },
    0x0D: {
      n: 'ModifiedDate',
      t: VT_FILETIME
    },
    0x0E: {
      n: 'PageCount',
      t: VT_I4
    },
    0x0F: {
      n: 'WordCount',
      t: VT_I4
    },
    0x10: {
      n: 'CharCount',
      t: VT_I4
    },
    0x11: {
      n: 'Thumbnail',
      t: VT_CF
    },
    0x12: {
      n: 'Application',
      t: VT_STRING
    },
    0x13: {
      n: 'DocSecurity',
      t: VT_I4
    },
    0xFF: {}
  };
  /* [MS-OLEPS] 2.18 */

  var SpecialProperties = {
    0x80000000: {
      n: 'Locale',
      t: VT_UI4
    },
    0x80000003: {
      n: 'Behavior',
      t: VT_UI4
    },
    0x72627262: {}
  };

  (function () {
    for (var y in SpecialProperties) if (Object.prototype.hasOwnProperty.call(SpecialProperties, y)) DocSummaryPIDDSI[y] = SummaryPIDSI[y] = SpecialProperties[y];
  })();

  var DocSummaryRE = evert_key(DocSummaryPIDDSI, "n");
  var SummaryRE = evert_key(SummaryPIDSI, "n");
  /* [MS-XLS] 2.4.63 Country/Region codes */

  var CountryEnum = {
    0x0001: "US",
    // United States
    0x0002: "CA",
    // Canada
    0x0003: "",
    // Latin America (except Brazil)
    0x0007: "RU",
    // Russia
    0x0014: "EG",
    // Egypt
    0x001E: "GR",
    // Greece
    0x001F: "NL",
    // Netherlands
    0x0020: "BE",
    // Belgium
    0x0021: "FR",
    // France
    0x0022: "ES",
    // Spain
    0x0024: "HU",
    // Hungary
    0x0027: "IT",
    // Italy
    0x0029: "CH",
    // Switzerland
    0x002B: "AT",
    // Austria
    0x002C: "GB",
    // United Kingdom
    0x002D: "DK",
    // Denmark
    0x002E: "SE",
    // Sweden
    0x002F: "NO",
    // Norway
    0x0030: "PL",
    // Poland
    0x0031: "DE",
    // Germany
    0x0034: "MX",
    // Mexico
    0x0037: "BR",
    // Brazil
    0x003d: "AU",
    // Australia
    0x0040: "NZ",
    // New Zealand
    0x0042: "TH",
    // Thailand
    0x0051: "JP",
    // Japan
    0x0052: "KR",
    // Korea
    0x0054: "VN",
    // Viet Nam
    0x0056: "CN",
    // China
    0x005A: "TR",
    // Turkey
    0x0069: "JS",
    // Ramastan
    0x00D5: "DZ",
    // Algeria
    0x00D8: "MA",
    // Morocco
    0x00DA: "LY",
    // Libya
    0x015F: "PT",
    // Portugal
    0x0162: "IS",
    // Iceland
    0x0166: "FI",
    // Finland
    0x01A4: "CZ",
    // Czech Republic
    0x0376: "TW",
    // Taiwan
    0x03C1: "LB",
    // Lebanon
    0x03C2: "JO",
    // Jordan
    0x03C3: "SY",
    // Syria
    0x03C4: "IQ",
    // Iraq
    0x03C5: "KW",
    // Kuwait
    0x03C6: "SA",
    // Saudi Arabia
    0x03CB: "AE",
    // United Arab Emirates
    0x03CC: "IL",
    // Israel
    0x03CE: "QA",
    // Qatar
    0x03D5: "IR",
    // Iran
    0xFFFF: "US" // United States

  };
  /* [MS-XLS] 2.5.127 */

  var XLSFillPattern = [null, 'solid', 'mediumGray', 'darkGray', 'lightGray', 'darkHorizontal', 'darkVertical', 'darkDown', 'darkUp', 'darkGrid', 'darkTrellis', 'lightHorizontal', 'lightVertical', 'lightDown', 'lightUp', 'lightGrid', 'lightTrellis', 'gray125', 'gray0625'];

  function rgbify(arr) {
    return arr.map(function (x) {
      return [x >> 16 & 255, x >> 8 & 255, x & 255];
    });
  }
  /* [MS-XLS] 2.5.161 */

  /* [MS-XLSB] 2.5.75 Icv */


  var _XLSIcv = rgbify([
  /* Color Constants */
  0x000000, 0xFFFFFF, 0xFF0000, 0x00FF00, 0x0000FF, 0xFFFF00, 0xFF00FF, 0x00FFFF,
  /* Overridable Defaults */
  0x000000, 0xFFFFFF, 0xFF0000, 0x00FF00, 0x0000FF, 0xFFFF00, 0xFF00FF, 0x00FFFF, 0x800000, 0x008000, 0x000080, 0x808000, 0x800080, 0x008080, 0xC0C0C0, 0x808080, 0x9999FF, 0x993366, 0xFFFFCC, 0xCCFFFF, 0x660066, 0xFF8080, 0x0066CC, 0xCCCCFF, 0x000080, 0xFF00FF, 0xFFFF00, 0x00FFFF, 0x800080, 0x800000, 0x008080, 0x0000FF, 0x00CCFF, 0xCCFFFF, 0xCCFFCC, 0xFFFF99, 0x99CCFF, 0xFF99CC, 0xCC99FF, 0xFFCC99, 0x3366FF, 0x33CCCC, 0x99CC00, 0xFFCC00, 0xFF9900, 0xFF6600, 0x666699, 0x969696, 0x003366, 0x339966, 0x003300, 0x333300, 0x993300, 0x993366, 0x333399, 0x333333,
  /* Other entries to appease BIFF8/12 */
  0xFFFFFF,
  /* 0x40 icvForeground ?? */
  0x000000,
  /* 0x41 icvBackground ?? */
  0x000000,
  /* 0x42 icvFrame ?? */
  0x000000,
  /* 0x43 icv3D ?? */
  0x000000,
  /* 0x44 icv3DText ?? */
  0x000000,
  /* 0x45 icv3DHilite ?? */
  0x000000,
  /* 0x46 icv3DShadow ?? */
  0x000000,
  /* 0x47 icvHilite ?? */
  0x000000,
  /* 0x48 icvCtlText ?? */
  0x000000,
  /* 0x49 icvCtlScrl ?? */
  0x000000,
  /* 0x4A icvCtlInv ?? */
  0x000000,
  /* 0x4B icvCtlBody ?? */
  0x000000,
  /* 0x4C icvCtlFrame ?? */
  0x000000,
  /* 0x4D icvCtlFore ?? */
  0x000000,
  /* 0x4E icvCtlBack ?? */
  0x000000,
  /* 0x4F icvCtlNeutral */
  0x000000,
  /* 0x50 icvInfoBk ?? */
  0x000000
  /* 0x51 icvInfoText ?? */
  ]);

  var XLSIcv = dup(_XLSIcv);
  /* [MS-XLSB] 2.5.97.2 */

  var BErr = {
    0x00: "#NULL!",
    0x07: "#DIV/0!",
    0x0F: "#VALUE!",
    0x17: "#REF!",
    0x1D: "#NAME?",
    0x24: "#NUM!",
    0x2A: "#N/A",
    0x2B: "#GETTING_DATA",
    0xFF: "#WTF?"
  };
  var RBErr = evert_num(BErr);
  /* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */

  /* 12.3 Part Summary <SpreadsheetML> */

  /* 14.2 Part Summary <DrawingML> */

  /* [MS-XLSX] 2.1 Part Enumerations ; [MS-XLSB] 2.1.7 Part Enumeration */

  var ct2type
  /*{[string]:string}*/
  = {
    /* Workbook */
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",

    /* Worksheet */
    "application/vnd.ms-excel.binIndexWs": "TODO",

    /* Binary Index */

    /* Macrosheet */
    "application/vnd.ms-excel.intlmacrosheet": "TODO",
    "application/vnd.ms-excel.binIndexMs": "TODO",

    /* Binary Index */

    /* File Properties */
    "application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",

    /* Custom Data Properties */
    "application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",

    /* PivotTable */
    "application/vnd.ms-excel.pivotTable": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",

    /* Chart Objects */
    "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",

    /* Chart Colors */
    "application/vnd.ms-office.chartcolorstyle+xml": "TODO",

    /* Chart Style */
    "application/vnd.ms-office.chartstyle+xml": "TODO",

    /* Chart Advanced */
    "application/vnd.ms-office.chartex+xml": "TODO",

    /* Calculation Chain */
    "application/vnd.ms-excel.calcChain": "calcchains",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",

    /* Printer Settings */
    "application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",

    /* ActiveX */
    "application/vnd.ms-office.activeX": "TODO",
    "application/vnd.ms-office.activeX+xml": "TODO",

    /* Custom Toolbars */
    "application/vnd.ms-excel.attachedToolbars": "TODO",

    /* External Data Connections */
    "application/vnd.ms-excel.connections": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",

    /* External Links */
    "application/vnd.ms-excel.externalLink": "links",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",

    /* Metadata */
    "application/vnd.ms-excel.sheetMetadata": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "TODO",

    /* PivotCache */
    "application/vnd.ms-excel.pivotCacheDefinition": "TODO",
    "application/vnd.ms-excel.pivotCacheRecords": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",

    /* Query Table */
    "application/vnd.ms-excel.queryTable": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",

    /* Shared Workbook */
    "application/vnd.ms-excel.userNames": "TODO",
    "application/vnd.ms-excel.revisionHeaders": "TODO",
    "application/vnd.ms-excel.revisionLog": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",

    /* Single Cell Table */
    "application/vnd.ms-excel.tableSingleCells": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",

    /* Slicer */
    "application/vnd.ms-excel.slicer": "TODO",
    "application/vnd.ms-excel.slicerCache": "TODO",
    "application/vnd.ms-excel.slicer+xml": "TODO",
    "application/vnd.ms-excel.slicerCache+xml": "TODO",

    /* Sort Map */
    "application/vnd.ms-excel.wsSortMap": "TODO",

    /* Table */
    "application/vnd.ms-excel.table": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",

    /* Themes */
    "application/vnd.openxmlformats-officedocument.theme+xml": "themes",

    /* Theme Override */
    "application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",

    /* Timeline */
    "application/vnd.ms-excel.Timeline+xml": "TODO",

    /* verify */
    "application/vnd.ms-excel.TimelineCache+xml": "TODO",

    /* verify */

    /* VBA */
    "application/vnd.ms-office.vbaProject": "vba",
    "application/vnd.ms-office.vbaProjectSignature": "vba",

    /* Volatile Dependencies */
    "application/vnd.ms-office.volatileDependencies": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",

    /* Control Properties */
    "application/vnd.ms-excel.controlproperties+xml": "TODO",

    /* Data Model */
    "application/vnd.openxmlformats-officedocument.model+data": "TODO",

    /* Survey */
    "application/vnd.ms-excel.Survey+xml": "TODO",

    /* Drawing */
    "application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",

    /* VML */
    "application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",
    "application/vnd.openxmlformats-package.relationships+xml": "rels",
    "application/vnd.openxmlformats-officedocument.oleObject": "TODO",

    /* Image */
    "image/png": "TODO",
    "sheet": "js"
  };

  var CT_LIST = function () {
    var o = {
      workbooks: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",
        xlsm: "application/vnd.ms-excel.sheet.macroEnabled.main+xml",
        xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.main",
        xlam: "application/vnd.ms-excel.addin.macroEnabled.main+xml",
        xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"
      },
      strs: {
        /* Shared Strings */
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",
        xlsb: "application/vnd.ms-excel.sharedStrings"
      },
      comments: {
        /* Comments */
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml",
        xlsb: "application/vnd.ms-excel.comments"
      },
      sheets: {
        /* Worksheet */
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",
        xlsb: "application/vnd.ms-excel.worksheet"
      },
      charts: {
        /* Chartsheet */
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml",
        xlsb: "application/vnd.ms-excel.chartsheet"
      },
      dialogs: {
        /* Dialogsheet */
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml",
        xlsb: "application/vnd.ms-excel.dialogsheet"
      },
      macros: {
        /* Macrosheet (Excel 4.0 Macros) */
        xlsx: "application/vnd.ms-excel.macrosheet+xml",
        xlsb: "application/vnd.ms-excel.macrosheet"
      },
      styles: {
        /* Styles */
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",
        xlsb: "application/vnd.ms-excel.styles"
      }
    };
    keys(o).forEach(function (k) {
      ["xlsm", "xlam"].forEach(function (v) {
        if (!o[k][v]) o[k][v] = o[k].xlsx;
      });
    });
    keys(o).forEach(function (k) {
      keys(o[k]).forEach(function (v) {
        ct2type[o[k][v]] = k;
      });
    });
    return o;
  }();

  var type2ct
  /*{[string]:Array<string>}*/
  = evert_arr(ct2type);
  XMLNS.CT = 'http://schemas.openxmlformats.org/package/2006/content-types';

  function new_ct() {
    return {
      workbooks: [],
      sheets: [],
      charts: [],
      dialogs: [],
      macros: [],
      rels: [],
      strs: [],
      comments: [],
      links: [],
      coreprops: [],
      extprops: [],
      custprops: [],
      themes: [],
      styles: [],
      calcchains: [],
      vba: [],
      drawings: [],
      TODO: [],
      xmlns: ""
    };
  }

  function parse_ct(data) {
    var ct = new_ct();
    if (!data || !data.match) return ct;
    var ctext = {};
    (data.match(tagregex) || []).forEach(function (x) {
      var y = parsexmltag(x);

      switch (y[0].replace(nsregex, "<")) {
        case '<?xml':
          break;

        case '<Types':
          ct.xmlns = y['xmlns' + (y[0].match(/<(\w+):/) || ["", ""])[1]];
          break;

        case '<Default':
          ctext[y.Extension] = y.ContentType;
          break;

        case '<Override':
          if (ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);
          break;
      }
    });
    if (ct.xmlns !== XMLNS.CT) throw new Error("Unknown Namespace: " + ct.xmlns);
    ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : "";
    ct.sst = ct.strs.length > 0 ? ct.strs[0] : "";
    ct.style = ct.styles.length > 0 ? ct.styles[0] : "";
    ct.defaults = ctext;
    delete ct.calcchains;
    return ct;
  }

  var CTYPE_XML_ROOT = writextag('Types', null, {
    'xmlns': XMLNS.CT,
    'xmlns:xsd': XMLNS.xsd,
    'xmlns:xsi': XMLNS.xsi
  });
  var CTYPE_DEFAULTS = [['xml', 'application/xml'], ['bin', 'application/vnd.ms-excel.sheet.binary.macroEnabled.main'], ['vml', 'application/vnd.openxmlformats-officedocument.vmlDrawing'], ['data', 'application/vnd.openxmlformats-officedocument.model+data'],
  /* from test files */
  ['bmp', 'image/bmp'], ['png', 'image/png'], ['gif', 'image/gif'], ['emf', 'image/x-emf'], ['wmf', 'image/x-wmf'], ['jpg', 'image/jpeg'], ['jpeg', 'image/jpeg'], ['tif', 'image/tiff'], ['tiff', 'image/tiff'], ['pdf', 'application/pdf'], ['rels', type2ct.rels[0]]].map(function (x) {
    return writextag('Default', null, {
      'Extension': x[0],
      'ContentType': x[1]
    });
  });

  function write_ct(ct, opts) {
    var o = [],
        v;
    o[o.length] = XML_HEADER;
    o[o.length] = CTYPE_XML_ROOT;
    o = o.concat(CTYPE_DEFAULTS);
    /* only write first instance */

    var f1 = function (w) {
      if (ct[w] && ct[w].length > 0) {
        v = ct[w][0];
        o[o.length] = writextag('Override', null, {
          'PartName': (v[0] == '/' ? "" : "/") + v,
          'ContentType': CT_LIST[w][opts.bookType || 'xlsx']
        });
      }
    };
    /* book type-specific */


    var f2 = function (w) {
      (ct[w] || []).forEach(function (v) {
        o[o.length] = writextag('Override', null, {
          'PartName': (v[0] == '/' ? "" : "/") + v,
          'ContentType': CT_LIST[w][opts.bookType || 'xlsx']
        });
      });
    };
    /* standard type */


    var f3 = function (t) {
      (ct[t] || []).forEach(function (v) {
        o[o.length] = writextag('Override', null, {
          'PartName': (v[0] == '/' ? "" : "/") + v,
          'ContentType': type2ct[t][0]
        });
      });
    };

    f1('workbooks');
    f2('sheets');
    f2('charts');
    f3('themes');
    ['strs', 'styles'].forEach(f1);
    ['coreprops', 'extprops', 'custprops'].forEach(f3);
    f3('vba');
    f3('comments');
    f3('drawings');

    if (o.length > 2) {
      o[o.length] = '</Types>';
      o[1] = o[1].replace("/>", ">");
    }

    return o.join("");
  }
  /* 9.3 Relationships */


  var RELS = {
    WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
    SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
    HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
    VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
    XPATH: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",
    XMISS: "http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",
    XLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",
    CXML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",
    CXMLP: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",
    VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
  };
  /* 9.3.3 Representing Relationships */

  function get_rels_path(file) {
    var n = file.lastIndexOf("/");
    return file.slice(0, n + 1) + '_rels/' + file.slice(n + 1) + ".rels";
  }

  function parse_rels(data, currentFilePath) {
    var rels = {
      "!id": {}
    };
    if (!data) return rels;

    if (currentFilePath.charAt(0) !== '/') {
      currentFilePath = '/' + currentFilePath;
    }

    var hash = {};
    (data.match(tagregex) || []).forEach(function (x) {
      var y = parsexmltag(x);
      /* 9.3.2.2 OPC_Relationships */

      if (y[0] === '<Relationship') {
        var rel = {};
        rel.Type = y.Type;
        rel.Target = y.Target;
        rel.Id = y.Id;
        rel.TargetMode = y.TargetMode;
        var canonictarget = y.TargetMode === 'External' ? y.Target : resolve_path(y.Target, currentFilePath);
        rels[canonictarget] = rel;
        hash[y.Id] = rel;
      }
    });
    rels["!id"] = hash;
    return rels;
  }

  XMLNS.RELS = 'http://schemas.openxmlformats.org/package/2006/relationships';
  var RELS_ROOT = writextag('Relationships', null, {
    //'xmlns:ns0': XMLNS.RELS,
    'xmlns': XMLNS.RELS
  });
  /* TODO */

  function write_rels(rels) {
    var o = [XML_HEADER, RELS_ROOT];
    keys(rels['!id']).forEach(function (rid) {
      o[o.length] = writextag('Relationship', null, rels['!id'][rid]);
    });

    if (o.length > 2) {
      o[o.length] = '</Relationships>';
      o[1] = o[1].replace("/>", ">");
    }

    return o.join("");
  }

  var RELS_EXTERN = [RELS.HLINK, RELS.XPATH, RELS.XMISS];

  function add_rels(rels, rId, f, type, relobj, targetmode) {
    if (!relobj) relobj = {};
    if (!rels['!id']) rels['!id'] = {};
    if (rId < 0) for (rId = 1; rels['!id']['rId' + rId]; ++rId) {
      /* empty */
    }
    relobj.Id = 'rId' + rId;
    relobj.Type = type;
    relobj.Target = f;
    if (targetmode) relobj.TargetMode = targetmode;else if (RELS_EXTERN.indexOf(relobj.Type) > -1) relobj.TargetMode = "External";
    if (rels['!id'][relobj.Id]) throw new Error("Cannot rewrite rId " + rId);
    rels['!id'][relobj.Id] = relobj;
    rels[('/' + relobj.Target).replace("//", "/")] = relobj;
    return rId;
  }
  /* Open Document Format for Office Applications (OpenDocument) Version 1.2 */

  /* Part 3 Section 4 Manifest File */


  var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";

  function parse_manifest(d, opts) {
    var str = xlml_normalize(d);
    var Rn;
    var FEtag;

    while (Rn = xlmlregex.exec(str)) switch (Rn[3]) {
      case 'manifest':
        break;
      // 4.2 <manifest:manifest>

      case 'file-entry':
        // 4.3 <manifest:file-entry>
        FEtag = parsexmltag(Rn[0], false);
        if (FEtag.path == '/' && FEtag.type !== CT_ODS) throw new Error("This OpenDocument is not a spreadsheet");
        break;

      case 'encryption-data': // 4.4 <manifest:encryption-data>

      case 'algorithm': // 4.5 <manifest:algorithm>

      case 'start-key-generation': // 4.6 <manifest:start-key-generation>

      case 'key-derivation':
        // 4.7 <manifest:key-derivation>
        throw new Error("Unsupported ODS Encryption");

      default:
        if (opts && opts.WTF) throw Rn;
    }
  }

  function write_manifest(manifest) {
    var o = [XML_HEADER];
    o.push('<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">\n');
    o.push('  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>\n');

    for (var i = 0; i < manifest.length; ++i) o.push('  <manifest:file-entry manifest:full-path="' + manifest[i][0] + '" manifest:media-type="' + manifest[i][1] + '"/>\n');

    o.push('</manifest:manifest>');
    return o.join("");
  }
  /* Part 3 Section 6 Metadata Manifest File */


  function write_rdf_type(file, res, tag) {
    return ['  <rdf:Description rdf:about="' + file + '">\n', '    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || "odf") + '#' + res + '"/>\n', '  </rdf:Description>\n'].join("");
  }

  function write_rdf_has(base, file) {
    return ['  <rdf:Description rdf:about="' + base + '">\n', '    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="' + file + '"/>\n', '  </rdf:Description>\n'].join("");
  }

  function write_rdf(rdf) {
    var o = [XML_HEADER];
    o.push('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n');

    for (var i = 0; i != rdf.length; ++i) {
      o.push(write_rdf_type(rdf[i][0], rdf[i][1]));
      o.push(write_rdf_has("", rdf[i][0]));
    }

    o.push(write_rdf_type("", "Document", "pkg"));
    o.push('</rdf:RDF>');
    return o.join("");
  }
  /* TODO: pull properties */


  var write_meta_ods = function () {
    var payload = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>Sheet' + 'JS ' + XLSX.version + '</meta:generator></office:meta></office:document-meta>';
    return function wmo() {
      return payload;
    };
  }();
  /* ECMA-376 Part II 11.1 Core Properties Part */

  /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */


  var CORE_PROPS = [["cp:category", "Category"], ["cp:contentStatus", "ContentStatus"], ["cp:keywords", "Keywords"], ["cp:lastModifiedBy", "LastAuthor"], ["cp:lastPrinted", "LastPrinted"], ["cp:revision", "RevNumber"], ["cp:version", "Version"], ["dc:creator", "Author"], ["dc:description", "Comments"], ["dc:identifier", "Identifier"], ["dc:language", "Language"], ["dc:subject", "Subject"], ["dc:title", "Title"], ["dcterms:created", "CreatedDate", 'date'], ["dcterms:modified", "ModifiedDate", 'date']];
  XMLNS.CORE_PROPS = "http://schemas.openxmlformats.org/package/2006/metadata/core-properties";
  RELS.CORE_PROPS = 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties';

  var CORE_PROPS_REGEX = function () {
    var r = new Array(CORE_PROPS.length);

    for (var i = 0; i < CORE_PROPS.length; ++i) {
      var f = CORE_PROPS[i];
      var g = "(?:" + f[0].slice(0, f[0].indexOf(":")) + ":)" + f[0].slice(f[0].indexOf(":") + 1);
      r[i] = new RegExp("<" + g + "[^>]*>([\\s\\S]*?)<\/" + g + ">");
    }

    return r;
  }();

  function parse_core_props(data) {
    var p = {};
    data = utf8read(data);

    for (var i = 0; i < CORE_PROPS.length; ++i) {
      var f = CORE_PROPS[i],
          cur = data.match(CORE_PROPS_REGEX[i]);
      if (cur != null && cur.length > 0) p[f[1]] = unescapexml(cur[1]);
      if (f[2] === 'date' && p[f[1]]) p[f[1]] = parseDate(p[f[1]]);
    }

    return p;
  }

  var CORE_PROPS_XML_ROOT = writextag('cp:coreProperties', null, {
    //'xmlns': XMLNS.CORE_PROPS,
    'xmlns:cp': XMLNS.CORE_PROPS,
    'xmlns:dc': XMLNS.dc,
    'xmlns:dcterms': XMLNS.dcterms,
    'xmlns:dcmitype': XMLNS.dcmitype,
    'xmlns:xsi': XMLNS.xsi
  });

  function cp_doit(f, g, h, o, p) {
    if (p[f] != null || g == null || g === "") return;
    p[f] = g;
    g = escapexml(g);
    o[o.length] = h ? writextag(f, g, h) : writetag(f, g);
  }

  function write_core_props(cp, _opts) {
    var opts = _opts || {};
    var o = [XML_HEADER, CORE_PROPS_XML_ROOT],
        p = {};
    if (!cp && !opts.Props) return o.join("");

    if (cp) {
      if (cp.CreatedDate != null) cp_doit("dcterms:created", typeof cp.CreatedDate === "string" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {
        "xsi:type": "dcterms:W3CDTF"
      }, o, p);
      if (cp.ModifiedDate != null) cp_doit("dcterms:modified", typeof cp.ModifiedDate === "string" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {
        "xsi:type": "dcterms:W3CDTF"
      }, o, p);
    }

    for (var i = 0; i != CORE_PROPS.length; ++i) {
      var f = CORE_PROPS[i];
      var v = opts.Props && opts.Props[f[1]] != null ? opts.Props[f[1]] : cp ? cp[f[1]] : null;
      if (v === true) v = "1";else if (v === false) v = "0";else if (typeof v == "number") v = String(v);
      if (v != null) cp_doit(f[0], v, null, o, p);
    }

    if (o.length > 2) {
      o[o.length] = '</cp:coreProperties>';
      o[1] = o[1].replace("/>", ">");
    }

    return o.join("");
  }
  /* 15.2.12.3 Extended File Properties Part */

  /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */


  var EXT_PROPS = [["Application", "Application", "string"], ["AppVersion", "AppVersion", "string"], ["Company", "Company", "string"], ["DocSecurity", "DocSecurity", "string"], ["Manager", "Manager", "string"], ["HyperlinksChanged", "HyperlinksChanged", "bool"], ["SharedDoc", "SharedDoc", "bool"], ["LinksUpToDate", "LinksUpToDate", "bool"], ["ScaleCrop", "ScaleCrop", "bool"], ["HeadingPairs", "HeadingPairs", "raw"], ["TitlesOfParts", "TitlesOfParts", "raw"]];
  XMLNS.EXT_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties";
  RELS.EXT_PROPS = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties';
  var PseudoPropsPairs = ["Worksheets", "SheetNames", "NamedRanges", "DefinedNames", "Chartsheets", "ChartNames"];

  function load_props_pairs(HP, TOP, props, opts) {
    var v = [];
    if (typeof HP == "string") v = parseVector(HP, opts);else for (var j = 0; j < HP.length; ++j) v = v.concat(HP[j].map(function (hp) {
      return {
        v: hp
      };
    }));
    var parts = typeof TOP == "string" ? parseVector(TOP, opts).map(function (x) {
      return x.v;
    }) : TOP;
    var idx = 0,
        len = 0;
    if (parts.length > 0) for (var i = 0; i !== v.length; i += 2) {
      len = +v[i + 1].v;

      switch (v[i].v) {
        case "Worksheets":
        case "å·¥ä½è¡¨":
        case "ÐÐ¸ÑÑÑ":
        case "Ø£ÙØ±Ø§Ù Ø§ÙØ¹ÙÙ":
        case "ã¯ã¼ã¯ã·ã¼ã":
        case "××××× ××ª ×¢××××":
        case "ArbeitsblÃ¤tter":
        case "ÃalÄ±Åma SayfalarÄ±":
        case "Feuilles de calcul":
        case "Fogli di lavoro":
        case "Folhas de cÃ¡lculo":
        case "Planilhas":
        case "Regneark":
        case "Hojas de cÃ¡lculo":
        case "Werkbladen":
          props.Worksheets = len;
          props.SheetNames = parts.slice(idx, idx + len);
          break;

        case "Named Ranges":
        case "Rangos con nombre":
        case "ååä»ãä¸è¦§":
        case "Benannte Bereiche":
        case "Navngivne omrÃ¥der":
          props.NamedRanges = len;
          props.DefinedNames = parts.slice(idx, idx + len);
          break;

        case "Charts":
        case "Diagramme":
          props.Chartsheets = len;
          props.ChartNames = parts.slice(idx, idx + len);
          break;
      }

      idx += len;
    }
  }

  function parse_ext_props(data, p, opts) {
    var q = {};
    if (!p) p = {};
    data = utf8read(data);
    EXT_PROPS.forEach(function (f) {
      var xml = (data.match(matchtag(f[0])) || [])[1];

      switch (f[2]) {
        case "string":
          if (xml) p[f[1]] = unescapexml(xml);
          break;

        case "bool":
          p[f[1]] = xml === "true";
          break;

        case "raw":
          var cur = data.match(new RegExp("<" + f[0] + "[^>]*>([\\s\\S]*?)<\/" + f[0] + ">"));
          if (cur && cur.length > 0) q[f[1]] = cur[1];
          break;
      }
    });
    if (q.HeadingPairs && q.TitlesOfParts) load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);
    return p;
  }

  var EXT_PROPS_XML_ROOT = writextag('Properties', null, {
    'xmlns': XMLNS.EXT_PROPS,
    'xmlns:vt': XMLNS.vt
  });

  function write_ext_props(cp) {
    var o = [],
        W = writextag;
    if (!cp) cp = {};
    cp.Application = "SheetJS";
    o[o.length] = XML_HEADER;
    o[o.length] = EXT_PROPS_XML_ROOT;
    EXT_PROPS.forEach(function (f) {
      if (cp[f[1]] === undefined) return;
      var v;

      switch (f[2]) {
        case 'string':
          v = escapexml(String(cp[f[1]]));
          break;

        case 'bool':
          v = cp[f[1]] ? 'true' : 'false';
          break;
      }

      if (v !== undefined) o[o.length] = W(f[0], v);
    });
    /* TODO: HeadingPairs, TitlesOfParts */

    o[o.length] = W('HeadingPairs', W('vt:vector', W('vt:variant', '<vt:lpstr>Worksheets</vt:lpstr>') + W('vt:variant', W('vt:i4', String(cp.Worksheets))), {
      size: 2,
      baseType: "variant"
    }));
    o[o.length] = W('TitlesOfParts', W('vt:vector', cp.SheetNames.map(function (s) {
      return "<vt:lpstr>" + escapexml(s) + "</vt:lpstr>";
    }).join(""), {
      size: cp.Worksheets,
      baseType: "lpstr"
    }));

    if (o.length > 2) {
      o[o.length] = '</Properties>';
      o[1] = o[1].replace("/>", ">");
    }

    return o.join("");
  }
  /* 15.2.12.2 Custom File Properties Part */


  XMLNS.CUST_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties";
  RELS.CUST_PROPS = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties';
  var custregex = /<[^>]+>[^<]*/g;

  function parse_cust_props(data, opts) {
    var p = {},
        name = "";
    var m = data.match(custregex);
    if (m) for (var i = 0; i != m.length; ++i) {
      var x = m[i],
          y = parsexmltag(x);

      switch (y[0]) {
        case '<?xml':
          break;

        case '<Properties':
          break;

        case '<property':
          name = unescapexml(y.name);
          break;

        case '</property>':
          name = null;
          break;

        default:
          if (x.indexOf('<vt:') === 0) {
            var toks = x.split('>');
            var type = toks[0].slice(4),
                text = toks[1];
            /* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */

            switch (type) {
              case 'lpstr':
              case 'bstr':
              case 'lpwstr':
                p[name] = unescapexml(text);
                break;

              case 'bool':
                p[name] = parsexmlbool(text);
                break;

              case 'i1':
              case 'i2':
              case 'i4':
              case 'i8':
              case 'int':
              case 'uint':
                p[name] = parseInt(text, 10);
                break;

              case 'r4':
              case 'r8':
              case 'decimal':
                p[name] = parseFloat(text);
                break;

              case 'filetime':
              case 'date':
                p[name] = parseDate(text);
                break;

              case 'cy':
              case 'error':
                p[name] = unescapexml(text);
                break;

              default:
                if (type.slice(-1) == '/') break;
                if (opts.WTF && typeof console !== 'undefined') console.warn('Unexpected', x, type, toks);
            }
          } else if (x.slice(0, 2) === "</") {
            /* empty */
          } else if (opts.WTF) throw new Error(x);

      }
    }
    return p;
  }

  var CUST_PROPS_XML_ROOT = writextag('Properties', null, {
    'xmlns': XMLNS.CUST_PROPS,
    'xmlns:vt': XMLNS.vt
  });

  function write_cust_props(cp) {
    var o = [XML_HEADER, CUST_PROPS_XML_ROOT];
    if (!cp) return o.join("");
    var pid = 1;
    keys(cp).forEach(function custprop(k) {
      ++pid;
      o[o.length] = writextag('property', write_vt(cp[k], true), {
        'fmtid': '{D5CDD505-2E9C-101B-9397-08002B2CF9AE}',
        'pid': pid,
        'name': escapexml(k)
      });
    });

    if (o.length > 2) {
      o[o.length] = '</Properties>';
      o[1] = o[1].replace("/>", ">");
    }

    return o.join("");
  }
  /* Common Name -> XLML Name */


  var XLMLDocPropsMap = {
    Title: 'Title',
    Subject: 'Subject',
    Author: 'Author',
    Keywords: 'Keywords',
    Comments: 'Description',
    LastAuthor: 'LastAuthor',
    RevNumber: 'Revision',
    Application: 'AppName',

    /* TotalTime: 'TotalTime', */
    LastPrinted: 'LastPrinted',
    CreatedDate: 'Created',
    ModifiedDate: 'LastSaved',

    /* Pages */

    /* Words */

    /* Characters */
    Category: 'Category',

    /* PresentationFormat */
    Manager: 'Manager',
    Company: 'Company',

    /* Guid */

    /* HyperlinkBase */

    /* Bytes */

    /* Lines */

    /* Paragraphs */

    /* CharactersWithSpaces */
    AppVersion: 'Version',
    ContentStatus: 'ContentStatus',

    /* NOTE: missing from schema */
    Identifier: 'Identifier',

    /* NOTE: missing from schema */
    Language: 'Language'
    /* NOTE: missing from schema */

  };
  var evert_XLMLDPM = evert(XLMLDocPropsMap);

  function xlml_set_prop(Props, tag, val) {
    tag = evert_XLMLDPM[tag] || tag;
    Props[tag] = val;
  }

  function xlml_write_docprops(Props, opts) {
    var o = [];
    keys(XLMLDocPropsMap).map(function (m) {
      for (var i = 0; i < CORE_PROPS.length; ++i) if (CORE_PROPS[i][1] == m) return CORE_PROPS[i];

      for (i = 0; i < EXT_PROPS.length; ++i) if (EXT_PROPS[i][1] == m) return EXT_PROPS[i];

      throw m;
    }).forEach(function (p) {
      if (Props[p[1]] == null) return;
      var m = opts && opts.Props && opts.Props[p[1]] != null ? opts.Props[p[1]] : Props[p[1]];

      switch (p[2]) {
        case 'date':
          m = new Date(m).toISOString().replace(/\.\d*Z/, "Z");
          break;
      }

      if (typeof m == 'number') m = String(m);else if (m === true || m === false) {
        m = m ? "1" : "0";
      } else if (m instanceof Date) m = new Date(m).toISOString().replace(/\.\d*Z/, "");
      o.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m));
    });
    return writextag('DocumentProperties', o.join(""), {
      xmlns: XLMLNS.o
    });
  }

  function xlml_write_custprops(Props, Custprops) {
    var BLACKLIST = ["Worksheets", "SheetNames"];
    var T = 'CustomDocumentProperties';
    var o = [];
    if (Props) keys(Props).forEach(function (k) {
      if (!Object.prototype.hasOwnProperty.call(Props, k)) return;

      for (var i = 0; i < CORE_PROPS.length; ++i) if (k == CORE_PROPS[i][1]) return;

      for (i = 0; i < EXT_PROPS.length; ++i) if (k == EXT_PROPS[i][1]) return;

      for (i = 0; i < BLACKLIST.length; ++i) if (k == BLACKLIST[i]) return;

      var m = Props[k];
      var t = "string";

      if (typeof m == 'number') {
        t = "float";
        m = String(m);
      } else if (m === true || m === false) {
        t = "boolean";
        m = m ? "1" : "0";
      } else m = String(m);

      o.push(writextag(escapexmltag(k), m, {
        "dt:dt": t
      }));
    });
    if (Custprops) keys(Custprops).forEach(function (k) {
      if (!Object.prototype.hasOwnProperty.call(Custprops, k)) return;
      if (Props && Object.prototype.hasOwnProperty.call(Props, k)) return;
      var m = Custprops[k];
      var t = "string";

      if (typeof m == 'number') {
        t = "float";
        m = String(m);
      } else if (m === true || m === false) {
        t = "boolean";
        m = m ? "1" : "0";
      } else if (m instanceof Date) {
        t = "dateTime.tz";
        m = m.toISOString();
      } else m = String(m);

      o.push(writextag(escapexmltag(k), m, {
        "dt:dt": t
      }));
    });
    return '<' + T + ' xmlns="' + XLMLNS.o + '">' + o.join("") + '</' + T + '>';
  }
  /* [MS-DTYP] 2.3.3 FILETIME */

  /* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */

  /* [MS-OLEPS] 2.8 FILETIME (Packet Version) */


  function parse_FILETIME(blob) {
    var dwLowDateTime = blob.read_shift(4),
        dwHighDateTime = blob.read_shift(4);
    return new Date((dwHighDateTime / 1e7 * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) * 1000).toISOString().replace(/\.000/, "");
  }

  function write_FILETIME(time) {
    var date = typeof time == "string" ? new Date(Date.parse(time)) : time;
    var t = date.getTime() / 1000 + 11644473600;
    var l = t % Math.pow(2, 32),
        h = (t - l) / Math.pow(2, 32);
    l *= 1e7;
    h *= 1e7;
    var w = l / Math.pow(2, 32) | 0;

    if (w > 0) {
      l = l % Math.pow(2, 32);
      h += w;
    }

    var o = new_buf(8);
    o.write_shift(4, l);
    o.write_shift(4, h);
    return o;
  }
  /* [MS-OSHARED] 2.3.3.1.4 Lpstr */


  function parse_lpstr(blob, type, pad) {
    var start = blob.l;
    var str = blob.read_shift(0, 'lpstr-cp');
    if (pad) while (blob.l - start & 3) ++blob.l;
    return str;
  }
  /* [MS-OSHARED] 2.3.3.1.6 Lpwstr */


  function parse_lpwstr(blob, type, pad) {
    var str = blob.read_shift(0, 'lpwstr');
    if (pad) blob.l += 4 - (str.length + 1 & 3) & 3;
    return str;
  }
  /* [MS-OSHARED] 2.3.3.1.11 VtString */

  /* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */


  function parse_VtStringBase(blob, stringType, pad) {
    if (stringType === 0x1F
    /*VT_LPWSTR*/
    ) return parse_lpwstr(blob);
    return parse_lpstr(blob, stringType, pad);
  }

  function parse_VtString(blob, t, pad) {
    return parse_VtStringBase(blob, t, pad === false ? 0 : 4);
  }

  function parse_VtUnalignedString(blob, t) {
    if (!t) throw new Error("VtUnalignedString must have positive length");
    return parse_VtStringBase(blob, t, 0);
  }
  /* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */


  function parse_VtVecUnalignedLpstrValue(blob) {
    var length = blob.read_shift(4);
    var ret = [];

    for (var i = 0; i != length; ++i) ret[i] = blob.read_shift(0, 'lpstr-cp').replace(chr0, '');

    return ret;
  }
  /* [MS-OSHARED] 2.3.3.1.10 VtVecUnalignedLpstr */


  function parse_VtVecUnalignedLpstr(blob) {
    return parse_VtVecUnalignedLpstrValue(blob);
  }
  /* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */


  function parse_VtHeadingPair(blob) {
    var headingString = parse_TypedPropertyValue(blob, VT_USTR);
    var headerParts = parse_TypedPropertyValue(blob, VT_I4);
    return [headingString, headerParts];
  }
  /* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */


  function parse_VtVecHeadingPairValue(blob) {
    var cElements = blob.read_shift(4);
    var out = [];

    for (var i = 0; i != cElements / 2; ++i) out.push(parse_VtHeadingPair(blob));

    return out;
  }
  /* [MS-OSHARED] 2.3.3.1.15 VtVecHeadingPair */


  function parse_VtVecHeadingPair(blob) {
    // NOTE: When invoked, wType & padding were already consumed
    return parse_VtVecHeadingPairValue(blob);
  }
  /* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */


  function parse_dictionary(blob, CodePage) {
    var cnt = blob.read_shift(4);
    var dict = {};

    for (var j = 0; j != cnt; ++j) {
      var pid = blob.read_shift(4);
      var len = blob.read_shift(4);
      dict[pid] = blob.read_shift(len, CodePage === 0x4B0 ? 'utf16le' : 'utf8').replace(chr0, '').replace(chr1, '!');
      if (CodePage === 0x4B0 && len % 2) blob.l += 2;
    }

    if (blob.l & 3) blob.l = blob.l >> 2 + 1 << 2;
    return dict;
  }
  /* [MS-OLEPS] 2.9 BLOB */


  function parse_BLOB(blob) {
    var size = blob.read_shift(4);
    var bytes = blob.slice(blob.l, blob.l + size);
    blob.l += size;
    if ((size & 3) > 0) blob.l += 4 - (size & 3) & 3;
    return bytes;
  }
  /* [MS-OLEPS] 2.11 ClipboardData */


  function parse_ClipboardData(blob) {
    // TODO
    var o = {};
    o.Size = blob.read_shift(4); //o.Format = blob.read_shift(4);

    blob.l += o.Size + 3 - (o.Size - 1) % 4;
    return o;
  }
  /* [MS-OLEPS] 2.15 TypedPropertyValue */


  function parse_TypedPropertyValue(blob, type, _opts) {
    var t = blob.read_shift(2),
        ret,
        opts = _opts || {};
    blob.l += 2;
    if (type !== VT_VARIANT) if (t !== type && VT_CUSTOM.indexOf(type) === -1) throw new Error('Expected type ' + type + ' saw ' + t);

    switch (type === VT_VARIANT ? t : type) {
      case 0x02
      /*VT_I2*/
      :
        ret = blob.read_shift(2, 'i');
        if (!opts.raw) blob.l += 2;
        return ret;

      case 0x03
      /*VT_I4*/
      :
        ret = blob.read_shift(4, 'i');
        return ret;

      case 0x0B
      /*VT_BOOL*/
      :
        return blob.read_shift(4) !== 0x0;

      case 0x13
      /*VT_UI4*/
      :
        ret = blob.read_shift(4);
        return ret;

      case 0x1E
      /*VT_LPSTR*/
      :
        return parse_lpstr(blob, t, 4).replace(chr0, '');

      case 0x1F
      /*VT_LPWSTR*/
      :
        return parse_lpwstr(blob);

      case 0x40
      /*VT_FILETIME*/
      :
        return parse_FILETIME(blob);

      case 0x41
      /*VT_BLOB*/
      :
        return parse_BLOB(blob);

      case 0x47
      /*VT_CF*/
      :
        return parse_ClipboardData(blob);

      case 0x50
      /*VT_STRING*/
      :
        return parse_VtString(blob, t, !opts.raw).replace(chr0, '');

      case 0x51
      /*VT_USTR*/
      :
        return parse_VtUnalignedString(blob, t
        /*, 4*/
        ).replace(chr0, '');

      case 0x100C
      /*VT_VECTOR|VT_VARIANT*/
      :
        return parse_VtVecHeadingPair(blob);

      case 0x101E
      /*VT_LPSTR*/
      :
        return parse_VtVecUnalignedLpstr(blob);

      default:
        throw new Error("TypedPropertyValue unrecognized type " + type + " " + t);
    }
  }

  function write_TypedPropertyValue(type, value) {
    var o = new_buf(4),
        p = new_buf(4);
    o.write_shift(4, type == 0x50 ? 0x1F : type);

    switch (type) {
      case 0x03
      /*VT_I4*/
      :
        p.write_shift(-4, value);
        break;

      case 0x05
      /*VT_I4*/
      :
        p = new_buf(8);
        p.write_shift(8, value, 'f');
        break;

      case 0x0B
      /*VT_BOOL*/
      :
        p.write_shift(4, value ? 0x01 : 0x00);
        break;

      case 0x40
      /*VT_FILETIME*/
      :
        p = write_FILETIME(value);
        break;

      case 0x1F
      /*VT_LPWSTR*/
      :
      case 0x50
      /*VT_STRING*/
      :
        p = new_buf(4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
        p.write_shift(4, value.length + 1);
        p.write_shift(0, value, "dbcs");

        while (p.l != p.length) p.write_shift(1, 0);

        break;

      default:
        throw new Error("TypedPropertyValue unrecognized type " + type + " " + value);
    }

    return bconcat([o, p]);
  }
  /* [MS-OLEPS] 2.20 PropertySet */


  function parse_PropertySet(blob, PIDSI) {
    var start_addr = blob.l;
    var size = blob.read_shift(4);
    var NumProps = blob.read_shift(4);
    var Props = [],
        i = 0;
    var CodePage = 0;
    var Dictionary = -1,
        DictObj = {};

    for (i = 0; i != NumProps; ++i) {
      var PropID = blob.read_shift(4);
      var Offset = blob.read_shift(4);
      Props[i] = [PropID, Offset + start_addr];
    }

    Props.sort(function (x, y) {
      return x[1] - y[1];
    });
    var PropH = {};

    for (i = 0; i != NumProps; ++i) {
      if (blob.l !== Props[i][1]) {
        var fail = true;
        if (i > 0 && PIDSI) switch (PIDSI[Props[i - 1][0]].t) {
          case 0x02
          /*VT_I2*/
          :
            if (blob.l + 2 === Props[i][1]) {
              blob.l += 2;
              fail = false;
            }

            break;

          case 0x50
          /*VT_STRING*/
          :
            if (blob.l <= Props[i][1]) {
              blob.l = Props[i][1];
              fail = false;
            }

            break;

          case 0x100C
          /*VT_VECTOR|VT_VARIANT*/
          :
            if (blob.l <= Props[i][1]) {
              blob.l = Props[i][1];
              fail = false;
            }

            break;
        }

        if ((!PIDSI || i == 0) && blob.l <= Props[i][1]) {
          fail = false;
          blob.l = Props[i][1];
        }

        if (fail) throw new Error("Read Error: Expected address " + Props[i][1] + ' at ' + blob.l + ' :' + i);
      }

      if (PIDSI) {
        var piddsi = PIDSI[Props[i][0]];
        PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {
          raw: true
        });
        if (piddsi.p === 'version') PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + ("0000" + String(PropH[piddsi.n] & 0xFFFF)).slice(-4);
        if (piddsi.n == "CodePage") switch (PropH[piddsi.n]) {
          case 0:
            PropH[piddsi.n] = 1252;

          /* falls through */

          case 874:
          case 932:
          case 936:
          case 949:
          case 950:
          case 1250:
          case 1251:
          case 1253:
          case 1254:
          case 1255:
          case 1256:
          case 1257:
          case 1258:
          case 10000:
          case 1200:
          case 1201:
          case 1252:
          case 65000:
          case -536:
          case 65001:
          case -535:
            set_cp(CodePage = PropH[piddsi.n] >>> 0 & 0xFFFF);
            break;

          default:
            throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
        }
      } else {
        if (Props[i][0] === 0x1) {
          CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);
          set_cp(CodePage);

          if (Dictionary !== -1) {
            var oldpos = blob.l;
            blob.l = Props[Dictionary][1];
            DictObj = parse_dictionary(blob, CodePage);
            blob.l = oldpos;
          }
        } else if (Props[i][0] === 0) {
          if (CodePage === 0) {
            Dictionary = i;
            blob.l = Props[i + 1][1];
            continue;
          }

          DictObj = parse_dictionary(blob, CodePage);
        } else {
          var name = DictObj[Props[i][0]];
          var val;
          /* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */

          switch (blob[blob.l]) {
            case 0x41
            /*VT_BLOB*/
            :
              blob.l += 4;
              val = parse_BLOB(blob);
              break;

            case 0x1E
            /*VT_LPSTR*/
            :
              blob.l += 4;
              val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
              break;

            case 0x1F
            /*VT_LPWSTR*/
            :
              blob.l += 4;
              val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
              break;

            case 0x03
            /*VT_I4*/
            :
              blob.l += 4;
              val = blob.read_shift(4, 'i');
              break;

            case 0x13
            /*VT_UI4*/
            :
              blob.l += 4;
              val = blob.read_shift(4);
              break;

            case 0x05
            /*VT_R8*/
            :
              blob.l += 4;
              val = blob.read_shift(8, 'f');
              break;

            case 0x0B
            /*VT_BOOL*/
            :
              blob.l += 4;
              val = parsebool(blob, 4);
              break;

            case 0x40
            /*VT_FILETIME*/
            :
              blob.l += 4;
              val = parseDate(parse_FILETIME(blob));
              break;

            default:
              throw new Error("unparsed value: " + blob[blob.l]);
          }

          PropH[name] = val;
        }
      }
    }

    blob.l = start_addr + size;
    /* step ahead to skip padding */

    return PropH;
  }

  var XLSPSSkip = ["CodePage", "Thumbnail", "_PID_LINKBASE", "_PID_HLINKS", "SystemIdentifier", "FMTID"].concat(PseudoPropsPairs);

  function guess_property_type(val) {
    switch (typeof val) {
      case "boolean":
        return 0x0B;

      case "number":
        return (val | 0) == val ? 0x03 : 0x05;

      case "string":
        return 0x1F;

      case "object":
        if (val instanceof Date) return 0x40;
        break;
    }

    return -1;
  }

  function write_PropertySet(entries, RE, PIDSI) {
    var hdr = new_buf(8),
        piao = [],
        prop = [];
    var sz = 8,
        i = 0;
    var pr = new_buf(8),
        pio = new_buf(8);
    pr.write_shift(4, 0x0002);
    pr.write_shift(4, 0x04B0);
    pio.write_shift(4, 0x0001);
    prop.push(pr);
    piao.push(pio);
    sz += 8 + pr.length;

    if (!RE) {
      pio = new_buf(8);
      pio.write_shift(4, 0);
      piao.unshift(pio);
      var bufs = [new_buf(4)];
      bufs[0].write_shift(4, entries.length);

      for (i = 0; i < entries.length; ++i) {
        var value = entries[i][0];
        pr = new_buf(4 + 4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
        pr.write_shift(4, i + 2);
        pr.write_shift(4, value.length + 1);
        pr.write_shift(0, value, "dbcs");

        while (pr.l != pr.length) pr.write_shift(1, 0);

        bufs.push(pr);
      }

      pr = bconcat(bufs);
      prop.unshift(pr);
      sz += 8 + pr.length;
    }

    for (i = 0; i < entries.length; ++i) {
      if (RE && !RE[entries[i][0]]) continue;
      if (XLSPSSkip.indexOf(entries[i][0]) > -1) continue;
      if (entries[i][1] == null) continue;
      var val = entries[i][1],
          idx = 0;

      if (RE) {
        idx = +RE[entries[i][0]];
        var pinfo = PIDSI[idx];

        if (pinfo.p == "version" && typeof val == "string") {
          var arr = val.split(".");
          val = (+arr[0] << 16) + (+arr[1] || 0);
        }

        pr = write_TypedPropertyValue(pinfo.t, val);
      } else {
        var T = guess_property_type(val);

        if (T == -1) {
          T = 0x1F;
          val = String(val);
        }

        pr = write_TypedPropertyValue(T, val);
      }

      prop.push(pr);
      pio = new_buf(8);
      pio.write_shift(4, !RE ? 2 + i : idx);
      piao.push(pio);
      sz += 8 + pr.length;
    }

    var w = 8 * (prop.length + 1);

    for (i = 0; i < prop.length; ++i) {
      piao[i].write_shift(4, w);
      w += prop[i].length;
    }

    hdr.write_shift(4, sz);
    hdr.write_shift(4, prop.length);
    return bconcat([hdr].concat(piao).concat(prop));
  }
  /* [MS-OLEPS] 2.21 PropertySetStream */


  function parse_PropertySetStream(file, PIDSI, clsid) {
    var blob = file.content;
    if (!blob) return {};
    prep_blob(blob, 0);
    var NumSets,
        FMTID0,
        FMTID1,
        Offset0,
        Offset1 = 0;
    blob.chk('feff', 'Byte Order: ');
    /*var vers = */

    blob.read_shift(2); // TODO: check version

    var SystemIdentifier = blob.read_shift(4);
    var CLSID = blob.read_shift(16);
    if (CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid) throw new Error("Bad PropertySet CLSID " + CLSID);
    NumSets = blob.read_shift(4);
    if (NumSets !== 1 && NumSets !== 2) throw new Error("Unrecognized #Sets: " + NumSets);
    FMTID0 = blob.read_shift(16);
    Offset0 = blob.read_shift(4);
    if (NumSets === 1 && Offset0 !== blob.l) throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);else if (NumSets === 2) {
      FMTID1 = blob.read_shift(16);
      Offset1 = blob.read_shift(4);
    }
    var PSet0 = parse_PropertySet(blob, PIDSI);
    var rval = {
      SystemIdentifier: SystemIdentifier
    };

    for (var y in PSet0) rval[y] = PSet0[y]; //rval.blob = blob;


    rval.FMTID = FMTID0; //rval.PSet0 = PSet0;

    if (NumSets === 1) return rval;
    if (Offset1 - blob.l == 2) blob.l += 2;
    if (blob.l !== Offset1) throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
    var PSet1;

    try {
      PSet1 = parse_PropertySet(blob, null);
    } catch (e) {
      /* empty */
    }

    for (y in PSet1) rval[y] = PSet1[y];

    rval.FMTID = [FMTID0, FMTID1]; // TODO: verify FMTID0/1

    return rval;
  }

  function write_PropertySetStream(entries, clsid, RE, PIDSI, entries2, clsid2) {
    var hdr = new_buf(entries2 ? 68 : 48);
    var bufs = [hdr];
    hdr.write_shift(2, 0xFFFE);
    hdr.write_shift(2, 0x0000);
    /* TODO: type 1 props */

    hdr.write_shift(4, 0x32363237);
    hdr.write_shift(16, CFB.utils.consts.HEADER_CLSID, "hex");
    hdr.write_shift(4, entries2 ? 2 : 1);
    hdr.write_shift(16, clsid, "hex");
    hdr.write_shift(4, entries2 ? 68 : 48);
    var ps0 = write_PropertySet(entries, RE, PIDSI);
    bufs.push(ps0);

    if (entries2) {
      var ps1 = write_PropertySet(entries2, null, null);
      hdr.write_shift(16, clsid2, "hex");
      hdr.write_shift(4, 68 + ps0.length);
      bufs.push(ps1);
    }

    return bconcat(bufs);
  }

  function parsenoop2(blob, length) {
    blob.read_shift(length);
    return null;
  }

  function writezeroes(n, o) {
    if (!o) o = new_buf(n);

    for (var j = 0; j < n; ++j) o.write_shift(1, 0);

    return o;
  }

  function parslurp(blob, length, cb) {
    var arr = [],
        target = blob.l + length;

    while (blob.l < target) arr.push(cb(blob, target - blob.l));

    if (target !== blob.l) throw new Error("Slurp error");
    return arr;
  }

  function parsebool(blob, length) {
    return blob.read_shift(length) === 0x1;
  }

  function writebool(v, o) {
    if (!o) o = new_buf(2);
    o.write_shift(2, +!!v);
    return o;
  }

  function parseuint16(blob) {
    return blob.read_shift(2, 'u');
  }

  function writeuint16(v, o) {
    if (!o) o = new_buf(2);
    o.write_shift(2, v);
    return o;
  }

  function parseuint16a(blob, length) {
    return parslurp(blob, length, parseuint16);
  }
  /* --- 2.5 Structures --- */

  /* [MS-XLS] 2.5.10 Bes (boolean or error) */


  function parse_Bes(blob) {
    var v = blob.read_shift(1),
        t = blob.read_shift(1);
    return t === 0x01 ? v : v === 0x01;
  }

  function write_Bes(v, t, o) {
    if (!o) o = new_buf(2);
    o.write_shift(1, +v);
    o.write_shift(1, t == 'e' ? 1 : 0);
    return o;
  }
  /* [MS-XLS] 2.5.240 ShortXLUnicodeString */


  function parse_ShortXLUnicodeString(blob, length, opts) {
    var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
    var encoding = 'sbcs-cont';
    var cp = current_codepage;
    if (opts && opts.biff >= 8) current_codepage = 1200;

    if (!opts || opts.biff == 8) {
      var fHighByte = blob.read_shift(1);

      if (fHighByte) {
        encoding = 'dbcs-cont';
      }
    } else if (opts.biff == 12) {
      encoding = 'wstr';
    }

    if (opts.biff >= 2 && opts.biff <= 5) encoding = 'cpstr';
    var o = cch ? blob.read_shift(cch, encoding) : "";
    current_codepage = cp;
    return o;
  }
  /* 2.5.293 XLUnicodeRichExtendedString */


  function parse_XLUnicodeRichExtendedString(blob) {
    var cp = current_codepage;
    current_codepage = 1200;
    var cch = blob.read_shift(2),
        flags = blob.read_shift(1);
    var
    /*fHighByte = flags & 0x1,*/
    fExtSt = flags & 0x4,
        fRichSt = flags & 0x8;
    var width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs

    var cRun = 0,
        cbExtRst;
    var z = {};
    if (fRichSt) cRun = blob.read_shift(2);
    if (fExtSt) cbExtRst = blob.read_shift(4);
    var encoding = width == 2 ? 'dbcs-cont' : 'sbcs-cont';
    var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
    if (fRichSt) blob.l += 4 * cRun; //TODO: parse this

    if (fExtSt) blob.l += cbExtRst; //TODO: parse this

    z.t = msg;

    if (!fRichSt) {
      z.raw = "<t>" + z.t + "</t>";
      z.r = z.t;
    }

    current_codepage = cp;
    return z;
  }

  function write_XLUnicodeRichExtendedString(xlstr) {
    var str = xlstr.t || "",
        nfmts = 1;
    var hdr = new_buf(3 + (nfmts > 1 ? 2 : 0));
    hdr.write_shift(2, str.length);
    hdr.write_shift(1, (nfmts > 1 ? 0x08 : 0x00) | 0x01);
    if (nfmts > 1) hdr.write_shift(2, nfmts);
    var otext = new_buf(2 * str.length);
    otext.write_shift(2 * str.length, str, 'utf16le');
    var out = [hdr, otext];
    return bconcat(out);
  }
  /* 2.5.296 XLUnicodeStringNoCch */


  function parse_XLUnicodeStringNoCch(blob, cch, opts) {
    var retval;

    if (opts) {
      if (opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, 'cpstr');
      if (opts.biff >= 12) return blob.read_shift(cch, 'dbcs-cont');
    }

    var fHighByte = blob.read_shift(1);

    if (fHighByte === 0) {
      retval = blob.read_shift(cch, 'sbcs-cont');
    } else {
      retval = blob.read_shift(cch, 'dbcs-cont');
    }

    return retval;
  }
  /* 2.5.294 XLUnicodeString */


  function parse_XLUnicodeString(blob, length, opts) {
    var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);

    if (cch === 0) {
      blob.l++;
      return "";
    }

    return parse_XLUnicodeStringNoCch(blob, cch, opts);
  }
  /* BIFF5 override */


  function parse_XLUnicodeString2(blob, length, opts) {
    if (opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);
    var cch = blob.read_shift(1);

    if (cch === 0) {
      blob.l++;
      return "";
    }

    return blob.read_shift(cch, opts.biff <= 4 || !blob.lens ? 'cpstr' : 'sbcs-cont');
  }
  /* TODO: BIFF5 and lower, codepage awareness */


  function write_XLUnicodeString(str, opts, o) {
    if (!o) o = new_buf(3 + 2 * str.length);
    o.write_shift(2, str.length);
    o.write_shift(1, 1);
    o.write_shift(31, str, 'utf16le');
    return o;
  }
  /* [MS-XLS] 2.5.61 ControlInfo */


  function parse_ControlInfo(blob) {
    var flags = blob.read_shift(1);
    blob.l++;
    var accel = blob.read_shift(2);
    blob.l += 2;
    return [flags, accel];
  }
  /* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */


  function parse_URLMoniker(blob) {
    var len = blob.read_shift(4),
        start = blob.l;
    var extra = false;

    if (len > 24) {
      /* look ahead */
      blob.l += len - 24;
      if (blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763") extra = true;
      blob.l = start;
    }

    var url = blob.read_shift((extra ? len - 24 : len) >> 1, 'utf16le').replace(chr0, "");
    if (extra) blob.l += 24;
    return url;
  }
  /* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */


  function parse_FileMoniker(blob) {
    blob.l += 2; //var cAnti = blob.read_shift(2);

    var ansiPath = blob.read_shift(0, 'lpstr-ansi');
    blob.l += 2; //var endServer = blob.read_shift(2);

    if (blob.read_shift(2) != 0xDEAD) throw new Error("Bad FileMoniker");
    var sz = blob.read_shift(4);
    if (sz === 0) return ansiPath.replace(/\\/g, "/");
    var bytes = blob.read_shift(4);
    if (blob.read_shift(2) != 3) throw new Error("Bad FileMoniker");
    var unicodePath = blob.read_shift(bytes >> 1, 'utf16le').replace(chr0, "");
    return unicodePath;
  }
  /* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */


  function parse_HyperlinkMoniker(blob, length) {
    var clsid = blob.read_shift(16);
    length -= 16;

    switch (clsid) {
      case "e0c9ea79f9bace118c8200aa004ba90b":
        return parse_URLMoniker(blob, length);

      case "0303000000000000c000000000000046":
        return parse_FileMoniker(blob, length);

      default:
        throw new Error("Unsupported Moniker " + clsid);
    }
  }
  /* [MS-OSHARED] 2.3.7.9 HyperlinkString */


  function parse_HyperlinkString(blob) {
    var len = blob.read_shift(4);
    var o = len > 0 ? blob.read_shift(len, 'utf16le').replace(chr0, "") : "";
    return o;
  }
  /* [MS-OSHARED] 2.3.7.1 Hyperlink Object */


  function parse_Hyperlink(blob, length) {
    var end = blob.l + length;
    var sVer = blob.read_shift(4);
    if (sVer !== 2) throw new Error("Unrecognized streamVersion: " + sVer);
    var flags = blob.read_shift(2);
    blob.l += 2;
    var displayName,
        targetFrameName,
        moniker,
        oleMoniker,
        Loc = "",
        guid,
        fileTime;
    if (flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);
    if (flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);
    if ((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);
    if ((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
    if (flags & 0x0008) Loc = parse_HyperlinkString(blob, end - blob.l);
    if (flags & 0x0020) guid = blob.read_shift(16);
    if (flags & 0x0040) fileTime = parse_FILETIME(blob
    /*, 8*/
    );
    blob.l = end;
    var target = targetFrameName || moniker || oleMoniker || "";
    if (target && Loc) target += "#" + Loc;
    if (!target) target = "#" + Loc;
    var out = {
      Target: target
    };
    if (guid) out.guid = guid;
    if (fileTime) out.time = fileTime;
    if (displayName) out.Tooltip = displayName;
    return out;
  }

  function write_Hyperlink(hl) {
    var out = new_buf(512),
        i = 0;
    var Target = hl.Target;
    var F = Target.indexOf("#") > -1 ? 0x1f : 0x17;

    switch (Target.charAt(0)) {
      case "#":
        F = 0x1c;
        break;

      case ".":
        F &= ~2;
        break;
    }

    out.write_shift(4, 2);
    out.write_shift(4, F);
    var data = [8, 6815827, 6619237, 4849780, 83];

    for (i = 0; i < data.length; ++i) out.write_shift(4, data[i]);

    if (F == 0x1C) {
      Target = Target.slice(1);
      out.write_shift(4, Target.length + 1);

      for (i = 0; i < Target.length; ++i) out.write_shift(2, Target.charCodeAt(i));

      out.write_shift(2, 0);
    } else if (F & 0x02) {
      data = "e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");

      for (i = 0; i < data.length; ++i) out.write_shift(1, parseInt(data[i], 16));

      out.write_shift(4, 2 * (Target.length + 1));

      for (i = 0; i < Target.length; ++i) out.write_shift(2, Target.charCodeAt(i));

      out.write_shift(2, 0);
    } else {
      data = "03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46".split(" ");

      for (i = 0; i < data.length; ++i) out.write_shift(1, parseInt(data[i], 16));

      var P = 0;

      while (Target.slice(P * 3, P * 3 + 3) == "../" || Target.slice(P * 3, P * 3 + 3) == "..\\") ++P;

      out.write_shift(2, P);
      out.write_shift(4, Target.length + 1);

      for (i = 0; i < Target.length; ++i) out.write_shift(1, Target.charCodeAt(i) & 0xFF);

      out.write_shift(1, 0);
      out.write_shift(2, 0xFFFF);
      out.write_shift(2, 0xDEAD);

      for (i = 0; i < 6; ++i) out.write_shift(4, 0);
    }

    return out.slice(0, out.l);
  }
  /* 2.5.178 LongRGBA */


  function parse_LongRGBA(blob) {
    var r = blob.read_shift(1),
        g = blob.read_shift(1),
        b = blob.read_shift(1),
        a = blob.read_shift(1);
    return [r, g, b, a];
  }
  /* 2.5.177 LongRGB */


  function parse_LongRGB(blob, length) {
    var x = parse_LongRGBA(blob, length);
    x[3] = 0;
    return x;
  }
  /* [MS-XLS] 2.5.19 */


  function parse_XLSCell(blob) {
    var rw = blob.read_shift(2); // 0-indexed

    var col = blob.read_shift(2);
    var ixfe = blob.read_shift(2);
    return {
      r: rw,
      c: col,
      ixfe: ixfe
    };
  }

  function write_XLSCell(R, C, ixfe, o) {
    if (!o) o = new_buf(6);
    o.write_shift(2, R);
    o.write_shift(2, C);
    o.write_shift(2, ixfe || 0);
    return o;
  }
  /* [MS-XLS] 2.5.134 */


  function parse_frtHeader(blob) {
    var rt = blob.read_shift(2);
    var flags = blob.read_shift(2); // TODO: parse these flags

    blob.l += 8;
    return {
      type: rt,
      flags: flags
    };
  }

  function parse_OptXLUnicodeString(blob, length, opts) {
    return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts);
  }
  /* [MS-XLS] 2.5.344 */


  function parse_XTI(blob, length, opts) {
    var w = opts.biff > 8 ? 4 : 2;
    var iSupBook = blob.read_shift(w),
        itabFirst = blob.read_shift(w, 'i'),
        itabLast = blob.read_shift(w, 'i');
    return [iSupBook, itabFirst, itabLast];
  }
  /* [MS-XLS] 2.5.218 */


  function parse_RkRec(blob) {
    var ixfe = blob.read_shift(2);
    var RK = parse_RkNumber(blob);
    return [ixfe, RK];
  }
  /* [MS-XLS] 2.5.1 */


  function parse_AddinUdf(blob, length, opts) {
    blob.l += 4;
    length -= 4;
    var l = blob.l + length;
    var udfName = parse_ShortXLUnicodeString(blob, length, opts);
    var cb = blob.read_shift(2);
    l -= blob.l;
    if (cb !== l) throw new Error("Malformed AddinUdf: padding = " + l + " != " + cb);
    blob.l += cb;
    return udfName;
  }
  /* [MS-XLS] 2.5.209 TODO: Check sizes */


  function parse_Ref8U(blob) {
    var rwFirst = blob.read_shift(2);
    var rwLast = blob.read_shift(2);
    var colFirst = blob.read_shift(2);
    var colLast = blob.read_shift(2);
    return {
      s: {
        c: colFirst,
        r: rwFirst
      },
      e: {
        c: colLast,
        r: rwLast
      }
    };
  }

  function write_Ref8U(r, o) {
    if (!o) o = new_buf(8);
    o.write_shift(2, r.s.r);
    o.write_shift(2, r.e.r);
    o.write_shift(2, r.s.c);
    o.write_shift(2, r.e.c);
    return o;
  }
  /* [MS-XLS] 2.5.211 */


  function parse_RefU(blob) {
    var rwFirst = blob.read_shift(2);
    var rwLast = blob.read_shift(2);
    var colFirst = blob.read_shift(1);
    var colLast = blob.read_shift(1);
    return {
      s: {
        c: colFirst,
        r: rwFirst
      },
      e: {
        c: colLast,
        r: rwLast
      }
    };
  }
  /* [MS-XLS] 2.5.207 */


  var parse_Ref = parse_RefU;
  /* [MS-XLS] 2.5.143 */

  function parse_FtCmo(blob) {
    blob.l += 4;
    var ot = blob.read_shift(2);
    var id = blob.read_shift(2);
    var flags = blob.read_shift(2);
    blob.l += 12;
    return [id, ot, flags];
  }
  /* [MS-XLS] 2.5.149 */


  function parse_FtNts(blob) {
    var out = {};
    blob.l += 4;
    blob.l += 16; // GUID TODO

    out.fSharedNote = blob.read_shift(2);
    blob.l += 4;
    return out;
  }
  /* [MS-XLS] 2.5.142 */


  function parse_FtCf(blob) {
    var out = {};
    blob.l += 4;
    blob.cf = blob.read_shift(2);
    return out;
  }
  /* [MS-XLS] 2.5.140 - 2.5.154 and friends */


  function parse_FtSkip(blob) {
    blob.l += 2;
    blob.l += blob.read_shift(2);
  }

  var FtTab = {
    0x00: parse_FtSkip,

    /* FtEnd */
    0x04: parse_FtSkip,

    /* FtMacro */
    0x05: parse_FtSkip,

    /* FtButton */
    0x06: parse_FtSkip,

    /* FtGmo */
    0x07: parse_FtCf,

    /* FtCf */
    0x08: parse_FtSkip,

    /* FtPioGrbit */
    0x09: parse_FtSkip,

    /* FtPictFmla */
    0x0A: parse_FtSkip,

    /* FtCbls */
    0x0B: parse_FtSkip,

    /* FtRbo */
    0x0C: parse_FtSkip,

    /* FtSbs */
    0x0D: parse_FtNts,

    /* FtNts */
    0x0E: parse_FtSkip,

    /* FtSbsFmla */
    0x0F: parse_FtSkip,

    /* FtGboData */
    0x10: parse_FtSkip,

    /* FtEdoData */
    0x11: parse_FtSkip,

    /* FtRboData */
    0x12: parse_FtSkip,

    /* FtCblsData */
    0x13: parse_FtSkip,

    /* FtLbsData */
    0x14: parse_FtSkip,

    /* FtCblsFmla */
    0x15: parse_FtCmo
  };

  function parse_FtArray(blob, length) {
    var tgt = blob.l + length;
    var fts = [];

    while (blob.l < tgt) {
      var ft = blob.read_shift(2);
      blob.l -= 2;

      try {
        fts.push(FtTab[ft](blob, tgt - blob.l));
      } catch (e) {
        blob.l = tgt;
        return fts;
      }
    }

    if (blob.l != tgt) blob.l = tgt; //throw new Error("bad Object Ft-sequence");

    return fts;
  }
  /* --- 2.4 Records --- */

  /* [MS-XLS] 2.4.21 */


  function parse_BOF(blob, length) {
    var o = {
      BIFFVer: 0,
      dt: 0
    };
    o.BIFFVer = blob.read_shift(2);
    length -= 2;

    if (length >= 2) {
      o.dt = blob.read_shift(2);
      blob.l -= 2;
    }

    switch (o.BIFFVer) {
      case 0x0600:
      /* BIFF8 */

      case 0x0500:
      /* BIFF5 */

      case 0x0400:
      /* BIFF4 */

      case 0x0300:
      /* BIFF3 */

      case 0x0200:
      /* BIFF2 */

      case 0x0002:
      case 0x0007:
        /* BIFF2 */
        break;

      default:
        if (length > 6) throw new Error("Unexpected BIFF Ver " + o.BIFFVer);
    }

    blob.read_shift(length);
    return o;
  }

  function write_BOF(wb, t, o) {
    var h = 0x0600,
        w = 16;

    switch (o.bookType) {
      case 'biff8':
        break;

      case 'biff5':
        h = 0x0500;
        w = 8;
        break;

      case 'biff4':
        h = 0x0004;
        w = 6;
        break;

      case 'biff3':
        h = 0x0003;
        w = 6;
        break;

      case 'biff2':
        h = 0x0002;
        w = 4;
        break;

      case 'xla':
        break;

      default:
        throw new Error("unsupported BIFF version");
    }

    var out = new_buf(w);
    out.write_shift(2, h);
    out.write_shift(2, t);
    if (w > 4) out.write_shift(2, 0x7262);
    if (w > 6) out.write_shift(2, 0x07CD);

    if (w > 8) {
      out.write_shift(2, 0xC009);
      out.write_shift(2, 0x0001);
      out.write_shift(2, 0x0706);
      out.write_shift(2, 0x0000);
    }

    return out;
  }
  /* [MS-XLS] 2.4.146 */


  function parse_InterfaceHdr(blob, length) {
    if (length === 0) return 0x04b0;

    if (blob.read_shift(2) !== 0x04b0) {
      /* empty */
    }

    return 0x04b0;
  }
  /* [MS-XLS] 2.4.349 */


  function parse_WriteAccess(blob, length, opts) {
    if (opts.enc) {
      blob.l += length;
      return "";
    }

    var l = blob.l; // TODO: make sure XLUnicodeString doesnt overrun

    var UserName = parse_XLUnicodeString2(blob, 0, opts);
    blob.read_shift(length + l - blob.l);
    return UserName;
  }

  function write_WriteAccess(s, opts) {
    var b8 = !opts || opts.biff == 8;
    var o = new_buf(b8 ? 112 : 54);
    o.write_shift(opts.biff == 8 ? 2 : 1, 7);
    if (b8) o.write_shift(1, 0);
    o.write_shift(4, 0x33336853);
    o.write_shift(4, 0x00534A74 | (b8 ? 0 : 0x20000000));

    while (o.l < o.length) o.write_shift(1, b8 ? 0 : 32);

    return o;
  }
  /* [MS-XLS] 2.4.351 */


  function parse_WsBool(blob, length, opts) {
    var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);
    return {
      fDialog: flags & 0x10
    };
  }
  /* [MS-XLS] 2.4.28 */


  function parse_BoundSheet8(blob, length, opts) {
    var pos = blob.read_shift(4);
    var hidden = blob.read_shift(1) & 0x03;
    var dt = blob.read_shift(1);

    switch (dt) {
      case 0:
        dt = 'Worksheet';
        break;

      case 1:
        dt = 'Macrosheet';
        break;

      case 2:
        dt = 'Chartsheet';
        break;

      case 6:
        dt = 'VBAModule';
        break;
    }

    var name = parse_ShortXLUnicodeString(blob, 0, opts);
    if (name.length === 0) name = "Sheet1";
    return {
      pos: pos,
      hs: hidden,
      dt: dt,
      name: name
    };
  }

  function write_BoundSheet8(data, opts) {
    var w = !opts || opts.biff >= 8 ? 2 : 1;
    var o = new_buf(8 + w * data.name.length);
    o.write_shift(4, data.pos);
    o.write_shift(1, data.hs || 0);
    o.write_shift(1, data.dt);
    o.write_shift(1, data.name.length);
    if (opts.biff >= 8) o.write_shift(1, 1);
    o.write_shift(w * data.name.length, data.name, opts.biff < 8 ? 'sbcs' : 'utf16le');
    var out = o.slice(0, o.l);
    out.l = o.l;
    return out;
  }
  /* [MS-XLS] 2.4.265 TODO */


  function parse_SST(blob, length) {
    var end = blob.l + length;
    var cnt = blob.read_shift(4);
    var ucnt = blob.read_shift(4);
    var strs = [];

    for (var i = 0; i != ucnt && blob.l < end; ++i) {
      strs.push(parse_XLUnicodeRichExtendedString(blob));
    }

    strs.Count = cnt;
    strs.Unique = ucnt;
    return strs;
  }

  function write_SST(sst, opts) {
    var header = new_buf(8);
    header.write_shift(4, sst.Count);
    header.write_shift(4, sst.Unique);
    var strs = [];

    for (var j = 0; j < sst.length; ++j) strs[j] = write_XLUnicodeRichExtendedString(sst[j], opts);

    var o = bconcat([header].concat(strs));
    o.parts = [header.length].concat(strs.map(function (str) {
      return str.length;
    }));
    return o;
  }
  /* [MS-XLS] 2.4.107 */


  function parse_ExtSST(blob, length) {
    var extsst = {};
    extsst.dsst = blob.read_shift(2);
    blob.l += length - 2;
    return extsst;
  }
  /* [MS-XLS] 2.4.221 TODO: check BIFF2-4 */


  function parse_Row(blob) {
    var z = {};
    z.r = blob.read_shift(2);
    z.c = blob.read_shift(2);
    z.cnt = blob.read_shift(2) - z.c;
    var miyRw = blob.read_shift(2);
    blob.l += 4; // reserved(2), unused(2)

    var flags = blob.read_shift(1); // various flags

    blob.l += 3; // reserved(8), ixfe(12), flags(4)

    if (flags & 0x07) z.level = flags & 0x07; // collapsed: flags & 0x10

    if (flags & 0x20) z.hidden = true;
    if (flags & 0x40) z.hpt = miyRw / 20;
    return z;
  }
  /* [MS-XLS] 2.4.125 */


  function parse_ForceFullCalculation(blob) {
    var header = parse_frtHeader(blob);
    if (header.type != 0x08A3) throw new Error("Invalid Future Record " + header.type);
    var fullcalc = blob.read_shift(4);
    return fullcalc !== 0x0;
  }
  /* [MS-XLS] 2.4.215 rt */


  function parse_RecalcId(blob) {
    blob.read_shift(2);
    return blob.read_shift(4);
  }
  /* [MS-XLS] 2.4.87 */


  function parse_DefaultRowHeight(blob, length, opts) {
    var f = 0;

    if (!(opts && opts.biff == 2)) {
      f = blob.read_shift(2);
    }

    var miyRw = blob.read_shift(2);

    if (opts && opts.biff == 2) {
      f = 1 - (miyRw >> 15);
      miyRw &= 0x7fff;
    }

    var fl = {
      Unsynced: f & 1,
      DyZero: (f & 2) >> 1,
      ExAsc: (f & 4) >> 2,
      ExDsc: (f & 8) >> 3
    };
    return [fl, miyRw];
  }
  /* [MS-XLS] 2.4.345 TODO */


  function parse_Window1(blob) {
    var xWn = blob.read_shift(2),
        yWn = blob.read_shift(2),
        dxWn = blob.read_shift(2),
        dyWn = blob.read_shift(2);
    var flags = blob.read_shift(2),
        iTabCur = blob.read_shift(2),
        iTabFirst = blob.read_shift(2);
    var ctabSel = blob.read_shift(2),
        wTabRatio = blob.read_shift(2);
    return {
      Pos: [xWn, yWn],
      Dim: [dxWn, dyWn],
      Flags: flags,
      CurTab: iTabCur,
      FirstTab: iTabFirst,
      Selected: ctabSel,
      TabRatio: wTabRatio
    };
  }

  function write_Window1() {
    var o = new_buf(18);
    o.write_shift(2, 0);
    o.write_shift(2, 0);
    o.write_shift(2, 0x7260);
    o.write_shift(2, 0x44c0);
    o.write_shift(2, 0x38);
    o.write_shift(2, 0);
    o.write_shift(2, 0);
    o.write_shift(2, 1);
    o.write_shift(2, 0x01f4);
    return o;
  }
  /* [MS-XLS] 2.4.346 TODO */


  function parse_Window2(blob, length, opts) {
    if (opts && opts.biff >= 2 && opts.biff < 5) return {};
    var f = blob.read_shift(2);
    return {
      RTL: f & 0x40
    };
  }

  function write_Window2(view) {
    var o = new_buf(18),
        f = 0x6b6;
    if (view && view.RTL) f |= 0x40;
    o.write_shift(2, f);
    o.write_shift(4, 0);
    o.write_shift(4, 64);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    return o;
  }
  /* [MS-XLS] 2.4.189 TODO */


  function parse_Pane()
  /*blob, length, opts*/
  {}
  /* [MS-XLS] 2.4.122 TODO */


  function parse_Font(blob, length, opts) {
    var o = {
      dyHeight: blob.read_shift(2),
      fl: blob.read_shift(2)
    };

    switch (opts && opts.biff || 8) {
      case 2:
        break;

      case 3:
      case 4:
        blob.l += 2;
        break;

      default:
        blob.l += 10;
        break;
    }

    o.name = parse_ShortXLUnicodeString(blob, 0, opts);
    return o;
  }

  function write_Font(data, opts) {
    var name = data.name || "Arial";
    var b5 = opts && opts.biff == 5,
        w = b5 ? 15 + name.length : 16 + 2 * name.length;
    var o = new_buf(w);
    o.write_shift(2, (data.sz || 12) * 20);
    o.write_shift(4, 0);
    o.write_shift(2, 400);
    o.write_shift(4, 0);
    o.write_shift(2, 0);
    o.write_shift(1, name.length);
    if (!b5) o.write_shift(1, 1);
    o.write_shift((b5 ? 1 : 2) * name.length, name, b5 ? "sbcs" : "utf16le");
    return o;
  }
  /* [MS-XLS] 2.4.149 */


  function parse_LabelSst(blob) {
    var cell = parse_XLSCell(blob);
    cell.isst = blob.read_shift(4);
    return cell;
  }

  function write_LabelSst(R, C, v, os) {
    var o = new_buf(10);
    write_XLSCell(R, C, os, o);
    o.write_shift(4, v);
    return o;
  }
  /* [MS-XLS] 2.4.148 */


  function parse_Label(blob, length, opts) {
    var target = blob.l + length;
    var cell = parse_XLSCell(blob, 6);
    if (opts.biff == 2) blob.l++;
    var str = parse_XLUnicodeString(blob, target - blob.l, opts);
    cell.val = str;
    return cell;
  }

  function write_Label(R, C, v, os, opts) {
    var b8 = !opts || opts.biff == 8;
    var o = new_buf(6 + 2 + +b8 + (1 + b8) * v.length);
    write_XLSCell(R, C, os, o);
    o.write_shift(2, v.length);
    if (b8) o.write_shift(1, 1);
    o.write_shift((1 + b8) * v.length, v, b8 ? 'utf16le' : 'sbcs');
    return o;
  }
  /* [MS-XLS] 2.4.126 Number Formats */


  function parse_Format(blob, length, opts) {
    var numFmtId = blob.read_shift(2);
    var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
    return [numFmtId, fmtstr];
  }

  function write_Format(i, f, opts, o) {
    var b5 = opts && opts.biff == 5;
    if (!o) o = new_buf(b5 ? 3 + f.length : 5 + 2 * f.length);
    o.write_shift(2, i);
    o.write_shift(b5 ? 1 : 2, f.length);
    if (!b5) o.write_shift(1, 1);
    o.write_shift((b5 ? 1 : 2) * f.length, f, b5 ? 'sbcs' : 'utf16le');
    var out = o.length > o.l ? o.slice(0, o.l) : o;
    if (out.l == null) out.l = out.length;
    return out;
  }

  var parse_BIFF2Format = parse_XLUnicodeString2;
  /* [MS-XLS] 2.4.90 */

  function parse_Dimensions(blob, length, opts) {
    var end = blob.l + length;
    var w = opts.biff == 8 || !opts.biff ? 4 : 2;
    var r = blob.read_shift(w),
        R = blob.read_shift(w);
    var c = blob.read_shift(2),
        C = blob.read_shift(2);
    blob.l = end;
    return {
      s: {
        r: r,
        c: c
      },
      e: {
        r: R,
        c: C
      }
    };
  }

  function write_Dimensions(range, opts) {
    var w = opts.biff == 8 || !opts.biff ? 4 : 2;
    var o = new_buf(2 * w + 6);
    o.write_shift(w, range.s.r);
    o.write_shift(w, range.e.r + 1);
    o.write_shift(2, range.s.c);
    o.write_shift(2, range.e.c + 1);
    o.write_shift(2, 0);
    return o;
  }
  /* [MS-XLS] 2.4.220 */


  function parse_RK(blob) {
    var rw = blob.read_shift(2),
        col = blob.read_shift(2);
    var rkrec = parse_RkRec(blob);
    return {
      r: rw,
      c: col,
      ixfe: rkrec[0],
      rknum: rkrec[1]
    };
  }
  /* [MS-XLS] 2.4.175 */


  function parse_MulRk(blob, length) {
    var target = blob.l + length - 2;
    var rw = blob.read_shift(2),
        col = blob.read_shift(2);
    var rkrecs = [];

    while (blob.l < target) rkrecs.push(parse_RkRec(blob));

    if (blob.l !== target) throw new Error("MulRK read error");
    var lastcol = blob.read_shift(2);
    if (rkrecs.length != lastcol - col + 1) throw new Error("MulRK length mismatch");
    return {
      r: rw,
      c: col,
      C: lastcol,
      rkrec: rkrecs
    };
  }
  /* [MS-XLS] 2.4.174 */


  function parse_MulBlank(blob, length) {
    var target = blob.l + length - 2;
    var rw = blob.read_shift(2),
        col = blob.read_shift(2);
    var ixfes = [];

    while (blob.l < target) ixfes.push(blob.read_shift(2));

    if (blob.l !== target) throw new Error("MulBlank read error");
    var lastcol = blob.read_shift(2);
    if (ixfes.length != lastcol - col + 1) throw new Error("MulBlank length mismatch");
    return {
      r: rw,
      c: col,
      C: lastcol,
      ixfe: ixfes
    };
  }
  /* [MS-XLS] 2.5.20 2.5.249 TODO: interpret values here */


  function parse_CellStyleXF(blob, length, style, opts) {
    var o = {};
    var a = blob.read_shift(4),
        b = blob.read_shift(4);
    var c = blob.read_shift(4),
        d = blob.read_shift(2);
    o.patternType = XLSFillPattern[c >> 26];
    if (!opts.cellStyles) return o;
    o.alc = a & 0x07;
    o.fWrap = a >> 3 & 0x01;
    o.alcV = a >> 4 & 0x07;
    o.fJustLast = a >> 7 & 0x01;
    o.trot = a >> 8 & 0xFF;
    o.cIndent = a >> 16 & 0x0F;
    o.fShrinkToFit = a >> 20 & 0x01;
    o.iReadOrder = a >> 22 & 0x02;
    o.fAtrNum = a >> 26 & 0x01;
    o.fAtrFnt = a >> 27 & 0x01;
    o.fAtrAlc = a >> 28 & 0x01;
    o.fAtrBdr = a >> 29 & 0x01;
    o.fAtrPat = a >> 30 & 0x01;
    o.fAtrProt = a >> 31 & 0x01;
    o.dgLeft = b & 0x0F;
    o.dgRight = b >> 4 & 0x0F;
    o.dgTop = b >> 8 & 0x0F;
    o.dgBottom = b >> 12 & 0x0F;
    o.icvLeft = b >> 16 & 0x7F;
    o.icvRight = b >> 23 & 0x7F;
    o.grbitDiag = b >> 30 & 0x03;
    o.icvTop = c & 0x7F;
    o.icvBottom = c >> 7 & 0x7F;
    o.icvDiag = c >> 14 & 0x7F;
    o.dgDiag = c >> 21 & 0x0F;
    o.icvFore = d & 0x7F;
    o.icvBack = d >> 7 & 0x7F;
    o.fsxButton = d >> 14 & 0x01;
    return o;
  } //function parse_CellXF(blob, length, opts) {return parse_CellStyleXF(blob,length,0, opts);}
  //function parse_StyleXF(blob, length, opts) {return parse_CellStyleXF(blob,length,1, opts);}

  /* [MS-XLS] 2.4.353 TODO: actually do this right */


  function parse_XF(blob, length, opts) {
    var o = {};
    o.ifnt = blob.read_shift(2);
    o.numFmtId = blob.read_shift(2);
    o.flags = blob.read_shift(2);
    o.fStyle = o.flags >> 2 & 0x01;
    length -= 6;
    o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);
    return o;
  }

  function write_XF(data, ixfeP, opts, o) {
    var b5 = opts && opts.biff == 5;
    if (!o) o = new_buf(b5 ? 16 : 20);
    o.write_shift(2, 0);

    if (data.style) {
      o.write_shift(2, data.numFmtId || 0);
      o.write_shift(2, 0xFFF4);
    } else {
      o.write_shift(2, data.numFmtId || 0);
      o.write_shift(2, ixfeP << 4);
    }

    o.write_shift(4, 0);
    o.write_shift(4, 0);
    if (!b5) o.write_shift(4, 0);
    o.write_shift(2, 0);
    return o;
  }
  /* [MS-XLS] 2.4.134 */


  function parse_Guts(blob) {
    blob.l += 4;
    var out = [blob.read_shift(2), blob.read_shift(2)];
    if (out[0] !== 0) out[0]--;
    if (out[1] !== 0) out[1]--;
    if (out[0] > 7 || out[1] > 7) throw new Error("Bad Gutters: " + out.join("|"));
    return out;
  }

  function write_Guts(guts) {
    var o = new_buf(8);
    o.write_shift(4, 0);
    o.write_shift(2, guts[0] ? guts[0] + 1 : 0);
    o.write_shift(2, guts[1] ? guts[1] + 1 : 0);
    return o;
  }
  /* [MS-XLS] 2.4.24 */


  function parse_BoolErr(blob, length, opts) {
    var cell = parse_XLSCell(blob, 6);
    if (opts.biff == 2) ++blob.l;
    var val = parse_Bes(blob, 2);
    cell.val = val;
    cell.t = val === true || val === false ? 'b' : 'e';
    return cell;
  }

  function write_BoolErr(R, C, v, os, opts, t) {
    var o = new_buf(8);
    write_XLSCell(R, C, os, o);
    write_Bes(v, t, o);
    return o;
  }
  /* [MS-XLS] 2.4.180 Number */


  function parse_Number(blob) {
    var cell = parse_XLSCell(blob, 6);
    var xnum = parse_Xnum(blob, 8);
    cell.val = xnum;
    return cell;
  }

  function write_Number(R, C, v, os) {
    var o = new_buf(14);
    write_XLSCell(R, C, os, o);
    write_Xnum(v, o);
    return o;
  }

  var parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136

  /* [MS-XLS] 2.4.271 */

  function parse_SupBook(blob, length, opts) {
    var end = blob.l + length;
    var ctab = blob.read_shift(2);
    var cch = blob.read_shift(2);
    opts.sbcch = cch;
    if (cch == 0x0401 || cch == 0x3A01) return [cch, ctab];
    if (cch < 0x01 || cch > 0xff) throw new Error("Unexpected SupBook type: " + cch);
    var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
    /* TODO: 2.5.277 Virtual Path */

    var rgst = [];

    while (end > blob.l) rgst.push(parse_XLUnicodeString(blob));

    return [cch, ctab, virtPath, rgst];
  }
  /* [MS-XLS] 2.4.105 TODO */


  function parse_ExternName(blob, length, opts) {
    var flags = blob.read_shift(2);
    var body;
    var o = {
      fBuiltIn: flags & 0x01,
      fWantAdvise: flags >>> 1 & 0x01,
      fWantPict: flags >>> 2 & 0x01,
      fOle: flags >>> 3 & 0x01,
      fOleLink: flags >>> 4 & 0x01,
      cf: flags >>> 5 & 0x3FF,
      fIcon: flags >>> 15 & 0x01
    };
    if (opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length - 2, opts); //else throw new Error("unsupported SupBook cch: " + opts.sbcch);

    o.body = body || blob.read_shift(length - 2);
    if (typeof body === "string") o.Name = body;
    return o;
  }
  /* [MS-XLS] 2.4.150 TODO */


  var XLSLblBuiltIn = ["_xlnm.Consolidate_Area", "_xlnm.Auto_Open", "_xlnm.Auto_Close", "_xlnm.Extract", "_xlnm.Database", "_xlnm.Criteria", "_xlnm.Print_Area", "_xlnm.Print_Titles", "_xlnm.Recorder", "_xlnm.Data_Form", "_xlnm.Auto_Activate", "_xlnm.Auto_Deactivate", "_xlnm.Sheet_Title", "_xlnm._FilterDatabase"];

  function parse_Lbl(blob, length, opts) {
    var target = blob.l + length;
    var flags = blob.read_shift(2);
    var chKey = blob.read_shift(1);
    var cch = blob.read_shift(1);
    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    var itab = 0;

    if (!opts || opts.biff >= 5) {
      if (opts.biff != 5) blob.l += 2;
      itab = blob.read_shift(2);
      if (opts.biff == 5) blob.l += 2;
      blob.l += 4;
    }

    var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
    if (flags & 0x20) name = XLSLblBuiltIn[name.charCodeAt(0)];
    var npflen = target - blob.l;
    if (opts && opts.biff == 2) --npflen;
    var rgce = target == blob.l || cce === 0 || !(npflen > 0) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
    return {
      chKey: chKey,
      Name: name,
      itab: itab,
      rgce: rgce
    };
  }
  /* [MS-XLS] 2.4.106 TODO: verify filename encoding */


  function parse_ExternSheet(blob, length, opts) {
    if (opts.biff < 8) return parse_BIFF5ExternSheet(blob, length, opts);
    var o = [],
        target = blob.l + length,
        len = blob.read_shift(opts.biff > 8 ? 4 : 2);

    while (len-- !== 0) o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts)); // [iSupBook, itabFirst, itabLast];


    if (blob.l != target) throw new Error("Bad ExternSheet: " + blob.l + " != " + target);
    return o;
  }

  function parse_BIFF5ExternSheet(blob, length, opts) {
    if (blob[blob.l + 1] == 0x03) blob[blob.l]++;
    var o = parse_ShortXLUnicodeString(blob, length, opts);
    return o.charCodeAt(0) == 0x03 ? o.slice(1) : o;
  }
  /* [MS-XLS] 2.4.176 TODO: check older biff */


  function parse_NameCmt(blob, length, opts) {
    if (opts.biff < 8) {
      blob.l += length;
      return;
    }

    var cchName = blob.read_shift(2);
    var cchComment = blob.read_shift(2);
    var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
    var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
    return [name, comment];
  }
  /* [MS-XLS] 2.4.260 */


  function parse_ShrFmla(blob, length, opts) {
    var ref = parse_RefU(blob, 6);
    blob.l++;
    var cUse = blob.read_shift(1);
    length -= 8;
    return [parse_SharedParsedFormula(blob, length, opts), cUse, ref];
  }
  /* [MS-XLS] 2.4.4 TODO */


  function parse_Array(blob, length, opts) {
    var ref = parse_Ref(blob, 6);
    /* TODO: fAlwaysCalc */

    switch (opts.biff) {
      case 2:
        blob.l++;
        length -= 7;
        break;

      case 3:
      case 4:
        blob.l += 2;
        length -= 8;
        break;

      default:
        blob.l += 6;
        length -= 12;
    }

    return [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];
  }
  /* [MS-XLS] 2.4.173 */


  function parse_MTRSettings(blob) {
    var fMTREnabled = blob.read_shift(4) !== 0x00;
    var fUserSetThreadCount = blob.read_shift(4) !== 0x00;
    var cUserThreadCount = blob.read_shift(4);
    return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
  }
  /* [MS-XLS] 2.5.186 TODO: BIFF5 */


  function parse_NoteSh(blob, length, opts) {
    if (opts.biff < 8) return;
    var row = blob.read_shift(2),
        col = blob.read_shift(2);
    var flags = blob.read_shift(2),
        idObj = blob.read_shift(2);
    var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
    if (opts.biff < 8) blob.read_shift(1);
    return [{
      r: row,
      c: col
    }, stAuthor, idObj, flags];
  }
  /* [MS-XLS] 2.4.179 */


  function parse_Note(blob, length, opts) {
    /* TODO: Support revisions */
    return parse_NoteSh(blob, length, opts);
  }
  /* [MS-XLS] 2.4.168 */


  function parse_MergeCells(blob, length) {
    var merges = [];
    var cmcs = blob.read_shift(2);

    while (cmcs--) merges.push(parse_Ref8U(blob, length));

    return merges;
  }

  function write_MergeCells(merges) {
    var o = new_buf(2 + merges.length * 8);
    o.write_shift(2, merges.length);

    for (var i = 0; i < merges.length; ++i) write_Ref8U(merges[i], o);

    return o;
  }
  /* [MS-XLS] 2.4.181 TODO: parse all the things! */


  function parse_Obj(blob, length, opts) {
    if (opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);
    var cmo = parse_FtCmo(blob, 22); // id, ot, flags

    var fts = parse_FtArray(blob, length - 22, cmo[1]);
    return {
      cmo: cmo,
      ft: fts
    };
  }
  /* from older spec */


  var parse_BIFF5OT = [];

  parse_BIFF5OT[0x08] = function (blob, length) {
    var tgt = blob.l + length;
    blob.l += 10; // todo

    var cf = blob.read_shift(2);
    blob.l += 4;
    blob.l += 2; //var cbPictFmla = blob.read_shift(2);

    blob.l += 2;
    blob.l += 2; //var grbit = blob.read_shift(2);

    blob.l += 4;
    var cchName = blob.read_shift(1);
    blob.l += cchName; // TODO: stName

    blob.l = tgt; // TODO: fmla

    return {
      fmt: cf
    };
  };

  function parse_BIFF5Obj(blob, length, opts) {
    blob.l += 4; //var cnt = blob.read_shift(4);

    var ot = blob.read_shift(2);
    var id = blob.read_shift(2);
    var grbit = blob.read_shift(2);
    blob.l += 2; //var colL = blob.read_shift(2);

    blob.l += 2; //var dxL = blob.read_shift(2);

    blob.l += 2; //var rwT = blob.read_shift(2);

    blob.l += 2; //var dyT = blob.read_shift(2);

    blob.l += 2; //var colR = blob.read_shift(2);

    blob.l += 2; //var dxR = blob.read_shift(2);

    blob.l += 2; //var rwB = blob.read_shift(2);

    blob.l += 2; //var dyB = blob.read_shift(2);

    blob.l += 2; //var cbMacro = blob.read_shift(2);

    blob.l += 6;
    length -= 36;
    var fts = [];
    fts.push((parse_BIFF5OT[ot] || parsenoop)(blob, length, opts));
    return {
      cmo: [id, ot, grbit],
      ft: fts
    };
  }
  /* [MS-XLS] 2.4.329 TODO: parse properly */


  function parse_TxO(blob, length, opts) {
    var s = blob.l;
    var texts = "";

    try {
      blob.l += 4;
      var ot = (opts.lastobj || {
        cmo: [0, 0]
      }).cmo[1];
      var controlInfo; // eslint-disable-line no-unused-vars

      if ([0, 5, 7, 11, 12, 14].indexOf(ot) == -1) blob.l += 6;else controlInfo = parse_ControlInfo(blob, 6, opts);
      var cchText = blob.read_shift(2);
      /*var cbRuns = */

      blob.read_shift(2);
      /*var ifntEmpty = */

      parseuint16(blob, 2);
      var len = blob.read_shift(2);
      blob.l += len; //var fmla = parse_ObjFmla(blob, s + length - blob.l);

      for (var i = 1; i < blob.lens.length - 1; ++i) {
        if (blob.l - s != blob.lens[i]) throw new Error("TxO: bad continue record");
        var hdr = blob[blob.l];
        var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i + 1] - blob.lens[i] - 1);
        texts += t;
        if (texts.length >= (hdr ? cchText : 2 * cchText)) break;
      }

      if (texts.length !== cchText && texts.length !== cchText * 2) {
        throw new Error("cchText: " + cchText + " != " + texts.length);
      }

      blob.l = s + length;
      /* [MS-XLS] 2.5.272 TxORuns */
      //	var rgTxoRuns = [];
      //	for(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;
      //	var cchText2 = blob.read_shift(2);
      //	if(cchText2 !== cchText) throw new Error("TxOLastRun mismatch: " + cchText2 + " " + cchText);
      //	blob.l += 6;
      //	if(s + length != blob.l) throw new Error("TxO " + (s + length) + ", at " + blob.l);

      return {
        t: texts
      };
    } catch (e) {
      blob.l = s + length;
      return {
        t: texts
      };
    }
  }
  /* [MS-XLS] 2.4.140 */


  function parse_HLink(blob, length) {
    var ref = parse_Ref8U(blob, 8);
    blob.l += 16;
    /* CLSID */

    var hlink = parse_Hyperlink(blob, length - 24);
    return [ref, hlink];
  }

  function write_HLink(hl) {
    var O = new_buf(24);
    var ref = decode_cell(hl[0]);
    O.write_shift(2, ref.r);
    O.write_shift(2, ref.r);
    O.write_shift(2, ref.c);
    O.write_shift(2, ref.c);
    var clsid = "d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");

    for (var i = 0; i < 16; ++i) O.write_shift(1, parseInt(clsid[i], 16));

    return bconcat([O, write_Hyperlink(hl[1])]);
  }
  /* [MS-XLS] 2.4.141 */


  function parse_HLinkTooltip(blob, length) {
    blob.read_shift(2);
    var ref = parse_Ref8U(blob, 8);
    var wzTooltip = blob.read_shift((length - 10) / 2, 'dbcs-cont');
    wzTooltip = wzTooltip.replace(chr0, "");
    return [ref, wzTooltip];
  }

  function write_HLinkTooltip(hl) {
    var TT = hl[1].Tooltip;
    var O = new_buf(10 + 2 * (TT.length + 1));
    O.write_shift(2, 0x0800);
    var ref = decode_cell(hl[0]);
    O.write_shift(2, ref.r);
    O.write_shift(2, ref.r);
    O.write_shift(2, ref.c);
    O.write_shift(2, ref.c);

    for (var i = 0; i < TT.length; ++i) O.write_shift(2, TT.charCodeAt(i));

    O.write_shift(2, 0);
    return O;
  }
  /* [MS-XLS] 2.4.63 */


  function parse_Country(blob) {
    var o = [0, 0],
        d;
    d = blob.read_shift(2);
    o[0] = CountryEnum[d] || d;
    d = blob.read_shift(2);
    o[1] = CountryEnum[d] || d;
    return o;
  }

  function write_Country(o) {
    if (!o) o = new_buf(4);
    o.write_shift(2, 0x01);
    o.write_shift(2, 0x01);
    return o;
  }
  /* [MS-XLS] 2.4.50 ClrtClient */


  function parse_ClrtClient(blob) {
    var ccv = blob.read_shift(2);
    var o = [];

    while (ccv-- > 0) o.push(parse_LongRGB(blob, 8));

    return o;
  }
  /* [MS-XLS] 2.4.188 */


  function parse_Palette(blob) {
    var ccv = blob.read_shift(2);
    var o = [];

    while (ccv-- > 0) o.push(parse_LongRGB(blob, 8));

    return o;
  }
  /* [MS-XLS] 2.4.354 */


  function parse_XFCRC(blob) {
    blob.l += 2;
    var o = {
      cxfs: 0,
      crc: 0
    };
    o.cxfs = blob.read_shift(2);
    o.crc = blob.read_shift(4);
    return o;
  }
  /* [MS-XLS] 2.4.53 TODO: parse flags */

  /* [MS-XLSB] 2.4.323 TODO: parse flags */


  function parse_ColInfo(blob, length, opts) {
    if (!opts.cellStyles) return parsenoop(blob, length);
    var w = opts && opts.biff >= 12 ? 4 : 2;
    var colFirst = blob.read_shift(w);
    var colLast = blob.read_shift(w);
    var coldx = blob.read_shift(w);
    var ixfe = blob.read_shift(w);
    var flags = blob.read_shift(2);
    if (w == 2) blob.l += 2;
    var o = {
      s: colFirst,
      e: colLast,
      w: coldx,
      ixfe: ixfe,
      flags: flags
    };
    if (opts.biff >= 5 || !opts.biff) o.level = flags >> 8 & 0x7;
    return o;
  }
  /* [MS-XLS] 2.4.257 */


  function parse_Setup(blob, length) {
    var o = {};
    if (length < 32) return o;
    blob.l += 16;
    o.header = parse_Xnum(blob, 8);
    o.footer = parse_Xnum(blob, 8);
    blob.l += 2;
    return o;
  }
  /* [MS-XLS] 2.4.261 */


  function parse_ShtProps(blob, length, opts) {
    var def = {
      area: false
    };

    if (opts.biff != 5) {
      blob.l += length;
      return def;
    }

    var d = blob.read_shift(1);
    blob.l += 3;
    if (d & 0x10) def.area = true;
    return def;
  }
  /* [MS-XLS] 2.4.241 */


  function write_RRTabId(n) {
    var out = new_buf(2 * n);

    for (var i = 0; i < n; ++i) out.write_shift(2, i + 1);

    return out;
  }

  var parse_Blank = parse_XLSCell;
  /* [MS-XLS] 2.4.20 Just the cell */

  var parse_Scl = parseuint16a;
  /* [MS-XLS] 2.4.247 num, den */

  var parse_String = parse_XLUnicodeString;
  /* [MS-XLS] 2.4.268 */

  /* --- Specific to versions before BIFF8 --- */

  function parse_ImData(blob) {
    var cf = blob.read_shift(2);
    var env = blob.read_shift(2);
    var lcb = blob.read_shift(4);
    var o = {
      fmt: cf,
      env: env,
      len: lcb,
      data: blob.slice(blob.l, blob.l + lcb)
    };
    blob.l += lcb;
    return o;
  }
  /* BIFF2_??? where ??? is the name from [XLS] */


  function parse_BIFF2STR(blob, length, opts) {
    var cell = parse_XLSCell(blob, 6);
    ++blob.l;
    var str = parse_XLUnicodeString2(blob, length - 7, opts);
    cell.t = 'str';
    cell.val = str;
    return cell;
  }

  function parse_BIFF2NUM(blob) {
    var cell = parse_XLSCell(blob, 6);
    ++blob.l;
    var num = parse_Xnum(blob, 8);
    cell.t = 'n';
    cell.val = num;
    return cell;
  }

  function write_BIFF2NUM(r, c, val) {
    var out = new_buf(15);
    write_BIFF2Cell(out, r, c);
    out.write_shift(8, val, 'f');
    return out;
  }

  function parse_BIFF2INT(blob) {
    var cell = parse_XLSCell(blob, 6);
    ++blob.l;
    var num = blob.read_shift(2);
    cell.t = 'n';
    cell.val = num;
    return cell;
  }

  function write_BIFF2INT(r, c, val) {
    var out = new_buf(9);
    write_BIFF2Cell(out, r, c);
    out.write_shift(2, val);
    return out;
  }

  function parse_BIFF2STRING(blob) {
    var cch = blob.read_shift(1);

    if (cch === 0) {
      blob.l++;
      return "";
    }

    return blob.read_shift(cch, 'sbcs-cont');
  }
  /* TODO: convert to BIFF8 font struct */


  function parse_BIFF2FONTXTRA(blob, length) {
    blob.l += 6; // unknown

    blob.l += 2; // font weight "bls"

    blob.l += 1; // charset

    blob.l += 3; // unknown

    blob.l += 1; // font family

    blob.l += length - 13;
  }
  /* TODO: parse rich text runs */


  function parse_RString(blob, length, opts) {
    var end = blob.l + length;
    var cell = parse_XLSCell(blob, 6);
    var cch = blob.read_shift(2);
    var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
    blob.l = end;
    cell.t = 'str';
    cell.val = str;
    return cell;
  }
  /* from js-harb (C) 2014-present  SheetJS */


  var DBF = function () {
    var dbf_codepage_map = {
      /* Code Pages Supported by Visual FoxPro */
      0x01: 437,
      0x02: 850,
      0x03: 1252,
      0x04: 10000,
      0x64: 852,
      0x65: 866,
      0x66: 865,
      0x67: 861,
      0x68: 895,
      0x69: 620,
      0x6A: 737,
      0x6B: 857,
      0x78: 950,
      0x79: 949,
      0x7A: 936,
      0x7B: 932,
      0x7C: 874,
      0x7D: 1255,
      0x7E: 1256,
      0x96: 10007,
      0x97: 10029,
      0x98: 10006,
      0xC8: 1250,
      0xC9: 1251,
      0xCA: 1254,
      0xCB: 1253,

      /* shapefile DBF extension */
      0x00: 20127,
      0x08: 865,
      0x09: 437,
      0x0A: 850,
      0x0B: 437,
      0x0D: 437,
      0x0E: 850,
      0x0F: 437,
      0x10: 850,
      0x11: 437,
      0x12: 850,
      0x13: 932,
      0x14: 850,
      0x15: 437,
      0x16: 850,
      0x17: 865,
      0x18: 437,
      0x19: 437,
      0x1A: 850,
      0x1B: 437,
      0x1C: 863,
      0x1D: 850,
      0x1F: 852,
      0x22: 852,
      0x23: 852,
      0x24: 860,
      0x25: 850,
      0x26: 866,
      0x37: 850,
      0x40: 852,
      0x4D: 936,
      0x4E: 949,
      0x4F: 950,
      0x50: 874,
      0x57: 1252,
      0x58: 1252,
      0x59: 1252,
      0xFF: 16969
    };
    var dbf_reverse_map = evert({
      0x01: 437,
      0x02: 850,
      0x03: 1252,
      0x04: 10000,
      0x64: 852,
      0x65: 866,
      0x66: 865,
      0x67: 861,
      0x68: 895,
      0x69: 620,
      0x6A: 737,
      0x6B: 857,
      0x78: 950,
      0x79: 949,
      0x7A: 936,
      0x7B: 932,
      0x7C: 874,
      0x7D: 1255,
      0x7E: 1256,
      0x96: 10007,
      0x97: 10029,
      0x98: 10006,
      0xC8: 1250,
      0xC9: 1251,
      0xCA: 1254,
      0xCB: 1253,
      0x00: 20127
    });
    var DBF_SUPPORTED_VERSIONS = [0x02, 0x03, 0x30, 0x31, 0x83, 0x8B, 0x8C, 0xF5];
    /* TODO: find an actual specification */

    function dbf_to_aoa(buf, opts) {
      var out = [];
      /* TODO: browser based */

      var d = new_raw_buf(1);

      switch (opts.type) {
        case 'base64':
          d = s2a(Base64.decode(buf));
          break;

        case 'binary':
          d = s2a(buf);
          break;

        case 'buffer':
        case 'array':
          d = buf;
          break;
      }

      prep_blob(d, 0);
      /* header */

      var ft = d.read_shift(1);
      var memo = false;
      var vfp = false,
          l7 = false;

      switch (ft) {
        case 0x02:
        case 0x03:
          break;

        case 0x30:
          vfp = true;
          memo = true;
          break;

        case 0x31:
          vfp = true;
          break;

        case 0x83:
          memo = true;
          break;

        case 0x8B:
          memo = true;
          break;

        case 0x8C:
          memo = true;
          l7 = true;
          break;

        case 0xF5:
          memo = true;
          break;

        default:
          throw new Error("DBF Unsupported Version: " + ft.toString(16));
      }

      var
      /*filedate = new Date(),*/
      nrow = 0,
          fpos = 0;
      if (ft == 0x02) nrow = d.read_shift(2);
      /*filedate = new Date(d.read_shift(1) + 1900, d.read_shift(1) - 1, d.read_shift(1));*/

      d.l += 3;
      if (ft != 0x02) nrow = d.read_shift(4);
      if (nrow > 1048576) nrow = 1e6;
      if (ft != 0x02) fpos = d.read_shift(2);
      var rlen = d.read_shift(2);
      var
      /*flags = 0,*/
      current_cp = 1252;

      if (ft != 0x02) {
        d.l += 16;
        /*flags = */

        d.read_shift(1); //if(memo && ((flags & 0x02) === 0)) throw new Error("DBF Flags " + flags.toString(16) + " ft " + ft.toString(16));

        /* codepage present in FoxPro */

        if (d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];
        d.l += 1;
        d.l += 2;
      }

      if (l7) d.l += 36;
      var fields = [],
          field = {};
      var hend = fpos - 10 - (vfp ? 264 : 0),
          ww = l7 ? 32 : 11;

      while (ft == 0x02 ? d.l < d.length && d[d.l] != 0x0d : d.l < hend) {
        field = {};
        field.name = cptable.utils.decode(current_cp, d.slice(d.l, d.l + ww)).replace(/[\u0000\r\n].*$/g, "");
        d.l += ww;
        field.type = String.fromCharCode(d.read_shift(1));
        if (ft != 0x02 && !l7) field.offset = d.read_shift(4);
        field.len = d.read_shift(1);
        if (ft == 0x02) field.offset = d.read_shift(2);
        field.dec = d.read_shift(1);
        if (field.name.length) fields.push(field);
        if (ft != 0x02) d.l += l7 ? 13 : 14;

        switch (field.type) {
          case 'B':
            // VFP Double
            if ((!vfp || field.len != 8) && opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);
            break;

          case 'G': // General

          case 'P':
            // Picture
            if (opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);
            break;

          case 'C': // character

          case 'D': // date

          case 'F': // floating point

          case 'I': // long

          case 'L': // boolean

          case 'M': // memo

          case 'N': // number

          case 'O': // double

          case 'T': // datetime

          case 'Y': // currency

          case '0': // VFP _NullFlags

          case '@': // timestamp

          case '+':
            // autoincrement
            break;

          default:
            throw new Error('Unknown Field Type: ' + field.type);
        }
      }

      if (d[d.l] !== 0x0D) d.l = fpos - 1;else if (ft == 0x02) d.l = 0x209;

      if (ft != 0x02) {
        if (d.read_shift(1) !== 0x0D) throw new Error("DBF Terminator not found " + d.l + " " + d[d.l]);
        d.l = fpos;
      }
      /* data */


      var R = 0,
          C = 0;
      out[0] = [];

      for (C = 0; C != fields.length; ++C) out[0][C] = fields[C].name;

      while (nrow-- > 0) {
        if (d[d.l] === 0x2A) {
          d.l += rlen;
          continue;
        }

        ++d.l;
        out[++R] = [];
        C = 0;

        for (C = 0; C != fields.length; ++C) {
          var dd = d.slice(d.l, d.l + fields[C].len);
          d.l += fields[C].len;
          prep_blob(dd, 0);
          var s = cptable.utils.decode(current_cp, dd);

          switch (fields[C].type) {
            case 'C':
              out[R][C] = cptable.utils.decode(current_cp, dd);
              out[R][C] = out[R][C].trim();
              break;

            case 'D':
              if (s.length === 8) out[R][C] = new Date(+s.slice(0, 4), +s.slice(4, 6) - 1, +s.slice(6, 8));else out[R][C] = s;
              break;

            case 'F':
              out[R][C] = parseFloat(s.trim());
              break;

            case '+':
            case 'I':
              out[R][C] = l7 ? dd.read_shift(-4, 'i') ^ 0x80000000 : dd.read_shift(4, 'i');
              break;

            case 'L':
              switch (s.toUpperCase()) {
                case 'Y':
                case 'T':
                  out[R][C] = true;
                  break;

                case 'N':
                case 'F':
                  out[R][C] = false;
                  break;

                case ' ':
                case '?':
                  out[R][C] = false;
                  break;

                /* NOTE: technically uninitialized */

                default:
                  throw new Error("DBF Unrecognized L:|" + s + "|");
              }

              break;

            case 'M':
              /* TODO: handle memo files */
              if (!memo) throw new Error("DBF Unexpected MEMO for type " + ft.toString(16));
              out[R][C] = "##MEMO##" + (l7 ? parseInt(s.trim(), 10) : dd.read_shift(4));
              break;

            case 'N':
              out[R][C] = +s.replace(/\u0000/g, "").trim();
              break;

            case '@':
              out[R][C] = new Date(dd.read_shift(-8, 'f') - 0x388317533400);
              break;

            case 'T':
              out[R][C] = new Date((dd.read_shift(4) - 0x253D8C) * 0x5265C00 + dd.read_shift(4));
              break;

            case 'Y':
              out[R][C] = dd.read_shift(4, 'i') / 1e4;
              break;

            case 'O':
              out[R][C] = -dd.read_shift(-8, 'f');
              break;

            case 'B':
              if (vfp && fields[C].len == 8) {
                out[R][C] = dd.read_shift(8, 'f');
                break;
              }

            /* falls through */

            case 'G':
            case 'P':
              dd.l += fields[C].len;
              break;

            case '0':
              if (fields[C].name === '_NullFlags') break;

            /* falls through */

            default:
              throw new Error("DBF Unsupported data type " + fields[C].type);
          }
        }
      }

      if (ft != 0x02) if (d.l < d.length && d[d.l++] != 0x1A) throw new Error("DBF EOF Marker missing " + (d.l - 1) + " of " + d.length + " " + d[d.l - 1].toString(16));
      if (opts && opts.sheetRows) out = out.slice(0, opts.sheetRows);
      return out;
    }

    function dbf_to_sheet(buf, opts) {
      var o = opts || {};
      if (!o.dateNF) o.dateNF = "yyyymmdd";
      return aoa_to_sheet(dbf_to_aoa(buf, o), o);
    }

    function dbf_to_workbook(buf, opts) {
      try {
        return sheet_to_workbook(dbf_to_sheet(buf, opts), opts);
      } catch (e) {
        if (opts && opts.WTF) throw e;
      }

      return {
        SheetNames: [],
        Sheets: {}
      };
    }

    var _RLEN = {
      'B': 8,
      'C': 250,
      'L': 1,
      'D': 8,
      '?': 0,
      '': 0
    };

    function sheet_to_dbf(ws, opts) {
      var o = opts || {};
      if (+o.codepage >= 0) set_cp(+o.codepage);
      if (o.type == "string") throw new Error("Cannot write DBF to JS string");
      var ba = buf_array();
      var aoa = sheet_to_json(ws, {
        header: 1,
        raw: true,
        cellDates: true
      });
      var headers = aoa[0],
          data = aoa.slice(1);
      var i = 0,
          j = 0,
          hcnt = 0,
          rlen = 1;

      for (i = 0; i < headers.length; ++i) {
        if (i == null) continue;
        ++hcnt;
        if (typeof headers[i] === 'number') headers[i] = headers[i].toString(10);
        if (typeof headers[i] !== 'string') throw new Error("DBF Invalid column name " + headers[i] + " |" + typeof headers[i] + "|");
        if (headers.indexOf(headers[i]) !== i) for (j = 0; j < 1024; ++j) if (headers.indexOf(headers[i] + "_" + j) == -1) {
          headers[i] += "_" + j;
          break;
        }
      }

      var range = safe_decode_range(ws['!ref']);
      var coltypes = [];

      for (i = 0; i <= range.e.c - range.s.c; ++i) {
        var col = [];

        for (j = 0; j < data.length; ++j) {
          if (data[j][i] != null) col.push(data[j][i]);
        }

        if (col.length == 0 || headers[i] == null) {
          coltypes[i] = '?';
          continue;
        }

        var guess = '',
            _guess = '';

        for (j = 0; j < col.length; ++j) {
          switch (typeof col[j]) {
            /* TODO: check if L2 compat is desired */
            case 'number':
              _guess = 'B';
              break;

            case 'string':
              _guess = 'C';
              break;

            case 'boolean':
              _guess = 'L';
              break;

            case 'object':
              _guess = col[j] instanceof Date ? 'D' : 'C';
              break;

            default:
              _guess = 'C';
          }

          guess = guess && guess != _guess ? 'C' : _guess;
          if (guess == 'C') break;
        }

        rlen += _RLEN[guess] || 0;
        coltypes[i] = guess;
      }

      var h = ba.next(32);
      h.write_shift(4, 0x13021130);
      h.write_shift(4, data.length);
      h.write_shift(2, 296 + 32 * hcnt);
      h.write_shift(2, rlen);

      for (i = 0; i < 4; ++i) h.write_shift(4, 0);

      h.write_shift(4, 0x00000000 | (+dbf_reverse_map[current_ansi] || 0x03) << 8);

      for (i = 0, j = 0; i < headers.length; ++i) {
        if (headers[i] == null) continue;
        var hf = ba.next(32);

        var _f = (headers[i].slice(-10) + "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00").slice(0, 11);

        hf.write_shift(1, _f, "sbcs");
        hf.write_shift(1, coltypes[i] == '?' ? 'C' : coltypes[i], "sbcs");
        hf.write_shift(4, j);
        hf.write_shift(1, _RLEN[coltypes[i]] || 0);
        hf.write_shift(1, 0);
        hf.write_shift(1, 0x02);
        hf.write_shift(4, 0);
        hf.write_shift(1, 0);
        hf.write_shift(4, 0);
        hf.write_shift(4, 0);
        j += _RLEN[coltypes[i]] || 0;
      }

      var hb = ba.next(264);
      hb.write_shift(4, 0x0000000D);

      for (i = 0; i < 65; ++i) hb.write_shift(4, 0x00000000);

      for (i = 0; i < data.length; ++i) {
        var rout = ba.next(rlen);
        rout.write_shift(1, 0);

        for (j = 0; j < headers.length; ++j) {
          if (headers[j] == null) continue;

          switch (coltypes[j]) {
            case 'L':
              rout.write_shift(1, data[i][j] == null ? 0x3F : data[i][j] ? 0x54 : 0x46);
              break;

            case 'B':
              rout.write_shift(8, data[i][j] || 0, 'f');
              break;

            case 'D':
              if (!data[i][j]) rout.write_shift(8, "00000000", "sbcs");else {
                rout.write_shift(4, ("0000" + data[i][j].getFullYear()).slice(-4), "sbcs");
                rout.write_shift(2, ("00" + (data[i][j].getMonth() + 1)).slice(-2), "sbcs");
                rout.write_shift(2, ("00" + data[i][j].getDate()).slice(-2), "sbcs");
              }
              break;

            case 'C':
              var _s = String(data[i][j] || "");

              rout.write_shift(1, _s, "sbcs");

              for (hcnt = 0; hcnt < 250 - _s.length; ++hcnt) rout.write_shift(1, 0x20);

              break;
          }
        } // data

      }

      ba.next(1).write_shift(1, 0x1A);
      return ba.end();
    }

    return {
      versions: DBF_SUPPORTED_VERSIONS,
      to_workbook: dbf_to_workbook,
      to_sheet: dbf_to_sheet,
      from_sheet: sheet_to_dbf
    };
  }();

  var SYLK = function () {
    /* TODO: stress test sequences */
    var sylk_escapes = {
      AA: 'Ã',
      BA: 'Ã',
      CA: 'Ã',
      DA: 195,
      HA: 'Ã',
      JA: 197,
      AE: 'Ã',
      BE: 'Ã',
      CE: 'Ã',
      HE: 'Ã',
      AI: 'Ã',
      BI: 'Ã',
      CI: 'Ã',
      HI: 'Ã',
      AO: 'Ã',
      BO: 'Ã',
      CO: 'Ã',
      DO: 213,
      HO: 'Ã',
      AU: 'Ã',
      BU: 'Ã',
      CU: 'Ã',
      HU: 'Ã',
      Aa: 'Ã ',
      Ba: 'Ã¡',
      Ca: 'Ã¢',
      Da: 227,
      Ha: 'Ã¤',
      Ja: 229,
      Ae: 'Ã¨',
      Be: 'Ã©',
      Ce: 'Ãª',
      He: 'Ã«',
      Ai: 'Ã¬',
      Bi: 'Ã­',
      Ci: 'Ã®',
      Hi: 'Ã¯',
      Ao: 'Ã²',
      Bo: 'Ã³',
      Co: 'Ã´',
      Do: 245,
      Ho: 'Ã¶',
      Au: 'Ã¹',
      Bu: 'Ãº',
      Cu: 'Ã»',
      Hu: 'Ã¼',
      KC: 'Ã',
      Kc: 'Ã§',
      q: 'Ã¦',
      z: 'Å',
      a: 'Ã',
      j: 'Å',
      DN: 209,
      Dn: 241,
      Hy: 255,
      S: 169,
      c: 170,
      R: 174,
      B: 180,
      0: 176,
      1: 177,
      2: 178,
      3: 179,
      5: 181,
      6: 182,
      7: 183,
      Q: 185,
      k: 186,
      b: 208,
      i: 216,
      l: 222,
      s: 240,
      y: 248,
      "!": 161,
      '"': 162,
      "#": 163,
      "(": 164,
      "%": 165,
      "'": 167,
      "H ": 168,
      "+": 171,
      ";": 187,
      "<": 188,
      "=": 189,
      ">": 190,
      "?": 191,
      "{": 223
    };
    var sylk_char_regex = new RegExp("\u001BN(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g, "\\$1") + "|\\|)", "gm");

    var sylk_char_fn = function (_, $1) {
      var o = sylk_escapes[$1];
      return typeof o == "number" ? _getansi(o) : o;
    };

    var decode_sylk_char = function ($$, $1, $2) {
      var newcc = $1.charCodeAt(0) - 0x20 << 4 | $2.charCodeAt(0) - 0x30;
      return newcc == 59 ? $$ : _getansi(newcc);
    };

    sylk_escapes["|"] = 254;
    /* TODO: find an actual specification */

    function sylk_to_aoa(d, opts) {
      switch (opts.type) {
        case 'base64':
          return sylk_to_aoa_str(Base64.decode(d), opts);

        case 'binary':
          return sylk_to_aoa_str(d, opts);

        case 'buffer':
          return sylk_to_aoa_str(d.toString('binary'), opts);

        case 'array':
          return sylk_to_aoa_str(cc2str(d), opts);
      }

      throw new Error("Unrecognized type " + opts.type);
    }

    function sylk_to_aoa_str(str, opts) {
      var records = str.split(/[\n\r]+/),
          R = -1,
          C = -1,
          ri = 0,
          rj = 0,
          arr = [];
      var formats = [];
      var next_cell_format = null;
      var sht = {},
          rowinfo = [],
          colinfo = [],
          cw = [];
      var Mval = 0,
          j;
      if (+opts.codepage >= 0) set_cp(+opts.codepage);

      for (; ri !== records.length; ++ri) {
        Mval = 0;
        var rstr = records[ri].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);
        var record = rstr.replace(/;;/g, "\u0000").split(";").map(function (x) {
          return x.replace(/\u0000/g, ";");
        });
        var RT = record[0],
            val;
        if (rstr.length > 0) switch (RT) {
          case 'ID':
            break;

          /* header */

          case 'E':
            break;

          /* EOF */

          case 'B':
            break;

          /* dimensions */

          case 'O':
            break;

          /* options? */

          case 'P':
            if (record[1].charAt(0) == 'P') formats.push(rstr.slice(3).replace(/;;/g, ";"));
            break;

          case 'C':
            var C_seen_K = false,
                C_seen_X = false;

            for (rj = 1; rj < record.length; ++rj) switch (record[rj].charAt(0)) {
              case 'X':
                C = parseInt(record[rj].slice(1)) - 1;
                C_seen_X = true;
                break;

              case 'Y':
                R = parseInt(record[rj].slice(1)) - 1;
                if (!C_seen_X) C = 0;

                for (j = arr.length; j <= R; ++j) arr[j] = [];

                break;

              case 'K':
                val = record[rj].slice(1);
                if (val.charAt(0) === '"') val = val.slice(1, val.length - 1);else if (val === 'TRUE') val = true;else if (val === 'FALSE') val = false;else if (!isNaN(fuzzynum(val))) {
                  val = fuzzynum(val);
                  if (next_cell_format !== null && SSF.is_date(next_cell_format)) val = numdate(val);
                } else if (!isNaN(fuzzydate(val).getDate())) {
                  val = parseDate(val);
                }
                if (typeof cptable !== 'undefined' && typeof val == "string" && (opts || {}).type != "string" && (opts || {}).codepage) val = cptable.utils.decode(opts.codepage, val);
                C_seen_K = true;
                break;

              case 'E':
                var formula = rc_to_a1(record[rj].slice(1), {
                  r: R,
                  c: C
                });
                arr[R][C] = [arr[R][C], formula];
                break;

              default:
                if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
            }

            if (C_seen_K) {
              arr[R][C] = val;
              next_cell_format = null;
            }

            break;

          case 'F':
            var F_seen = 0;

            for (rj = 1; rj < record.length; ++rj) switch (record[rj].charAt(0)) {
              case 'X':
                C = parseInt(record[rj].slice(1)) - 1;
                ++F_seen;
                break;

              case 'Y':
                R = parseInt(record[rj].slice(1)) - 1;
                /*C = 0;*/

                for (j = arr.length; j <= R; ++j) arr[j] = [];

                break;

              case 'M':
                Mval = parseInt(record[rj].slice(1)) / 20;
                break;

              case 'F':
                break;

              /* ??? */

              case 'G':
                break;

              /* hide grid */

              case 'P':
                next_cell_format = formats[parseInt(record[rj].slice(1))];
                break;

              case 'S':
                break;

              /* cell style */

              case 'D':
                break;

              /* column */

              case 'N':
                break;

              /* font */

              case 'W':
                cw = record[rj].slice(1).split(" ");

                for (j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j) {
                  Mval = parseInt(cw[2], 10);
                  colinfo[j - 1] = Mval === 0 ? {
                    hidden: true
                  } : {
                    wch: Mval
                  };
                  process_col(colinfo[j - 1]);
                }

                break;

              case 'C':
                /* default column format */
                C = parseInt(record[rj].slice(1)) - 1;
                if (!colinfo[C]) colinfo[C] = {};
                break;

              case 'R':
                /* row properties */
                R = parseInt(record[rj].slice(1)) - 1;
                if (!rowinfo[R]) rowinfo[R] = {};

                if (Mval > 0) {
                  rowinfo[R].hpt = Mval;
                  rowinfo[R].hpx = pt2px(Mval);
                } else if (Mval === 0) rowinfo[R].hidden = true;

                break;

              default:
                if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
            }

            if (F_seen < 1) next_cell_format = null;
            break;

          default:
            if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
        }
      }

      if (rowinfo.length > 0) sht['!rows'] = rowinfo;
      if (colinfo.length > 0) sht['!cols'] = colinfo;
      if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
      return [arr, sht];
    }

    function sylk_to_sheet(d, opts) {
      var aoasht = sylk_to_aoa(d, opts);
      var aoa = aoasht[0],
          ws = aoasht[1];
      var o = aoa_to_sheet(aoa, opts);
      keys(ws).forEach(function (k) {
        o[k] = ws[k];
      });
      return o;
    }

    function sylk_to_workbook(d, opts) {
      return sheet_to_workbook(sylk_to_sheet(d, opts), opts);
    }

    function write_ws_cell_sylk(cell, ws, R, C) {
      var o = "C;Y" + (R + 1) + ";X" + (C + 1) + ";K";

      switch (cell.t) {
        case 'n':
          o += cell.v || 0;
          if (cell.f && !cell.F) o += ";E" + a1_to_rc(cell.f, {
            r: R,
            c: C
          });
          break;

        case 'b':
          o += cell.v ? "TRUE" : "FALSE";
          break;

        case 'e':
          o += cell.w || cell.v;
          break;

        case 'd':
          o += '"' + (cell.w || cell.v) + '"';
          break;

        case 's':
          o += '"' + cell.v.replace(/"/g, "") + '"';
          break;
      }

      return o;
    }

    function write_ws_cols_sylk(out, cols) {
      cols.forEach(function (col, i) {
        var rec = "F;W" + (i + 1) + " " + (i + 1) + " ";
        if (col.hidden) rec += "0";else {
          if (typeof col.width == 'number') col.wpx = width2px(col.width);
          if (typeof col.wpx == 'number') col.wch = px2char(col.wpx);
          if (typeof col.wch == 'number') rec += Math.round(col.wch);
        }
        if (rec.charAt(rec.length - 1) != " ") out.push(rec);
      });
    }

    function write_ws_rows_sylk(out, rows) {
      rows.forEach(function (row, i) {
        var rec = "F;";
        if (row.hidden) rec += "M0;";else if (row.hpt) rec += "M" + 20 * row.hpt + ";";else if (row.hpx) rec += "M" + 20 * px2pt(row.hpx) + ";";
        if (rec.length > 2) out.push(rec + "R" + (i + 1));
      });
    }

    function sheet_to_sylk(ws, opts) {
      var preamble = ["ID;PWXL;N;E"],
          o = [];
      var r = safe_decode_range(ws['!ref']),
          cell;
      var dense = Array.isArray(ws);
      var RS = "\r\n";
      preamble.push("P;PGeneral");
      preamble.push("F;P0;DG0G8;M255");
      if (ws['!cols']) write_ws_cols_sylk(preamble, ws['!cols']);
      if (ws['!rows']) write_ws_rows_sylk(preamble, ws['!rows']);
      preamble.push("B;Y" + (r.e.r - r.s.r + 1) + ";X" + (r.e.c - r.s.c + 1) + ";D" + [r.s.c, r.s.r, r.e.c, r.e.r].join(" "));

      for (var R = r.s.r; R <= r.e.r; ++R) {
        for (var C = r.s.c; C <= r.e.c; ++C) {
          var coord = encode_cell({
            r: R,
            c: C
          });
          cell = dense ? (ws[R] || [])[C] : ws[coord];
          if (!cell || cell.v == null && (!cell.f || cell.F)) continue;
          o.push(write_ws_cell_sylk(cell, ws, R, C, opts));
        }
      }

      return preamble.join(RS) + RS + o.join(RS) + RS + "E" + RS;
    }

    return {
      to_workbook: sylk_to_workbook,
      to_sheet: sylk_to_sheet,
      from_sheet: sheet_to_sylk
    };
  }();

  var DIF = function () {
    function dif_to_aoa(d, opts) {
      switch (opts.type) {
        case 'base64':
          return dif_to_aoa_str(Base64.decode(d), opts);

        case 'binary':
          return dif_to_aoa_str(d, opts);

        case 'buffer':
          return dif_to_aoa_str(d.toString('binary'), opts);

        case 'array':
          return dif_to_aoa_str(cc2str(d), opts);
      }

      throw new Error("Unrecognized type " + opts.type);
    }

    function dif_to_aoa_str(str, opts) {
      var records = str.split('\n'),
          R = -1,
          C = -1,
          ri = 0,
          arr = [];

      for (; ri !== records.length; ++ri) {
        if (records[ri].trim() === 'BOT') {
          arr[++R] = [];
          C = 0;
          continue;
        }

        if (R < 0) continue;
        var metadata = records[ri].trim().split(",");
        var type = metadata[0],
            value = metadata[1];
        ++ri;
        var data = records[ri].trim();

        switch (+type) {
          case -1:
            if (data === 'BOT') {
              arr[++R] = [];
              C = 0;
              continue;
            } else if (data !== 'EOD') throw new Error("Unrecognized DIF special command " + data);

            break;

          case 0:
            if (data === 'TRUE') arr[R][C] = true;else if (data === 'FALSE') arr[R][C] = false;else if (!isNaN(fuzzynum(value))) arr[R][C] = fuzzynum(value);else if (!isNaN(fuzzydate(value).getDate())) arr[R][C] = parseDate(value);else arr[R][C] = value;
            ++C;
            break;

          case 1:
            data = data.slice(1, data.length - 1);
            arr[R][C++] = data !== '' ? data : null;
            break;
        }

        if (data === 'EOD') break;
      }

      if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
      return arr;
    }

    function dif_to_sheet(str, opts) {
      return aoa_to_sheet(dif_to_aoa(str, opts), opts);
    }

    function dif_to_workbook(str, opts) {
      return sheet_to_workbook(dif_to_sheet(str, opts), opts);
    }

    var sheet_to_dif = function () {
      var push_field = function pf(o, topic, v, n, s) {
        o.push(topic);
        o.push(v + "," + n);
        o.push('"' + s.replace(/"/g, '""') + '"');
      };

      var push_value = function po(o, type, v, s) {
        o.push(type + "," + v);
        o.push(type == 1 ? '"' + s.replace(/"/g, '""') + '"' : s);
      };

      return function sheet_to_dif(ws) {
        var o = [];
        var r = safe_decode_range(ws['!ref']),
            cell;
        var dense = Array.isArray(ws);
        push_field(o, "TABLE", 0, 1, "sheetjs");
        push_field(o, "VECTORS", 0, r.e.r - r.s.r + 1, "");
        push_field(o, "TUPLES", 0, r.e.c - r.s.c + 1, "");
        push_field(o, "DATA", 0, 0, "");

        for (var R = r.s.r; R <= r.e.r; ++R) {
          push_value(o, -1, 0, "BOT");

          for (var C = r.s.c; C <= r.e.c; ++C) {
            var coord = encode_cell({
              r: R,
              c: C
            });
            cell = dense ? (ws[R] || [])[C] : ws[coord];

            if (!cell) {
              push_value(o, 1, 0, "");
              continue;
            }

            switch (cell.t) {
              case 'n':
                var val = DIF_XL ? cell.w : cell.v;
                if (!val && cell.v != null) val = cell.v;

                if (val == null) {
                  if (DIF_XL && cell.f && !cell.F) push_value(o, 1, 0, "=" + cell.f);else push_value(o, 1, 0, "");
                } else push_value(o, 0, val, "V");

                break;

              case 'b':
                push_value(o, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE");
                break;

              case 's':
                push_value(o, 1, 0, !DIF_XL || isNaN(cell.v) ? cell.v : '="' + cell.v + '"');
                break;

              case 'd':
                if (!cell.w) cell.w = SSF.format(cell.z || SSF._table[14], datenum(parseDate(cell.v)));
                if (DIF_XL) push_value(o, 0, cell.w, "V");else push_value(o, 1, 0, cell.w);
                break;

              default:
                push_value(o, 1, 0, "");
            }
          }
        }

        push_value(o, -1, 0, "EOD");
        var RS = "\r\n";
        var oo = o.join(RS); //while((oo.length & 0x7F) != 0) oo += "\0";

        return oo;
      };
    }();

    return {
      to_workbook: dif_to_workbook,
      to_sheet: dif_to_sheet,
      from_sheet: sheet_to_dif
    };
  }();

  var ETH = function () {
    function decode(s) {
      return s.replace(/\\b/g, "\\").replace(/\\c/g, ":").replace(/\\n/g, "\n");
    }

    function encode(s) {
      return s.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g, "\\n");
    }

    function eth_to_aoa(str, opts) {
      var records = str.split('\n'),
          R = -1,
          C = -1,
          ri = 0,
          arr = [];

      for (; ri !== records.length; ++ri) {
        var record = records[ri].trim().split(":");
        if (record[0] !== 'cell') continue;
        var addr = decode_cell(record[1]);
        if (arr.length <= addr.r) for (R = arr.length; R <= addr.r; ++R) if (!arr[R]) arr[R] = [];
        R = addr.r;
        C = addr.c;

        switch (record[2]) {
          case 't':
            arr[R][C] = decode(record[3]);
            break;

          case 'v':
            arr[R][C] = +record[3];
            break;

          case 'vtf':
            var _f = record[record.length - 1];

          /* falls through */

          case 'vtc':
            switch (record[3]) {
              case 'nl':
                arr[R][C] = +record[4] ? true : false;
                break;

              default:
                arr[R][C] = +record[4];
                break;
            }

            if (record[2] == 'vtf') arr[R][C] = [arr[R][C], _f];
        }
      }

      if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
      return arr;
    }

    function eth_to_sheet(d, opts) {
      return aoa_to_sheet(eth_to_aoa(d, opts), opts);
    }

    function eth_to_workbook(d, opts) {
      return sheet_to_workbook(eth_to_sheet(d, opts), opts);
    }

    var header = ["socialcalc:version:1.5", "MIME-Version: 1.0", "Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"].join("\n");
    var sep = ["--SocialCalcSpreadsheetControlSave", "Content-type: text/plain; charset=UTF-8"].join("\n") + "\n";
    /* TODO: the other parts */

    var meta = ["# SocialCalc Spreadsheet Control Save", "part:sheet"].join("\n");
    var end = "--SocialCalcSpreadsheetControlSave--";

    function sheet_to_eth_data(ws) {
      if (!ws || !ws['!ref']) return "";
      var o = [],
          oo = [],
          cell,
          coord = "";
      var r = decode_range(ws['!ref']);
      var dense = Array.isArray(ws);

      for (var R = r.s.r; R <= r.e.r; ++R) {
        for (var C = r.s.c; C <= r.e.c; ++C) {
          coord = encode_cell({
            r: R,
            c: C
          });
          cell = dense ? (ws[R] || [])[C] : ws[coord];
          if (!cell || cell.v == null || cell.t === 'z') continue;
          oo = ["cell", coord, 't'];

          switch (cell.t) {
            case 's':
            case 'str':
              oo.push(encode(cell.v));
              break;

            case 'n':
              if (!cell.f) {
                oo[2] = 'v';
                oo[3] = cell.v;
              } else {
                oo[2] = 'vtf';
                oo[3] = 'n';
                oo[4] = cell.v;
                oo[5] = encode(cell.f);
              }

              break;

            case 'b':
              oo[2] = 'vt' + (cell.f ? 'f' : 'c');
              oo[3] = 'nl';
              oo[4] = cell.v ? "1" : "0";
              oo[5] = encode(cell.f || (cell.v ? 'TRUE' : 'FALSE'));
              break;

            case 'd':
              var t = datenum(parseDate(cell.v));
              oo[2] = 'vtc';
              oo[3] = 'nd';
              oo[4] = "" + t;
              oo[5] = cell.w || SSF.format(cell.z || SSF._table[14], t);
              break;

            case 'e':
              continue;
          }

          o.push(oo.join(":"));
        }
      }

      o.push("sheet:c:" + (r.e.c - r.s.c + 1) + ":r:" + (r.e.r - r.s.r + 1) + ":tvf:1");
      o.push("valueformat:1:text-wiki"); //o.push("copiedfrom:" + ws['!ref']); // clipboard only

      return o.join("\n");
    }

    function sheet_to_eth(ws) {
      return [header, sep, meta, sep, sheet_to_eth_data(ws), end].join("\n"); // return ["version:1.5", sheet_to_eth_data(ws)].join("\n"); // clipboard form
    }

    return {
      to_workbook: eth_to_workbook,
      to_sheet: eth_to_sheet,
      from_sheet: sheet_to_eth
    };
  }();

  var PRN = function () {
    function set_text_arr(data, arr, R, C, o) {
      if (o.raw) arr[R][C] = data;else if (data === 'TRUE') arr[R][C] = true;else if (data === 'FALSE') arr[R][C] = false;else if (data === "") {
        /* empty */
      } else if (!isNaN(fuzzynum(data))) arr[R][C] = fuzzynum(data);else if (!isNaN(fuzzydate(data).getDate())) arr[R][C] = parseDate(data);else arr[R][C] = data;
    }

    function prn_to_aoa_str(f, opts) {
      var o = opts || {};
      var arr = [];
      if (!f || f.length === 0) return arr;
      var lines = f.split(/[\r\n]/);
      var L = lines.length - 1;

      while (L >= 0 && lines[L].length === 0) --L;

      var start = 10,
          idx = 0;
      var R = 0;

      for (; R <= L; ++R) {
        idx = lines[R].indexOf(" ");
        if (idx == -1) idx = lines[R].length;else idx++;
        start = Math.max(start, idx);
      }

      for (R = 0; R <= L; ++R) {
        arr[R] = [];
        /* TODO: confirm that widths are always 10 */

        var C = 0;
        set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);

        for (C = 1; C <= (lines[R].length - start) / 10 + 1; ++C) set_text_arr(lines[R].slice(start + (C - 1) * 10, start + C * 10).trim(), arr, R, C, o);
      }

      if (o.sheetRows) arr = arr.slice(0, o.sheetRows);
      return arr;
    } // List of accepted CSV separators


    var guess_seps = {
      0x2C: ',',
      0x09: "\t",
      0x3B: ';'
    }; // CSV separator weights to be used in case of equal numbers

    var guess_sep_weights = {
      0x2C: 3,
      0x09: 2,
      0x3B: 1
    };

    function guess_sep(str) {
      var cnt = {},
          instr = false,
          end = 0,
          cc = 0;

      for (; end < str.length; ++end) {
        if ((cc = str.charCodeAt(end)) == 0x22) instr = !instr;else if (!instr && cc in guess_seps) cnt[cc] = (cnt[cc] || 0) + 1;
      }

      cc = [];

      for (end in cnt) if (Object.prototype.hasOwnProperty.call(cnt, end)) {
        cc.push([cnt[end], end]);
      }

      if (!cc.length) {
        cnt = guess_sep_weights;

        for (end in cnt) if (Object.prototype.hasOwnProperty.call(cnt, end)) {
          cc.push([cnt[end], end]);
        }
      }

      cc.sort(function (a, b) {
        return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]];
      });
      return guess_seps[cc.pop()[1]];
    }

    function dsv_to_sheet_str(str, opts) {
      var o = opts || {};
      var sep = "";
      if (DENSE != null && o.dense == null) o.dense = DENSE;
      var ws = o.dense ? [] : {};
      var range = {
        s: {
          c: 0,
          r: 0
        },
        e: {
          c: 0,
          r: 0
        }
      };

      if (str.slice(0, 4) == "sep=") {
        // If the line ends in \r\n
        if (str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10) {
          sep = str.charAt(4);
          str = str.slice(7);
        } // If line ends in \r OR \n
        else if (str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10) {
            sep = str.charAt(4);
            str = str.slice(6);
          }
      } else sep = guess_sep(str.slice(0, 1024));

      var R = 0,
          C = 0,
          v = 0;
      var start = 0,
          end = 0,
          sepcc = sep.charCodeAt(0),
          instr = false,
          cc = 0;
      str = str.replace(/\r\n/mg, "\n");

      var _re = o.dateNF != null ? dateNF_regex(o.dateNF) : null;

      function finish_cell() {
        var s = str.slice(start, end);
        var cell = {};
        if (s.charAt(0) == '"' && s.charAt(s.length - 1) == '"') s = s.slice(1, -1).replace(/""/g, '"');
        if (s.length === 0) cell.t = 'z';else if (o.raw) {
          cell.t = 's';
          cell.v = s;
        } else if (s.trim().length === 0) {
          cell.t = 's';
          cell.v = s;
        } else if (s.charCodeAt(0) == 0x3D) {
          if (s.charCodeAt(1) == 0x22 && s.charCodeAt(s.length - 1) == 0x22) {
            cell.t = 's';
            cell.v = s.slice(2, -1).replace(/""/g, '"');
          } else if (fuzzyfmla(s)) {
            cell.t = 'n';
            cell.f = s.slice(1);
          } else {
            cell.t = 's';
            cell.v = s;
          }
        } else if (s == "TRUE") {
          cell.t = 'b';
          cell.v = true;
        } else if (s == "FALSE") {
          cell.t = 'b';
          cell.v = false;
        } else if (!isNaN(v = fuzzynum(s))) {
          cell.t = 'n';
          if (o.cellText !== false) cell.w = s;
          cell.v = v;
        } else if (!isNaN(fuzzydate(s).getDate()) || _re && s.match(_re)) {
          cell.z = o.dateNF || SSF._table[14];
          var k = 0;

          if (_re && s.match(_re)) {
            s = dateNF_fix(s, o.dateNF, s.match(_re) || []);
            k = 1;
          }

          if (o.cellDates) {
            cell.t = 'd';
            cell.v = parseDate(s, k);
          } else {
            cell.t = 'n';
            cell.v = datenum(parseDate(s, k));
          }

          if (o.cellText !== false) cell.w = SSF.format(cell.z, cell.v instanceof Date ? datenum(cell.v) : cell.v);
          if (!o.cellNF) delete cell.z;
        } else {
          cell.t = 's';
          cell.v = s;
        }

        if (cell.t == 'z') {} else if (o.dense) {
          if (!ws[R]) ws[R] = [];
          ws[R][C] = cell;
        } else ws[encode_cell({
          c: C,
          r: R
        })] = cell;

        start = end + 1;
        if (range.e.c < C) range.e.c = C;
        if (range.e.r < R) range.e.r = R;
        if (cc == sepcc) ++C;else {
          C = 0;
          ++R;
          if (o.sheetRows && o.sheetRows <= R) return true;
        }
      }

      outer: for (; end < str.length; ++end) switch (cc = str.charCodeAt(end)) {
        case 0x22:
          instr = !instr;
          break;

        case sepcc:
        case 0x0a:
        case 0x0d:
          if (!instr && finish_cell()) break outer;
          break;

        default:
          break;
      }

      if (end - start > 0) finish_cell();
      ws['!ref'] = encode_range(range);
      return ws;
    }

    function prn_to_sheet_str(str, opts) {
      if (!(opts && opts.PRN)) return dsv_to_sheet_str(str, opts);
      if (str.slice(0, 4) == "sep=") return dsv_to_sheet_str(str, opts);
      if (str.indexOf("\t") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0) return dsv_to_sheet_str(str, opts);
      return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
    }

    function prn_to_sheet(d, opts) {
      var str = "",
          bytes = opts.type == 'string' ? [0, 0, 0, 0] : firstbyte(d, opts);

      switch (opts.type) {
        case 'base64':
          str = Base64.decode(d);
          break;

        case 'binary':
          str = d;
          break;

        case 'buffer':
          if (opts.codepage == 65001) str = d.toString('utf8');else if (opts.codepage && typeof cptable !== 'undefined') str = cptable.utils.decode(opts.codepage, d);else str = d.toString('binary');
          break;

        case 'array':
          str = cc2str(d);
          break;

        case 'string':
          str = d;
          break;

        default:
          throw new Error("Unrecognized type " + opts.type);
      }

      if (bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str.slice(3));else if (opts.type == 'binary' && typeof cptable !== 'undefined' && opts.codepage) str = cptable.utils.decode(opts.codepage, cptable.utils.encode(1252, str));
      if (str.slice(0, 19) == "socialcalc:version:") return ETH.to_sheet(opts.type == 'string' ? str : utf8read(str), opts);
      return prn_to_sheet_str(str, opts);
    }

    function prn_to_workbook(d, opts) {
      return sheet_to_workbook(prn_to_sheet(d, opts), opts);
    }

    function sheet_to_prn(ws) {
      var o = [];
      var r = safe_decode_range(ws['!ref']),
          cell;
      var dense = Array.isArray(ws);

      for (var R = r.s.r; R <= r.e.r; ++R) {
        var oo = [];

        for (var C = r.s.c; C <= r.e.c; ++C) {
          var coord = encode_cell({
            r: R,
            c: C
          });
          cell = dense ? (ws[R] || [])[C] : ws[coord];

          if (!cell || cell.v == null) {
            oo.push("          ");
            continue;
          }

          var w = (cell.w || (format_cell(cell), cell.w) || "").slice(0, 10);

          while (w.length < 10) w += " ";

          oo.push(w + (C === 0 ? " " : ""));
        }

        o.push(oo.join(""));
      }

      return o.join("\n");
    }

    return {
      to_workbook: prn_to_workbook,
      to_sheet: prn_to_sheet,
      from_sheet: sheet_to_prn
    };
  }();
  /* Excel defaults to SYLK but warns if data is not valid */


  function read_wb_ID(d, opts) {
    var o = opts || {},
        OLD_WTF = !!o.WTF;
    o.WTF = true;

    try {
      var out = SYLK.to_workbook(d, o);
      o.WTF = OLD_WTF;
      return out;
    } catch (e) {
      o.WTF = OLD_WTF;
      if (!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e;
      return PRN.to_workbook(d, opts);
    }
  }

  var WK_ = function () {
    function lotushopper(data, cb, opts) {
      if (!data) return;
      prep_blob(data, data.l || 0);
      var Enum = opts.Enum || WK1Enum;

      while (data.l < data.length) {
        var RT = data.read_shift(2);
        var R = Enum[RT] || Enum[0xFF];
        var length = data.read_shift(2);
        var tgt = data.l + length;
        var d = (R.f || parsenoop)(data, length, opts);
        data.l = tgt;
        if (cb(d, R.n, RT)) return;
      }
    }

    function lotus_to_workbook(d, opts) {
      switch (opts.type) {
        case 'base64':
          return lotus_to_workbook_buf(s2a(Base64.decode(d)), opts);

        case 'binary':
          return lotus_to_workbook_buf(s2a(d), opts);

        case 'buffer':
        case 'array':
          return lotus_to_workbook_buf(d, opts);
      }

      throw "Unsupported type " + opts.type;
    }

    function lotus_to_workbook_buf(d, opts) {
      if (!d) return d;
      var o = opts || {};
      if (DENSE != null && o.dense == null) o.dense = DENSE;
      var s = o.dense ? [] : {},
          n = "Sheet1",
          sidx = 0;
      var sheets = {},
          snames = [n];
      var refguess = {
        s: {
          r: 0,
          c: 0
        },
        e: {
          r: 0,
          c: 0
        }
      };
      var sheetRows = o.sheetRows || 0;
      if (d[2] == 0x02) o.Enum = WK1Enum;else if (d[2] == 0x1a) o.Enum = WK3Enum;else if (d[2] == 0x0e) {
        o.Enum = WK3Enum;
        o.qpro = true;
        d.l = 0;
      } else throw new Error("Unrecognized LOTUS BOF " + d[2]);
      lotushopper(d, function (val, Rn, RT) {
        if (d[2] == 0x02) switch (RT) {
          case 0x00:
            o.vers = val;
            if (val >= 0x1000) o.qpro = true;
            break;

          case 0x06:
            refguess = val;
            break;

          /* RANGE */

          case 0x0F:
            /* LABEL */
            if (!o.qpro) val[1].v = val[1].v.slice(1);

          /* falls through */

          case 0x0D:
          /* INTEGER */

          case 0x0E:
          /* NUMBER */

          case 0x10:
          /* FORMULA */

          case 0x33:
            /* STRING */

            /* TODO: actual translation of the format code */
            if (RT == 0x0E && (val[2] & 0x70) == 0x70 && (val[2] & 0x0F) > 1 && (val[2] & 0x0F) < 15) {
              val[1].z = o.dateNF || SSF._table[14];

              if (o.cellDates) {
                val[1].t = 'd';
                val[1].v = numdate(val[1].v);
              }
            }

            if (o.dense) {
              if (!s[val[0].r]) s[val[0].r] = [];
              s[val[0].r][val[0].c] = val[1];
            } else s[encode_cell(val[0])] = val[1];

            break;
        } else switch (RT) {
          case 0x16:
            /* LABEL16 */
            val[1].v = val[1].v.slice(1);

          /* falls through */

          case 0x17:
          /* NUMBER17 */

          case 0x18:
          /* NUMBER18 */

          case 0x19:
          /* FORMULA19 */

          case 0x25:
          /* NUMBER25 */

          case 0x27:
          /* NUMBER27 */

          case 0x28:
            /* FORMULA28 */
            if (val[3] > sidx) {
              s["!ref"] = encode_range(refguess);
              sheets[n] = s;
              s = o.dense ? [] : {};
              refguess = {
                s: {
                  r: 0,
                  c: 0
                },
                e: {
                  r: 0,
                  c: 0
                }
              };
              sidx = val[3];
              n = "Sheet" + (sidx + 1);
              snames.push(n);
            }

            if (sheetRows > 0 && val[0].r >= sheetRows) break;

            if (o.dense) {
              if (!s[val[0].r]) s[val[0].r] = [];
              s[val[0].r][val[0].c] = val[1];
            } else s[encode_cell(val[0])] = val[1];

            if (refguess.e.c < val[0].c) refguess.e.c = val[0].c;
            if (refguess.e.r < val[0].r) refguess.e.r = val[0].r;
            break;

          default:
            break;
        }
      }, o);
      s["!ref"] = encode_range(refguess);
      sheets[n] = s;
      return {
        SheetNames: snames,
        Sheets: sheets
      };
    }

    function parse_RANGE(blob) {
      var o = {
        s: {
          c: 0,
          r: 0
        },
        e: {
          c: 0,
          r: 0
        }
      };
      o.s.c = blob.read_shift(2);
      o.s.r = blob.read_shift(2);
      o.e.c = blob.read_shift(2);
      o.e.r = blob.read_shift(2);
      if (o.s.c == 0xFFFF) o.s.c = o.e.c = o.s.r = o.e.r = 0;
      return o;
    }

    function parse_cell(blob, length, opts) {
      var o = [{
        c: 0,
        r: 0
      }, {
        t: 'n',
        v: 0
      }, 0];

      if (opts.qpro && opts.vers != 0x5120) {
        o[0].c = blob.read_shift(1);
        blob.l++;
        o[0].r = blob.read_shift(2);
        blob.l += 2;
      } else {
        o[2] = blob.read_shift(1);
        o[0].c = blob.read_shift(2);
        o[0].r = blob.read_shift(2);
      }

      return o;
    }

    function parse_LABEL(blob, length, opts) {
      var tgt = blob.l + length;
      var o = parse_cell(blob, length, opts);
      o[1].t = 's';

      if (opts.vers == 0x5120) {
        blob.l++;
        var len = blob.read_shift(1);
        o[1].v = blob.read_shift(len, 'utf8');
        return o;
      }

      if (opts.qpro) blob.l++;
      o[1].v = blob.read_shift(tgt - blob.l, 'cstr');
      return o;
    }

    function parse_INTEGER(blob, length, opts) {
      var o = parse_cell(blob, length, opts);
      o[1].v = blob.read_shift(2, 'i');
      return o;
    }

    function parse_NUMBER(blob, length, opts) {
      var o = parse_cell(blob, length, opts);
      o[1].v = blob.read_shift(8, 'f');
      return o;
    }

    function parse_FORMULA(blob, length, opts) {
      var tgt = blob.l + length;
      var o = parse_cell(blob, length, opts);
      /* TODO: formula */

      o[1].v = blob.read_shift(8, 'f');
      if (opts.qpro) blob.l = tgt;else {
        var flen = blob.read_shift(2);
        blob.l += flen;
      }
      return o;
    }

    function parse_cell_3(blob) {
      var o = [{
        c: 0,
        r: 0
      }, {
        t: 'n',
        v: 0
      }, 0];
      o[0].r = blob.read_shift(2);
      o[3] = blob[blob.l++];
      o[0].c = blob[blob.l++];
      return o;
    }

    function parse_LABEL_16(blob, length) {
      var o = parse_cell_3(blob, length);
      o[1].t = 's';
      o[1].v = blob.read_shift(length - 4, 'cstr');
      return o;
    }

    function parse_NUMBER_18(blob, length) {
      var o = parse_cell_3(blob, length);
      o[1].v = blob.read_shift(2);
      var v = o[1].v >> 1;
      /* TODO: figure out all of the corner cases */

      if (o[1].v & 0x1) {
        switch (v & 0x07) {
          case 1:
            v = (v >> 3) * 500;
            break;

          case 2:
            v = (v >> 3) / 20;
            break;

          case 4:
            v = (v >> 3) / 2000;
            break;

          case 6:
            v = (v >> 3) / 16;
            break;

          case 7:
            v = (v >> 3) / 64;
            break;

          default:
            throw "unknown NUMBER_18 encoding " + (v & 0x07);
        }
      }

      o[1].v = v;
      return o;
    }

    function parse_NUMBER_17(blob, length) {
      var o = parse_cell_3(blob, length);
      var v1 = blob.read_shift(4);
      var v2 = blob.read_shift(4);
      var e = blob.read_shift(2);

      if (e == 0xFFFF) {
        o[1].v = 0;
        return o;
      }

      var s = e & 0x8000;
      e = (e & 0x7FFF) - 16446;
      o[1].v = (s * 2 - 1) * ((e > 0 ? v2 << e : v2 >>> -e) + (e > -32 ? v1 << e + 32 : v1 >>> -(e + 32)));
      return o;
    }

    function parse_FORMULA_19(blob, length) {
      var o = parse_NUMBER_17(blob, 14);
      blob.l += length - 14;
      /* TODO: formula */

      return o;
    }

    function parse_NUMBER_25(blob, length) {
      var o = parse_cell_3(blob, length);
      var v1 = blob.read_shift(4);
      o[1].v = v1 >> 6;
      return o;
    }

    function parse_NUMBER_27(blob, length) {
      var o = parse_cell_3(blob, length);
      var v1 = blob.read_shift(8, 'f');
      o[1].v = v1;
      return o;
    }

    function parse_FORMULA_28(blob, length) {
      var o = parse_NUMBER_27(blob, 14);
      blob.l += length - 10;
      /* TODO: formula */

      return o;
    }

    var WK1Enum = {
      0x0000: {
        n: "BOF",
        f: parseuint16
      },
      0x0001: {
        n: "EOF"
      },
      0x0002: {
        n: "CALCMODE"
      },
      0x0003: {
        n: "CALCORDER"
      },
      0x0004: {
        n: "SPLIT"
      },
      0x0005: {
        n: "SYNC"
      },
      0x0006: {
        n: "RANGE",
        f: parse_RANGE
      },
      0x0007: {
        n: "WINDOW1"
      },
      0x0008: {
        n: "COLW1"
      },
      0x0009: {
        n: "WINTWO"
      },
      0x000A: {
        n: "COLW2"
      },
      0x000B: {
        n: "NAME"
      },
      0x000C: {
        n: "BLANK"
      },
      0x000D: {
        n: "INTEGER",
        f: parse_INTEGER
      },
      0x000E: {
        n: "NUMBER",
        f: parse_NUMBER
      },
      0x000F: {
        n: "LABEL",
        f: parse_LABEL
      },
      0x0010: {
        n: "FORMULA",
        f: parse_FORMULA
      },
      0x0018: {
        n: "TABLE"
      },
      0x0019: {
        n: "ORANGE"
      },
      0x001A: {
        n: "PRANGE"
      },
      0x001B: {
        n: "SRANGE"
      },
      0x001C: {
        n: "FRANGE"
      },
      0x001D: {
        n: "KRANGE1"
      },
      0x0020: {
        n: "HRANGE"
      },
      0x0023: {
        n: "KRANGE2"
      },
      0x0024: {
        n: "PROTEC"
      },
      0x0025: {
        n: "FOOTER"
      },
      0x0026: {
        n: "HEADER"
      },
      0x0027: {
        n: "SETUP"
      },
      0x0028: {
        n: "MARGINS"
      },
      0x0029: {
        n: "LABELFMT"
      },
      0x002A: {
        n: "TITLES"
      },
      0x002B: {
        n: "SHEETJS"
      },
      0x002D: {
        n: "GRAPH"
      },
      0x002E: {
        n: "NGRAPH"
      },
      0x002F: {
        n: "CALCCOUNT"
      },
      0x0030: {
        n: "UNFORMATTED"
      },
      0x0031: {
        n: "CURSORW12"
      },
      0x0032: {
        n: "WINDOW"
      },
      0x0033: {
        n: "STRING",
        f: parse_LABEL
      },
      0x0037: {
        n: "PASSWORD"
      },
      0x0038: {
        n: "LOCKED"
      },
      0x003C: {
        n: "QUERY"
      },
      0x003D: {
        n: "QUERYNAME"
      },
      0x003E: {
        n: "PRINT"
      },
      0x003F: {
        n: "PRINTNAME"
      },
      0x0040: {
        n: "GRAPH2"
      },
      0x0041: {
        n: "GRAPHNAME"
      },
      0x0042: {
        n: "ZOOM"
      },
      0x0043: {
        n: "SYMSPLIT"
      },
      0x0044: {
        n: "NSROWS"
      },
      0x0045: {
        n: "NSCOLS"
      },
      0x0046: {
        n: "RULER"
      },
      0x0047: {
        n: "NNAME"
      },
      0x0048: {
        n: "ACOMM"
      },
      0x0049: {
        n: "AMACRO"
      },
      0x004A: {
        n: "PARSE"
      },
      0x00FF: {
        n: "",
        f: parsenoop
      }
    };
    var WK3Enum = {
      0x0000: {
        n: "BOF"
      },
      0x0001: {
        n: "EOF"
      },
      0x0003: {
        n: "??"
      },
      0x0004: {
        n: "??"
      },
      0x0005: {
        n: "??"
      },
      0x0006: {
        n: "??"
      },
      0x0007: {
        n: "??"
      },
      0x0009: {
        n: "??"
      },
      0x000a: {
        n: "??"
      },
      0x000b: {
        n: "??"
      },
      0x000c: {
        n: "??"
      },
      0x000e: {
        n: "??"
      },
      0x000f: {
        n: "??"
      },
      0x0010: {
        n: "??"
      },
      0x0011: {
        n: "??"
      },
      0x0012: {
        n: "??"
      },
      0x0013: {
        n: "??"
      },
      0x0015: {
        n: "??"
      },
      0x0016: {
        n: "LABEL16",
        f: parse_LABEL_16
      },
      0x0017: {
        n: "NUMBER17",
        f: parse_NUMBER_17
      },
      0x0018: {
        n: "NUMBER18",
        f: parse_NUMBER_18
      },
      0x0019: {
        n: "FORMULA19",
        f: parse_FORMULA_19
      },
      0x001a: {
        n: "??"
      },
      0x001b: {
        n: "??"
      },
      0x001c: {
        n: "??"
      },
      0x001d: {
        n: "??"
      },
      0x001e: {
        n: "??"
      },
      0x001f: {
        n: "??"
      },
      0x0021: {
        n: "??"
      },
      0x0025: {
        n: "NUMBER25",
        f: parse_NUMBER_25
      },
      0x0027: {
        n: "NUMBER27",
        f: parse_NUMBER_27
      },
      0x0028: {
        n: "FORMULA28",
        f: parse_FORMULA_28
      },
      0x00FF: {
        n: "",
        f: parsenoop
      }
    };
    return {
      to_workbook: lotus_to_workbook
    };
  }();
  /* 18.4.7 rPr CT_RPrElt */


  function parse_rpr(rpr) {
    var font = {},
        m = rpr.match(tagregex),
        i = 0;
    var pass = false;
    if (m) for (; i != m.length; ++i) {
      var y = parsexmltag(m[i]);

      switch (y[0].replace(/\w*:/g, "")) {
        /* 18.8.12 condense CT_BooleanProperty */

        /* ** not required . */
        case '<condense':
          break;

        /* 18.8.17 extend CT_BooleanProperty */

        /* ** not required . */

        case '<extend':
          break;

        /* 18.8.36 shadow CT_BooleanProperty */

        /* ** not required . */

        case '<shadow':
          if (!y.val) break;

        /* falls through */

        case '<shadow>':
        case '<shadow/>':
          font.shadow = 1;
          break;

        case '</shadow>':
          break;

        /* 18.4.1 charset CT_IntProperty TODO */

        case '<charset':
          if (y.val == '1') break;
          font.cp = CS2CP[parseInt(y.val, 10)];
          break;

        /* 18.4.2 outline CT_BooleanProperty TODO */

        case '<outline':
          if (!y.val) break;

        /* falls through */

        case '<outline>':
        case '<outline/>':
          font.outline = 1;
          break;

        case '</outline>':
          break;

        /* 18.4.5 rFont CT_FontName */

        case '<rFont':
          font.name = y.val;
          break;

        /* 18.4.11 sz CT_FontSize */

        case '<sz':
          font.sz = y.val;
          break;

        /* 18.4.10 strike CT_BooleanProperty */

        case '<strike':
          if (!y.val) break;

        /* falls through */

        case '<strike>':
        case '<strike/>':
          font.strike = 1;
          break;

        case '</strike>':
          break;

        /* 18.4.13 u CT_UnderlineProperty */

        case '<u':
          if (!y.val) break;

          switch (y.val) {
            case 'double':
              font.uval = "double";
              break;

            case 'singleAccounting':
              font.uval = "single-accounting";
              break;

            case 'doubleAccounting':
              font.uval = "double-accounting";
              break;
          }

        /* falls through */

        case '<u>':
        case '<u/>':
          font.u = 1;
          break;

        case '</u>':
          break;

        /* 18.8.2 b */

        case '<b':
          if (y.val == '0') break;

        /* falls through */

        case '<b>':
        case '<b/>':
          font.b = 1;
          break;

        case '</b>':
          break;

        /* 18.8.26 i */

        case '<i':
          if (y.val == '0') break;

        /* falls through */

        case '<i>':
        case '<i/>':
          font.i = 1;
          break;

        case '</i>':
          break;

        /* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */

        case '<color':
          if (y.rgb) font.color = y.rgb.slice(2, 8);
          break;

        /* 18.8.18 family ST_FontFamily */

        case '<family':
          font.family = y.val;
          break;

        /* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */

        case '<vertAlign':
          font.valign = y.val;
          break;

        /* 18.8.35 scheme CT_FontScheme TODO */

        case '<scheme':
          break;

        /* 18.2.10 extLst CT_ExtensionList ? */

        case '<extLst':
        case '<extLst>':
        case '</extLst>':
          break;

        case '<ext':
          pass = true;
          break;

        case '</ext>':
          pass = false;
          break;

        default:
          if (y[0].charCodeAt(1) !== 47 && !pass) throw new Error('Unrecognized rich format ' + y[0]);
      }
    }
    return font;
  }

  var parse_rs = function () {
    var tregex = matchtag("t"),
        rpregex = matchtag("rPr");
    /* 18.4.4 r CT_RElt */

    function parse_r(r) {
      /* 18.4.12 t ST_Xstring */
      var t = r.match(tregex)
      /*, cp = 65001*/
      ;
      if (!t) return {
        t: "s",
        v: ""
      };
      var o = {
        t: 's',
        v: unescapexml(t[1])
      };
      var rpr = r.match(rpregex);
      if (rpr) o.s = parse_rpr(rpr[1]);
      return o;
    }

    var rregex = /<(?:\w+:)?r>/g,
        rend = /<\/(?:\w+:)?r>/;
    return function parse_rs(rs) {
      return rs.replace(rregex, "").split(rend).map(parse_r).filter(function (r) {
        return r.v;
      });
    };
  }();
  /* Parse a list of <r> tags */


  var rs_to_html = function parse_rs_factory() {
    var nlregex = /(\r\n|\n)/g;

    function parse_rpr2(font, intro, outro) {
      var style = [];
      if (font.u) style.push("text-decoration: underline;");
      if (font.uval) style.push("text-underline-style:" + font.uval + ";");
      if (font.sz) style.push("font-size:" + font.sz + "pt;");
      if (font.outline) style.push("text-effect: outline;");
      if (font.shadow) style.push("text-shadow: auto;");
      intro.push('<span style="' + style.join("") + '">');

      if (font.b) {
        intro.push("<b>");
        outro.push("</b>");
      }

      if (font.i) {
        intro.push("<i>");
        outro.push("</i>");
      }

      if (font.strike) {
        intro.push("<s>");
        outro.push("</s>");
      }

      var align = font.valign || "";
      if (align == "superscript" || align == "super") align = "sup";else if (align == "subscript") align = "sub";

      if (align != "") {
        intro.push("<" + align + ">");
        outro.push("</" + align + ">");
      }

      outro.push("</span>");
      return font;
    }
    /* 18.4.4 r CT_RElt */


    function r_to_html(r) {
      var terms = [[], r.v, []];
      if (!r.v) return "";
      if (r.s) parse_rpr2(r.s, terms[0], terms[2]);
      return terms[0].join("") + terms[1].replace(nlregex, '<br/>') + terms[2].join("");
    }

    return function parse_rs(rs) {
      return rs.map(r_to_html).join("");
    };
  }();
  /* 18.4.8 si CT_Rst */


  var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g,
      sirregex = /<(?:\w+:)?r>/;
  var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;

  function parse_si(x, opts) {
    var html = opts ? opts.cellHTML : true;
    var z = {};
    if (!x) return {
      t: ""
    }; //var y;

    /* 18.4.12 t ST_Xstring (Plaintext String) */
    // TODO: is whitespace actually valid here?

    if (x.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
      z.t = unescapexml(utf8read(x.slice(x.indexOf(">") + 1).split(/<\/(?:\w+:)?t>/)[0] || ""));
      z.r = utf8read(x);
      if (html) z.h = escapehtml(z.t);
    }
    /* 18.4.4 r CT_RElt (Rich Text Run) */
    else if (
      /*y = */
      x.match(sirregex)) {
        z.r = utf8read(x);
        z.t = unescapexml(utf8read((x.replace(sirphregex, '').match(sitregex) || []).join("").replace(tagregex, "")));
        if (html) z.h = rs_to_html(parse_rs(z.r));
      }
    /* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */

    /* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */


    return z;
  }
  /* 18.4 Shared String Table */


  var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
  var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
  var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;

  function parse_sst_xml(data, opts) {
    var s = [],
        ss = "";
    if (!data) return s;
    /* 18.4.9 sst CT_Sst */

    var sst = data.match(sstr0);

    if (sst) {
      ss = sst[2].replace(sstr1, "").split(sstr2);

      for (var i = 0; i != ss.length; ++i) {
        var o = parse_si(ss[i].trim(), opts);
        if (o != null) s[s.length] = o;
      }

      sst = parsexmltag(sst[1]);
      s.Count = sst.count;
      s.Unique = sst.uniqueCount;
    }

    return s;
  }

  RELS.SST = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings";
  var straywsregex = /^\s|\s$|[\t\n\r]/;

  function write_sst_xml(sst, opts) {
    if (!opts.bookSST) return "";
    var o = [XML_HEADER];
    o[o.length] = writextag('sst', null, {
      xmlns: XMLNS.main[0],
      count: sst.Count,
      uniqueCount: sst.Unique
    });

    for (var i = 0; i != sst.length; ++i) {
      if (sst[i] == null) continue;
      var s = sst[i];
      var sitag = "<si>";
      if (s.r) sitag += s.r;else {
        sitag += "<t";
        if (!s.t) s.t = "";
        if (s.t.match(straywsregex)) sitag += ' xml:space="preserve"';
        sitag += ">" + escapexml(s.t) + "</t>";
      }
      sitag += "</si>";
      o[o.length] = sitag;
    }

    if (o.length > 2) {
      o[o.length] = '</sst>';
      o[1] = o[1].replace("/>", ">");
    }

    return o.join("");
  }
  /* [MS-XLSB] 2.4.221 BrtBeginSst */


  function parse_BrtBeginSst(data) {
    return [data.read_shift(4), data.read_shift(4)];
  }
  /* [MS-XLSB] 2.1.7.45 Shared Strings */


  function parse_sst_bin(data, opts) {
    var s = [];
    var pass = false;
    recordhopper(data, function hopper_sst(val, R_n, RT) {
      switch (RT) {
        case 0x009F:
          /* 'BrtBeginSst' */
          s.Count = val[0];
          s.Unique = val[1];
          break;

        case 0x0013:
          /* 'BrtSSTItem' */
          s.push(val);
          break;

        case 0x00A0:
          /* 'BrtEndSst' */
          return true;

        case 0x0023:
          /* 'BrtFRTBegin' */
          pass = true;
          break;

        case 0x0024:
          /* 'BrtFRTEnd' */
          pass = false;
          break;

        default:
          if (R_n.indexOf("Begin") > 0) {
            /* empty */
          } else if (R_n.indexOf("End") > 0) {
            /* empty */
          }

          if (!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
      }
    });
    return s;
  }

  function write_BrtBeginSst(sst, o) {
    if (!o) o = new_buf(8);
    o.write_shift(4, sst.Count);
    o.write_shift(4, sst.Unique);
    return o;
  }

  var write_BrtSSTItem = write_RichStr;

  function write_sst_bin(sst) {
    var ba = buf_array();
    write_record(ba, "BrtBeginSst", write_BrtBeginSst(sst));

    for (var i = 0; i < sst.length; ++i) write_record(ba, "BrtSSTItem", write_BrtSSTItem(sst[i]));
    /* FRTSST */


    write_record(ba, "BrtEndSst");
    return ba.end();
  }

  function _JS2ANSI(str) {
    if (typeof cptable !== 'undefined') return cptable.utils.encode(current_ansi, str);
    var o = [],
        oo = str.split("");

    for (var i = 0; i < oo.length; ++i) o[i] = oo[i].charCodeAt(0);

    return o;
  }
  /* [MS-OFFCRYPTO] 2.1.4 Version */


  function parse_CRYPTOVersion(blob, length) {
    var o = {};
    o.Major = blob.read_shift(2);
    o.Minor = blob.read_shift(2);
    if (length >= 4) blob.l += length - 4;
    return o;
  }
  /* [MS-OFFCRYPTO] 2.1.5 DataSpaceVersionInfo */


  function parse_DataSpaceVersionInfo(blob) {
    var o = {};
    o.id = blob.read_shift(0, 'lpp4');
    o.R = parse_CRYPTOVersion(blob, 4);
    o.U = parse_CRYPTOVersion(blob, 4);
    o.W = parse_CRYPTOVersion(blob, 4);
    return o;
  }
  /* [MS-OFFCRYPTO] 2.1.6.1 DataSpaceMapEntry Structure */


  function parse_DataSpaceMapEntry(blob) {
    var len = blob.read_shift(4);
    var end = blob.l + len - 4;
    var o = {};
    var cnt = blob.read_shift(4);
    var comps = [];
    /* [MS-OFFCRYPTO] 2.1.6.2 DataSpaceReferenceComponent Structure */

    while (cnt-- > 0) comps.push({
      t: blob.read_shift(4),
      v: blob.read_shift(0, 'lpp4')
    });

    o.name = blob.read_shift(0, 'lpp4');
    o.comps = comps;
    if (blob.l != end) throw new Error("Bad DataSpaceMapEntry: " + blob.l + " != " + end);
    return o;
  }
  /* [MS-OFFCRYPTO] 2.1.6 DataSpaceMap */


  function parse_DataSpaceMap(blob) {
    var o = [];
    blob.l += 4; // must be 0x8

    var cnt = blob.read_shift(4);

    while (cnt-- > 0) o.push(parse_DataSpaceMapEntry(blob));

    return o;
  }
  /* [MS-OFFCRYPTO] 2.1.7 DataSpaceDefinition */


  function parse_DataSpaceDefinition(blob) {
    var o = [];
    blob.l += 4; // must be 0x8

    var cnt = blob.read_shift(4);

    while (cnt-- > 0) o.push(blob.read_shift(0, 'lpp4'));

    return o;
  }
  /* [MS-OFFCRYPTO] 2.1.8 DataSpaceDefinition */


  function parse_TransformInfoHeader(blob) {
    var o = {};
    /*var len = */

    blob.read_shift(4);
    blob.l += 4; // must be 0x1

    o.id = blob.read_shift(0, 'lpp4');
    o.name = blob.read_shift(0, 'lpp4');
    o.R = parse_CRYPTOVersion(blob, 4);
    o.U = parse_CRYPTOVersion(blob, 4);
    o.W = parse_CRYPTOVersion(blob, 4);
    return o;
  }

  function parse_Primary(blob) {
    /* [MS-OFFCRYPTO] 2.2.6 IRMDSTransformInfo */
    var hdr = parse_TransformInfoHeader(blob);
    /* [MS-OFFCRYPTO] 2.1.9 EncryptionTransformInfo */

    hdr.ename = blob.read_shift(0, '8lpp4');
    hdr.blksz = blob.read_shift(4);
    hdr.cmode = blob.read_shift(4);
    if (blob.read_shift(4) != 0x04) throw new Error("Bad !Primary record");
    return hdr;
  }
  /* [MS-OFFCRYPTO] 2.3.2 Encryption Header */


  function parse_EncryptionHeader(blob, length) {
    var tgt = blob.l + length;
    var o = {};
    o.Flags = blob.read_shift(4) & 0x3F;
    blob.l += 4;
    o.AlgID = blob.read_shift(4);
    var valid = false;

    switch (o.AlgID) {
      case 0x660E:
      case 0x660F:
      case 0x6610:
        valid = o.Flags == 0x24;
        break;

      case 0x6801:
        valid = o.Flags == 0x04;
        break;

      case 0:
        valid = o.Flags == 0x10 || o.Flags == 0x04 || o.Flags == 0x24;
        break;

      default:
        throw 'Unrecognized encryption algorithm: ' + o.AlgID;
    }

    if (!valid) throw new Error("Encryption Flags/AlgID mismatch");
    o.AlgIDHash = blob.read_shift(4);
    o.KeySize = blob.read_shift(4);
    o.ProviderType = blob.read_shift(4);
    blob.l += 8;
    o.CSPName = blob.read_shift(tgt - blob.l >> 1, 'utf16le');
    blob.l = tgt;
    return o;
  }
  /* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */


  function parse_EncryptionVerifier(blob, length) {
    var o = {},
        tgt = blob.l + length;
    blob.l += 4; // SaltSize must be 0x10

    o.Salt = blob.slice(blob.l, blob.l + 16);
    blob.l += 16;
    o.Verifier = blob.slice(blob.l, blob.l + 16);
    blob.l += 16;
    /*var sz = */

    blob.read_shift(4);
    o.VerifierHash = blob.slice(blob.l, tgt);
    blob.l = tgt;
    return o;
  }
  /* [MS-OFFCRYPTO] 2.3.4.* EncryptionInfo Stream */


  function parse_EncryptionInfo(blob) {
    var vers = parse_CRYPTOVersion(blob);

    switch (vers.Minor) {
      case 0x02:
        return [vers.Minor, parse_EncInfoStd(blob, vers)];

      case 0x03:
        return [vers.Minor, parse_EncInfoExt(blob, vers)];

      case 0x04:
        return [vers.Minor, parse_EncInfoAgl(blob, vers)];
    }

    throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
  }
  /* [MS-OFFCRYPTO] 2.3.4.5  EncryptionInfo Stream (Standard Encryption) */


  function parse_EncInfoStd(blob) {
    var flags = blob.read_shift(4);
    if ((flags & 0x3F) != 0x24) throw new Error("EncryptionInfo mismatch");
    var sz = blob.read_shift(4); //var tgt = blob.l + sz;

    var hdr = parse_EncryptionHeader(blob, sz);
    var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
    return {
      t: "Std",
      h: hdr,
      v: verifier
    };
  }
  /* [MS-OFFCRYPTO] 2.3.4.6  EncryptionInfo Stream (Extensible Encryption) */


  function parse_EncInfoExt() {
    throw new Error("File is password-protected: ECMA-376 Extensible");
  }
  /* [MS-OFFCRYPTO] 2.3.4.10 EncryptionInfo Stream (Agile Encryption) */


  function parse_EncInfoAgl(blob) {
    var KeyData = ["saltSize", "blockSize", "keyBits", "hashSize", "cipherAlgorithm", "cipherChaining", "hashAlgorithm", "saltValue"];
    blob.l += 4;
    var xml = blob.read_shift(blob.length - blob.l, 'utf8');
    var o = {};
    xml.replace(tagregex, function xml_agile(x) {
      var y = parsexmltag(x);

      switch (strip_ns(y[0])) {
        case '<?xml':
          break;

        case '<encryption':
        case '</encryption>':
          break;

        case '<keyData':
          KeyData.forEach(function (k) {
            o[k] = y[k];
          });
          break;

        case '<dataIntegrity':
          o.encryptedHmacKey = y.encryptedHmacKey;
          o.encryptedHmacValue = y.encryptedHmacValue;
          break;

        case '<keyEncryptors>':
        case '<keyEncryptors':
          o.encs = [];
          break;

        case '</keyEncryptors>':
          break;

        case '<keyEncryptor':
          o.uri = y.uri;
          break;

        case '</keyEncryptor>':
          break;

        case '<encryptedKey':
          o.encs.push(y);
          break;

        default:
          throw y[0];
      }
    });
    return o;
  }
  /* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */


  function parse_RC4CryptoHeader(blob, length) {
    var o = {};
    var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
    length -= 4;
    if (vers.Minor != 2) throw new Error('unrecognized minor version code: ' + vers.Minor);
    if (vers.Major > 4 || vers.Major < 2) throw new Error('unrecognized major version code: ' + vers.Major);
    o.Flags = blob.read_shift(4);
    length -= 4;
    var sz = blob.read_shift(4);
    length -= 4;
    o.EncryptionHeader = parse_EncryptionHeader(blob, sz);
    length -= sz;
    o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
    return o;
  }
  /* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */


  function parse_RC4Header(blob) {
    var o = {};
    var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
    if (vers.Major != 1 || vers.Minor != 1) throw 'unrecognized version code ' + vers.Major + ' : ' + vers.Minor;
    o.Salt = blob.read_shift(16);
    o.EncryptedVerifier = blob.read_shift(16);
    o.EncryptedVerifierHash = blob.read_shift(16);
    return o;
  }
  /* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */


  function crypto_CreatePasswordVerifier_Method1(Password) {
    var Verifier = 0x0000,
        PasswordArray;

    var PasswordDecoded = _JS2ANSI(Password);

    var len = PasswordDecoded.length + 1,
        i,
        PasswordByte;
    var Intermediate1, Intermediate2, Intermediate3;
    PasswordArray = new_raw_buf(len);
    PasswordArray[0] = PasswordDecoded.length;

    for (i = 1; i != len; ++i) PasswordArray[i] = PasswordDecoded[i - 1];

    for (i = len - 1; i >= 0; --i) {
      PasswordByte = PasswordArray[i];
      Intermediate1 = (Verifier & 0x4000) === 0x0000 ? 0 : 1;
      Intermediate2 = Verifier << 1 & 0x7FFF;
      Intermediate3 = Intermediate1 | Intermediate2;
      Verifier = Intermediate3 ^ PasswordByte;
    }

    return Verifier ^ 0xCE4B;
  }
  /* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */


  var crypto_CreateXorArray_Method1 = function () {
    var PadArray = [0xBB, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xB9, 0x80, 0x00, 0xBE, 0x0F, 0x00, 0xBF, 0x0F, 0x00];
    var InitialCode = [0xE1F0, 0x1D0F, 0xCC9C, 0x84C0, 0x110C, 0x0E10, 0xF1CE, 0x313E, 0x1872, 0xE139, 0xD40F, 0x84F9, 0x280C, 0xA96A, 0x4EC3];
    var XorMatrix = [0xAEFC, 0x4DD9, 0x9BB2, 0x2745, 0x4E8A, 0x9D14, 0x2A09, 0x7B61, 0xF6C2, 0xFDA5, 0xEB6B, 0xC6F7, 0x9DCF, 0x2BBF, 0x4563, 0x8AC6, 0x05AD, 0x0B5A, 0x16B4, 0x2D68, 0x5AD0, 0x0375, 0x06EA, 0x0DD4, 0x1BA8, 0x3750, 0x6EA0, 0xDD40, 0xD849, 0xA0B3, 0x5147, 0xA28E, 0x553D, 0xAA7A, 0x44D5, 0x6F45, 0xDE8A, 0xAD35, 0x4A4B, 0x9496, 0x390D, 0x721A, 0xEB23, 0xC667, 0x9CEF, 0x29FF, 0x53FE, 0xA7FC, 0x5FD9, 0x47D3, 0x8FA6, 0x0F6D, 0x1EDA, 0x3DB4, 0x7B68, 0xF6D0, 0xB861, 0x60E3, 0xC1C6, 0x93AD, 0x377B, 0x6EF6, 0xDDEC, 0x45A0, 0x8B40, 0x06A1, 0x0D42, 0x1A84, 0x3508, 0x6A10, 0xAA51, 0x4483, 0x8906, 0x022D, 0x045A, 0x08B4, 0x1168, 0x76B4, 0xED68, 0xCAF1, 0x85C3, 0x1BA7, 0x374E, 0x6E9C, 0x3730, 0x6E60, 0xDCC0, 0xA9A1, 0x4363, 0x86C6, 0x1DAD, 0x3331, 0x6662, 0xCCC4, 0x89A9, 0x0373, 0x06E6, 0x0DCC, 0x1021, 0x2042, 0x4084, 0x8108, 0x1231, 0x2462, 0x48C4];

    var Ror = function (Byte) {
      return (Byte / 2 | Byte * 128) & 0xFF;
    };

    var XorRor = function (byte1, byte2) {
      return Ror(byte1 ^ byte2);
    };

    var CreateXorKey_Method1 = function (Password) {
      var XorKey = InitialCode[Password.length - 1];
      var CurrentElement = 0x68;

      for (var i = Password.length - 1; i >= 0; --i) {
        var Char = Password[i];

        for (var j = 0; j != 7; ++j) {
          if (Char & 0x40) XorKey ^= XorMatrix[CurrentElement];
          Char *= 2;
          --CurrentElement;
        }
      }

      return XorKey;
    };

    return function (password) {
      var Password = _JS2ANSI(password);

      var XorKey = CreateXorKey_Method1(Password);
      var Index = Password.length;
      var ObfuscationArray = new_raw_buf(16);

      for (var i = 0; i != 16; ++i) ObfuscationArray[i] = 0x00;

      var Temp, PasswordLastChar, PadIndex;

      if ((Index & 1) === 1) {
        Temp = XorKey >> 8;
        ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
        --Index;
        Temp = XorKey & 0xFF;
        PasswordLastChar = Password[Password.length - 1];
        ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
      }

      while (Index > 0) {
        --Index;
        Temp = XorKey >> 8;
        ObfuscationArray[Index] = XorRor(Password[Index], Temp);
        --Index;
        Temp = XorKey & 0xFF;
        ObfuscationArray[Index] = XorRor(Password[Index], Temp);
      }

      Index = 15;
      PadIndex = 15 - Password.length;

      while (PadIndex > 0) {
        Temp = XorKey >> 8;
        ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
        --Index;
        --PadIndex;
        Temp = XorKey & 0xFF;
        ObfuscationArray[Index] = XorRor(Password[Index], Temp);
        --Index;
        --PadIndex;
      }

      return ObfuscationArray;
    };
  }();
  /* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */


  var crypto_DecryptData_Method1 = function (password, Data, XorArrayIndex, XorArray, O) {
    /* If XorArray is set, use it; if O is not set, make changes in-place */
    if (!O) O = Data;
    if (!XorArray) XorArray = crypto_CreateXorArray_Method1(password);
    var Index, Value;

    for (Index = 0; Index != Data.length; ++Index) {
      Value = Data[Index];
      Value ^= XorArray[XorArrayIndex];
      Value = (Value >> 5 | Value << 3) & 0xFF;
      O[Index] = Value;
      ++XorArrayIndex;
    }

    return [O, XorArrayIndex, XorArray];
  };

  var crypto_MakeXorDecryptor = function (password) {
    var XorArrayIndex = 0,
        XorArray = crypto_CreateXorArray_Method1(password);
    return function (Data) {
      var O = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
      XorArrayIndex = O[1];
      return O[0];
    };
  };
  /* 2.5.343 */


  function parse_XORObfuscation(blob, length, opts, out) {
    var o = {
      key: parseuint16(blob),
      verificationBytes: parseuint16(blob)
    };
    if (opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
    out.valid = o.verificationBytes === o.verifier;
    if (out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);
    return o;
  }
  /* 2.4.117 */


  function parse_FilePassHeader(blob, length, oo) {
    var o = oo || {};
    o.Info = blob.read_shift(2);
    blob.l -= 2;
    if (o.Info === 1) o.Data = parse_RC4Header(blob, length);else o.Data = parse_RC4CryptoHeader(blob, length);
    return o;
  }

  function parse_FilePass(blob, length, opts) {
    var o = {
      Type: opts.biff >= 8 ? blob.read_shift(2) : 0
    };
    /* wEncryptionType */

    if (o.Type) parse_FilePassHeader(blob, length - 2, o);else parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o);
    return o;
  }

  var RTF = function () {
    function rtf_to_sheet(d, opts) {
      switch (opts.type) {
        case 'base64':
          return rtf_to_sheet_str(Base64.decode(d), opts);

        case 'binary':
          return rtf_to_sheet_str(d, opts);

        case 'buffer':
          return rtf_to_sheet_str(d.toString('binary'), opts);

        case 'array':
          return rtf_to_sheet_str(cc2str(d), opts);
      }

      throw new Error("Unrecognized type " + opts.type);
    }

    function rtf_to_sheet_str(str, opts) {
      var o = opts || {};
      var ws = o.dense ? [] : {};
      var range = {
        s: {
          c: 0,
          r: 0
        },
        e: {
          c: 0,
          r: 0
        }
      }; // TODO: parse

      if (!str.match(/\\trowd/)) throw new Error("RTF missing table");
      ws['!ref'] = encode_range(range);
      return ws;
    }

    function rtf_to_workbook(d, opts) {
      return sheet_to_workbook(rtf_to_sheet(d, opts), opts);
    }
    /* TODO: this is a stub */


    function sheet_to_rtf(ws) {
      var o = ["{\\rtf1\\ansi"];
      var r = safe_decode_range(ws['!ref']),
          cell;
      var dense = Array.isArray(ws);

      for (var R = r.s.r; R <= r.e.r; ++R) {
        o.push("\\trowd\\trautofit1");

        for (var C = r.s.c; C <= r.e.c; ++C) o.push("\\cellx" + (C + 1));

        o.push("\\pard\\intbl");

        for (C = r.s.c; C <= r.e.c; ++C) {
          var coord = encode_cell({
            r: R,
            c: C
          });
          cell = dense ? (ws[R] || [])[C] : ws[coord];
          if (!cell || cell.v == null && (!cell.f || cell.F)) continue;
          o.push(" " + (cell.w || (format_cell(cell), cell.w)));
          o.push("\\cell");
        }

        o.push("\\pard\\intbl\\row");
      }

      return o.join("") + "}";
    }

    return {
      to_workbook: rtf_to_workbook,
      to_sheet: rtf_to_sheet,
      from_sheet: sheet_to_rtf
    };
  }();

  function hex2RGB(h) {
    var o = h.slice(h[0] === "#" ? 1 : 0).slice(0, 6);
    return [parseInt(o.slice(0, 2), 16), parseInt(o.slice(2, 4), 16), parseInt(o.slice(4, 6), 16)];
  }

  function rgb2Hex(rgb) {
    for (var i = 0, o = 1; i != 3; ++i) o = o * 256 + (rgb[i] > 255 ? 255 : rgb[i] < 0 ? 0 : rgb[i]);

    return o.toString(16).toUpperCase().slice(1);
  }

  function rgb2HSL(rgb) {
    var R = rgb[0] / 255,
        G = rgb[1] / 255,
        B = rgb[2] / 255;
    var M = Math.max(R, G, B),
        m = Math.min(R, G, B),
        C = M - m;
    if (C === 0) return [0, 0, R];
    var H6 = 0,
        S = 0,
        L2 = M + m;
    S = C / (L2 > 1 ? 2 - L2 : L2);

    switch (M) {
      case R:
        H6 = ((G - B) / C + 6) % 6;
        break;

      case G:
        H6 = (B - R) / C + 2;
        break;

      case B:
        H6 = (R - G) / C + 4;
        break;
    }

    return [H6 / 6, S, L2 / 2];
  }

  function hsl2RGB(hsl) {
    var H = hsl[0],
        S = hsl[1],
        L = hsl[2];
    var C = S * 2 * (L < 0.5 ? L : 1 - L),
        m = L - C / 2;
    var rgb = [m, m, m],
        h6 = 6 * H;
    var X;
    if (S !== 0) switch (h6 | 0) {
      case 0:
      case 6:
        X = C * h6;
        rgb[0] += C;
        rgb[1] += X;
        break;

      case 1:
        X = C * (2 - h6);
        rgb[0] += X;
        rgb[1] += C;
        break;

      case 2:
        X = C * (h6 - 2);
        rgb[1] += C;
        rgb[2] += X;
        break;

      case 3:
        X = C * (4 - h6);
        rgb[1] += X;
        rgb[2] += C;
        break;

      case 4:
        X = C * (h6 - 4);
        rgb[2] += C;
        rgb[0] += X;
        break;

      case 5:
        X = C * (6 - h6);
        rgb[2] += X;
        rgb[0] += C;
        break;
    }

    for (var i = 0; i != 3; ++i) rgb[i] = Math.round(rgb[i] * 255);

    return rgb;
  }
  /* 18.8.3 bgColor tint algorithm */


  function rgb_tint(hex, tint) {
    if (tint === 0) return hex;
    var hsl = rgb2HSL(hex2RGB(hex));
    if (tint < 0) hsl[2] = hsl[2] * (1 + tint);else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
    return rgb2Hex(hsl2RGB(hsl));
  }
  /* 18.3.1.13 width calculations */

  /* [MS-OI29500] 2.1.595 Column Width & Formatting */


  var DEF_MDW = 6,
      MAX_MDW = 15,
      MIN_MDW = 1,
      MDW = DEF_MDW;

  function width2px(width) {
    return Math.floor((width + Math.round(128 / MDW) / 256) * MDW);
  }

  function px2char(px) {
    return Math.floor((px - 5) / MDW * 100 + 0.5) / 100;
  }

  function char2width(chr) {
    return Math.round((chr * MDW + 5) / MDW * 256) / 256;
  } //function px2char_(px) { return (((px - 5)/MDW * 100 + 0.5))/100; }
  //function char2width_(chr) { return (((chr * MDW + 5)/MDW*256))/256; }


  function cycle_width(collw) {
    return char2width(px2char(width2px(collw)));
  }
  /* XLSX/XLSB/XLS specify width in units of MDW */


  function find_mdw_colw(collw) {
    var delta = Math.abs(collw - cycle_width(collw)),
        _MDW = MDW;
    if (delta > 0.005) for (MDW = MIN_MDW; MDW < MAX_MDW; ++MDW) if (Math.abs(collw - cycle_width(collw)) <= delta) {
      delta = Math.abs(collw - cycle_width(collw));
      _MDW = MDW;
    }
    MDW = _MDW;
  }
  /* XLML specifies width in terms of pixels */

  /*function find_mdw_wpx(wpx) {
  	var delta = Infinity, guess = 0, _MDW = MIN_MDW;
  	for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) {
  		guess = char2width_(px2char_(wpx))*256;
  		guess = (guess) % 1;
  		if(guess > 0.5) guess--;
  		if(Math.abs(guess) < delta) { delta = Math.abs(guess); _MDW = MDW; }
  	}
  	MDW = _MDW;
  }*/


  function process_col(coll) {
    if (coll.width) {
      coll.wpx = width2px(coll.width);
      coll.wch = px2char(coll.wpx);
      coll.MDW = MDW;
    } else if (coll.wpx) {
      coll.wch = px2char(coll.wpx);
      coll.width = char2width(coll.wch);
      coll.MDW = MDW;
    } else if (typeof coll.wch == 'number') {
      coll.width = char2width(coll.wch);
      coll.wpx = width2px(coll.width);
      coll.MDW = MDW;
    }

    if (coll.customWidth) delete coll.customWidth;
  }

  var DEF_PPI = 96,
      PPI = DEF_PPI;

  function px2pt(px) {
    return px * 96 / PPI;
  }

  function pt2px(pt) {
    return pt * PPI / 96;
  }
  /* [MS-EXSPXML3] 2.4.54 ST_enmPattern */


  var XLMLPatternTypeMap = {
    "None": "none",
    "Solid": "solid",
    "Gray50": "mediumGray",
    "Gray75": "darkGray",
    "Gray25": "lightGray",
    "HorzStripe": "darkHorizontal",
    "VertStripe": "darkVertical",
    "ReverseDiagStripe": "darkDown",
    "DiagStripe": "darkUp",
    "DiagCross": "darkGrid",
    "ThickDiagCross": "darkTrellis",
    "ThinHorzStripe": "lightHorizontal",
    "ThinVertStripe": "lightVertical",
    "ThinReverseDiagStripe": "lightDown",
    "ThinHorzCross": "lightGrid"
  };
  /* 18.8.5 borders CT_Borders */

  function parse_borders(t, styles, themes, opts) {
    styles.Borders = [];
    var border = {};
    var pass = false;
    (t[0].match(tagregex) || []).forEach(function (x) {
      var y = parsexmltag(x);

      switch (strip_ns(y[0])) {
        case '<borders':
        case '<borders>':
        case '</borders>':
          break;

        /* 18.8.4 border CT_Border */

        case '<border':
        case '<border>':
        case '<border/>':
          border = {};
          if (y.diagonalUp) border.diagonalUp = parsexmlbool(y.diagonalUp);
          if (y.diagonalDown) border.diagonalDown = parsexmlbool(y.diagonalDown);
          styles.Borders.push(border);
          break;

        case '</border>':
          break;

        /* note: not in spec, appears to be CT_BorderPr */

        case '<left/>':
          break;

        case '<left':
        case '<left>':
          break;

        case '</left>':
          break;

        /* note: not in spec, appears to be CT_BorderPr */

        case '<right/>':
          break;

        case '<right':
        case '<right>':
          break;

        case '</right>':
          break;

        /* 18.8.43 top CT_BorderPr */

        case '<top/>':
          break;

        case '<top':
        case '<top>':
          break;

        case '</top>':
          break;

        /* 18.8.6 bottom CT_BorderPr */

        case '<bottom/>':
          break;

        case '<bottom':
        case '<bottom>':
          break;

        case '</bottom>':
          break;

        /* 18.8.13 diagonal CT_BorderPr */

        case '<diagonal':
        case '<diagonal>':
        case '<diagonal/>':
          break;

        case '</diagonal>':
          break;

        /* 18.8.25 horizontal CT_BorderPr */

        case '<horizontal':
        case '<horizontal>':
        case '<horizontal/>':
          break;

        case '</horizontal>':
          break;

        /* 18.8.44 vertical CT_BorderPr */

        case '<vertical':
        case '<vertical>':
        case '<vertical/>':
          break;

        case '</vertical>':
          break;

        /* 18.8.37 start CT_BorderPr */

        case '<start':
        case '<start>':
        case '<start/>':
          break;

        case '</start>':
          break;

        /* 18.8.16 end CT_BorderPr */

        case '<end':
        case '<end>':
        case '<end/>':
          break;

        case '</end>':
          break;

        /* 18.8.? color CT_Color */

        case '<color':
        case '<color>':
          break;

        case '<color/>':
        case '</color>':
          break;

        /* 18.2.10 extLst CT_ExtensionList ? */

        case '<extLst':
        case '<extLst>':
        case '</extLst>':
          break;

        case '<ext':
          pass = true;
          break;

        case '</ext>':
          pass = false;
          break;

        default:
          if (opts && opts.WTF) {
            if (!pass) throw new Error('unrecognized ' + y[0] + ' in borders');
          }

      }
    });
  }
  /* 18.8.21 fills CT_Fills */


  function parse_fills(t, styles, themes, opts) {
    styles.Fills = [];
    var fill = {};
    var pass = false;
    (t[0].match(tagregex) || []).forEach(function (x) {
      var y = parsexmltag(x);

      switch (strip_ns(y[0])) {
        case '<fills':
        case '<fills>':
        case '</fills>':
          break;

        /* 18.8.20 fill CT_Fill */

        case '<fill>':
        case '<fill':
        case '<fill/>':
          fill = {};
          styles.Fills.push(fill);
          break;

        case '</fill>':
          break;

        /* 18.8.24 gradientFill CT_GradientFill */

        case '<gradientFill>':
          break;

        case '<gradientFill':
        case '</gradientFill>':
          styles.Fills.push(fill);
          fill = {};
          break;

        /* 18.8.32 patternFill CT_PatternFill */

        case '<patternFill':
        case '<patternFill>':
          if (y.patternType) fill.patternType = y.patternType;
          break;

        case '<patternFill/>':
        case '</patternFill>':
          break;

        /* 18.8.3 bgColor CT_Color */

        case '<bgColor':
          if (!fill.bgColor) fill.bgColor = {};
          if (y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);
          if (y.theme) fill.bgColor.theme = parseInt(y.theme, 10);
          if (y.tint) fill.bgColor.tint = parseFloat(y.tint);
          /* Excel uses ARGB strings */

          if (y.rgb) fill.bgColor.rgb = y.rgb.slice(-6);
          break;

        case '<bgColor/>':
        case '</bgColor>':
          break;

        /* 18.8.19 fgColor CT_Color */

        case '<fgColor':
          if (!fill.fgColor) fill.fgColor = {};
          if (y.theme) fill.fgColor.theme = parseInt(y.theme, 10);
          if (y.tint) fill.fgColor.tint = parseFloat(y.tint);
          /* Excel uses ARGB strings */

          if (y.rgb != null) fill.fgColor.rgb = y.rgb.slice(-6);
          break;

        case '<fgColor/>':
        case '</fgColor>':
          break;

        /* 18.8.38 stop CT_GradientStop */

        case '<stop':
        case '<stop/>':
          break;

        case '</stop>':
          break;

        /* 18.8.? color CT_Color */

        case '<color':
        case '<color/>':
          break;

        case '</color>':
          break;

        /* 18.2.10 extLst CT_ExtensionList ? */

        case '<extLst':
        case '<extLst>':
        case '</extLst>':
          break;

        case '<ext':
          pass = true;
          break;

        case '</ext>':
          pass = false;
          break;

        default:
          if (opts && opts.WTF) {
            if (!pass) throw new Error('unrecognized ' + y[0] + ' in fills');
          }

      }
    });
  }
  /* 18.8.23 fonts CT_Fonts */


  function parse_fonts(t, styles, themes, opts) {
    styles.Fonts = [];
    var font = {};
    var pass = false;
    (t[0].match(tagregex) || []).forEach(function (x) {
      var y = parsexmltag(x);

      switch (strip_ns(y[0])) {
        case '<fonts':
        case '<fonts>':
        case '</fonts>':
          break;

        /* 18.8.22 font CT_Font */

        case '<font':
        case '<font>':
          break;

        case '</font>':
        case '<font/>':
          styles.Fonts.push(font);
          font = {};
          break;

        /* 18.8.29 name CT_FontName */

        case '<name':
          if (y.val) font.name = utf8read(y.val);
          break;

        case '<name/>':
        case '</name>':
          break;

        /* 18.8.2  b CT_BooleanProperty */

        case '<b':
          font.bold = y.val ? parsexmlbool(y.val) : 1;
          break;

        case '<b/>':
          font.bold = 1;
          break;

        /* 18.8.26 i CT_BooleanProperty */

        case '<i':
          font.italic = y.val ? parsexmlbool(y.val) : 1;
          break;

        case '<i/>':
          font.italic = 1;
          break;

        /* 18.4.13 u CT_UnderlineProperty */

        case '<u':
          switch (y.val) {
            case "none":
              font.underline = 0x00;
              break;

            case "single":
              font.underline = 0x01;
              break;

            case "double":
              font.underline = 0x02;
              break;

            case "singleAccounting":
              font.underline = 0x21;
              break;

            case "doubleAccounting":
              font.underline = 0x22;
              break;
          }

          break;

        case '<u/>':
          font.underline = 1;
          break;

        /* 18.4.10 strike CT_BooleanProperty */

        case '<strike':
          font.strike = y.val ? parsexmlbool(y.val) : 1;
          break;

        case '<strike/>':
          font.strike = 1;
          break;

        /* 18.4.2  outline CT_BooleanProperty */

        case '<outline':
          font.outline = y.val ? parsexmlbool(y.val) : 1;
          break;

        case '<outline/>':
          font.outline = 1;
          break;

        /* 18.8.36 shadow CT_BooleanProperty */

        case '<shadow':
          font.shadow = y.val ? parsexmlbool(y.val) : 1;
          break;

        case '<shadow/>':
          font.shadow = 1;
          break;

        /* 18.8.12 condense CT_BooleanProperty */

        case '<condense':
          font.condense = y.val ? parsexmlbool(y.val) : 1;
          break;

        case '<condense/>':
          font.condense = 1;
          break;

        /* 18.8.17 extend CT_BooleanProperty */

        case '<extend':
          font.extend = y.val ? parsexmlbool(y.val) : 1;
          break;

        case '<extend/>':
          font.extend = 1;
          break;

        /* 18.4.11 sz CT_FontSize */

        case '<sz':
          if (y.val) font.sz = +y.val;
          break;

        case '<sz/>':
        case '</sz>':
          break;

        /* 18.4.14 vertAlign CT_VerticalAlignFontProperty */

        case '<vertAlign':
          if (y.val) font.vertAlign = y.val;
          break;

        case '<vertAlign/>':
        case '</vertAlign>':
          break;

        /* 18.8.18 family CT_FontFamily */

        case '<family':
          if (y.val) font.family = parseInt(y.val, 10);
          break;

        case '<family/>':
        case '</family>':
          break;

        /* 18.8.35 scheme CT_FontScheme */

        case '<scheme':
          if (y.val) font.scheme = y.val;
          break;

        case '<scheme/>':
        case '</scheme>':
          break;

        /* 18.4.1 charset CT_IntProperty */

        case '<charset':
          if (y.val == '1') break;
          y.codepage = CS2CP[parseInt(y.val, 10)];
          break;

        /* 18.?.? color CT_Color */

        case '<color':
          if (!font.color) font.color = {};
          if (y.auto) font.color.auto = parsexmlbool(y.auto);
          if (y.rgb) font.color.rgb = y.rgb.slice(-6);else if (y.indexed) {
            font.color.index = parseInt(y.indexed, 10);
            var icv = XLSIcv[font.color.index];
            if (font.color.index == 81) icv = XLSIcv[1];
            if (!icv) throw new Error(x);
            font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
          } else if (y.theme) {
            font.color.theme = parseInt(y.theme, 10);
            if (y.tint) font.color.tint = parseFloat(y.tint);

            if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {
              font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
            }
          }
          break;

        case '<color/>':
        case '</color>':
          break;

        /* note: sometimes mc:AlternateContent appears bare */

        case '<AlternateContent':
          pass = true;
          break;

        case '</AlternateContent>':
          pass = false;
          break;

        /* 18.2.10 extLst CT_ExtensionList ? */

        case '<extLst':
        case '<extLst>':
        case '</extLst>':
          break;

        case '<ext':
          pass = true;
          break;

        case '</ext>':
          pass = false;
          break;

        default:
          if (opts && opts.WTF) {
            if (!pass) throw new Error('unrecognized ' + y[0] + ' in fonts');
          }

      }
    });
  }
  /* 18.8.31 numFmts CT_NumFmts */


  function parse_numFmts(t, styles, opts) {
    styles.NumberFmt = [];
    var k
    /*Array<number>*/
    = keys(SSF._table);

    for (var i = 0; i < k.length; ++i) styles.NumberFmt[k[i]] = SSF._table[k[i]];

    var m = t[0].match(tagregex);
    if (!m) return;

    for (i = 0; i < m.length; ++i) {
      var y = parsexmltag(m[i]);

      switch (strip_ns(y[0])) {
        case '<numFmts':
        case '</numFmts>':
        case '<numFmts/>':
        case '<numFmts>':
          break;

        case '<numFmt':
          {
            var f = unescapexml(utf8read(y.formatCode)),
                j = parseInt(y.numFmtId, 10);
            styles.NumberFmt[j] = f;

            if (j > 0) {
              if (j > 0x188) {
                for (j = 0x188; j > 0x3c; --j) if (styles.NumberFmt[j] == null) break;

                styles.NumberFmt[j] = f;
              }

              SSF.load(f, j);
            }
          }
          break;

        case '</numFmt>':
          break;

        default:
          if (opts.WTF) throw new Error('unrecognized ' + y[0] + ' in numFmts');
      }
    }
  }

  function write_numFmts(NF) {
    var o = ["<numFmts>"];
    [[5, 8], [23, 26], [41, 44], [
    /*63*/
    50,
    /*66],[164,*/
    392]].forEach(function (r) {
      for (var i = r[0]; i <= r[1]; ++i) if (NF[i] != null) o[o.length] = writextag('numFmt', null, {
        numFmtId: i,
        formatCode: escapexml(NF[i])
      });
    });
    if (o.length === 1) return "";
    o[o.length] = "</numFmts>";
    o[0] = writextag('numFmts', null, {
      count: o.length - 2
    }).replace("/>", ">");
    return o.join("");
  }
  /* 18.8.10 cellXfs CT_CellXfs */


  var cellXF_uint = ["numFmtId", "fillId", "fontId", "borderId", "xfId"];
  var cellXF_bool = ["applyAlignment", "applyBorder", "applyFill", "applyFont", "applyNumberFormat", "applyProtection", "pivotButton", "quotePrefix"];

  function parse_cellXfs(t, styles, opts) {
    styles.CellXf = [];
    var xf;
    var pass = false;
    (t[0].match(tagregex) || []).forEach(function (x) {
      var y = parsexmltag(x),
          i = 0;

      switch (strip_ns(y[0])) {
        case '<cellXfs':
        case '<cellXfs>':
        case '<cellXfs/>':
        case '</cellXfs>':
          break;

        /* 18.8.45 xf CT_Xf */

        case '<xf':
        case '<xf/>':
          xf = y;
          delete xf[0];

          for (i = 0; i < cellXF_uint.length; ++i) if (xf[cellXF_uint[i]]) xf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10);

          for (i = 0; i < cellXF_bool.length; ++i) if (xf[cellXF_bool[i]]) xf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]]);

          if (xf.numFmtId > 0x188) {
            for (i = 0x188; i > 0x3c; --i) if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) {
              xf.numFmtId = i;
              break;
            }
          }

          styles.CellXf.push(xf);
          break;

        case '</xf>':
          break;

        /* 18.8.1 alignment CT_CellAlignment */

        case '<alignment':
        case '<alignment/>':
          var alignment = {};
          if (y.vertical) alignment.vertical = y.vertical;
          if (y.horizontal) alignment.horizontal = y.horizontal;
          if (y.textRotation != null) alignment.textRotation = y.textRotation;
          if (y.indent) alignment.indent = y.indent;
          if (y.wrapText) alignment.wrapText = parsexmlbool(y.wrapText);
          xf.alignment = alignment;
          break;

        case '</alignment>':
          break;

        /* 18.8.33 protection CT_CellProtection */

        case '<protection':
          break;

        case '</protection>':
        case '<protection/>':
          break;

        /* note: sometimes mc:AlternateContent appears bare */

        case '<AlternateContent':
          pass = true;
          break;

        case '</AlternateContent>':
          pass = false;
          break;

        /* 18.2.10 extLst CT_ExtensionList ? */

        case '<extLst':
        case '<extLst>':
        case '</extLst>':
          break;

        case '<ext':
          pass = true;
          break;

        case '</ext>':
          pass = false;
          break;

        default:
          if (opts && opts.WTF) {
            if (!pass) throw new Error('unrecognized ' + y[0] + ' in cellXfs');
          }

      }
    });
  }

  function write_cellXfs(cellXfs) {
    var o = [];
    o[o.length] = writextag('cellXfs', null);
    cellXfs.forEach(function (c) {
      o[o.length] = writextag('xf', null, c);
    });
    o[o.length] = "</cellXfs>";
    if (o.length === 2) return "";
    o[0] = writextag('cellXfs', null, {
      count: o.length - 2
    }).replace("/>", ">");
    return o.join("");
  }
  /* 18.8 Styles CT_Stylesheet*/


  var parse_sty_xml = function make_pstyx() {
    var numFmtRegex = /<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/;
    var cellXfRegex = /<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/;
    var fillsRegex = /<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/;
    var fontsRegex = /<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/;
    var bordersRegex = /<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;
    return function parse_sty_xml(data, themes, opts) {
      var styles = {};
      if (!data) return styles;
      data = data.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
      /* 18.8.39 styleSheet CT_Stylesheet */

      var t;
      /* 18.8.31 numFmts CT_NumFmts ? */

      if (t = data.match(numFmtRegex)) parse_numFmts(t, styles, opts);
      /* 18.8.23 fonts CT_Fonts ? */

      if (t = data.match(fontsRegex)) parse_fonts(t, styles, themes, opts);
      /* 18.8.21 fills CT_Fills ? */

      if (t = data.match(fillsRegex)) parse_fills(t, styles, themes, opts);
      /* 18.8.5  borders CT_Borders ? */

      if (t = data.match(bordersRegex)) parse_borders(t, styles, themes, opts);
      /* 18.8.9  cellStyleXfs CT_CellStyleXfs ? */

      /* 18.8.8  cellStyles CT_CellStyles ? */

      /* 18.8.10 cellXfs CT_CellXfs ? */

      if (t = data.match(cellXfRegex)) parse_cellXfs(t, styles, opts);
      /* 18.8.15 dxfs CT_Dxfs ? */

      /* 18.8.42 tableStyles CT_TableStyles ? */

      /* 18.8.11 colors CT_Colors ? */

      /* 18.2.10 extLst CT_ExtensionList ? */

      return styles;
    };
  }();

  var STYLES_XML_ROOT = writextag('styleSheet', null, {
    'xmlns': XMLNS.main[0],
    'xmlns:vt': XMLNS.vt
  });
  RELS.STY = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles";

  function write_sty_xml(wb, opts) {
    var o = [XML_HEADER, STYLES_XML_ROOT],
        w;
    if (wb.SSF && (w = write_numFmts(wb.SSF)) != null) o[o.length] = w;
    o[o.length] = '<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>';
    o[o.length] = '<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>';
    o[o.length] = '<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>';
    o[o.length] = '<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>';
    if (w = write_cellXfs(opts.cellXfs)) o[o.length] = w;
    o[o.length] = '<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>';
    o[o.length] = '<dxfs count="0"/>';
    o[o.length] = '<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>';

    if (o.length > 2) {
      o[o.length] = '</styleSheet>';
      o[1] = o[1].replace("/>", ">");
    }

    return o.join("");
  }
  /* [MS-XLSB] 2.4.657 BrtFmt */


  function parse_BrtFmt(data, length) {
    var numFmtId = data.read_shift(2);
    var stFmtCode = parse_XLWideString(data, length - 2);
    return [numFmtId, stFmtCode];
  }

  function write_BrtFmt(i, f, o) {
    if (!o) o = new_buf(6 + 4 * f.length);
    o.write_shift(2, i);
    write_XLWideString(f, o);
    var out = o.length > o.l ? o.slice(0, o.l) : o;
    if (o.l == null) o.l = o.length;
    return out;
  }
  /* [MS-XLSB] 2.4.659 BrtFont TODO */


  function parse_BrtFont(data, length, opts) {
    var out = {};
    out.sz = data.read_shift(2) / 20;
    var grbit = parse_FontFlags(data, 2, opts);
    if (grbit.fItalic) out.italic = 1;
    if (grbit.fCondense) out.condense = 1;
    if (grbit.fExtend) out.extend = 1;
    if (grbit.fShadow) out.shadow = 1;
    if (grbit.fOutline) out.outline = 1;
    if (grbit.fStrikeout) out.strike = 1;
    var bls = data.read_shift(2);
    if (bls === 0x02BC) out.bold = 1;

    switch (data.read_shift(2)) {
      /* case 0: out.vertAlign = "baseline"; break; */
      case 1:
        out.vertAlign = "superscript";
        break;

      case 2:
        out.vertAlign = "subscript";
        break;
    }

    var underline = data.read_shift(1);
    if (underline != 0) out.underline = underline;
    var family = data.read_shift(1);
    if (family > 0) out.family = family;
    var bCharSet = data.read_shift(1);
    if (bCharSet > 0) out.charset = bCharSet;
    data.l++;
    out.color = parse_BrtColor(data, 8);

    switch (data.read_shift(1)) {
      /* case 0: out.scheme = "none": break; */
      case 1:
        out.scheme = "major";
        break;

      case 2:
        out.scheme = "minor";
        break;
    }

    out.name = parse_XLWideString(data, length - 21);
    return out;
  }

  function write_BrtFont(font, o) {
    if (!o) o = new_buf(25 + 4 * 32);
    o.write_shift(2, font.sz * 20);
    write_FontFlags(font, o);
    o.write_shift(2, font.bold ? 0x02BC : 0x0190);
    var sss = 0;
    if (font.vertAlign == "superscript") sss = 1;else if (font.vertAlign == "subscript") sss = 2;
    o.write_shift(2, sss);
    o.write_shift(1, font.underline || 0);
    o.write_shift(1, font.family || 0);
    o.write_shift(1, font.charset || 0);
    o.write_shift(1, 0);
    write_BrtColor(font.color, o);
    var scheme = 0;
    if (font.scheme == "major") scheme = 1;
    if (font.scheme == "minor") scheme = 2;
    o.write_shift(1, scheme);
    write_XLWideString(font.name, o);
    return o.length > o.l ? o.slice(0, o.l) : o;
  }
  /* [MS-XLSB] 2.4.650 BrtFill */


  var XLSBFillPTNames = ["none", "solid", "mediumGray", "darkGray", "lightGray", "darkHorizontal", "darkVertical", "darkDown", "darkUp", "darkGrid", "darkTrellis", "lightHorizontal", "lightVertical", "lightDown", "lightUp", "lightGrid", "lightTrellis", "gray125", "gray0625"];
  var rev_XLSBFillPTNames = evert(XLSBFillPTNames);
  /* TODO: gradient fill representation */

  var parse_BrtFill = parsenoop;

  function write_BrtFill(fill, o) {
    if (!o) o = new_buf(4 * 3 + 8 * 7 + 16 * 1);
    var fls = rev_XLSBFillPTNames[fill.patternType];
    if (fls == null) fls = 0x28;
    o.write_shift(4, fls);
    var j = 0;

    if (fls != 0x28) {
      /* TODO: custom FG Color */
      write_BrtColor({
        auto: 1
      }, o);
      /* TODO: custom BG Color */

      write_BrtColor({
        auto: 1
      }, o);

      for (; j < 12; ++j) o.write_shift(4, 0);
    } else {
      for (; j < 4; ++j) o.write_shift(4, 0);

      for (; j < 12; ++j) o.write_shift(4, 0);
      /* TODO */

      /* iGradientType */

      /* xnumDegree */

      /* xnumFillToLeft */

      /* xnumFillToRight */

      /* xnumFillToTop */

      /* xnumFillToBottom */

      /* cNumStop */

      /* xfillGradientStop */

    }

    return o.length > o.l ? o.slice(0, o.l) : o;
  }
  /* [MS-XLSB] 2.4.824 BrtXF */


  function parse_BrtXF(data, length) {
    var tgt = data.l + length;
    var ixfeParent = data.read_shift(2);
    var ifmt = data.read_shift(2);
    data.l = tgt;
    return {
      ixfe: ixfeParent,
      numFmtId: ifmt
    };
  }

  function write_BrtXF(data, ixfeP, o) {
    if (!o) o = new_buf(16);
    o.write_shift(2, ixfeP || 0);
    o.write_shift(2, data.numFmtId || 0);
    o.write_shift(2, 0);
    /* iFont */

    o.write_shift(2, 0);
    /* iFill */

    o.write_shift(2, 0);
    /* ixBorder */

    o.write_shift(1, 0);
    /* trot */

    o.write_shift(1, 0);
    /* indent */

    var flow = 0;
    o.write_shift(1, flow);
    /* flags */

    o.write_shift(1, 0);
    /* flags */

    o.write_shift(1, 0);
    /* xfGrbitAtr */

    o.write_shift(1, 0);
    return o;
  }
  /* [MS-XLSB] 2.5.4 Blxf TODO */


  function write_Blxf(data, o) {
    if (!o) o = new_buf(10);
    o.write_shift(1, 0);
    /* dg */

    o.write_shift(1, 0);
    o.write_shift(4, 0);
    /* color */

    o.write_shift(4, 0);
    /* color */

    return o;
  }
  /* [MS-XLSB] 2.4.302 BrtBorder TODO */


  var parse_BrtBorder = parsenoop;

  function write_BrtBorder(border, o) {
    if (!o) o = new_buf(51);
    o.write_shift(1, 0);
    /* diagonal */

    write_Blxf(null, o);
    /* top */

    write_Blxf(null, o);
    /* bottom */

    write_Blxf(null, o);
    /* left */

    write_Blxf(null, o);
    /* right */

    write_Blxf(null, o);
    /* diag */

    return o.length > o.l ? o.slice(0, o.l) : o;
  }
  /* [MS-XLSB] 2.4.763 BrtStyle TODO */


  function write_BrtStyle(style, o) {
    if (!o) o = new_buf(12 + 4 * 10);
    o.write_shift(4, style.xfId);
    o.write_shift(2, 1);
    o.write_shift(1, +style.builtinId);
    o.write_shift(1, 0);
    /* iLevel */

    write_XLNullableWideString(style.name || "", o);
    return o.length > o.l ? o.slice(0, o.l) : o;
  }
  /* [MS-XLSB] 2.4.272 BrtBeginTableStyles */


  function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {
    var o = new_buf(4 + 256 * 2 * 4);
    o.write_shift(4, cnt);
    write_XLNullableWideString(defTableStyle, o);
    write_XLNullableWideString(defPivotStyle, o);
    return o.length > o.l ? o.slice(0, o.l) : o;
  }
  /* [MS-XLSB] 2.1.7.50 Styles */


  function parse_sty_bin(data, themes, opts) {
    var styles = {};
    styles.NumberFmt = [];

    for (var y in SSF._table) styles.NumberFmt[y] = SSF._table[y];

    styles.CellXf = [];
    styles.Fonts = [];
    var state = [];
    var pass = false;
    recordhopper(data, function hopper_sty(val, R_n, RT) {
      switch (RT) {
        case 0x002C:
          /* 'BrtFmt' */
          styles.NumberFmt[val[0]] = val[1];
          SSF.load(val[1], val[0]);
          break;

        case 0x002B:
          /* 'BrtFont' */
          styles.Fonts.push(val);

          if (val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {
            val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
          }

          break;

        case 0x0401:
          /* 'BrtKnownFonts' */
          break;

        case 0x002D:
          /* 'BrtFill' */
          break;

        case 0x002E:
          /* 'BrtBorder' */
          break;

        case 0x002F:
          /* 'BrtXF' */
          if (state[state.length - 1] == "BrtBeginCellXFs") {
            styles.CellXf.push(val);
          }

          break;

        case 0x0030:
        /* 'BrtStyle' */

        case 0x01FB:
        /* 'BrtDXF' */

        case 0x023C:
        /* 'BrtMRUColor' */

        case 0x01DB:
          /* 'BrtIndexedColor': */
          break;

        case 0x0493:
        /* 'BrtDXF14' */

        case 0x0836:
        /* 'BrtDXF15' */

        case 0x046A:
        /* 'BrtSlicerStyleElement' */

        case 0x0200:
        /* 'BrtTableStyleElement' */

        case 0x082F:
        /* 'BrtTimelineStyleElement' */

        case 0x0C00:
          /* 'BrtUid' */
          break;

        case 0x0023:
          /* 'BrtFRTBegin' */
          pass = true;
          break;

        case 0x0024:
          /* 'BrtFRTEnd' */
          pass = false;
          break;

        case 0x0025:
          /* 'BrtACBegin' */
          state.push(R_n);
          pass = true;
          break;

        case 0x0026:
          /* 'BrtACEnd' */
          state.pop();
          pass = false;
          break;

        default:
          if ((R_n || "").indexOf("Begin") > 0) state.push(R_n);else if ((R_n || "").indexOf("End") > 0) state.pop();else if (!pass || opts.WTF && state[state.length - 1] != "BrtACBegin") throw new Error("Unexpected record " + RT + " " + R_n);
      }
    });
    return styles;
  }

  function write_FMTS_bin(ba, NF) {
    if (!NF) return;
    var cnt = 0;
    [[5, 8], [23, 26], [41, 44], [
    /*63*/
    50,
    /*66],[164,*/
    392]].forEach(function (r) {
      for (var i = r[0]; i <= r[1]; ++i) if (NF[i] != null) ++cnt;
    });
    if (cnt == 0) return;
    write_record(ba, "BrtBeginFmts", write_UInt32LE(cnt));
    [[5, 8], [23, 26], [41, 44], [
    /*63*/
    50,
    /*66],[164,*/
    392]].forEach(function (r) {
      for (var i = r[0]; i <= r[1]; ++i) if (NF[i] != null) write_record(ba, "BrtFmt", write_BrtFmt(i, NF[i]));
    });
    write_record(ba, "BrtEndFmts");
  }

  function write_FONTS_bin(ba) {
    var cnt = 1;
    if (cnt == 0) return;
    write_record(ba, "BrtBeginFonts", write_UInt32LE(cnt));
    write_record(ba, "BrtFont", write_BrtFont({
      sz: 12,
      color: {
        theme: 1
      },
      name: "Calibri",
      family: 2,
      scheme: "minor"
    }));
    /* 1*65491BrtFont [ACFONTS] */

    write_record(ba, "BrtEndFonts");
  }

  function write_FILLS_bin(ba) {
    var cnt = 2;
    if (cnt == 0) return;
    write_record(ba, "BrtBeginFills", write_UInt32LE(cnt));
    write_record(ba, "BrtFill", write_BrtFill({
      patternType: "none"
    }));
    write_record(ba, "BrtFill", write_BrtFill({
      patternType: "gray125"
    }));
    /* 1*65431BrtFill */

    write_record(ba, "BrtEndFills");
  }

  function write_BORDERS_bin(ba) {
    var cnt = 1;
    if (cnt == 0) return;
    write_record(ba, "BrtBeginBorders", write_UInt32LE(cnt));
    write_record(ba, "BrtBorder", write_BrtBorder({}));
    /* 1*65430BrtBorder */

    write_record(ba, "BrtEndBorders");
  }

  function write_CELLSTYLEXFS_bin(ba) {
    var cnt = 1;
    write_record(ba, "BrtBeginCellStyleXFs", write_UInt32LE(cnt));
    write_record(ba, "BrtXF", write_BrtXF({
      numFmtId: 0,
      fontId: 0,
      fillId: 0,
      borderId: 0
    }, 0xFFFF));
    /* 1*65430(BrtXF *FRT) */

    write_record(ba, "BrtEndCellStyleXFs");
  }

  function write_CELLXFS_bin(ba, data) {
    write_record(ba, "BrtBeginCellXFs", write_UInt32LE(data.length));
    data.forEach(function (c) {
      write_record(ba, "BrtXF", write_BrtXF(c, 0));
    });
    /* 1*65430(BrtXF *FRT) */

    write_record(ba, "BrtEndCellXFs");
  }

  function write_STYLES_bin(ba) {
    var cnt = 1;
    write_record(ba, "BrtBeginStyles", write_UInt32LE(cnt));
    write_record(ba, "BrtStyle", write_BrtStyle({
      xfId: 0,
      builtinId: 0,
      name: "Normal"
    }));
    /* 1*65430(BrtStyle *FRT) */

    write_record(ba, "BrtEndStyles");
  }

  function write_DXFS_bin(ba) {
    var cnt = 0;
    write_record(ba, "BrtBeginDXFs", write_UInt32LE(cnt));
    /* *2147483647(BrtDXF *FRT) */

    write_record(ba, "BrtEndDXFs");
  }

  function write_TABLESTYLES_bin(ba) {
    var cnt = 0;
    write_record(ba, "BrtBeginTableStyles", write_BrtBeginTableStyles(cnt, "TableStyleMedium9", "PivotStyleMedium4"));
    /* *TABLESTYLE */

    write_record(ba, "BrtEndTableStyles");
  }

  function write_COLORPALETTE_bin() {
    return;
    /* BrtBeginColorPalette [INDEXEDCOLORS] [MRUCOLORS] BrtEndColorPalette */
  }
  /* [MS-XLSB] 2.1.7.50 Styles */


  function write_sty_bin(wb, opts) {
    var ba = buf_array();
    write_record(ba, "BrtBeginStyleSheet");
    write_FMTS_bin(ba, wb.SSF);
    write_FONTS_bin(ba, wb);
    write_FILLS_bin(ba, wb);
    write_BORDERS_bin(ba, wb);
    write_CELLSTYLEXFS_bin(ba, wb);
    write_CELLXFS_bin(ba, opts.cellXfs);
    write_STYLES_bin(ba, wb);
    write_DXFS_bin(ba, wb);
    write_TABLESTYLES_bin(ba, wb);
    write_COLORPALETTE_bin(ba, wb);
    /* FRTSTYLESHEET*/

    write_record(ba, "BrtEndStyleSheet");
    return ba.end();
  }

  RELS.THEME = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme";
  /* Even though theme layout is dk1 lt1 dk2 lt2, true order is lt1 dk1 lt2 dk2 */

  var XLSXThemeClrScheme = ['</a:lt1>', '</a:dk1>', '</a:lt2>', '</a:dk2>', '</a:accent1>', '</a:accent2>', '</a:accent3>', '</a:accent4>', '</a:accent5>', '</a:accent6>', '</a:hlink>', '</a:folHlink>'];
  /* 20.1.6.2 clrScheme CT_ColorScheme */

  function parse_clrScheme(t, themes, opts) {
    themes.themeElements.clrScheme = [];
    var color = {};
    (t[0].match(tagregex) || []).forEach(function (x) {
      var y = parsexmltag(x);

      switch (y[0]) {
        /* 20.1.6.2 clrScheme (Color Scheme) CT_ColorScheme */
        case '<a:clrScheme':
        case '</a:clrScheme>':
          break;

        /* 20.1.2.3.32 srgbClr CT_SRgbColor */

        case '<a:srgbClr':
          color.rgb = y.val;
          break;

        /* 20.1.2.3.33 sysClr CT_SystemColor */

        case '<a:sysClr':
          color.rgb = y.lastClr;
          break;

        /* 20.1.4.1.1 accent1 (Accent 1) */

        /* 20.1.4.1.2 accent2 (Accent 2) */

        /* 20.1.4.1.3 accent3 (Accent 3) */

        /* 20.1.4.1.4 accent4 (Accent 4) */

        /* 20.1.4.1.5 accent5 (Accent 5) */

        /* 20.1.4.1.6 accent6 (Accent 6) */

        /* 20.1.4.1.9 dk1 (Dark 1) */

        /* 20.1.4.1.10 dk2 (Dark 2) */

        /* 20.1.4.1.15 folHlink (Followed Hyperlink) */

        /* 20.1.4.1.19 hlink (Hyperlink) */

        /* 20.1.4.1.22 lt1 (Light 1) */

        /* 20.1.4.1.23 lt2 (Light 2) */

        case '<a:dk1>':
        case '</a:dk1>':
        case '<a:lt1>':
        case '</a:lt1>':
        case '<a:dk2>':
        case '</a:dk2>':
        case '<a:lt2>':
        case '</a:lt2>':
        case '<a:accent1>':
        case '</a:accent1>':
        case '<a:accent2>':
        case '</a:accent2>':
        case '<a:accent3>':
        case '</a:accent3>':
        case '<a:accent4>':
        case '</a:accent4>':
        case '<a:accent5>':
        case '</a:accent5>':
        case '<a:accent6>':
        case '</a:accent6>':
        case '<a:hlink>':
        case '</a:hlink>':
        case '<a:folHlink>':
        case '</a:folHlink>':
          if (y[0].charAt(1) === '/') {
            themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] = color;
            color = {};
          } else {
            color.name = y[0].slice(3, y[0].length - 1);
          }

          break;

        default:
          if (opts && opts.WTF) throw new Error('Unrecognized ' + y[0] + ' in clrScheme');
      }
    });
  }
  /* 20.1.4.1.18 fontScheme CT_FontScheme */


  function parse_fontScheme() {}
  /* 20.1.4.1.15 fmtScheme CT_StyleMatrix */


  function parse_fmtScheme() {}

  var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
  var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
  var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;
  /* 20.1.6.10 themeElements CT_BaseStyles */

  function parse_themeElements(data, themes, opts) {
    themes.themeElements = {};
    var t;
    [
    /* clrScheme CT_ColorScheme */
    ['clrScheme', clrsregex, parse_clrScheme],
    /* fontScheme CT_FontScheme */
    ['fontScheme', fntsregex, parse_fontScheme],
    /* fmtScheme CT_StyleMatrix */
    ['fmtScheme', fmtsregex, parse_fmtScheme]].forEach(function (m) {
      if (!(t = data.match(m[1]))) throw new Error(m[0] + ' not found in themeElements');
      m[2](t, themes, opts);
    });
  }

  var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;
  /* 14.2.7 Theme Part */

  function parse_theme_xml(data, opts) {
    /* 20.1.6.9 theme CT_OfficeStyleSheet */
    if (!data || data.length === 0) return parse_theme_xml(write_theme());
    var t;
    var themes = {};
    /* themeElements CT_BaseStyles */

    if (!(t = data.match(themeltregex))) throw new Error('themeElements not found in theme');
    parse_themeElements(t[0], themes, opts);
    themes.raw = data;
    return themes;
  }

  function write_theme(Themes, opts) {
    if (opts && opts.themeXLSX) return opts.themeXLSX;
    if (Themes && typeof Themes.raw == "string") return Themes.raw;
    var o = [XML_HEADER];
    o[o.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
    o[o.length] = '<a:themeElements>';
    o[o.length] = '<a:clrScheme name="Office">';
    o[o.length] = '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
    o[o.length] = '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
    o[o.length] = '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
    o[o.length] = '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
    o[o.length] = '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
    o[o.length] = '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
    o[o.length] = '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
    o[o.length] = '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
    o[o.length] = '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
    o[o.length] = '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
    o[o.length] = '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
    o[o.length] = '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
    o[o.length] = '</a:clrScheme>';
    o[o.length] = '<a:fontScheme name="Office">';
    o[o.length] = '<a:majorFont>';
    o[o.length] = '<a:latin typeface="Cambria"/>';
    o[o.length] = '<a:ea typeface=""/>';
    o[o.length] = '<a:cs typeface=""/>';
    o[o.length] = '<a:font script="Jpan" typeface="ï¼­ï¼³ ï¼°ã´ã·ãã¯"/>';
    o[o.length] = '<a:font script="Hang" typeface="ë§ì ê³ ë"/>';
    o[o.length] = '<a:font script="Hans" typeface="å®ä½"/>';
    o[o.length] = '<a:font script="Hant" typeface="æ°ç´°æé«"/>';
    o[o.length] = '<a:font script="Arab" typeface="Times New Roman"/>';
    o[o.length] = '<a:font script="Hebr" typeface="Times New Roman"/>';
    o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
    o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
    o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
    o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
    o[o.length] = '<a:font script="Khmr" typeface="MoolBoran"/>';
    o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
    o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
    o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
    o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
    o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
    o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
    o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
    o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
    o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
    o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
    o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
    o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
    o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
    o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
    o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
    o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
    o[o.length] = '<a:font script="Viet" typeface="Times New Roman"/>';
    o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
    o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
    o[o.length] = '</a:majorFont>';
    o[o.length] = '<a:minorFont>';
    o[o.length] = '<a:latin typeface="Calibri"/>';
    o[o.length] = '<a:ea typeface=""/>';
    o[o.length] = '<a:cs typeface=""/>';
    o[o.length] = '<a:font script="Jpan" typeface="ï¼­ï¼³ ï¼°ã´ã·ãã¯"/>';
    o[o.length] = '<a:font script="Hang" typeface="ë§ì ê³ ë"/>';
    o[o.length] = '<a:font script="Hans" typeface="å®ä½"/>';
    o[o.length] = '<a:font script="Hant" typeface="æ°ç´°æé«"/>';
    o[o.length] = '<a:font script="Arab" typeface="Arial"/>';
    o[o.length] = '<a:font script="Hebr" typeface="Arial"/>';
    o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
    o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
    o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
    o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
    o[o.length] = '<a:font script="Khmr" typeface="DaunPenh"/>';
    o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
    o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
    o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
    o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
    o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
    o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
    o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
    o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
    o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
    o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
    o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
    o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
    o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
    o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
    o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
    o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
    o[o.length] = '<a:font script="Viet" typeface="Arial"/>';
    o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
    o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
    o[o.length] = '</a:minorFont>';
    o[o.length] = '</a:fontScheme>';
    o[o.length] = '<a:fmtScheme name="Office">';
    o[o.length] = '<a:fillStyleLst>';
    o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
    o[o.length] = '<a:gradFill rotWithShape="1">';
    o[o.length] = '<a:gsLst>';
    o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o[o.length] = '</a:gsLst>';
    o[o.length] = '<a:lin ang="16200000" scaled="1"/>';
    o[o.length] = '</a:gradFill>';
    o[o.length] = '<a:gradFill rotWithShape="1">';
    o[o.length] = '<a:gsLst>';
    o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o[o.length] = '</a:gsLst>';
    o[o.length] = '<a:lin ang="16200000" scaled="0"/>';
    o[o.length] = '</a:gradFill>';
    o[o.length] = '</a:fillStyleLst>';
    o[o.length] = '<a:lnStyleLst>';
    o[o.length] = '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
    o[o.length] = '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
    o[o.length] = '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
    o[o.length] = '</a:lnStyleLst>';
    o[o.length] = '<a:effectStyleLst>';
    o[o.length] = '<a:effectStyle>';
    o[o.length] = '<a:effectLst>';
    o[o.length] = '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
    o[o.length] = '</a:effectLst>';
    o[o.length] = '</a:effectStyle>';
    o[o.length] = '<a:effectStyle>';
    o[o.length] = '<a:effectLst>';
    o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
    o[o.length] = '</a:effectLst>';
    o[o.length] = '</a:effectStyle>';
    o[o.length] = '<a:effectStyle>';
    o[o.length] = '<a:effectLst>';
    o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
    o[o.length] = '</a:effectLst>';
    o[o.length] = '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
    o[o.length] = '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
    o[o.length] = '</a:effectStyle>';
    o[o.length] = '</a:effectStyleLst>';
    o[o.length] = '<a:bgFillStyleLst>';
    o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
    o[o.length] = '<a:gradFill rotWithShape="1">';
    o[o.length] = '<a:gsLst>';
    o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
    o[o.length] = '</a:gsLst>';
    o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
    o[o.length] = '</a:gradFill>';
    o[o.length] = '<a:gradFill rotWithShape="1">';
    o[o.length] = '<a:gsLst>';
    o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
    o[o.length] = '</a:gsLst>';
    o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
    o[o.length] = '</a:gradFill>';
    o[o.length] = '</a:bgFillStyleLst>';
    o[o.length] = '</a:fmtScheme>';
    o[o.length] = '</a:themeElements>';
    o[o.length] = '<a:objectDefaults>';
    o[o.length] = '<a:spDef>';
    o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
    o[o.length] = '</a:spDef>';
    o[o.length] = '<a:lnDef>';
    o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
    o[o.length] = '</a:lnDef>';
    o[o.length] = '</a:objectDefaults>';
    o[o.length] = '<a:extraClrSchemeLst/>';
    o[o.length] = '</a:theme>';
    return o.join("");
  }
  /* [MS-XLS] 2.4.326 TODO: payload is a zip file */


  function parse_Theme(blob, length, opts) {
    var end = blob.l + length;
    var dwThemeVersion = blob.read_shift(4);
    if (dwThemeVersion === 124226) return;

    if (!opts.cellStyles || !jszip) {
      blob.l = end;
      return;
    }

    var data = blob.slice(blob.l);
    blob.l = end;
    var zip;

    try {
      zip = new jszip(data);
    } catch (e) {
      return;
    }

    var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
    if (!themeXML) return;
    return parse_theme_xml(themeXML, opts);
  }
  /* 2.5.49 */


  function parse_ColorTheme(blob) {
    return blob.read_shift(4);
  }
  /* 2.5.155 */


  function parse_FullColorExt(blob) {
    var o = {};
    o.xclrType = blob.read_shift(2);
    o.nTintShade = blob.read_shift(2);

    switch (o.xclrType) {
      case 0:
        blob.l += 4;
        break;

      case 1:
        o.xclrValue = parse_IcvXF(blob, 4);
        break;

      case 2:
        o.xclrValue = parse_LongRGBA(blob, 4);
        break;

      case 3:
        o.xclrValue = parse_ColorTheme(blob, 4);
        break;

      case 4:
        blob.l += 4;
        break;
    }

    blob.l += 8;
    return o;
  }
  /* 2.5.164 TODO: read 7 bits*/


  function parse_IcvXF(blob, length) {
    return parsenoop(blob, length);
  }
  /* 2.5.280 */


  function parse_XFExtGradient(blob, length) {
    return parsenoop(blob, length);
  }
  /* [MS-XLS] 2.5.108 */


  function parse_ExtProp(blob) {
    var extType = blob.read_shift(2);
    var cb = blob.read_shift(2) - 4;
    var o = [extType];

    switch (extType) {
      case 0x04:
      case 0x05:
      case 0x07:
      case 0x08:
      case 0x09:
      case 0x0A:
      case 0x0B:
      case 0x0D:
        o[1] = parse_FullColorExt(blob, cb);
        break;

      case 0x06:
        o[1] = parse_XFExtGradient(blob, cb);
        break;

      case 0x0E:
      case 0x0F:
        o[1] = blob.read_shift(cb === 1 ? 1 : 2);
        break;

      default:
        throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
    }

    return o;
  }
  /* 2.4.355 */


  function parse_XFExt(blob, length) {
    var end = blob.l + length;
    blob.l += 2;
    var ixfe = blob.read_shift(2);
    blob.l += 2;
    var cexts = blob.read_shift(2);
    var ext = [];

    while (cexts-- > 0) ext.push(parse_ExtProp(blob, end - blob.l));

    return {
      ixfe: ixfe,
      ext: ext
    };
  }
  /* xf is an XF, see parse_XFExt for xfext */


  function update_xfext(xf, xfext) {
    xfext.forEach(function (xfe) {
      switch (xfe[0]) {
        /* 2.5.108 extPropData */
        case 0x04:
          break;

        /* foreground color */

        case 0x05:
          break;

        /* background color */

        case 0x06:
          break;

        /* gradient fill */

        case 0x07:
          break;

        /* top cell border color */

        case 0x08:
          break;

        /* bottom cell border color */

        case 0x09:
          break;

        /* left cell border color */

        case 0x0a:
          break;

        /* right cell border color */

        case 0x0b:
          break;

        /* diagonal cell border color */

        case 0x0d:
          /* text color */
          break;

        case 0x0e:
          break;

        /* font scheme */

        case 0x0f:
          break;

        /* indentation level */
      }
    });
  }
  /* 18.6 Calculation Chain */


  function parse_cc_xml(data) {
    var d = [];
    if (!data) return d;
    var i = 1;
    (data.match(tagregex) || []).forEach(function (x) {
      var y = parsexmltag(x);

      switch (y[0]) {
        case '<?xml':
          break;

        /* 18.6.2  calcChain CT_CalcChain 1 */

        case '<calcChain':
        case '<calcChain>':
        case '</calcChain>':
          break;

        /* 18.6.1  c CT_CalcCell 1 */

        case '<c':
          delete y[0];
          if (y.i) i = y.i;else y.i = i;
          d.push(y);
          break;
      }
    });
    return d;
  } //function write_cc_xml(data, opts) { }

  /* [MS-XLSB] 2.6.4.1 */


  function parse_BrtCalcChainItem$(data) {
    var out = {};
    out.i = data.read_shift(4);
    var cell = {};
    cell.r = data.read_shift(4);
    cell.c = data.read_shift(4);
    out.r = encode_cell(cell);
    var flags = data.read_shift(1);
    if (flags & 0x2) out.l = '1';
    if (flags & 0x8) out.a = '1';
    return out;
  }
  /* 18.6 Calculation Chain */


  function parse_cc_bin(data, name, opts) {
    var out = [];
    var pass = false;
    recordhopper(data, function hopper_cc(val, R_n, RT) {
      switch (RT) {
        case 0x003F:
          /* 'BrtCalcChainItem$' */
          out.push(val);
          break;

        default:
          if ((R_n || "").indexOf("Begin") > 0) {
            /* empty */
          } else if ((R_n || "").indexOf("End") > 0) {
            /* empty */
          } else if (!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);

      }
    });
    return out;
  } //function write_cc_bin(data, opts) { }

  /* 18.14 Supplementary Workbook Data */


  function parse_xlink_xml() {//var opts = _opts || {};
    //if(opts.WTF) throw "XLSX External Link";
  }
  /* [MS-XLSB] 2.1.7.25 External Link */


  function parse_xlink_bin(data, rel, name, _opts) {
    if (!data) return data;
    var opts = _opts || {};
    var pass = false,
        end = false;
    recordhopper(data, function xlink_parse(val, R_n, RT) {
      if (end) return;

      switch (RT) {
        case 0x0167:
        /* 'BrtSupTabs' */

        case 0x016B:
        /* 'BrtExternTableStart' */

        case 0x016C:
        /* 'BrtExternTableEnd' */

        case 0x016E:
        /* 'BrtExternRowHdr' */

        case 0x016F:
        /* 'BrtExternCellBlank' */

        case 0x0170:
        /* 'BrtExternCellReal' */

        case 0x0171:
        /* 'BrtExternCellBool' */

        case 0x0172:
        /* 'BrtExternCellError' */

        case 0x0173:
        /* 'BrtExternCellString' */

        case 0x01D8:
        /* 'BrtExternValueMeta' */

        case 0x0241:
        /* 'BrtSupNameStart' */

        case 0x0242:
        /* 'BrtSupNameValueStart' */

        case 0x0243:
        /* 'BrtSupNameValueEnd' */

        case 0x0244:
        /* 'BrtSupNameNum' */

        case 0x0245:
        /* 'BrtSupNameErr' */

        case 0x0246:
        /* 'BrtSupNameSt' */

        case 0x0247:
        /* 'BrtSupNameNil' */

        case 0x0248:
        /* 'BrtSupNameBool' */

        case 0x0249:
        /* 'BrtSupNameFmla' */

        case 0x024A:
        /* 'BrtSupNameBits' */

        case 0x024B:
          /* 'BrtSupNameEnd' */
          break;

        case 0x0023:
          /* 'BrtFRTBegin' */
          pass = true;
          break;

        case 0x0024:
          /* 'BrtFRTEnd' */
          pass = false;
          break;

        default:
          if ((R_n || "").indexOf("Begin") > 0) {
            /* empty */
          } else if ((R_n || "").indexOf("End") > 0) {
            /* empty */
          } else if (!pass || opts.WTF) throw new Error("Unexpected record " + RT.toString(16) + " " + R_n);

      }
    }, opts);
  }
  /* 20.5 DrawingML - SpreadsheetML Drawing */


  RELS.IMG = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image";
  RELS.DRAW = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing";
  /* 20.5.2.35 wsDr CT_Drawing */

  function parse_drawing(data, rels) {
    if (!data) return "??";
    /*
      Chartsheet Drawing:
       - 20.5.2.35 wsDr CT_Drawing
        - 20.5.2.1  absoluteAnchor CT_AbsoluteAnchor
         - 20.5.2.16 graphicFrame CT_GraphicalObjectFrame
          - 20.1.2.2.16 graphic CT_GraphicalObject
           - 20.1.2.2.17 graphicData CT_GraphicalObjectData
             - chart reference
       the actual type is based on the URI of the graphicData
    	TODO: handle embedded charts and other types of graphics
    */

    var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/) || ["", ""])[1];
    return rels['!id'][id].Target;
  }
  /* L.5.5.2 SpreadsheetML Comments + VML Schema */


  var _shapeid = 1024;

  function write_comments_vml(rId, comments) {
    var csize = [21600, 21600];
    /* L.5.2.1.2 Path Attribute */

    var bbox = ["m0,0l0", csize[1], csize[0], csize[1], csize[0], "0xe"].join(",");
    var o = [writextag("xml", null, {
      'xmlns:v': XLMLNS.v,
      'xmlns:o': XLMLNS.o,
      'xmlns:x': XLMLNS.x,
      'xmlns:mv': XLMLNS.mv
    }).replace(/\/>/, ">"), writextag("o:shapelayout", writextag("o:idmap", null, {
      'v:ext': "edit",
      'data': rId
    }), {
      'v:ext': "edit"
    }), writextag("v:shapetype", [writextag("v:stroke", null, {
      joinstyle: "miter"
    }), writextag("v:path", null, {
      gradientshapeok: "t",
      'o:connecttype': "rect"
    })].join(""), {
      id: "_x0000_t202",
      'o:spt': 202,
      coordsize: csize.join(","),
      path: bbox
    })];

    while (_shapeid < rId * 1000) _shapeid += 1000;

    comments.forEach(function (x) {
      var c = decode_cell(x[0]);
      var fillopts = {
        'color2': "#BEFF82",
        'type': "gradient"
      };
      if (fillopts.type == "gradient") fillopts.angle = "-180";
      var fillparm = fillopts.type == "gradient" ? writextag("o:fill", null, {
        type: "gradientUnscaled",
        'v:ext': "view"
      }) : null;
      var fillxml = writextag('v:fill', fillparm, fillopts);
      var shadata = {
        on: "t",
        'obscured': "t"
      };
      ++_shapeid;
      o = o.concat(['<v:shape' + wxt_helper({
        id: '_x0000_s' + _shapeid,
        type: "#_x0000_t202",
        style: "position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10" + (x[1].hidden ? ";visibility:hidden" : ""),
        fillcolor: "#ECFAD4",
        strokecolor: "#edeaa1"
      }) + '>', fillxml, writextag("v:shadow", null, shadata), writextag("v:path", null, {
        'o:connecttype': "none"
      }), '<v:textbox><div style="text-align:left"></div></v:textbox>', '<x:ClientData ObjectType="Note">', '<x:MoveWithCells/>', '<x:SizeWithCells/>',
      /* Part 4 19.4.2.3 Anchor (Anchor) */
      writetag('x:Anchor', [c.c + 1, 0, c.r + 1, 0, c.c + 3, 20, c.r + 5, 20].join(",")), writetag('x:AutoFill', "False"), writetag('x:Row', String(c.r)), writetag('x:Column', String(c.c)), x[1].hidden ? '' : '<x:Visible/>', '</x:ClientData>', '</v:shape>']);
    });
    o.push('</xml>');
    return o.join("");
  }

  RELS.CMNT = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments";

  function sheet_insert_comments(sheet, comments) {
    var dense = Array.isArray(sheet);
    var cell;
    comments.forEach(function (comment) {
      var r = decode_cell(comment.ref);

      if (dense) {
        if (!sheet[r.r]) sheet[r.r] = [];
        cell = sheet[r.r][r.c];
      } else cell = sheet[comment.ref];

      if (!cell) {
        cell = {
          t: "z"
        };
        if (dense) sheet[r.r][r.c] = cell;else sheet[comment.ref] = cell;
        var range = safe_decode_range(sheet["!ref"] || "BDWGO1000001:A1");
        if (range.s.r > r.r) range.s.r = r.r;
        if (range.e.r < r.r) range.e.r = r.r;
        if (range.s.c > r.c) range.s.c = r.c;
        if (range.e.c < r.c) range.e.c = r.c;
        var encoded = encode_range(range);
        if (encoded !== sheet["!ref"]) sheet["!ref"] = encoded;
      }

      if (!cell.c) cell.c = [];
      var o = {
        a: comment.author,
        t: comment.t,
        r: comment.r
      };
      if (comment.h) o.h = comment.h;
      cell.c.push(o);
    });
  }
  /* 18.7 Comments */


  function parse_comments_xml(data, opts) {
    /* 18.7.6 CT_Comments */
    if (data.match(/<(?:\w+:)?comments *\/>/)) return [];
    var authors = [];
    var commentList = [];
    var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
    if (authtag && authtag[1]) authtag[1].split(/<\/\w*:?author>/).forEach(function (x) {
      if (x === "" || x.trim() === "") return;
      var a = x.match(/<(?:\w+:)?author[^>]*>(.*)/);
      if (a) authors.push(a[1]);
    });
    var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);
    if (cmnttag && cmnttag[1]) cmnttag[1].split(/<\/\w*:?comment>/).forEach(function (x) {
      if (x === "" || x.trim() === "") return;
      var cm = x.match(/<(?:\w+:)?comment[^>]*>/);
      if (!cm) return;
      var y = parsexmltag(cm[0]);
      var comment = {
        author: y.authorId && authors[y.authorId] || "sheetjsghost",
        ref: y.ref,
        guid: y.guid
      };
      var cell = decode_cell(y.ref);
      if (opts.sheetRows && opts.sheetRows <= cell.r) return;
      var textMatch = x.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
      var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || {
        r: "",
        t: "",
        h: ""
      };
      comment.r = rt.r;
      if (rt.r == "<t></t>") rt.t = rt.h = "";
      comment.t = rt.t.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
      if (opts.cellHTML) comment.h = rt.h;
      commentList.push(comment);
    });
    return commentList;
  }

  var CMNT_XML_ROOT = writextag('comments', null, {
    'xmlns': XMLNS.main[0]
  });

  function write_comments_xml(data) {
    var o = [XML_HEADER, CMNT_XML_ROOT];
    var iauthor = [];
    o.push("<authors>");
    data.forEach(function (x) {
      x[1].forEach(function (w) {
        var a = escapexml(w.a);
        if (iauthor.indexOf(a) > -1) return;
        iauthor.push(a);
        o.push("<author>" + a + "</author>");
      });
    });
    o.push("</authors>");
    o.push("<commentList>");
    data.forEach(function (d) {
      d[1].forEach(function (c) {
        /* 18.7.3 CT_Comment */
        o.push('<comment ref="' + d[0] + '" authorId="' + iauthor.indexOf(escapexml(c.a)) + '"><text>');
        o.push(writetag("t", c.t == null ? "" : escapexml(c.t)));
        o.push('</text></comment>');
      });
    });
    o.push("</commentList>");

    if (o.length > 2) {
      o[o.length] = '</comments>';
      o[1] = o[1].replace("/>", ">");
    }

    return o.join("");
  }
  /* [MS-XLSB] 2.4.28 BrtBeginComment */


  function parse_BrtBeginComment(data) {
    var out = {};
    out.iauthor = data.read_shift(4);
    var rfx = parse_UncheckedRfX(data, 16);
    out.rfx = rfx.s;
    out.ref = encode_cell(rfx.s);
    data.l += 16;
    /*var guid = parse_GUID(data); */

    return out;
  }

  function write_BrtBeginComment(data, o) {
    if (o == null) o = new_buf(36);
    o.write_shift(4, data[1].iauthor);
    write_UncheckedRfX(data[0], o);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    return o;
  }
  /* [MS-XLSB] 2.4.327 BrtCommentAuthor */


  var parse_BrtCommentAuthor = parse_XLWideString;

  function write_BrtCommentAuthor(data) {
    return write_XLWideString(data.slice(0, 54));
  }
  /* [MS-XLSB] 2.1.7.8 Comments */


  function parse_comments_bin(data, opts) {
    var out = [];
    var authors = [];
    var c = {};
    var pass = false;
    recordhopper(data, function hopper_cmnt(val, R_n, RT) {
      switch (RT) {
        case 0x0278:
          /* 'BrtCommentAuthor' */
          authors.push(val);
          break;

        case 0x027B:
          /* 'BrtBeginComment' */
          c = val;
          break;

        case 0x027D:
          /* 'BrtCommentText' */
          c.t = val.t;
          c.h = val.h;
          c.r = val.r;
          break;

        case 0x027C:
          /* 'BrtEndComment' */
          c.author = authors[c.iauthor];
          delete c.iauthor;
          if (opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r) break;
          if (!c.t) c.t = "";
          delete c.rfx;
          out.push(c);
          break;

        case 0x0C00:
          /* 'BrtUid' */
          break;

        case 0x0023:
          /* 'BrtFRTBegin' */
          pass = true;
          break;

        case 0x0024:
          /* 'BrtFRTEnd' */
          pass = false;
          break;

        case 0x0025:
          /* 'BrtACBegin' */
          break;

        case 0x0026:
          /* 'BrtACEnd' */
          break;

        default:
          if ((R_n || "").indexOf("Begin") > 0) {
            /* empty */
          } else if ((R_n || "").indexOf("End") > 0) {
            /* empty */
          } else if (!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);

      }
    });
    return out;
  }

  function write_comments_bin(data) {
    var ba = buf_array();
    var iauthor = [];
    write_record(ba, "BrtBeginComments");
    write_record(ba, "BrtBeginCommentAuthors");
    data.forEach(function (comment) {
      comment[1].forEach(function (c) {
        if (iauthor.indexOf(c.a) > -1) return;
        iauthor.push(c.a.slice(0, 54));
        write_record(ba, "BrtCommentAuthor", write_BrtCommentAuthor(c.a));
      });
    });
    write_record(ba, "BrtEndCommentAuthors");
    write_record(ba, "BrtBeginCommentList");
    data.forEach(function (comment) {
      comment[1].forEach(function (c) {
        c.iauthor = iauthor.indexOf(c.a);
        var range = {
          s: decode_cell(comment[0]),
          e: decode_cell(comment[0])
        };
        write_record(ba, "BrtBeginComment", write_BrtBeginComment([range, c]));
        if (c.t && c.t.length > 0) write_record(ba, "BrtCommentText", write_BrtCommentText(c));
        write_record(ba, "BrtEndComment");
        delete c.iauthor;
      });
    });
    write_record(ba, "BrtEndCommentList");
    write_record(ba, "BrtEndComments");
    return ba.end();
  }

  var CT_VBA = "application/vnd.ms-office.vbaProject";

  function make_vba_xls(cfb) {
    var newcfb = CFB.utils.cfb_new({
      root: "R"
    });
    cfb.FullPaths.forEach(function (p, i) {
      if (p.slice(-1) === "/" || !p.match(/_VBA_PROJECT_CUR/)) return;
      var newpath = p.replace(/^[^\/]*/, "R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
      CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i].content);
    });
    return CFB.write(newcfb);
  }

  function fill_vba_xls(cfb, vba) {
    vba.FullPaths.forEach(function (p, i) {
      if (i == 0) return;
      var newpath = p.replace(/[^\/]*[\/]/, "/_VBA_PROJECT_CUR/");
      if (newpath.slice(-1) !== "/") CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i].content);
    });
  }

  var VBAFMTS = ["xlsb", "xlsm", "xlam", "biff8", "xla"];
  RELS.DS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet";
  RELS.MS = "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet";
  /* macro and dialog sheet stubs */

  function parse_ds_bin() {
    return {
      '!type': 'dialog'
    };
  }

  function parse_ds_xml() {
    return {
      '!type': 'dialog'
    };
  }

  function parse_ms_bin() {
    return {
      '!type': 'macro'
    };
  }

  function parse_ms_xml() {
    return {
      '!type': 'macro'
    };
  }
  /* TODO: it will be useful to parse the function str */


  var rc_to_a1 = function () {
    var rcregex = /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
    var rcbase = {
      r: 0,
      c: 0
    };

    function rcfunc($$, $1, $2, $3) {
      var cRel = false,
          rRel = false;
      if ($2.length == 0) rRel = true;else if ($2.charAt(0) == "[") {
        rRel = true;
        $2 = $2.slice(1, -1);
      }
      if ($3.length == 0) cRel = true;else if ($3.charAt(0) == "[") {
        cRel = true;
        $3 = $3.slice(1, -1);
      }
      var R = $2.length > 0 ? parseInt($2, 10) | 0 : 0,
          C = $3.length > 0 ? parseInt($3, 10) | 0 : 0;
      if (cRel) C += rcbase.c;else --C;
      if (rRel) R += rcbase.r;else --R;
      return $1 + (cRel ? "" : "$") + encode_col(C) + (rRel ? "" : "$") + encode_row(R);
    }

    return function rc_to_a1(fstr, base) {
      rcbase = base;
      return fstr.replace(rcregex, rcfunc);
    };
  }();

  var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;

  var a1_to_rc = function () {
    return function a1_to_rc(fstr, base) {
      return fstr.replace(crefregex, function ($0, $1, $2, $3, $4, $5) {
        var c = decode_col($3) - ($2 ? 0 : base.c);
        var r = decode_row($5) - ($4 ? 0 : base.r);
        var R = r == 0 ? "" : !$4 ? "[" + r + "]" : r + 1;
        var C = c == 0 ? "" : !$2 ? "[" + c + "]" : c + 1;
        return $1 + "R" + R + "C" + C;
      });
    };
  }();
  /* no defined name can collide with a valid cell address A1:XFD1048576 ... except LOG10! */


  function shift_formula_str(f, delta) {
    return f.replace(crefregex, function ($0, $1, $2, $3, $4, $5) {
      return $1 + ($2 == "$" ? $2 + $3 : encode_col(decode_col($3) + delta.c)) + ($4 == "$" ? $4 + $5 : encode_row(decode_row($5) + delta.r));
    });
  }

  function shift_formula_xlsx(f, range, cell) {
    var r = decode_range(range),
        s = r.s,
        c = decode_cell(cell);
    var delta = {
      r: c.r - s.r,
      c: c.c - s.c
    };
    return shift_formula_str(f, delta);
  }
  /* TODO: parse formula */


  function fuzzyfmla(f) {
    if (f.length == 1) return false;
    return true;
  }

  function _xlfn(f) {
    return f.replace(/_xlfn\./g, "");
  }

  function parseread1(blob) {
    blob.l += 1;
    return;
  }
  /* [MS-XLS] 2.5.51 */


  function parse_ColRelU(blob, length) {
    var c = blob.read_shift(length == 1 ? 1 : 2);
    return [c & 0x3FFF, c >> 14 & 1, c >> 15 & 1];
  }
  /* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.89 */


  function parse_RgceArea(blob, length, opts) {
    var w = 2;

    if (opts) {
      if (opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob, length, opts);else if (opts.biff == 12) w = 4;
    }

    var r = blob.read_shift(w),
        R = blob.read_shift(w);
    var c = parse_ColRelU(blob, 2);
    var C = parse_ColRelU(blob, 2);
    return {
      s: {
        r: r,
        c: c[0],
        cRel: c[1],
        rRel: c[2]
      },
      e: {
        r: R,
        c: C[0],
        cRel: C[1],
        rRel: C[2]
      }
    };
  }
  /* BIFF 2-5 encodes flags in the row field */


  function parse_RgceArea_BIFF2(blob) {
    var r = parse_ColRelU(blob, 2),
        R = parse_ColRelU(blob, 2);
    var c = blob.read_shift(1);
    var C = blob.read_shift(1);
    return {
      s: {
        r: r[0],
        c: c,
        cRel: r[1],
        rRel: r[2]
      },
      e: {
        r: R[0],
        c: C,
        cRel: R[1],
        rRel: R[2]
      }
    };
  }
  /* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.90 */


  function parse_RgceAreaRel(blob, length, opts) {
    if (opts.biff < 8) return parse_RgceArea_BIFF2(blob, length, opts);
    var r = blob.read_shift(opts.biff == 12 ? 4 : 2),
        R = blob.read_shift(opts.biff == 12 ? 4 : 2);
    var c = parse_ColRelU(blob, 2);
    var C = parse_ColRelU(blob, 2);
    return {
      s: {
        r: r,
        c: c[0],
        cRel: c[1],
        rRel: c[2]
      },
      e: {
        r: R,
        c: C[0],
        cRel: C[1],
        rRel: C[2]
      }
    };
  }
  /* [MS-XLS] 2.5.198.109 ; [MS-XLSB] 2.5.97.91 */


  function parse_RgceLoc(blob, length, opts) {
    if (opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob, length, opts);
    var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
    var c = parse_ColRelU(blob, 2);
    return {
      r: r,
      c: c[0],
      cRel: c[1],
      rRel: c[2]
    };
  }

  function parse_RgceLoc_BIFF2(blob) {
    var r = parse_ColRelU(blob, 2);
    var c = blob.read_shift(1);
    return {
      r: r[0],
      c: c,
      cRel: r[1],
      rRel: r[2]
    };
  }
  /* [MS-XLS] 2.5.198.107, 2.5.47 */


  function parse_RgceElfLoc(blob) {
    var r = blob.read_shift(2);
    var c = blob.read_shift(2);
    return {
      r: r,
      c: c & 0xFF,
      fQuoted: !!(c & 0x4000),
      cRel: c >> 15,
      rRel: c >> 15
    };
  }
  /* [MS-XLS] 2.5.198.111 ; [MS-XLSB] 2.5.97.92 TODO */


  function parse_RgceLocRel(blob, length, opts) {
    var biff = opts && opts.biff ? opts.biff : 8;
    if (biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob, length, opts);
    var r = blob.read_shift(biff >= 12 ? 4 : 2);
    var cl = blob.read_shift(2);
    var cRel = (cl & 0x4000) >> 14,
        rRel = (cl & 0x8000) >> 15;
    cl &= 0x3FFF;
    if (rRel == 1) while (r > 0x7FFFF) r -= 0x100000;
    if (cRel == 1) while (cl > 0x1FFF) cl = cl - 0x4000;
    return {
      r: r,
      c: cl,
      cRel: cRel,
      rRel: rRel
    };
  }

  function parse_RgceLocRel_BIFF2(blob) {
    var rl = blob.read_shift(2);
    var c = blob.read_shift(1);
    var rRel = (rl & 0x8000) >> 15,
        cRel = (rl & 0x4000) >> 14;
    rl &= 0x3FFF;
    if (rRel == 1 && rl >= 0x2000) rl = rl - 0x4000;
    if (cRel == 1 && c >= 0x80) c = c - 0x100;
    return {
      r: rl,
      c: c,
      cRel: cRel,
      rRel: rRel
    };
  }
  /* [MS-XLS] 2.5.198.27 ; [MS-XLSB] 2.5.97.18 */


  function parse_PtgArea(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
    return [type, area];
  }
  /* [MS-XLS] 2.5.198.28 ; [MS-XLSB] 2.5.97.19 */


  function parse_PtgArea3d(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var ixti = blob.read_shift(2, 'i');
    var w = 8;
    if (opts) switch (opts.biff) {
      case 5:
        blob.l += 12;
        w = 6;
        break;

      case 12:
        w = 12;
        break;
    }
    var area = parse_RgceArea(blob, w, opts);
    return [type, ixti, area];
  }
  /* [MS-XLS] 2.5.198.29 ; [MS-XLSB] 2.5.97.20 */


  function parse_PtgAreaErr(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    blob.l += opts && opts.biff > 8 ? 12 : opts.biff < 8 ? 6 : 8;
    return [type];
  }
  /* [MS-XLS] 2.5.198.30 ; [MS-XLSB] 2.5.97.21 */


  function parse_PtgAreaErr3d(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var ixti = blob.read_shift(2);
    var w = 8;
    if (opts) switch (opts.biff) {
      case 5:
        blob.l += 12;
        w = 6;
        break;

      case 12:
        w = 12;
        break;
    }
    blob.l += w;
    return [type, ixti];
  }
  /* [MS-XLS] 2.5.198.31 ; [MS-XLSB] 2.5.97.22 */


  function parse_PtgAreaN(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var area = parse_RgceAreaRel(blob, length - 1, opts);
    return [type, area];
  }
  /* [MS-XLS] 2.5.198.32 ; [MS-XLSB] 2.5.97.23 */


  function parse_PtgArray(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
    return [type];
  }
  /* [MS-XLS] 2.5.198.33 ; [MS-XLSB] 2.5.97.24 */


  function parse_PtgAttrBaxcel(blob) {
    var bitSemi = blob[blob.l + 1] & 0x01;
    /* 1 = volatile */

    var bitBaxcel = 1;
    blob.l += 4;
    return [bitSemi, bitBaxcel];
  }
  /* [MS-XLS] 2.5.198.34 ; [MS-XLSB] 2.5.97.25 */


  function parse_PtgAttrChoose(blob, length, opts) {
    blob.l += 2;
    var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    var o = [];
    /* offset is 1 less than the number of elements */

    for (var i = 0; i <= offset; ++i) o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));

    return o;
  }
  /* [MS-XLS] 2.5.198.35 ; [MS-XLSB] 2.5.97.26 */


  function parse_PtgAttrGoto(blob, length, opts) {
    var bitGoto = blob[blob.l + 1] & 0xFF ? 1 : 0;
    blob.l += 2;
    return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
  }
  /* [MS-XLS] 2.5.198.36 ; [MS-XLSB] 2.5.97.27 */


  function parse_PtgAttrIf(blob, length, opts) {
    var bitIf = blob[blob.l + 1] & 0xFF ? 1 : 0;
    blob.l += 2;
    return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
  }
  /* [MS-XLSB] 2.5.97.28 */


  function parse_PtgAttrIfError(blob) {
    var bitIf = blob[blob.l + 1] & 0xFF ? 1 : 0;
    blob.l += 2;
    return [bitIf, blob.read_shift(2)];
  }
  /* [MS-XLS] 2.5.198.37 ; [MS-XLSB] 2.5.97.29 */


  function parse_PtgAttrSemi(blob, length, opts) {
    var bitSemi = blob[blob.l + 1] & 0xFF ? 1 : 0;
    blob.l += opts && opts.biff == 2 ? 3 : 4;
    return [bitSemi];
  }
  /* [MS-XLS] 2.5.198.40 ; [MS-XLSB] 2.5.97.32 */


  function parse_PtgAttrSpaceType(blob) {
    var type = blob.read_shift(1),
        cch = blob.read_shift(1);
    return [type, cch];
  }
  /* [MS-XLS] 2.5.198.38 ; [MS-XLSB] 2.5.97.30 */


  function parse_PtgAttrSpace(blob) {
    blob.read_shift(2);
    return parse_PtgAttrSpaceType(blob, 2);
  }
  /* [MS-XLS] 2.5.198.39 ; [MS-XLSB] 2.5.97.31 */


  function parse_PtgAttrSpaceSemi(blob) {
    blob.read_shift(2);
    return parse_PtgAttrSpaceType(blob, 2);
  }
  /* [MS-XLS] 2.5.198.84 ; [MS-XLSB] 2.5.97.68 TODO */


  function parse_PtgRef(blob, length, opts) {
    //var ptg = blob[blob.l] & 0x1F;
    var type = (blob[blob.l] & 0x60) >> 5;
    blob.l += 1;
    var loc = parse_RgceLoc(blob, 0, opts);
    return [type, loc];
  }
  /* [MS-XLS] 2.5.198.88 ; [MS-XLSB] 2.5.97.72 TODO */


  function parse_PtgRefN(blob, length, opts) {
    var type = (blob[blob.l] & 0x60) >> 5;
    blob.l += 1;
    var loc = parse_RgceLocRel(blob, 0, opts);
    return [type, loc];
  }
  /* [MS-XLS] 2.5.198.85 ; [MS-XLSB] 2.5.97.69 TODO */


  function parse_PtgRef3d(blob, length, opts) {
    var type = (blob[blob.l] & 0x60) >> 5;
    blob.l += 1;
    var ixti = blob.read_shift(2); // XtiIndex

    if (opts && opts.biff == 5) blob.l += 12;
    var loc = parse_RgceLoc(blob, 0, opts); // TODO: or RgceLocRel

    return [type, ixti, loc];
  }
  /* [MS-XLS] 2.5.198.62 ; [MS-XLSB] 2.5.97.45 TODO */


  function parse_PtgFunc(blob, length, opts) {
    //var ptg = blob[blob.l] & 0x1F;
    var type = (blob[blob.l] & 0x60) >> 5;
    blob.l += 1;
    var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
    return [FtabArgc[iftab], Ftab[iftab], type];
  }
  /* [MS-XLS] 2.5.198.63 ; [MS-XLSB] 2.5.97.46 TODO */


  function parse_PtgFuncVar(blob, length, opts) {
    var type = blob[blob.l++];
    var cparams = blob.read_shift(1),
        tab = opts && opts.biff <= 3 ? [type == 0x58 ? -1 : 0, blob.read_shift(1)] : parsetab(blob);
    return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
  }

  function parsetab(blob) {
    return [blob[blob.l + 1] >> 7, blob.read_shift(2) & 0x7FFF];
  }
  /* [MS-XLS] 2.5.198.41 ; [MS-XLSB] 2.5.97.33 */


  function parse_PtgAttrSum(blob, length, opts) {
    blob.l += opts && opts.biff == 2 ? 3 : 4;
    return;
  }
  /* [MS-XLS] 2.5.198.58 ; [MS-XLSB] 2.5.97.40 */


  function parse_PtgExp(blob, length, opts) {
    blob.l++;
    if (opts && opts.biff == 12) return [blob.read_shift(4, 'i'), 0];
    var row = blob.read_shift(2);
    var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    return [row, col];
  }
  /* [MS-XLS] 2.5.198.57 ; [MS-XLSB] 2.5.97.39 */


  function parse_PtgErr(blob) {
    blob.l++;
    return BErr[blob.read_shift(1)];
  }
  /* [MS-XLS] 2.5.198.66 ; [MS-XLSB] 2.5.97.49 */


  function parse_PtgInt(blob) {
    blob.l++;
    return blob.read_shift(2);
  }
  /* [MS-XLS] 2.5.198.42 ; [MS-XLSB] 2.5.97.34 */


  function parse_PtgBool(blob) {
    blob.l++;
    return blob.read_shift(1) !== 0;
  }
  /* [MS-XLS] 2.5.198.79 ; [MS-XLSB] 2.5.97.63 */


  function parse_PtgNum(blob) {
    blob.l++;
    return parse_Xnum(blob, 8);
  }
  /* [MS-XLS] 2.5.198.89 ; [MS-XLSB] 2.5.97.74 */


  function parse_PtgStr(blob, length, opts) {
    blob.l++;
    return parse_ShortXLUnicodeString(blob, length - 1, opts);
  }
  /* [MS-XLS] 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */

  /* [MS-XLSB] 2.5.97.93 + 2.5.97.9{4,5,6,7} */


  function parse_SerAr(blob, biff) {
    var val = [blob.read_shift(1)];
    if (biff == 12) switch (val[0]) {
      case 0x02:
        val[0] = 0x04;
        break;

      /* SerBool */

      case 0x04:
        val[0] = 0x10;
        break;

      /* SerErr */

      case 0x00:
        val[0] = 0x01;
        break;

      /* SerNum */

      case 0x01:
        val[0] = 0x02;
        break;

      /* SerStr */
    }

    switch (val[0]) {
      case 0x04:
        /* SerBool -- boolean */
        val[1] = parsebool(blob, 1) ? 'TRUE' : 'FALSE';
        if (biff != 12) blob.l += 7;
        break;

      case 0x25:
      /* appears to be an alias */

      case 0x10:
        /* SerErr -- error */
        val[1] = BErr[blob[blob.l]];
        blob.l += biff == 12 ? 4 : 8;
        break;

      case 0x00:
        /* SerNil -- honestly, I'm not sure how to reproduce this */
        blob.l += 8;
        break;

      case 0x01:
        /* SerNum -- Xnum */
        val[1] = parse_Xnum(blob, 8);
        break;

      case 0x02:
        /* SerStr -- XLUnicodeString (<256 chars) */
        val[1] = parse_XLUnicodeString2(blob, 0, {
          biff: biff > 0 && biff < 8 ? 2 : biff
        });
        break;

      default:
        throw new Error("Bad SerAr: " + val[0]);

      /* Unreachable */
    }

    return val;
  }
  /* [MS-XLS] 2.5.198.61 ; [MS-XLSB] 2.5.97.44 */


  function parse_PtgExtraMem(blob, cce, opts) {
    var count = blob.read_shift(opts.biff == 12 ? 4 : 2);
    var out = [];

    for (var i = 0; i != count; ++i) out.push((opts.biff == 12 ? parse_UncheckedRfX : parse_Ref8U)(blob, 8));

    return out;
  }
  /* [MS-XLS] 2.5.198.59 ; [MS-XLSB] 2.5.97.41 */


  function parse_PtgExtraArray(blob, length, opts) {
    var rows = 0,
        cols = 0;

    if (opts.biff == 12) {
      rows = blob.read_shift(4); // DRw

      cols = blob.read_shift(4); // DCol
    } else {
      cols = 1 + blob.read_shift(1); //DColByteU

      rows = 1 + blob.read_shift(2); //DRw
    }

    if (opts.biff >= 2 && opts.biff < 8) {
      --rows;
      if (--cols == 0) cols = 0x100;
    } // $FlowIgnore


    for (var i = 0, o = []; i != rows && (o[i] = []); ++i) for (var j = 0; j != cols; ++j) o[i][j] = parse_SerAr(blob, opts.biff);

    return o;
  }
  /* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 */


  function parse_PtgName(blob, length, opts) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var w = !opts || opts.biff >= 8 ? 4 : 2;
    var nameindex = blob.read_shift(w);

    switch (opts.biff) {
      case 2:
        blob.l += 5;
        break;

      case 3:
      case 4:
        blob.l += 8;
        break;

      case 5:
        blob.l += 12;
        break;
    }

    return [type, 0, nameindex];
  }
  /* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 */


  function parse_PtgNameX(blob, length, opts) {
    if (opts.biff == 5) return parse_PtgNameX_BIFF5(blob, length, opts);
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var ixti = blob.read_shift(2); // XtiIndex

    var nameindex = blob.read_shift(4);
    return [type, ixti, nameindex];
  }

  function parse_PtgNameX_BIFF5(blob) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var ixti = blob.read_shift(2, 'i'); // XtiIndex

    blob.l += 8;
    var nameindex = blob.read_shift(2);
    blob.l += 12;
    return [type, ixti, nameindex];
  }
  /* [MS-XLS] 2.5.198.70 ; [MS-XLSB] 2.5.97.54 */


  function parse_PtgMemArea(blob, length, opts) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    blob.l += opts && opts.biff == 2 ? 3 : 4;
    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    return [type, cce];
  }
  /* [MS-XLS] 2.5.198.72 ; [MS-XLSB] 2.5.97.56 */


  function parse_PtgMemFunc(blob, length, opts) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    return [type, cce];
  }
  /* [MS-XLS] 2.5.198.86 ; [MS-XLSB] 2.5.97.69 */


  function parse_PtgRefErr(blob, length, opts) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    blob.l += 4;
    if (opts.biff < 8) blob.l--;
    if (opts.biff == 12) blob.l += 2;
    return [type];
  }
  /* [MS-XLS] 2.5.198.87 ; [MS-XLSB] 2.5.97.71 */


  function parse_PtgRefErr3d(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var ixti = blob.read_shift(2);
    var w = 4;
    if (opts) switch (opts.biff) {
      case 5:
        w = 15;
        break;

      case 12:
        w = 6;
        break;
    }
    blob.l += w;
    return [type, ixti];
  }
  /* [MS-XLS] 2.5.198.71 ; [MS-XLSB] 2.5.97.55 */


  var parse_PtgMemErr = parsenoop;
  /* [MS-XLS] 2.5.198.73  ; [MS-XLSB] 2.5.97.57 */

  var parse_PtgMemNoMem = parsenoop;
  /* [MS-XLS] 2.5.198.92 */

  var parse_PtgTbl = parsenoop;

  function parse_PtgElfLoc(blob, length, opts) {
    blob.l += 2;
    return [parse_RgceElfLoc(blob, 4, opts)];
  }

  function parse_PtgElfNoop(blob) {
    blob.l += 6;
    return [];
  }
  /* [MS-XLS] 2.5.198.46 */


  var parse_PtgElfCol = parse_PtgElfLoc;
  /* [MS-XLS] 2.5.198.47 */

  var parse_PtgElfColS = parse_PtgElfNoop;
  /* [MS-XLS] 2.5.198.48 */

  var parse_PtgElfColSV = parse_PtgElfNoop;
  /* [MS-XLS] 2.5.198.49 */

  var parse_PtgElfColV = parse_PtgElfLoc;
  /* [MS-XLS] 2.5.198.50 */

  function parse_PtgElfLel(blob) {
    blob.l += 2;
    return [parseuint16(blob), blob.read_shift(2) & 0x01];
  }
  /* [MS-XLS] 2.5.198.51 */


  var parse_PtgElfRadical = parse_PtgElfLoc;
  /* [MS-XLS] 2.5.198.52 */

  var parse_PtgElfRadicalLel = parse_PtgElfLel;
  /* [MS-XLS] 2.5.198.53 */

  var parse_PtgElfRadicalS = parse_PtgElfNoop;
  /* [MS-XLS] 2.5.198.54 */

  var parse_PtgElfRw = parse_PtgElfLoc;
  /* [MS-XLS] 2.5.198.55 */

  var parse_PtgElfRwV = parse_PtgElfLoc;
  /* [MS-XLSB] 2.5.97.52 TODO */

  var PtgListRT = ["Data", "All", "Headers", "??", "?Data2", "??", "?DataHeaders", "??", "Totals", "??", "??", "??", "?DataTotals", "??", "??", "??", "?Current"];

  function parse_PtgList(blob) {
    blob.l += 2;
    var ixti = blob.read_shift(2);
    var flags = blob.read_shift(2);
    var idx = blob.read_shift(4);
    var c = blob.read_shift(2);
    var C = blob.read_shift(2);
    var rt = PtgListRT[flags >> 2 & 0x1F];
    return {
      ixti: ixti,
      coltype: flags & 0x3,
      rt: rt,
      idx: idx,
      c: c,
      C: C
    };
  }
  /* [MS-XLS] 2.5.198.91 ; [MS-XLSB] 2.5.97.76 */


  function parse_PtgSxName(blob) {
    blob.l += 2;
    return [blob.read_shift(4)];
  }
  /* [XLS] old spec */


  function parse_PtgSheet(blob, length, opts) {
    blob.l += 5;
    blob.l += 2;
    blob.l += opts.biff == 2 ? 1 : 4;
    return ["PTGSHEET"];
  }

  function parse_PtgEndSheet(blob, length, opts) {
    blob.l += opts.biff == 2 ? 4 : 5;
    return ["PTGENDSHEET"];
  }

  function parse_PtgMemAreaN(blob) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var cce = blob.read_shift(2);
    return [type, cce];
  }

  function parse_PtgMemNoMemN(blob) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var cce = blob.read_shift(2);
    return [type, cce];
  }

  function parse_PtgAttrNoop(blob) {
    blob.l += 4;
    return [0, 0];
  }
  /* [MS-XLS] 2.5.198.25 ; [MS-XLSB] 2.5.97.16 */


  var PtgTypes = {
    0x01: {
      n: 'PtgExp',
      f: parse_PtgExp
    },
    0x02: {
      n: 'PtgTbl',
      f: parse_PtgTbl
    },
    0x03: {
      n: 'PtgAdd',
      f: parseread1
    },
    0x04: {
      n: 'PtgSub',
      f: parseread1
    },
    0x05: {
      n: 'PtgMul',
      f: parseread1
    },
    0x06: {
      n: 'PtgDiv',
      f: parseread1
    },
    0x07: {
      n: 'PtgPower',
      f: parseread1
    },
    0x08: {
      n: 'PtgConcat',
      f: parseread1
    },
    0x09: {
      n: 'PtgLt',
      f: parseread1
    },
    0x0A: {
      n: 'PtgLe',
      f: parseread1
    },
    0x0B: {
      n: 'PtgEq',
      f: parseread1
    },
    0x0C: {
      n: 'PtgGe',
      f: parseread1
    },
    0x0D: {
      n: 'PtgGt',
      f: parseread1
    },
    0x0E: {
      n: 'PtgNe',
      f: parseread1
    },
    0x0F: {
      n: 'PtgIsect',
      f: parseread1
    },
    0x10: {
      n: 'PtgUnion',
      f: parseread1
    },
    0x11: {
      n: 'PtgRange',
      f: parseread1
    },
    0x12: {
      n: 'PtgUplus',
      f: parseread1
    },
    0x13: {
      n: 'PtgUminus',
      f: parseread1
    },
    0x14: {
      n: 'PtgPercent',
      f: parseread1
    },
    0x15: {
      n: 'PtgParen',
      f: parseread1
    },
    0x16: {
      n: 'PtgMissArg',
      f: parseread1
    },
    0x17: {
      n: 'PtgStr',
      f: parse_PtgStr
    },
    0x1A: {
      n: 'PtgSheet',
      f: parse_PtgSheet
    },
    0x1B: {
      n: 'PtgEndSheet',
      f: parse_PtgEndSheet
    },
    0x1C: {
      n: 'PtgErr',
      f: parse_PtgErr
    },
    0x1D: {
      n: 'PtgBool',
      f: parse_PtgBool
    },
    0x1E: {
      n: 'PtgInt',
      f: parse_PtgInt
    },
    0x1F: {
      n: 'PtgNum',
      f: parse_PtgNum
    },
    0x20: {
      n: 'PtgArray',
      f: parse_PtgArray
    },
    0x21: {
      n: 'PtgFunc',
      f: parse_PtgFunc
    },
    0x22: {
      n: 'PtgFuncVar',
      f: parse_PtgFuncVar
    },
    0x23: {
      n: 'PtgName',
      f: parse_PtgName
    },
    0x24: {
      n: 'PtgRef',
      f: parse_PtgRef
    },
    0x25: {
      n: 'PtgArea',
      f: parse_PtgArea
    },
    0x26: {
      n: 'PtgMemArea',
      f: parse_PtgMemArea
    },
    0x27: {
      n: 'PtgMemErr',
      f: parse_PtgMemErr
    },
    0x28: {
      n: 'PtgMemNoMem',
      f: parse_PtgMemNoMem
    },
    0x29: {
      n: 'PtgMemFunc',
      f: parse_PtgMemFunc
    },
    0x2A: {
      n: 'PtgRefErr',
      f: parse_PtgRefErr
    },
    0x2B: {
      n: 'PtgAreaErr',
      f: parse_PtgAreaErr
    },
    0x2C: {
      n: 'PtgRefN',
      f: parse_PtgRefN
    },
    0x2D: {
      n: 'PtgAreaN',
      f: parse_PtgAreaN
    },
    0x2E: {
      n: 'PtgMemAreaN',
      f: parse_PtgMemAreaN
    },
    0x2F: {
      n: 'PtgMemNoMemN',
      f: parse_PtgMemNoMemN
    },
    0x39: {
      n: 'PtgNameX',
      f: parse_PtgNameX
    },
    0x3A: {
      n: 'PtgRef3d',
      f: parse_PtgRef3d
    },
    0x3B: {
      n: 'PtgArea3d',
      f: parse_PtgArea3d
    },
    0x3C: {
      n: 'PtgRefErr3d',
      f: parse_PtgRefErr3d
    },
    0x3D: {
      n: 'PtgAreaErr3d',
      f: parse_PtgAreaErr3d
    },
    0xFF: {}
  };
  /* These are duplicated in the PtgTypes table */

  var PtgDupes = {
    0x40: 0x20,
    0x60: 0x20,
    0x41: 0x21,
    0x61: 0x21,
    0x42: 0x22,
    0x62: 0x22,
    0x43: 0x23,
    0x63: 0x23,
    0x44: 0x24,
    0x64: 0x24,
    0x45: 0x25,
    0x65: 0x25,
    0x46: 0x26,
    0x66: 0x26,
    0x47: 0x27,
    0x67: 0x27,
    0x48: 0x28,
    0x68: 0x28,
    0x49: 0x29,
    0x69: 0x29,
    0x4A: 0x2A,
    0x6A: 0x2A,
    0x4B: 0x2B,
    0x6B: 0x2B,
    0x4C: 0x2C,
    0x6C: 0x2C,
    0x4D: 0x2D,
    0x6D: 0x2D,
    0x4E: 0x2E,
    0x6E: 0x2E,
    0x4F: 0x2F,
    0x6F: 0x2F,
    0x58: 0x22,
    0x78: 0x22,
    0x59: 0x39,
    0x79: 0x39,
    0x5A: 0x3A,
    0x7A: 0x3A,
    0x5B: 0x3B,
    0x7B: 0x3B,
    0x5C: 0x3C,
    0x7C: 0x3C,
    0x5D: 0x3D,
    0x7D: 0x3D
  };

  (function () {
    for (var y in PtgDupes) PtgTypes[y] = PtgTypes[PtgDupes[y]];
  })();

  var Ptg18 = {
    0x01: {
      n: 'PtgElfLel',
      f: parse_PtgElfLel
    },
    0x02: {
      n: 'PtgElfRw',
      f: parse_PtgElfRw
    },
    0x03: {
      n: 'PtgElfCol',
      f: parse_PtgElfCol
    },
    0x06: {
      n: 'PtgElfRwV',
      f: parse_PtgElfRwV
    },
    0x07: {
      n: 'PtgElfColV',
      f: parse_PtgElfColV
    },
    0x0A: {
      n: 'PtgElfRadical',
      f: parse_PtgElfRadical
    },
    0x0B: {
      n: 'PtgElfRadicalS',
      f: parse_PtgElfRadicalS
    },
    0x0D: {
      n: 'PtgElfColS',
      f: parse_PtgElfColS
    },
    0x0F: {
      n: 'PtgElfColSV',
      f: parse_PtgElfColSV
    },
    0x10: {
      n: 'PtgElfRadicalLel',
      f: parse_PtgElfRadicalLel
    },
    0x19: {
      n: 'PtgList',
      f: parse_PtgList
    },
    0x1D: {
      n: 'PtgSxName',
      f: parse_PtgSxName
    },
    0xFF: {}
  };
  var Ptg19 = {
    0x00: {
      n: 'PtgAttrNoop',
      f: parse_PtgAttrNoop
    },
    0x01: {
      n: 'PtgAttrSemi',
      f: parse_PtgAttrSemi
    },
    0x02: {
      n: 'PtgAttrIf',
      f: parse_PtgAttrIf
    },
    0x04: {
      n: 'PtgAttrChoose',
      f: parse_PtgAttrChoose
    },
    0x08: {
      n: 'PtgAttrGoto',
      f: parse_PtgAttrGoto
    },
    0x10: {
      n: 'PtgAttrSum',
      f: parse_PtgAttrSum
    },
    0x20: {
      n: 'PtgAttrBaxcel',
      f: parse_PtgAttrBaxcel
    },
    0x40: {
      n: 'PtgAttrSpace',
      f: parse_PtgAttrSpace
    },
    0x41: {
      n: 'PtgAttrSpaceSemi',
      f: parse_PtgAttrSpaceSemi
    },
    0x80: {
      n: 'PtgAttrIfError',
      f: parse_PtgAttrIfError
    },
    0xFF: {}
  };
  Ptg19[0x21] = Ptg19[0x20];
  /* [MS-XLS] 2.5.198.103 ; [MS-XLSB] 2.5.97.87 */

  function parse_RgbExtra(blob, length, rgce, opts) {
    if (opts.biff < 8) return parsenoop(blob, length);
    var target = blob.l + length;
    var o = [];

    for (var i = 0; i !== rgce.length; ++i) {
      switch (rgce[i][0]) {
        case 'PtgArray':
          /* PtgArray -> PtgExtraArray */
          rgce[i][1] = parse_PtgExtraArray(blob, 0, opts);
          o.push(rgce[i][1]);
          break;

        case 'PtgMemArea':
          /* PtgMemArea -> PtgExtraMem */
          rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1], opts);
          o.push(rgce[i][2]);
          break;

        case 'PtgExp':
          /* PtgExp -> PtgExtraCol */
          if (opts && opts.biff == 12) {
            rgce[i][1][1] = blob.read_shift(4);
            o.push(rgce[i][1]);
          }

          break;

        case 'PtgList':
        /* TODO: PtgList -> PtgExtraList */

        case 'PtgElfRadicalS':
        /* TODO: PtgElfRadicalS -> PtgExtraElf */

        case 'PtgElfColS':
        /* TODO: PtgElfColS -> PtgExtraElf */

        case 'PtgElfColSV':
          /* TODO: PtgElfColSV -> PtgExtraElf */
          throw "Unsupported " + rgce[i][0];

        default:
          break;
      }
    }

    length = target - blob.l;
    /* note: this is technically an error but Excel disregards */
    //if(target !== blob.l && blob.l !== target - length) throw new Error(target + " != " + blob.l);

    if (length !== 0) o.push(parsenoop(blob, length));
    return o;
  }
  /* [MS-XLS] 2.5.198.104 ; [MS-XLSB] 2.5.97.88 */


  function parse_Rgce(blob, length, opts) {
    var target = blob.l + length;
    var R,
        id,
        ptgs = [];

    while (target != blob.l) {
      length = target - blob.l;
      id = blob[blob.l];
      R = PtgTypes[id];
      if (id === 0x18 || id === 0x19) R = (id === 0x18 ? Ptg18 : Ptg19)[blob[blob.l + 1]];

      if (!R || !R.f) {
        /*ptgs.push*/
        parsenoop(blob, length);
      } else {
        ptgs.push([R.n, R.f(blob, length, opts)]);
      }
    }

    return ptgs;
  }

  function stringify_array(f) {
    var o = [];

    for (var i = 0; i < f.length; ++i) {
      var x = f[i],
          r = [];

      for (var j = 0; j < x.length; ++j) {
        var y = x[j];
        if (y) switch (y[0]) {
          // TODO: handle embedded quotes
          case 0x02:
            r.push('"' + y[1].replace(/"/g, '""') + '"');
            break;

          default:
            r.push(y[1]);
        } else r.push("");
      }

      o.push(r.join(","));
    }

    return o.join(";");
  }
  /* [MS-XLS] 2.2.2 ; [MS-XLSB] 2.2.2 TODO */


  var PtgBinOp = {
    PtgAdd: "+",
    PtgConcat: "&",
    PtgDiv: "/",
    PtgEq: "=",
    PtgGe: ">=",
    PtgGt: ">",
    PtgLe: "<=",
    PtgLt: "<",
    PtgMul: "*",
    PtgNe: "<>",
    PtgPower: "^",
    PtgSub: "-"
  }; // List of invalid characters needs to be tested further

  var quoteCharacters = new RegExp(/[^\w\u4E00-\u9FFF\u3040-\u30FF]/);

  function formula_quote_sheet_name(sname, opts) {
    if (!sname && !(opts && opts.biff <= 5 && opts.biff >= 2)) throw new Error("empty sheet name");
    if (quoteCharacters.test(sname)) return "'" + sname + "'";
    return sname;
  }

  function get_ixti_raw(supbooks, ixti, opts) {
    if (!supbooks) return "SH33TJSERR0";
    if (opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti])) return supbooks.SheetNames[ixti];
    if (!supbooks.XTI) return "SH33TJSERR6";
    var XTI = supbooks.XTI[ixti];

    if (opts.biff < 8) {
      if (ixti > 10000) ixti -= 65536;
      if (ixti < 0) ixti = -ixti;
      return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
    }

    if (!XTI) return "SH33TJSERR1";
    var o = "";
    if (opts.biff > 8) switch (supbooks[XTI[0]][0]) {
      case 0x0165:
        /* 'BrtSupSelf' */
        o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
        return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];

      case 0x0166:
        /* 'BrtSupSame' */
        if (opts.SID != null) return supbooks.SheetNames[opts.SID];
        return "SH33TJSSAME" + supbooks[XTI[0]][0];

      case 0x0163:
      /* 'BrtSupBookSrc' */

      /* falls through */

      default:
        return "SH33TJSSRC" + supbooks[XTI[0]][0];
    }

    switch (supbooks[XTI[0]][0][0]) {
      case 0x0401:
        o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]] || "SH33TJSERR3";
        return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];

      case 0x3A01:
        return supbooks[XTI[0]].slice(1).map(function (name) {
          return name.Name;
        }).join(";;");
      //return "SH33TJSERR8";

      default:
        if (!supbooks[XTI[0]][0][3]) return "SH33TJSERR2";
        o = XTI[1] == -1 ? "#REF" : supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4";
        return XTI[1] == XTI[2] ? o : o + ":" + supbooks[XTI[0]][0][3][XTI[2]];
    }
  }

  function get_ixti(supbooks, ixti, opts) {
    return formula_quote_sheet_name(get_ixti_raw(supbooks, ixti, opts), opts);
  }

  function stringify_formula(formula
  /*Array<any>*/
  , range, cell, supbooks, opts) {
    var biff = opts && opts.biff || 8;
    var _range =
    /*range != null ? range :*/
    {
      s: {
        c: 0,
        r: 0
      },
      e: {
        c: 0,
        r: 0
      }
    };
    var stack = [],
        e1,
        e2,
        c,
        ixti = 0,
        nameidx = 0,
        r,
        sname = "";
    if (!formula[0] || !formula[0][0]) return "";
    var last_sp = -1,
        sp = "";

    for (var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
      var f = formula[0][ff];

      switch (f[0]) {
        case 'PtgUminus':
          /* [MS-XLS] 2.5.198.93 */
          stack.push("-" + stack.pop());
          break;

        case 'PtgUplus':
          /* [MS-XLS] 2.5.198.95 */
          stack.push("+" + stack.pop());
          break;

        case 'PtgPercent':
          /* [MS-XLS] 2.5.198.81 */
          stack.push(stack.pop() + "%");
          break;

        case 'PtgAdd':
        /* [MS-XLS] 2.5.198.26 */

        case 'PtgConcat':
        /* [MS-XLS] 2.5.198.43 */

        case 'PtgDiv':
        /* [MS-XLS] 2.5.198.45 */

        case 'PtgEq':
        /* [MS-XLS] 2.5.198.56 */

        case 'PtgGe':
        /* [MS-XLS] 2.5.198.64 */

        case 'PtgGt':
        /* [MS-XLS] 2.5.198.65 */

        case 'PtgLe':
        /* [MS-XLS] 2.5.198.68 */

        case 'PtgLt':
        /* [MS-XLS] 2.5.198.69 */

        case 'PtgMul':
        /* [MS-XLS] 2.5.198.75 */

        case 'PtgNe':
        /* [MS-XLS] 2.5.198.78 */

        case 'PtgPower':
        /* [MS-XLS] 2.5.198.82 */

        case 'PtgSub':
          /* [MS-XLS] 2.5.198.90 */
          e1 = stack.pop();
          e2 = stack.pop();

          if (last_sp >= 0) {
            switch (formula[0][last_sp][1][0]) {
              case 0:
                // $FlowIgnore
                sp = fill(" ", formula[0][last_sp][1][1]);
                break;

              case 1:
                // $FlowIgnore
                sp = fill("\r", formula[0][last_sp][1][1]);
                break;

              default:
                sp = ""; // $FlowIgnore

                if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
            }

            e2 = e2 + sp;
            last_sp = -1;
          }

          stack.push(e2 + PtgBinOp[f[0]] + e1);
          break;

        case 'PtgIsect':
          /* [MS-XLS] 2.5.198.67 */
          e1 = stack.pop();
          e2 = stack.pop();
          stack.push(e2 + " " + e1);
          break;

        case 'PtgUnion':
          /* [MS-XLS] 2.5.198.94 */
          e1 = stack.pop();
          e2 = stack.pop();
          stack.push(e2 + "," + e1);
          break;

        case 'PtgRange':
          /* [MS-XLS] 2.5.198.83 */
          e1 = stack.pop();
          e2 = stack.pop();
          stack.push(e2 + ":" + e1);
          break;

        case 'PtgAttrChoose':
          /* [MS-XLS] 2.5.198.34 */
          break;

        case 'PtgAttrGoto':
          /* [MS-XLS] 2.5.198.35 */
          break;

        case 'PtgAttrIf':
          /* [MS-XLS] 2.5.198.36 */
          break;

        case 'PtgAttrIfError':
          /* [MS-XLSB] 2.5.97.28 */
          break;

        case 'PtgRef':
          /* [MS-XLS] 2.5.198.84 */
          c = shift_cell_xls(f[1][1], _range, opts);
          stack.push(encode_cell_xls(c, biff));
          break;

        case 'PtgRefN':
          /* [MS-XLS] 2.5.198.88 */
          c = cell ? shift_cell_xls(f[1][1], cell, opts) : f[1][1];
          stack.push(encode_cell_xls(c, biff));
          break;

        case 'PtgRef3d':
          /* [MS-XLS] 2.5.198.85 */
          ixti = f[1][1];
          c = shift_cell_xls(f[1][2], _range, opts);
          sname = get_ixti(supbooks, ixti, opts);
          var w = sname;
          /* IE9 fails on defined names */
          // eslint-disable-line no-unused-vars

          stack.push(sname + "!" + encode_cell_xls(c, biff));
          break;

        case 'PtgFunc':
        /* [MS-XLS] 2.5.198.62 */

        case 'PtgFuncVar':
          /* [MS-XLS] 2.5.198.63 */

          /* f[1] = [argc, func, type] */
          var argc = f[1][0],
              func = f[1][1];
          if (!argc) argc = 0;
          argc &= 0x7F;
          var args = argc == 0 ? [] : stack.slice(-argc);
          stack.length -= argc;
          if (func === 'User') func = args.shift();
          stack.push(func + "(" + args.join(",") + ")");
          break;

        case 'PtgBool':
          /* [MS-XLS] 2.5.198.42 */
          stack.push(f[1] ? "TRUE" : "FALSE");
          break;

        case 'PtgInt':
          /* [MS-XLS] 2.5.198.66 */
          stack.push(f[1]);
          break;

        case 'PtgNum':
          /* [MS-XLS] 2.5.198.79 TODO: precision? */
          stack.push(String(f[1]));
          break;

        case 'PtgStr':
          /* [MS-XLS] 2.5.198.89 */
          // $FlowIgnore
          stack.push('"' + f[1].replace(/"/g, '""') + '"');
          break;

        case 'PtgErr':
          /* [MS-XLS] 2.5.198.57 */
          stack.push(f[1]);
          break;

        case 'PtgAreaN':
          /* [MS-XLS] 2.5.198.31 TODO */
          r = shift_range_xls(f[1][1], cell ? {
            s: cell
          } : _range, opts);
          stack.push(encode_range_xls(r, opts));
          break;

        case 'PtgArea':
          /* [MS-XLS] 2.5.198.27 TODO: fixed points */
          r = shift_range_xls(f[1][1], _range, opts);
          stack.push(encode_range_xls(r, opts));
          break;

        case 'PtgArea3d':
          /* [MS-XLS] 2.5.198.28 TODO */
          ixti = f[1][1];
          r = f[1][2];
          sname = get_ixti(supbooks, ixti, opts);
          stack.push(sname + "!" + encode_range_xls(r, opts));
          break;

        case 'PtgAttrSum':
          /* [MS-XLS] 2.5.198.41 */
          stack.push("SUM(" + stack.pop() + ")");
          break;

        case 'PtgAttrBaxcel':
        /* [MS-XLS] 2.5.198.33 */

        case 'PtgAttrSemi':
          /* [MS-XLS] 2.5.198.37 */
          break;

        case 'PtgName':
          /* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 TODO: revisions */

          /* f[1] = type, 0, nameindex */
          nameidx = f[1][2];
          var lbl = (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx];
          var name = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
          if (name in XLSXFutureFunctions) name = XLSXFutureFunctions[name];
          stack.push(name);
          break;

        case 'PtgNameX':
          /* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 TODO: revisions */

          /* f[1] = type, ixti, nameindex */
          var bookidx = f[1][1];
          nameidx = f[1][2];
          var externbook;
          /* TODO: Properly handle missing values -- this should be using get_ixti_raw primarily */

          if (opts.biff <= 5) {
            if (bookidx < 0) bookidx = -bookidx;
            if (supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];
          } else {
            var o = "";

            if (((supbooks[bookidx] || [])[0] || [])[0] == 0x3A01) {
              /* empty */
            } else if (((supbooks[bookidx] || [])[0] || [])[0] == 0x0401) {
              if (supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {
                o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab - 1] + "!";
              }
            } else o = supbooks.SheetNames[nameidx - 1] + "!";

            if (supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name;else if (supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name;else {
              var ixtidata = get_ixti_raw(supbooks, bookidx, opts).split(";;");
              if (ixtidata[nameidx - 1]) o = ixtidata[nameidx - 1]; // TODO: confirm this is correct
              else o += "SH33TJSERRX";
            }
            stack.push(o);
            break;
          }

          if (!externbook) externbook = {
            Name: "SH33TJSERRY"
          };
          stack.push(externbook.Name);
          break;

        case 'PtgParen':
          /* [MS-XLS] 2.5.198.80 */
          var lp = '(',
              rp = ')';

          if (last_sp >= 0) {
            sp = "";

            switch (formula[0][last_sp][1][0]) {
              // $FlowIgnore
              case 2:
                lp = fill(" ", formula[0][last_sp][1][1]) + lp;
                break;
              // $FlowIgnore

              case 3:
                lp = fill("\r", formula[0][last_sp][1][1]) + lp;
                break;
              // $FlowIgnore

              case 4:
                rp = fill(" ", formula[0][last_sp][1][1]) + rp;
                break;
              // $FlowIgnore

              case 5:
                rp = fill("\r", formula[0][last_sp][1][1]) + rp;
                break;

              default:
                // $FlowIgnore
                if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
            }

            last_sp = -1;
          }

          stack.push(lp + stack.pop() + rp);
          break;

        case 'PtgRefErr':
          /* [MS-XLS] 2.5.198.86 */
          stack.push('#REF!');
          break;

        case 'PtgRefErr3d':
          /* [MS-XLS] 2.5.198.87 */
          stack.push('#REF!');
          break;

        case 'PtgExp':
          /* [MS-XLS] 2.5.198.58 TODO */
          c = {
            c: f[1][1],
            r: f[1][0]
          };
          var q = {
            c: cell.c,
            r: cell.r
          };

          if (supbooks.sharedf[encode_cell(c)]) {
            var parsedf = supbooks.sharedf[encode_cell(c)];
            stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));
          } else {
            var fnd = false;

            for (e1 = 0; e1 != supbooks.arrayf.length; ++e1) {
              /* TODO: should be something like range_has */
              e2 = supbooks.arrayf[e1];
              if (c.c < e2[0].s.c || c.c > e2[0].e.c) continue;
              if (c.r < e2[0].s.r || c.r > e2[0].e.r) continue;
              stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));
              fnd = true;
              break;
            }

            if (!fnd) stack.push(f[1]);
          }

          break;

        case 'PtgArray':
          /* [MS-XLS] 2.5.198.32 TODO */
          stack.push("{" + stringify_array(f[1]) + "}");
          break;

        case 'PtgMemArea':
          /* [MS-XLS] 2.5.198.70 TODO: confirm this is a non-display */
          //stack.push("(" + f[2].map(encode_range).join(",") + ")");
          break;

        case 'PtgAttrSpace':
        /* [MS-XLS] 2.5.198.38 */

        case 'PtgAttrSpaceSemi':
          /* [MS-XLS] 2.5.198.39 */
          last_sp = ff;
          break;

        case 'PtgTbl':
          /* [MS-XLS] 2.5.198.92 TODO */
          break;

        case 'PtgMemErr':
          /* [MS-XLS] 2.5.198.71 */
          break;

        case 'PtgMissArg':
          /* [MS-XLS] 2.5.198.74 */
          stack.push("");
          break;

        case 'PtgAreaErr':
          /* [MS-XLS] 2.5.198.29 */
          stack.push("#REF!");
          break;

        case 'PtgAreaErr3d':
          /* [MS-XLS] 2.5.198.30 */
          stack.push("#REF!");
          break;

        case 'PtgList':
          /* [MS-XLSB] 2.5.97.52 */
          // $FlowIgnore
          stack.push("Table" + f[1].idx + "[#" + f[1].rt + "]");
          break;

        case 'PtgMemAreaN':
        case 'PtgMemNoMemN':
        case 'PtgAttrNoop':
        case 'PtgSheet':
        case 'PtgEndSheet':
          break;

        case 'PtgMemFunc':
          /* [MS-XLS] 2.5.198.72 TODO */
          break;

        case 'PtgMemNoMem':
          /* [MS-XLS] 2.5.198.73 TODO */
          break;

        case 'PtgElfCol':
        /* [MS-XLS] 2.5.198.46 */

        case 'PtgElfColS':
        /* [MS-XLS] 2.5.198.47 */

        case 'PtgElfColSV':
        /* [MS-XLS] 2.5.198.48 */

        case 'PtgElfColV':
        /* [MS-XLS] 2.5.198.49 */

        case 'PtgElfLel':
        /* [MS-XLS] 2.5.198.50 */

        case 'PtgElfRadical':
        /* [MS-XLS] 2.5.198.51 */

        case 'PtgElfRadicalLel':
        /* [MS-XLS] 2.5.198.52 */

        case 'PtgElfRadicalS':
        /* [MS-XLS] 2.5.198.53 */

        case 'PtgElfRw':
        /* [MS-XLS] 2.5.198.54 */

        case 'PtgElfRwV':
          /* [MS-XLS] 2.5.198.55 */
          throw new Error("Unsupported ELFs");

        case 'PtgSxName':
          /* [MS-XLS] 2.5.198.91 TODO -- find a test case */
          throw new Error('Unrecognized Formula Token: ' + String(f));

        default:
          throw new Error('Unrecognized Formula Token: ' + String(f));
      }

      var PtgNonDisp = ['PtgAttrSpace', 'PtgAttrSpaceSemi', 'PtgAttrGoto'];
      if (opts.biff != 3) if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
        f = formula[0][last_sp];
        var _left = true;

        switch (f[1][0]) {
          /* note: some bad XLSB files omit the PtgParen */
          case 4:
            _left = false;

          /* falls through */

          case 0:
            // $FlowIgnore
            sp = fill(" ", f[1][1]);
            break;

          case 5:
            _left = false;

          /* falls through */

          case 1:
            // $FlowIgnore
            sp = fill("\r", f[1][1]);
            break;

          default:
            sp = ""; // $FlowIgnore

            if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + f[1][0]);
        }

        stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
        last_sp = -1;
      }
    }

    if (stack.length > 1 && opts.WTF) throw new Error("bad formula stack");
    return stack[0];
  }
  /* [MS-XLS] 2.5.198.1 TODO */


  function parse_ArrayParsedFormula(blob, length, opts) {
    var target = blob.l + length,
        len = opts.biff == 2 ? 1 : 2;
    var rgcb,
        cce = blob.read_shift(len); // length of rgce

    if (cce == 0xFFFF) return [[], parsenoop(blob, length - 2)];
    var rgce = parse_Rgce(blob, cce, opts);
    if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
    blob.l = target;
    return [rgce, rgcb];
  }
  /* [MS-XLS] 2.5.198.3 TODO */


  function parse_XLSCellParsedFormula(blob, length, opts) {
    var target = blob.l + length,
        len = opts.biff == 2 ? 1 : 2;
    var rgcb,
        cce = blob.read_shift(len); // length of rgce

    if (cce == 0xFFFF) return [[], parsenoop(blob, length - 2)];
    var rgce = parse_Rgce(blob, cce, opts);
    if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
    blob.l = target;
    return [rgce, rgcb];
  }
  /* [MS-XLS] 2.5.198.21 */


  function parse_NameParsedFormula(blob, length, opts, cce) {
    var target = blob.l + length;
    var rgce = parse_Rgce(blob, cce, opts);
    var rgcb;
    if (target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
    return [rgce, rgcb];
  }
  /* [MS-XLS] 2.5.198.118 TODO */


  function parse_SharedParsedFormula(blob, length, opts) {
    var target = blob.l + length;
    var rgcb,
        cce = blob.read_shift(2); // length of rgce

    var rgce = parse_Rgce(blob, cce, opts);
    if (cce == 0xFFFF) return [[], parsenoop(blob, length - 2)];
    if (length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
    return [rgce, rgcb];
  }
  /* [MS-XLS] 2.5.133 TODO: how to emit empty strings? */


  function parse_FormulaValue(blob) {
    var b;
    if (__readUInt16LE(blob, blob.l + 6) !== 0xFFFF) return [parse_Xnum(blob), 'n'];

    switch (blob[blob.l]) {
      case 0x00:
        blob.l += 8;
        return ["String", 's'];

      case 0x01:
        b = blob[blob.l + 2] === 0x1;
        blob.l += 8;
        return [b, 'b'];

      case 0x02:
        b = blob[blob.l + 2];
        blob.l += 8;
        return [b, 'e'];

      case 0x03:
        blob.l += 8;
        return ["", 's'];
    }

    return [];
  }

  function write_FormulaValue(value) {
    if (value == null) {
      // Blank String Value
      var o = new_buf(8);
      o.write_shift(1, 0x03);
      o.write_shift(1, 0);
      o.write_shift(2, 0);
      o.write_shift(2, 0);
      o.write_shift(2, 0xFFFF);
      return o;
    } else if (typeof value == "number") return write_Xnum(value);

    return write_Xnum(0);
  }
  /* [MS-XLS] 2.4.127 TODO */


  function parse_Formula(blob, length, opts) {
    var end = blob.l + length;
    var cell = parse_XLSCell(blob, 6);
    if (opts.biff == 2) ++blob.l;
    var val = parse_FormulaValue(blob, 8);
    var flags = blob.read_shift(1);

    if (opts.biff != 2) {
      blob.read_shift(1);

      if (opts.biff >= 5) {
        /*var chn = */
        blob.read_shift(4);
      }
    }

    var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
    return {
      cell: cell,
      val: val[0],
      formula: cbf,
      shared: flags >> 3 & 1,
      tt: val[1]
    };
  }

  function write_Formula(cell, R, C, opts, os) {
    // Cell
    var o1 = write_XLSCell(R, C, os); // FormulaValue

    var o2 = write_FormulaValue(cell.v); // flags + cache

    var o3 = new_buf(6);
    var flags = 0x01 | 0x20;
    o3.write_shift(2, flags);
    o3.write_shift(4, 0); // CellParsedFormula

    var bf = new_buf(cell.bf.length);

    for (var i = 0; i < cell.bf.length; ++i) bf[i] = cell.bf[i];

    var out = bconcat([o1, o2, o3, bf]);
    return out;
  }
  /* XLSB Parsed Formula records have the same shape */


  function parse_XLSBParsedFormula(data, length, opts) {
    var cce = data.read_shift(4);
    var rgce = parse_Rgce(data, cce, opts);
    var cb = data.read_shift(4);
    var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
    return [rgce, rgcb];
  }
  /* [MS-XLSB] 2.5.97.1 ArrayParsedFormula */


  var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
  /* [MS-XLSB] 2.5.97.4 CellParsedFormula */

  var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
  /* [MS-XLSB] 2.5.97.8 DVParsedFormula */
  //var parse_XLSBDVParsedFormula = parse_XLSBParsedFormula;

  /* [MS-XLSB] 2.5.97.9 FRTParsedFormula */
  //var parse_XLSBFRTParsedFormula = parse_XLSBParsedFormula2;

  /* [MS-XLSB] 2.5.97.12 NameParsedFormula */

  var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
  /* [MS-XLSB] 2.5.97.98 SharedParsedFormula */

  var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
  /* [MS-XLS] 2.5.198.4 */

  var Cetab = {
    0x0000: 'BEEP',
    0x0001: 'OPEN',
    0x0002: 'OPEN.LINKS',
    0x0003: 'CLOSE.ALL',
    0x0004: 'SAVE',
    0x0005: 'SAVE.AS',
    0x0006: 'FILE.DELETE',
    0x0007: 'PAGE.SETUP',
    0x0008: 'PRINT',
    0x0009: 'PRINTER.SETUP',
    0x000A: 'QUIT',
    0x000B: 'NEW.WINDOW',
    0x000C: 'ARRANGE.ALL',
    0x000D: 'WINDOW.SIZE',
    0x000E: 'WINDOW.MOVE',
    0x000F: 'FULL',
    0x0010: 'CLOSE',
    0x0011: 'RUN',
    0x0016: 'SET.PRINT.AREA',
    0x0017: 'SET.PRINT.TITLES',
    0x0018: 'SET.PAGE.BREAK',
    0x0019: 'REMOVE.PAGE.BREAK',
    0x001A: 'FONT',
    0x001B: 'DISPLAY',
    0x001C: 'PROTECT.DOCUMENT',
    0x001D: 'PRECISION',
    0x001E: 'A1.R1C1',
    0x001F: 'CALCULATE.NOW',
    0x0020: 'CALCULATION',
    0x0022: 'DATA.FIND',
    0x0023: 'EXTRACT',
    0x0024: 'DATA.DELETE',
    0x0025: 'SET.DATABASE',
    0x0026: 'SET.CRITERIA',
    0x0027: 'SORT',
    0x0028: 'DATA.SERIES',
    0x0029: 'TABLE',
    0x002A: 'FORMAT.NUMBER',
    0x002B: 'ALIGNMENT',
    0x002C: 'STYLE',
    0x002D: 'BORDER',
    0x002E: 'CELL.PROTECTION',
    0x002F: 'COLUMN.WIDTH',
    0x0030: 'UNDO',
    0x0031: 'CUT',
    0x0032: 'COPY',
    0x0033: 'PASTE',
    0x0034: 'CLEAR',
    0x0035: 'PASTE.SPECIAL',
    0x0036: 'EDIT.DELETE',
    0x0037: 'INSERT',
    0x0038: 'FILL.RIGHT',
    0x0039: 'FILL.DOWN',
    0x003D: 'DEFINE.NAME',
    0x003E: 'CREATE.NAMES',
    0x003F: 'FORMULA.GOTO',
    0x0040: 'FORMULA.FIND',
    0x0041: 'SELECT.LAST.CELL',
    0x0042: 'SHOW.ACTIVE.CELL',
    0x0043: 'GALLERY.AREA',
    0x0044: 'GALLERY.BAR',
    0x0045: 'GALLERY.COLUMN',
    0x0046: 'GALLERY.LINE',
    0x0047: 'GALLERY.PIE',
    0x0048: 'GALLERY.SCATTER',
    0x0049: 'COMBINATION',
    0x004A: 'PREFERRED',
    0x004B: 'ADD.OVERLAY',
    0x004C: 'GRIDLINES',
    0x004D: 'SET.PREFERRED',
    0x004E: 'AXES',
    0x004F: 'LEGEND',
    0x0050: 'ATTACH.TEXT',
    0x0051: 'ADD.ARROW',
    0x0052: 'SELECT.CHART',
    0x0053: 'SELECT.PLOT.AREA',
    0x0054: 'PATTERNS',
    0x0055: 'MAIN.CHART',
    0x0056: 'OVERLAY',
    0x0057: 'SCALE',
    0x0058: 'FORMAT.LEGEND',
    0x0059: 'FORMAT.TEXT',
    0x005A: 'EDIT.REPEAT',
    0x005B: 'PARSE',
    0x005C: 'JUSTIFY',
    0x005D: 'HIDE',
    0x005E: 'UNHIDE',
    0x005F: 'WORKSPACE',
    0x0060: 'FORMULA',
    0x0061: 'FORMULA.FILL',
    0x0062: 'FORMULA.ARRAY',
    0x0063: 'DATA.FIND.NEXT',
    0x0064: 'DATA.FIND.PREV',
    0x0065: 'FORMULA.FIND.NEXT',
    0x0066: 'FORMULA.FIND.PREV',
    0x0067: 'ACTIVATE',
    0x0068: 'ACTIVATE.NEXT',
    0x0069: 'ACTIVATE.PREV',
    0x006A: 'UNLOCKED.NEXT',
    0x006B: 'UNLOCKED.PREV',
    0x006C: 'COPY.PICTURE',
    0x006D: 'SELECT',
    0x006E: 'DELETE.NAME',
    0x006F: 'DELETE.FORMAT',
    0x0070: 'VLINE',
    0x0071: 'HLINE',
    0x0072: 'VPAGE',
    0x0073: 'HPAGE',
    0x0074: 'VSCROLL',
    0x0075: 'HSCROLL',
    0x0076: 'ALERT',
    0x0077: 'NEW',
    0x0078: 'CANCEL.COPY',
    0x0079: 'SHOW.CLIPBOARD',
    0x007A: 'MESSAGE',
    0x007C: 'PASTE.LINK',
    0x007D: 'APP.ACTIVATE',
    0x007E: 'DELETE.ARROW',
    0x007F: 'ROW.HEIGHT',
    0x0080: 'FORMAT.MOVE',
    0x0081: 'FORMAT.SIZE',
    0x0082: 'FORMULA.REPLACE',
    0x0083: 'SEND.KEYS',
    0x0084: 'SELECT.SPECIAL',
    0x0085: 'APPLY.NAMES',
    0x0086: 'REPLACE.FONT',
    0x0087: 'FREEZE.PANES',
    0x0088: 'SHOW.INFO',
    0x0089: 'SPLIT',
    0x008A: 'ON.WINDOW',
    0x008B: 'ON.DATA',
    0x008C: 'DISABLE.INPUT',
    0x008E: 'OUTLINE',
    0x008F: 'LIST.NAMES',
    0x0090: 'FILE.CLOSE',
    0x0091: 'SAVE.WORKBOOK',
    0x0092: 'DATA.FORM',
    0x0093: 'COPY.CHART',
    0x0094: 'ON.TIME',
    0x0095: 'WAIT',
    0x0096: 'FORMAT.FONT',
    0x0097: 'FILL.UP',
    0x0098: 'FILL.LEFT',
    0x0099: 'DELETE.OVERLAY',
    0x009B: 'SHORT.MENUS',
    0x009F: 'SET.UPDATE.STATUS',
    0x00A1: 'COLOR.PALETTE',
    0x00A2: 'DELETE.STYLE',
    0x00A3: 'WINDOW.RESTORE',
    0x00A4: 'WINDOW.MAXIMIZE',
    0x00A6: 'CHANGE.LINK',
    0x00A7: 'CALCULATE.DOCUMENT',
    0x00A8: 'ON.KEY',
    0x00A9: 'APP.RESTORE',
    0x00AA: 'APP.MOVE',
    0x00AB: 'APP.SIZE',
    0x00AC: 'APP.MINIMIZE',
    0x00AD: 'APP.MAXIMIZE',
    0x00AE: 'BRING.TO.FRONT',
    0x00AF: 'SEND.TO.BACK',
    0x00B9: 'MAIN.CHART.TYPE',
    0x00BA: 'OVERLAY.CHART.TYPE',
    0x00BB: 'SELECT.END',
    0x00BC: 'OPEN.MAIL',
    0x00BD: 'SEND.MAIL',
    0x00BE: 'STANDARD.FONT',
    0x00BF: 'CONSOLIDATE',
    0x00C0: 'SORT.SPECIAL',
    0x00C1: 'GALLERY.3D.AREA',
    0x00C2: 'GALLERY.3D.COLUMN',
    0x00C3: 'GALLERY.3D.LINE',
    0x00C4: 'GALLERY.3D.PIE',
    0x00C5: 'VIEW.3D',
    0x00C6: 'GOAL.SEEK',
    0x00C7: 'WORKGROUP',
    0x00C8: 'FILL.GROUP',
    0x00C9: 'UPDATE.LINK',
    0x00CA: 'PROMOTE',
    0x00CB: 'DEMOTE',
    0x00CC: 'SHOW.DETAIL',
    0x00CE: 'UNGROUP',
    0x00CF: 'OBJECT.PROPERTIES',
    0x00D0: 'SAVE.NEW.OBJECT',
    0x00D1: 'SHARE',
    0x00D2: 'SHARE.NAME',
    0x00D3: 'DUPLICATE',
    0x00D4: 'APPLY.STYLE',
    0x00D5: 'ASSIGN.TO.OBJECT',
    0x00D6: 'OBJECT.PROTECTION',
    0x00D7: 'HIDE.OBJECT',
    0x00D8: 'SET.EXTRACT',
    0x00D9: 'CREATE.PUBLISHER',
    0x00DA: 'SUBSCRIBE.TO',
    0x00DB: 'ATTRIBUTES',
    0x00DC: 'SHOW.TOOLBAR',
    0x00DE: 'PRINT.PREVIEW',
    0x00DF: 'EDIT.COLOR',
    0x00E0: 'SHOW.LEVELS',
    0x00E1: 'FORMAT.MAIN',
    0x00E2: 'FORMAT.OVERLAY',
    0x00E3: 'ON.RECALC',
    0x00E4: 'EDIT.SERIES',
    0x00E5: 'DEFINE.STYLE',
    0x00F0: 'LINE.PRINT',
    0x00F3: 'ENTER.DATA',
    0x00F9: 'GALLERY.RADAR',
    0x00FA: 'MERGE.STYLES',
    0x00FB: 'EDITION.OPTIONS',
    0x00FC: 'PASTE.PICTURE',
    0x00FD: 'PASTE.PICTURE.LINK',
    0x00FE: 'SPELLING',
    0x0100: 'ZOOM',
    0x0103: 'INSERT.OBJECT',
    0x0104: 'WINDOW.MINIMIZE',
    0x0109: 'SOUND.NOTE',
    0x010A: 'SOUND.PLAY',
    0x010B: 'FORMAT.SHAPE',
    0x010C: 'EXTEND.POLYGON',
    0x010D: 'FORMAT.AUTO',
    0x0110: 'GALLERY.3D.BAR',
    0x0111: 'GALLERY.3D.SURFACE',
    0x0112: 'FILL.AUTO',
    0x0114: 'CUSTOMIZE.TOOLBAR',
    0x0115: 'ADD.TOOL',
    0x0116: 'EDIT.OBJECT',
    0x0117: 'ON.DOUBLECLICK',
    0x0118: 'ON.ENTRY',
    0x0119: 'WORKBOOK.ADD',
    0x011A: 'WORKBOOK.MOVE',
    0x011B: 'WORKBOOK.COPY',
    0x011C: 'WORKBOOK.OPTIONS',
    0x011D: 'SAVE.WORKSPACE',
    0x0120: 'CHART.WIZARD',
    0x0121: 'DELETE.TOOL',
    0x0122: 'MOVE.TOOL',
    0x0123: 'WORKBOOK.SELECT',
    0x0124: 'WORKBOOK.ACTIVATE',
    0x0125: 'ASSIGN.TO.TOOL',
    0x0127: 'COPY.TOOL',
    0x0128: 'RESET.TOOL',
    0x0129: 'CONSTRAIN.NUMERIC',
    0x012A: 'PASTE.TOOL',
    0x012E: 'WORKBOOK.NEW',
    0x0131: 'SCENARIO.CELLS',
    0x0132: 'SCENARIO.DELETE',
    0x0133: 'SCENARIO.ADD',
    0x0134: 'SCENARIO.EDIT',
    0x0135: 'SCENARIO.SHOW',
    0x0136: 'SCENARIO.SHOW.NEXT',
    0x0137: 'SCENARIO.SUMMARY',
    0x0138: 'PIVOT.TABLE.WIZARD',
    0x0139: 'PIVOT.FIELD.PROPERTIES',
    0x013A: 'PIVOT.FIELD',
    0x013B: 'PIVOT.ITEM',
    0x013C: 'PIVOT.ADD.FIELDS',
    0x013E: 'OPTIONS.CALCULATION',
    0x013F: 'OPTIONS.EDIT',
    0x0140: 'OPTIONS.VIEW',
    0x0141: 'ADDIN.MANAGER',
    0x0142: 'MENU.EDITOR',
    0x0143: 'ATTACH.TOOLBARS',
    0x0144: 'VBAActivate',
    0x0145: 'OPTIONS.CHART',
    0x0148: 'VBA.INSERT.FILE',
    0x014A: 'VBA.PROCEDURE.DEFINITION',
    0x0150: 'ROUTING.SLIP',
    0x0152: 'ROUTE.DOCUMENT',
    0x0153: 'MAIL.LOGON',
    0x0156: 'INSERT.PICTURE',
    0x0157: 'EDIT.TOOL',
    0x0158: 'GALLERY.DOUGHNUT',
    0x015E: 'CHART.TREND',
    0x0160: 'PIVOT.ITEM.PROPERTIES',
    0x0162: 'WORKBOOK.INSERT',
    0x0163: 'OPTIONS.TRANSITION',
    0x0164: 'OPTIONS.GENERAL',
    0x0172: 'FILTER.ADVANCED',
    0x0175: 'MAIL.ADD.MAILER',
    0x0176: 'MAIL.DELETE.MAILER',
    0x0177: 'MAIL.REPLY',
    0x0178: 'MAIL.REPLY.ALL',
    0x0179: 'MAIL.FORWARD',
    0x017A: 'MAIL.NEXT.LETTER',
    0x017B: 'DATA.LABEL',
    0x017C: 'INSERT.TITLE',
    0x017D: 'FONT.PROPERTIES',
    0x017E: 'MACRO.OPTIONS',
    0x017F: 'WORKBOOK.HIDE',
    0x0180: 'WORKBOOK.UNHIDE',
    0x0181: 'WORKBOOK.DELETE',
    0x0182: 'WORKBOOK.NAME',
    0x0184: 'GALLERY.CUSTOM',
    0x0186: 'ADD.CHART.AUTOFORMAT',
    0x0187: 'DELETE.CHART.AUTOFORMAT',
    0x0188: 'CHART.ADD.DATA',
    0x0189: 'AUTO.OUTLINE',
    0x018A: 'TAB.ORDER',
    0x018B: 'SHOW.DIALOG',
    0x018C: 'SELECT.ALL',
    0x018D: 'UNGROUP.SHEETS',
    0x018E: 'SUBTOTAL.CREATE',
    0x018F: 'SUBTOTAL.REMOVE',
    0x0190: 'RENAME.OBJECT',
    0x019C: 'WORKBOOK.SCROLL',
    0x019D: 'WORKBOOK.NEXT',
    0x019E: 'WORKBOOK.PREV',
    0x019F: 'WORKBOOK.TAB.SPLIT',
    0x01A0: 'FULL.SCREEN',
    0x01A1: 'WORKBOOK.PROTECT',
    0x01A4: 'SCROLLBAR.PROPERTIES',
    0x01A5: 'PIVOT.SHOW.PAGES',
    0x01A6: 'TEXT.TO.COLUMNS',
    0x01A7: 'FORMAT.CHARTTYPE',
    0x01A8: 'LINK.FORMAT',
    0x01A9: 'TRACER.DISPLAY',
    0x01AE: 'TRACER.NAVIGATE',
    0x01AF: 'TRACER.CLEAR',
    0x01B0: 'TRACER.ERROR',
    0x01B1: 'PIVOT.FIELD.GROUP',
    0x01B2: 'PIVOT.FIELD.UNGROUP',
    0x01B3: 'CHECKBOX.PROPERTIES',
    0x01B4: 'LABEL.PROPERTIES',
    0x01B5: 'LISTBOX.PROPERTIES',
    0x01B6: 'EDITBOX.PROPERTIES',
    0x01B7: 'PIVOT.REFRESH',
    0x01B8: 'LINK.COMBO',
    0x01B9: 'OPEN.TEXT',
    0x01BA: 'HIDE.DIALOG',
    0x01BB: 'SET.DIALOG.FOCUS',
    0x01BC: 'ENABLE.OBJECT',
    0x01BD: 'PUSHBUTTON.PROPERTIES',
    0x01BE: 'SET.DIALOG.DEFAULT',
    0x01BF: 'FILTER',
    0x01C0: 'FILTER.SHOW.ALL',
    0x01C1: 'CLEAR.OUTLINE',
    0x01C2: 'FUNCTION.WIZARD',
    0x01C3: 'ADD.LIST.ITEM',
    0x01C4: 'SET.LIST.ITEM',
    0x01C5: 'REMOVE.LIST.ITEM',
    0x01C6: 'SELECT.LIST.ITEM',
    0x01C7: 'SET.CONTROL.VALUE',
    0x01C8: 'SAVE.COPY.AS',
    0x01CA: 'OPTIONS.LISTS.ADD',
    0x01CB: 'OPTIONS.LISTS.DELETE',
    0x01CC: 'SERIES.AXES',
    0x01CD: 'SERIES.X',
    0x01CE: 'SERIES.Y',
    0x01CF: 'ERRORBAR.X',
    0x01D0: 'ERRORBAR.Y',
    0x01D1: 'FORMAT.CHART',
    0x01D2: 'SERIES.ORDER',
    0x01D3: 'MAIL.LOGOFF',
    0x01D4: 'CLEAR.ROUTING.SLIP',
    0x01D5: 'APP.ACTIVATE.MICROSOFT',
    0x01D6: 'MAIL.EDIT.MAILER',
    0x01D7: 'ON.SHEET',
    0x01D8: 'STANDARD.WIDTH',
    0x01D9: 'SCENARIO.MERGE',
    0x01DA: 'SUMMARY.INFO',
    0x01DB: 'FIND.FILE',
    0x01DC: 'ACTIVE.CELL.FONT',
    0x01DD: 'ENABLE.TIPWIZARD',
    0x01DE: 'VBA.MAKE.ADDIN',
    0x01E0: 'INSERTDATATABLE',
    0x01E1: 'WORKGROUP.OPTIONS',
    0x01E2: 'MAIL.SEND.MAILER',
    0x01E5: 'AUTOCORRECT',
    0x01E9: 'POST.DOCUMENT',
    0x01EB: 'PICKLIST',
    0x01ED: 'VIEW.SHOW',
    0x01EE: 'VIEW.DEFINE',
    0x01EF: 'VIEW.DELETE',
    0x01FD: 'SHEET.BACKGROUND',
    0x01FE: 'INSERT.MAP.OBJECT',
    0x01FF: 'OPTIONS.MENONO',
    0x0205: 'MSOCHECKS',
    0x0206: 'NORMAL',
    0x0207: 'LAYOUT',
    0x0208: 'RM.PRINT.AREA',
    0x0209: 'CLEAR.PRINT.AREA',
    0x020A: 'ADD.PRINT.AREA',
    0x020B: 'MOVE.BRK',
    0x0221: 'HIDECURR.NOTE',
    0x0222: 'HIDEALL.NOTES',
    0x0223: 'DELETE.NOTE',
    0x0224: 'TRAVERSE.NOTES',
    0x0225: 'ACTIVATE.NOTES',
    0x026C: 'PROTECT.REVISIONS',
    0x026D: 'UNPROTECT.REVISIONS',
    0x0287: 'OPTIONS.ME',
    0x028D: 'WEB.PUBLISH',
    0x029B: 'NEWWEBQUERY',
    0x02A1: 'PIVOT.TABLE.CHART',
    0x02F1: 'OPTIONS.SAVE',
    0x02F3: 'OPTIONS.SPELL',
    0x0328: 'HIDEALL.INKANNOTS'
  };
  /* [MS-XLS] 2.5.198.17 */

  /* [MS-XLSB] 2.5.97.10 */

  var Ftab = {
    0x0000: 'COUNT',
    0x0001: 'IF',
    0x0002: 'ISNA',
    0x0003: 'ISERROR',
    0x0004: 'SUM',
    0x0005: 'AVERAGE',
    0x0006: 'MIN',
    0x0007: 'MAX',
    0x0008: 'ROW',
    0x0009: 'COLUMN',
    0x000A: 'NA',
    0x000B: 'NPV',
    0x000C: 'STDEV',
    0x000D: 'DOLLAR',
    0x000E: 'FIXED',
    0x000F: 'SIN',
    0x0010: 'COS',
    0x0011: 'TAN',
    0x0012: 'ATAN',
    0x0013: 'PI',
    0x0014: 'SQRT',
    0x0015: 'EXP',
    0x0016: 'LN',
    0x0017: 'LOG10',
    0x0018: 'ABS',
    0x0019: 'INT',
    0x001A: 'SIGN',
    0x001B: 'ROUND',
    0x001C: 'LOOKUP',
    0x001D: 'INDEX',
    0x001E: 'REPT',
    0x001F: 'MID',
    0x0020: 'LEN',
    0x0021: 'VALUE',
    0x0022: 'TRUE',
    0x0023: 'FALSE',
    0x0024: 'AND',
    0x0025: 'OR',
    0x0026: 'NOT',
    0x0027: 'MOD',
    0x0028: 'DCOUNT',
    0x0029: 'DSUM',
    0x002A: 'DAVERAGE',
    0x002B: 'DMIN',
    0x002C: 'DMAX',
    0x002D: 'DSTDEV',
    0x002E: 'VAR',
    0x002F: 'DVAR',
    0x0030: 'TEXT',
    0x0031: 'LINEST',
    0x0032: 'TREND',
    0x0033: 'LOGEST',
    0x0034: 'GROWTH',
    0x0035: 'GOTO',
    0x0036: 'HALT',
    0x0037: 'RETURN',
    0x0038: 'PV',
    0x0039: 'FV',
    0x003A: 'NPER',
    0x003B: 'PMT',
    0x003C: 'RATE',
    0x003D: 'MIRR',
    0x003E: 'IRR',
    0x003F: 'RAND',
    0x0040: 'MATCH',
    0x0041: 'DATE',
    0x0042: 'TIME',
    0x0043: 'DAY',
    0x0044: 'MONTH',
    0x0045: 'YEAR',
    0x0046: 'WEEKDAY',
    0x0047: 'HOUR',
    0x0048: 'MINUTE',
    0x0049: 'SECOND',
    0x004A: 'NOW',
    0x004B: 'AREAS',
    0x004C: 'ROWS',
    0x004D: 'COLUMNS',
    0x004E: 'OFFSET',
    0x004F: 'ABSREF',
    0x0050: 'RELREF',
    0x0051: 'ARGUMENT',
    0x0052: 'SEARCH',
    0x0053: 'TRANSPOSE',
    0x0054: 'ERROR',
    0x0055: 'STEP',
    0x0056: 'TYPE',
    0x0057: 'ECHO',
    0x0058: 'SET.NAME',
    0x0059: 'CALLER',
    0x005A: 'DEREF',
    0x005B: 'WINDOWS',
    0x005C: 'SERIES',
    0x005D: 'DOCUMENTS',
    0x005E: 'ACTIVE.CELL',
    0x005F: 'SELECTION',
    0x0060: 'RESULT',
    0x0061: 'ATAN2',
    0x0062: 'ASIN',
    0x0063: 'ACOS',
    0x0064: 'CHOOSE',
    0x0065: 'HLOOKUP',
    0x0066: 'VLOOKUP',
    0x0067: 'LINKS',
    0x0068: 'INPUT',
    0x0069: 'ISREF',
    0x006A: 'GET.FORMULA',
    0x006B: 'GET.NAME',
    0x006C: 'SET.VALUE',
    0x006D: 'LOG',
    0x006E: 'EXEC',
    0x006F: 'CHAR',
    0x0070: 'LOWER',
    0x0071: 'UPPER',
    0x0072: 'PROPER',
    0x0073: 'LEFT',
    0x0074: 'RIGHT',
    0x0075: 'EXACT',
    0x0076: 'TRIM',
    0x0077: 'REPLACE',
    0x0078: 'SUBSTITUTE',
    0x0079: 'CODE',
    0x007A: 'NAMES',
    0x007B: 'DIRECTORY',
    0x007C: 'FIND',
    0x007D: 'CELL',
    0x007E: 'ISERR',
    0x007F: 'ISTEXT',
    0x0080: 'ISNUMBER',
    0x0081: 'ISBLANK',
    0x0082: 'T',
    0x0083: 'N',
    0x0084: 'FOPEN',
    0x0085: 'FCLOSE',
    0x0086: 'FSIZE',
    0x0087: 'FREADLN',
    0x0088: 'FREAD',
    0x0089: 'FWRITELN',
    0x008A: 'FWRITE',
    0x008B: 'FPOS',
    0x008C: 'DATEVALUE',
    0x008D: 'TIMEVALUE',
    0x008E: 'SLN',
    0x008F: 'SYD',
    0x0090: 'DDB',
    0x0091: 'GET.DEF',
    0x0092: 'REFTEXT',
    0x0093: 'TEXTREF',
    0x0094: 'INDIRECT',
    0x0095: 'REGISTER',
    0x0096: 'CALL',
    0x0097: 'ADD.BAR',
    0x0098: 'ADD.MENU',
    0x0099: 'ADD.COMMAND',
    0x009A: 'ENABLE.COMMAND',
    0x009B: 'CHECK.COMMAND',
    0x009C: 'RENAME.COMMAND',
    0x009D: 'SHOW.BAR',
    0x009E: 'DELETE.MENU',
    0x009F: 'DELETE.COMMAND',
    0x00A0: 'GET.CHART.ITEM',
    0x00A1: 'DIALOG.BOX',
    0x00A2: 'CLEAN',
    0x00A3: 'MDETERM',
    0x00A4: 'MINVERSE',
    0x00A5: 'MMULT',
    0x00A6: 'FILES',
    0x00A7: 'IPMT',
    0x00A8: 'PPMT',
    0x00A9: 'COUNTA',
    0x00AA: 'CANCEL.KEY',
    0x00AB: 'FOR',
    0x00AC: 'WHILE',
    0x00AD: 'BREAK',
    0x00AE: 'NEXT',
    0x00AF: 'INITIATE',
    0x00B0: 'REQUEST',
    0x00B1: 'POKE',
    0x00B2: 'EXECUTE',
    0x00B3: 'TERMINATE',
    0x00B4: 'RESTART',
    0x00B5: 'HELP',
    0x00B6: 'GET.BAR',
    0x00B7: 'PRODUCT',
    0x00B8: 'FACT',
    0x00B9: 'GET.CELL',
    0x00BA: 'GET.WORKSPACE',
    0x00BB: 'GET.WINDOW',
    0x00BC: 'GET.DOCUMENT',
    0x00BD: 'DPRODUCT',
    0x00BE: 'ISNONTEXT',
    0x00BF: 'GET.NOTE',
    0x00C0: 'NOTE',
    0x00C1: 'STDEVP',
    0x00C2: 'VARP',
    0x00C3: 'DSTDEVP',
    0x00C4: 'DVARP',
    0x00C5: 'TRUNC',
    0x00C6: 'ISLOGICAL',
    0x00C7: 'DCOUNTA',
    0x00C8: 'DELETE.BAR',
    0x00C9: 'UNREGISTER',
    0x00CC: 'USDOLLAR',
    0x00CD: 'FINDB',
    0x00CE: 'SEARCHB',
    0x00CF: 'REPLACEB',
    0x00D0: 'LEFTB',
    0x00D1: 'RIGHTB',
    0x00D2: 'MIDB',
    0x00D3: 'LENB',
    0x00D4: 'ROUNDUP',
    0x00D5: 'ROUNDDOWN',
    0x00D6: 'ASC',
    0x00D7: 'DBCS',
    0x00D8: 'RANK',
    0x00DB: 'ADDRESS',
    0x00DC: 'DAYS360',
    0x00DD: 'TODAY',
    0x00DE: 'VDB',
    0x00DF: 'ELSE',
    0x00E0: 'ELSE.IF',
    0x00E1: 'END.IF',
    0x00E2: 'FOR.CELL',
    0x00E3: 'MEDIAN',
    0x00E4: 'SUMPRODUCT',
    0x00E5: 'SINH',
    0x00E6: 'COSH',
    0x00E7: 'TANH',
    0x00E8: 'ASINH',
    0x00E9: 'ACOSH',
    0x00EA: 'ATANH',
    0x00EB: 'DGET',
    0x00EC: 'CREATE.OBJECT',
    0x00ED: 'VOLATILE',
    0x00EE: 'LAST.ERROR',
    0x00EF: 'CUSTOM.UNDO',
    0x00F0: 'CUSTOM.REPEAT',
    0x00F1: 'FORMULA.CONVERT',
    0x00F2: 'GET.LINK.INFO',
    0x00F3: 'TEXT.BOX',
    0x00F4: 'INFO',
    0x00F5: 'GROUP',
    0x00F6: 'GET.OBJECT',
    0x00F7: 'DB',
    0x00F8: 'PAUSE',
    0x00FB: 'RESUME',
    0x00FC: 'FREQUENCY',
    0x00FD: 'ADD.TOOLBAR',
    0x00FE: 'DELETE.TOOLBAR',
    0x00FF: 'User',
    0x0100: 'RESET.TOOLBAR',
    0x0101: 'EVALUATE',
    0x0102: 'GET.TOOLBAR',
    0x0103: 'GET.TOOL',
    0x0104: 'SPELLING.CHECK',
    0x0105: 'ERROR.TYPE',
    0x0106: 'APP.TITLE',
    0x0107: 'WINDOW.TITLE',
    0x0108: 'SAVE.TOOLBAR',
    0x0109: 'ENABLE.TOOL',
    0x010A: 'PRESS.TOOL',
    0x010B: 'REGISTER.ID',
    0x010C: 'GET.WORKBOOK',
    0x010D: 'AVEDEV',
    0x010E: 'BETADIST',
    0x010F: 'GAMMALN',
    0x0110: 'BETAINV',
    0x0111: 'BINOMDIST',
    0x0112: 'CHIDIST',
    0x0113: 'CHIINV',
    0x0114: 'COMBIN',
    0x0115: 'CONFIDENCE',
    0x0116: 'CRITBINOM',
    0x0117: 'EVEN',
    0x0118: 'EXPONDIST',
    0x0119: 'FDIST',
    0x011A: 'FINV',
    0x011B: 'FISHER',
    0x011C: 'FISHERINV',
    0x011D: 'FLOOR',
    0x011E: 'GAMMADIST',
    0x011F: 'GAMMAINV',
    0x0120: 'CEILING',
    0x0121: 'HYPGEOMDIST',
    0x0122: 'LOGNORMDIST',
    0x0123: 'LOGINV',
    0x0124: 'NEGBINOMDIST',
    0x0125: 'NORMDIST',
    0x0126: 'NORMSDIST',
    0x0127: 'NORMINV',
    0x0128: 'NORMSINV',
    0x0129: 'STANDARDIZE',
    0x012A: 'ODD',
    0x012B: 'PERMUT',
    0x012C: 'POISSON',
    0x012D: 'TDIST',
    0x012E: 'WEIBULL',
    0x012F: 'SUMXMY2',
    0x0130: 'SUMX2MY2',
    0x0131: 'SUMX2PY2',
    0x0132: 'CHITEST',
    0x0133: 'CORREL',
    0x0134: 'COVAR',
    0x0135: 'FORECAST',
    0x0136: 'FTEST',
    0x0137: 'INTERCEPT',
    0x0138: 'PEARSON',
    0x0139: 'RSQ',
    0x013A: 'STEYX',
    0x013B: 'SLOPE',
    0x013C: 'TTEST',
    0x013D: 'PROB',
    0x013E: 'DEVSQ',
    0x013F: 'GEOMEAN',
    0x0140: 'HARMEAN',
    0x0141: 'SUMSQ',
    0x0142: 'KURT',
    0x0143: 'SKEW',
    0x0144: 'ZTEST',
    0x0145: 'LARGE',
    0x0146: 'SMALL',
    0x0147: 'QUARTILE',
    0x0148: 'PERCENTILE',
    0x0149: 'PERCENTRANK',
    0x014A: 'MODE',
    0x014B: 'TRIMMEAN',
    0x014C: 'TINV',
    0x014E: 'MOVIE.COMMAND',
    0x014F: 'GET.MOVIE',
    0x0150: 'CONCATENATE',
    0x0151: 'POWER',
    0x0152: 'PIVOT.ADD.DATA',
    0x0153: 'GET.PIVOT.TABLE',
    0x0154: 'GET.PIVOT.FIELD',
    0x0155: 'GET.PIVOT.ITEM',
    0x0156: 'RADIANS',
    0x0157: 'DEGREES',
    0x0158: 'SUBTOTAL',
    0x0159: 'SUMIF',
    0x015A: 'COUNTIF',
    0x015B: 'COUNTBLANK',
    0x015C: 'SCENARIO.GET',
    0x015D: 'OPTIONS.LISTS.GET',
    0x015E: 'ISPMT',
    0x015F: 'DATEDIF',
    0x0160: 'DATESTRING',
    0x0161: 'NUMBERSTRING',
    0x0162: 'ROMAN',
    0x0163: 'OPEN.DIALOG',
    0x0164: 'SAVE.DIALOG',
    0x0165: 'VIEW.GET',
    0x0166: 'GETPIVOTDATA',
    0x0167: 'HYPERLINK',
    0x0168: 'PHONETIC',
    0x0169: 'AVERAGEA',
    0x016A: 'MAXA',
    0x016B: 'MINA',
    0x016C: 'STDEVPA',
    0x016D: 'VARPA',
    0x016E: 'STDEVA',
    0x016F: 'VARA',
    0x0170: 'BAHTTEXT',
    0x0171: 'THAIDAYOFWEEK',
    0x0172: 'THAIDIGIT',
    0x0173: 'THAIMONTHOFYEAR',
    0x0174: 'THAINUMSOUND',
    0x0175: 'THAINUMSTRING',
    0x0176: 'THAISTRINGLENGTH',
    0x0177: 'ISTHAIDIGIT',
    0x0178: 'ROUNDBAHTDOWN',
    0x0179: 'ROUNDBAHTUP',
    0x017A: 'THAIYEAR',
    0x017B: 'RTD',
    0x017C: 'CUBEVALUE',
    0x017D: 'CUBEMEMBER',
    0x017E: 'CUBEMEMBERPROPERTY',
    0x017F: 'CUBERANKEDMEMBER',
    0x0180: 'HEX2BIN',
    0x0181: 'HEX2DEC',
    0x0182: 'HEX2OCT',
    0x0183: 'DEC2BIN',
    0x0184: 'DEC2HEX',
    0x0185: 'DEC2OCT',
    0x0186: 'OCT2BIN',
    0x0187: 'OCT2HEX',
    0x0188: 'OCT2DEC',
    0x0189: 'BIN2DEC',
    0x018A: 'BIN2OCT',
    0x018B: 'BIN2HEX',
    0x018C: 'IMSUB',
    0x018D: 'IMDIV',
    0x018E: 'IMPOWER',
    0x018F: 'IMABS',
    0x0190: 'IMSQRT',
    0x0191: 'IMLN',
    0x0192: 'IMLOG2',
    0x0193: 'IMLOG10',
    0x0194: 'IMSIN',
    0x0195: 'IMCOS',
    0x0196: 'IMEXP',
    0x0197: 'IMARGUMENT',
    0x0198: 'IMCONJUGATE',
    0x0199: 'IMAGINARY',
    0x019A: 'IMREAL',
    0x019B: 'COMPLEX',
    0x019C: 'IMSUM',
    0x019D: 'IMPRODUCT',
    0x019E: 'SERIESSUM',
    0x019F: 'FACTDOUBLE',
    0x01A0: 'SQRTPI',
    0x01A1: 'QUOTIENT',
    0x01A2: 'DELTA',
    0x01A3: 'GESTEP',
    0x01A4: 'ISEVEN',
    0x01A5: 'ISODD',
    0x01A6: 'MROUND',
    0x01A7: 'ERF',
    0x01A8: 'ERFC',
    0x01A9: 'BESSELJ',
    0x01AA: 'BESSELK',
    0x01AB: 'BESSELY',
    0x01AC: 'BESSELI',
    0x01AD: 'XIRR',
    0x01AE: 'XNPV',
    0x01AF: 'PRICEMAT',
    0x01B0: 'YIELDMAT',
    0x01B1: 'INTRATE',
    0x01B2: 'RECEIVED',
    0x01B3: 'DISC',
    0x01B4: 'PRICEDISC',
    0x01B5: 'YIELDDISC',
    0x01B6: 'TBILLEQ',
    0x01B7: 'TBILLPRICE',
    0x01B8: 'TBILLYIELD',
    0x01B9: 'PRICE',
    0x01BA: 'YIELD',
    0x01BB: 'DOLLARDE',
    0x01BC: 'DOLLARFR',
    0x01BD: 'NOMINAL',
    0x01BE: 'EFFECT',
    0x01BF: 'CUMPRINC',
    0x01C0: 'CUMIPMT',
    0x01C1: 'EDATE',
    0x01C2: 'EOMONTH',
    0x01C3: 'YEARFRAC',
    0x01C4: 'COUPDAYBS',
    0x01C5: 'COUPDAYS',
    0x01C6: 'COUPDAYSNC',
    0x01C7: 'COUPNCD',
    0x01C8: 'COUPNUM',
    0x01C9: 'COUPPCD',
    0x01CA: 'DURATION',
    0x01CB: 'MDURATION',
    0x01CC: 'ODDLPRICE',
    0x01CD: 'ODDLYIELD',
    0x01CE: 'ODDFPRICE',
    0x01CF: 'ODDFYIELD',
    0x01D0: 'RANDBETWEEN',
    0x01D1: 'WEEKNUM',
    0x01D2: 'AMORDEGRC',
    0x01D3: 'AMORLINC',
    0x01D4: 'CONVERT',
    0x02D4: 'SHEETJS',
    0x01D5: 'ACCRINT',
    0x01D6: 'ACCRINTM',
    0x01D7: 'WORKDAY',
    0x01D8: 'NETWORKDAYS',
    0x01D9: 'GCD',
    0x01DA: 'MULTINOMIAL',
    0x01DB: 'LCM',
    0x01DC: 'FVSCHEDULE',
    0x01DD: 'CUBEKPIMEMBER',
    0x01DE: 'CUBESET',
    0x01DF: 'CUBESETCOUNT',
    0x01E0: 'IFERROR',
    0x01E1: 'COUNTIFS',
    0x01E2: 'SUMIFS',
    0x01E3: 'AVERAGEIF',
    0x01E4: 'AVERAGEIFS'
  };
  var FtabArgc = {
    0x0002: 1,

    /* ISNA */
    0x0003: 1,

    /* ISERROR */
    0x000A: 0,

    /* NA */
    0x000F: 1,

    /* SIN */
    0x0010: 1,

    /* COS */
    0x0011: 1,

    /* TAN */
    0x0012: 1,

    /* ATAN */
    0x0013: 0,

    /* PI */
    0x0014: 1,

    /* SQRT */
    0x0015: 1,

    /* EXP */
    0x0016: 1,

    /* LN */
    0x0017: 1,

    /* LOG10 */
    0x0018: 1,

    /* ABS */
    0x0019: 1,

    /* INT */
    0x001A: 1,

    /* SIGN */
    0x001B: 2,

    /* ROUND */
    0x001E: 2,

    /* REPT */
    0x001F: 3,

    /* MID */
    0x0020: 1,

    /* LEN */
    0x0021: 1,

    /* VALUE */
    0x0022: 0,

    /* TRUE */
    0x0023: 0,

    /* FALSE */
    0x0026: 1,

    /* NOT */
    0x0027: 2,

    /* MOD */
    0x0028: 3,

    /* DCOUNT */
    0x0029: 3,

    /* DSUM */
    0x002A: 3,

    /* DAVERAGE */
    0x002B: 3,

    /* DMIN */
    0x002C: 3,

    /* DMAX */
    0x002D: 3,

    /* DSTDEV */
    0x002F: 3,

    /* DVAR */
    0x0030: 2,

    /* TEXT */
    0x0035: 1,

    /* GOTO */
    0x003D: 3,

    /* MIRR */
    0x003F: 0,

    /* RAND */
    0x0041: 3,

    /* DATE */
    0x0042: 3,

    /* TIME */
    0x0043: 1,

    /* DAY */
    0x0044: 1,

    /* MONTH */
    0x0045: 1,

    /* YEAR */
    0x0046: 1,

    /* WEEKDAY */
    0x0047: 1,

    /* HOUR */
    0x0048: 1,

    /* MINUTE */
    0x0049: 1,

    /* SECOND */
    0x004A: 0,

    /* NOW */
    0x004B: 1,

    /* AREAS */
    0x004C: 1,

    /* ROWS */
    0x004D: 1,

    /* COLUMNS */
    0x004F: 2,

    /* ABSREF */
    0x0050: 2,

    /* RELREF */
    0x0053: 1,

    /* TRANSPOSE */
    0x0055: 0,

    /* STEP */
    0x0056: 1,

    /* TYPE */
    0x0059: 0,

    /* CALLER */
    0x005A: 1,

    /* DEREF */
    0x005E: 0,

    /* ACTIVE.CELL */
    0x005F: 0,

    /* SELECTION */
    0x0061: 2,

    /* ATAN2 */
    0x0062: 1,

    /* ASIN */
    0x0063: 1,

    /* ACOS */
    0x0065: 3,

    /* HLOOKUP */
    0x0066: 3,

    /* VLOOKUP */
    0x0069: 1,

    /* ISREF */
    0x006A: 1,

    /* GET.FORMULA */
    0x006C: 2,

    /* SET.VALUE */
    0x006F: 1,

    /* CHAR */
    0x0070: 1,

    /* LOWER */
    0x0071: 1,

    /* UPPER */
    0x0072: 1,

    /* PROPER */
    0x0075: 2,

    /* EXACT */
    0x0076: 1,

    /* TRIM */
    0x0077: 4,

    /* REPLACE */
    0x0079: 1,

    /* CODE */
    0x007E: 1,

    /* ISERR */
    0x007F: 1,

    /* ISTEXT */
    0x0080: 1,

    /* ISNUMBER */
    0x0081: 1,

    /* ISBLANK */
    0x0082: 1,

    /* T */
    0x0083: 1,

    /* N */
    0x0085: 1,

    /* FCLOSE */
    0x0086: 1,

    /* FSIZE */
    0x0087: 1,

    /* FREADLN */
    0x0088: 2,

    /* FREAD */
    0x0089: 2,

    /* FWRITELN */
    0x008A: 2,

    /* FWRITE */
    0x008C: 1,

    /* DATEVALUE */
    0x008D: 1,

    /* TIMEVALUE */
    0x008E: 3,

    /* SLN */
    0x008F: 4,

    /* SYD */
    0x0090: 4,

    /* DDB */
    0x00A1: 1,

    /* DIALOG.BOX */
    0x00A2: 1,

    /* CLEAN */
    0x00A3: 1,

    /* MDETERM */
    0x00A4: 1,

    /* MINVERSE */
    0x00A5: 2,

    /* MMULT */
    0x00AC: 1,

    /* WHILE */
    0x00AF: 2,

    /* INITIATE */
    0x00B0: 2,

    /* REQUEST */
    0x00B1: 3,

    /* POKE */
    0x00B2: 2,

    /* EXECUTE */
    0x00B3: 1,

    /* TERMINATE */
    0x00B8: 1,

    /* FACT */
    0x00BA: 1,

    /* GET.WORKSPACE */
    0x00BD: 3,

    /* DPRODUCT */
    0x00BE: 1,

    /* ISNONTEXT */
    0x00C3: 3,

    /* DSTDEVP */
    0x00C4: 3,

    /* DVARP */
    0x00C5: 1,

    /* TRUNC */
    0x00C6: 1,

    /* ISLOGICAL */
    0x00C7: 3,

    /* DCOUNTA */
    0x00C9: 1,

    /* UNREGISTER */
    0x00CF: 4,

    /* REPLACEB */
    0x00D2: 3,

    /* MIDB */
    0x00D3: 1,

    /* LENB */
    0x00D4: 2,

    /* ROUNDUP */
    0x00D5: 2,

    /* ROUNDDOWN */
    0x00D6: 1,

    /* ASC */
    0x00D7: 1,

    /* DBCS */
    0x00E1: 0,

    /* END.IF */
    0x00E5: 1,

    /* SINH */
    0x00E6: 1,

    /* COSH */
    0x00E7: 1,

    /* TANH */
    0x00E8: 1,

    /* ASINH */
    0x00E9: 1,

    /* ACOSH */
    0x00EA: 1,

    /* ATANH */
    0x00EB: 3,

    /* DGET */
    0x00F4: 1,

    /* INFO */
    0x00F7: 4,

    /* DB */
    0x00FC: 2,

    /* FREQUENCY */
    0x0101: 1,

    /* EVALUATE */
    0x0105: 1,

    /* ERROR.TYPE */
    0x010F: 1,

    /* GAMMALN */
    0x0111: 4,

    /* BINOMDIST */
    0x0112: 2,

    /* CHIDIST */
    0x0113: 2,

    /* CHIINV */
    0x0114: 2,

    /* COMBIN */
    0x0115: 3,

    /* CONFIDENCE */
    0x0116: 3,

    /* CRITBINOM */
    0x0117: 1,

    /* EVEN */
    0x0118: 3,

    /* EXPONDIST */
    0x0119: 3,

    /* FDIST */
    0x011A: 3,

    /* FINV */
    0x011B: 1,

    /* FISHER */
    0x011C: 1,

    /* FISHERINV */
    0x011D: 2,

    /* FLOOR */
    0x011E: 4,

    /* GAMMADIST */
    0x011F: 3,

    /* GAMMAINV */
    0x0120: 2,

    /* CEILING */
    0x0121: 4,

    /* HYPGEOMDIST */
    0x0122: 3,

    /* LOGNORMDIST */
    0x0123: 3,

    /* LOGINV */
    0x0124: 3,

    /* NEGBINOMDIST */
    0x0125: 4,

    /* NORMDIST */
    0x0126: 1,

    /* NORMSDIST */
    0x0127: 3,

    /* NORMINV */
    0x0128: 1,

    /* NORMSINV */
    0x0129: 3,

    /* STANDARDIZE */
    0x012A: 1,

    /* ODD */
    0x012B: 2,

    /* PERMUT */
    0x012C: 3,

    /* POISSON */
    0x012D: 3,

    /* TDIST */
    0x012E: 4,

    /* WEIBULL */
    0x012F: 2,

    /* SUMXMY2 */
    0x0130: 2,

    /* SUMX2MY2 */
    0x0131: 2,

    /* SUMX2PY2 */
    0x0132: 2,

    /* CHITEST */
    0x0133: 2,

    /* CORREL */
    0x0134: 2,

    /* COVAR */
    0x0135: 3,

    /* FORECAST */
    0x0136: 2,

    /* FTEST */
    0x0137: 2,

    /* INTERCEPT */
    0x0138: 2,

    /* PEARSON */
    0x0139: 2,

    /* RSQ */
    0x013A: 2,

    /* STEYX */
    0x013B: 2,

    /* SLOPE */
    0x013C: 4,

    /* TTEST */
    0x0145: 2,

    /* LARGE */
    0x0146: 2,

    /* SMALL */
    0x0147: 2,

    /* QUARTILE */
    0x0148: 2,

    /* PERCENTILE */
    0x014B: 2,

    /* TRIMMEAN */
    0x014C: 2,

    /* TINV */
    0x0151: 2,

    /* POWER */
    0x0156: 1,

    /* RADIANS */
    0x0157: 1,

    /* DEGREES */
    0x015A: 2,

    /* COUNTIF */
    0x015B: 1,

    /* COUNTBLANK */
    0x015E: 4,

    /* ISPMT */
    0x015F: 3,

    /* DATEDIF */
    0x0160: 1,

    /* DATESTRING */
    0x0161: 2,

    /* NUMBERSTRING */
    0x0168: 1,

    /* PHONETIC */
    0x0170: 1,

    /* BAHTTEXT */
    0x0171: 1,

    /* THAIDAYOFWEEK */
    0x0172: 1,

    /* THAIDIGIT */
    0x0173: 1,

    /* THAIMONTHOFYEAR */
    0x0174: 1,

    /* THAINUMSOUND */
    0x0175: 1,

    /* THAINUMSTRING */
    0x0176: 1,

    /* THAISTRINGLENGTH */
    0x0177: 1,

    /* ISTHAIDIGIT */
    0x0178: 1,

    /* ROUNDBAHTDOWN */
    0x0179: 1,

    /* ROUNDBAHTUP */
    0x017A: 1,

    /* THAIYEAR */
    0x017E: 3,

    /* CUBEMEMBERPROPERTY */
    0x0181: 1,

    /* HEX2DEC */
    0x0188: 1,

    /* OCT2DEC */
    0x0189: 1,

    /* BIN2DEC */
    0x018C: 2,

    /* IMSUB */
    0x018D: 2,

    /* IMDIV */
    0x018E: 2,

    /* IMPOWER */
    0x018F: 1,

    /* IMABS */
    0x0190: 1,

    /* IMSQRT */
    0x0191: 1,

    /* IMLN */
    0x0192: 1,

    /* IMLOG2 */
    0x0193: 1,

    /* IMLOG10 */
    0x0194: 1,

    /* IMSIN */
    0x0195: 1,

    /* IMCOS */
    0x0196: 1,

    /* IMEXP */
    0x0197: 1,

    /* IMARGUMENT */
    0x0198: 1,

    /* IMCONJUGATE */
    0x0199: 1,

    /* IMAGINARY */
    0x019A: 1,

    /* IMREAL */
    0x019E: 4,

    /* SERIESSUM */
    0x019F: 1,

    /* FACTDOUBLE */
    0x01A0: 1,

    /* SQRTPI */
    0x01A1: 2,

    /* QUOTIENT */
    0x01A4: 1,

    /* ISEVEN */
    0x01A5: 1,

    /* ISODD */
    0x01A6: 2,

    /* MROUND */
    0x01A8: 1,

    /* ERFC */
    0x01A9: 2,

    /* BESSELJ */
    0x01AA: 2,

    /* BESSELK */
    0x01AB: 2,

    /* BESSELY */
    0x01AC: 2,

    /* BESSELI */
    0x01AE: 3,

    /* XNPV */
    0x01B6: 3,

    /* TBILLEQ */
    0x01B7: 3,

    /* TBILLPRICE */
    0x01B8: 3,

    /* TBILLYIELD */
    0x01BB: 2,

    /* DOLLARDE */
    0x01BC: 2,

    /* DOLLARFR */
    0x01BD: 2,

    /* NOMINAL */
    0x01BE: 2,

    /* EFFECT */
    0x01BF: 6,

    /* CUMPRINC */
    0x01C0: 6,

    /* CUMIPMT */
    0x01C1: 2,

    /* EDATE */
    0x01C2: 2,

    /* EOMONTH */
    0x01D0: 2,

    /* RANDBETWEEN */
    0x01D4: 3,

    /* CONVERT */
    0x01DC: 2,

    /* FVSCHEDULE */
    0x01DF: 1,

    /* CUBESETCOUNT */
    0x01E0: 2,

    /* IFERROR */
    0xFFFF: 0
  };
  /* [MS-XLSX] 2.2.3 Functions */

  /* [MS-XLSB] 2.5.97.10 Ftab */

  var XLSXFutureFunctions = {
    "_xlfn.ACOT": "ACOT",
    "_xlfn.ACOTH": "ACOTH",
    "_xlfn.AGGREGATE": "AGGREGATE",
    "_xlfn.ARABIC": "ARABIC",
    "_xlfn.AVERAGEIF": "AVERAGEIF",
    "_xlfn.AVERAGEIFS": "AVERAGEIFS",
    "_xlfn.BASE": "BASE",
    "_xlfn.BETA.DIST": "BETA.DIST",
    "_xlfn.BETA.INV": "BETA.INV",
    "_xlfn.BINOM.DIST": "BINOM.DIST",
    "_xlfn.BINOM.DIST.RANGE": "BINOM.DIST.RANGE",
    "_xlfn.BINOM.INV": "BINOM.INV",
    "_xlfn.BITAND": "BITAND",
    "_xlfn.BITLSHIFT": "BITLSHIFT",
    "_xlfn.BITOR": "BITOR",
    "_xlfn.BITRSHIFT": "BITRSHIFT",
    "_xlfn.BITXOR": "BITXOR",
    "_xlfn.CEILING.MATH": "CEILING.MATH",
    "_xlfn.CEILING.PRECISE": "CEILING.PRECISE",
    "_xlfn.CHISQ.DIST": "CHISQ.DIST",
    "_xlfn.CHISQ.DIST.RT": "CHISQ.DIST.RT",
    "_xlfn.CHISQ.INV": "CHISQ.INV",
    "_xlfn.CHISQ.INV.RT": "CHISQ.INV.RT",
    "_xlfn.CHISQ.TEST": "CHISQ.TEST",
    "_xlfn.COMBINA": "COMBINA",
    "_xlfn.CONCAT": "CONCAT",
    "_xlfn.CONFIDENCE.NORM": "CONFIDENCE.NORM",
    "_xlfn.CONFIDENCE.T": "CONFIDENCE.T",
    "_xlfn.COT": "COT",
    "_xlfn.COTH": "COTH",
    "_xlfn.COUNTIFS": "COUNTIFS",
    "_xlfn.COVARIANCE.P": "COVARIANCE.P",
    "_xlfn.COVARIANCE.S": "COVARIANCE.S",
    "_xlfn.CSC": "CSC",
    "_xlfn.CSCH": "CSCH",
    "_xlfn.DAYS": "DAYS",
    "_xlfn.DECIMAL": "DECIMAL",
    "_xlfn.ECMA.CEILING": "ECMA.CEILING",
    "_xlfn.ERF.PRECISE": "ERF.PRECISE",
    "_xlfn.ERFC.PRECISE": "ERFC.PRECISE",
    "_xlfn.EXPON.DIST": "EXPON.DIST",
    "_xlfn.F.DIST": "F.DIST",
    "_xlfn.F.DIST.RT": "F.DIST.RT",
    "_xlfn.F.INV": "F.INV",
    "_xlfn.F.INV.RT": "F.INV.RT",
    "_xlfn.F.TEST": "F.TEST",
    "_xlfn.FILTERXML": "FILTERXML",
    "_xlfn.FLOOR.MATH": "FLOOR.MATH",
    "_xlfn.FLOOR.PRECISE": "FLOOR.PRECISE",
    "_xlfn.FORECAST.ETS": "FORECAST.ETS",
    "_xlfn.FORECAST.ETS.CONFINT": "FORECAST.ETS.CONFINT",
    "_xlfn.FORECAST.ETS.SEASONALITY": "FORECAST.ETS.SEASONALITY",
    "_xlfn.FORECAST.ETS.STAT": "FORECAST.ETS.STAT",
    "_xlfn.FORECAST.LINEAR": "FORECAST.LINEAR",
    "_xlfn.FORMULATEXT": "FORMULATEXT",
    "_xlfn.GAMMA": "GAMMA",
    "_xlfn.GAMMA.DIST": "GAMMA.DIST",
    "_xlfn.GAMMA.INV": "GAMMA.INV",
    "_xlfn.GAMMALN.PRECISE": "GAMMALN.PRECISE",
    "_xlfn.GAUSS": "GAUSS",
    "_xlfn.HYPGEOM.DIST": "HYPGEOM.DIST",
    "_xlfn.IFERROR": "IFERROR",
    "_xlfn.IFNA": "IFNA",
    "_xlfn.IFS": "IFS",
    "_xlfn.IMCOSH": "IMCOSH",
    "_xlfn.IMCOT": "IMCOT",
    "_xlfn.IMCSC": "IMCSC",
    "_xlfn.IMCSCH": "IMCSCH",
    "_xlfn.IMSEC": "IMSEC",
    "_xlfn.IMSECH": "IMSECH",
    "_xlfn.IMSINH": "IMSINH",
    "_xlfn.IMTAN": "IMTAN",
    "_xlfn.ISFORMULA": "ISFORMULA",
    "_xlfn.ISO.CEILING": "ISO.CEILING",
    "_xlfn.ISOWEEKNUM": "ISOWEEKNUM",
    "_xlfn.LOGNORM.DIST": "LOGNORM.DIST",
    "_xlfn.LOGNORM.INV": "LOGNORM.INV",
    "_xlfn.MAXIFS": "MAXIFS",
    "_xlfn.MINIFS": "MINIFS",
    "_xlfn.MODE.MULT": "MODE.MULT",
    "_xlfn.MODE.SNGL": "MODE.SNGL",
    "_xlfn.MUNIT": "MUNIT",
    "_xlfn.NEGBINOM.DIST": "NEGBINOM.DIST",
    "_xlfn.NETWORKDAYS.INTL": "NETWORKDAYS.INTL",
    "_xlfn.NIGBINOM": "NIGBINOM",
    "_xlfn.NORM.DIST": "NORM.DIST",
    "_xlfn.NORM.INV": "NORM.INV",
    "_xlfn.NORM.S.DIST": "NORM.S.DIST",
    "_xlfn.NORM.S.INV": "NORM.S.INV",
    "_xlfn.NUMBERVALUE": "NUMBERVALUE",
    "_xlfn.PDURATION": "PDURATION",
    "_xlfn.PERCENTILE.EXC": "PERCENTILE.EXC",
    "_xlfn.PERCENTILE.INC": "PERCENTILE.INC",
    "_xlfn.PERCENTRANK.EXC": "PERCENTRANK.EXC",
    "_xlfn.PERCENTRANK.INC": "PERCENTRANK.INC",
    "_xlfn.PERMUTATIONA": "PERMUTATIONA",
    "_xlfn.PHI": "PHI",
    "_xlfn.POISSON.DIST": "POISSON.DIST",
    "_xlfn.QUARTILE.EXC": "QUARTILE.EXC",
    "_xlfn.QUARTILE.INC": "QUARTILE.INC",
    "_xlfn.QUERYSTRING": "QUERYSTRING",
    "_xlfn.RANK.AVG": "RANK.AVG",
    "_xlfn.RANK.EQ": "RANK.EQ",
    "_xlfn.RRI": "RRI",
    "_xlfn.SEC": "SEC",
    "_xlfn.SECH": "SECH",
    "_xlfn.SHEET": "SHEET",
    "_xlfn.SHEETS": "SHEETS",
    "_xlfn.SKEW.P": "SKEW.P",
    "_xlfn.STDEV.P": "STDEV.P",
    "_xlfn.STDEV.S": "STDEV.S",
    "_xlfn.SUMIFS": "SUMIFS",
    "_xlfn.SWITCH": "SWITCH",
    "_xlfn.T.DIST": "T.DIST",
    "_xlfn.T.DIST.2T": "T.DIST.2T",
    "_xlfn.T.DIST.RT": "T.DIST.RT",
    "_xlfn.T.INV": "T.INV",
    "_xlfn.T.INV.2T": "T.INV.2T",
    "_xlfn.T.TEST": "T.TEST",
    "_xlfn.TEXTJOIN": "TEXTJOIN",
    "_xlfn.UNICHAR": "UNICHAR",
    "_xlfn.UNICODE": "UNICODE",
    "_xlfn.VAR.P": "VAR.P",
    "_xlfn.VAR.S": "VAR.S",
    "_xlfn.WEBSERVICE": "WEBSERVICE",
    "_xlfn.WEIBULL.DIST": "WEIBULL.DIST",
    "_xlfn.WORKDAY.INTL": "WORKDAY.INTL",
    "_xlfn.XOR": "XOR",
    "_xlfn.Z.TEST": "Z.TEST"
  };
  /* Part 3 TODO: actually parse formulae */

  function ods_to_csf_formula(f) {
    if (f.slice(0, 3) == "of:") f = f.slice(3);
    /* 5.2 Basic Expressions */

    if (f.charCodeAt(0) == 61) {
      f = f.slice(1);
      if (f.charCodeAt(0) == 61) f = f.slice(1);
    }

    f = f.replace(/COM\.MICROSOFT\./g, "");
    /* Part 3 Section 5.8 References */

    f = f.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function ($$, $1) {
      return $1.replace(/\./g, "");
    });
    /* TODO: something other than this */

    f = f.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
    return f.replace(/[;~]/g, ",").replace(/\|/g, ";");
  }

  function csf_to_ods_formula(f) {
    var o = "of:=" + f.replace(crefregex, "$1[.$2$3$4$5]").replace(/\]:\[/g, ":");
    /* TODO: something other than this */

    return o.replace(/;/g, "|").replace(/,/g, ";");
  }

  function ods_to_csf_3D(r) {
    var a = r.split(":");
    var s = a[0].split(".")[0];
    return [s, a[0].split(".")[1] + (a.length > 1 ? ":" + (a[1].split(".")[1] || a[1].split(".")[0]) : "")];
  }

  function csf_to_ods_3D(r) {
    return r.replace(/\./, "!");
  }

  var strs = {}; // shared strings

  var _ssfopts = {}; // spreadsheet formatting options

  RELS.WS = ["http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet", "http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"];
  /*global Map */

  var browser_has_Map = typeof Map !== 'undefined';

  function get_sst_id(sst, str, rev) {
    var i = 0,
        len = sst.length;

    if (rev) {
      if (browser_has_Map ? rev.has(str) : Object.prototype.hasOwnProperty.call(rev, str)) {
        var revarr = browser_has_Map ? rev.get(str) : rev[str];

        for (; i < revarr.length; ++i) {
          if (sst[revarr[i]].t === str) {
            sst.Count++;
            return revarr[i];
          }
        }
      }
    } else for (; i < len; ++i) {
      if (sst[i].t === str) {
        sst.Count++;
        return i;
      }
    }

    sst[len] = {
      t: str
    };
    sst.Count++;
    sst.Unique++;

    if (rev) {
      if (browser_has_Map) {
        if (!rev.has(str)) rev.set(str, []);
        rev.get(str).push(len);
      } else {
        if (!Object.prototype.hasOwnProperty.call(rev, str)) rev[str] = [];
        rev[str].push(len);
      }
    }

    return len;
  }

  function col_obj_w(C, col) {
    var p = {
      min: C + 1,
      max: C + 1
    };
    /* wch (chars), wpx (pixels) */

    var wch = -1;
    if (col.MDW) MDW = col.MDW;
    if (col.width != null) p.customWidth = 1;else if (col.wpx != null) wch = px2char(col.wpx);else if (col.wch != null) wch = col.wch;

    if (wch > -1) {
      p.width = char2width(wch);
      p.customWidth = 1;
    } else if (col.width != null) p.width = col.width;

    if (col.hidden) p.hidden = true;
    return p;
  }

  function default_margins(margins, mode) {
    if (!margins) return;
    var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
    if (mode == 'xlml') defs = [1, 1, 1, 1, 0.5, 0.5];
    if (margins.left == null) margins.left = defs[0];
    if (margins.right == null) margins.right = defs[1];
    if (margins.top == null) margins.top = defs[2];
    if (margins.bottom == null) margins.bottom = defs[3];
    if (margins.header == null) margins.header = defs[4];
    if (margins.footer == null) margins.footer = defs[5];
  }

  function get_cell_style(styles, cell, opts) {
    var z = opts.revssf[cell.z != null ? cell.z : "General"];
    var i = 0x3c,
        len = styles.length;

    if (z == null && opts.ssf) {
      for (; i < 0x188; ++i) if (opts.ssf[i] == null) {
        SSF.load(cell.z, i); // $FlowIgnore

        opts.ssf[i] = cell.z;
        opts.revssf[cell.z] = z = i;
        break;
      }
    }

    for (i = 0; i != len; ++i) if (styles[i].numFmtId === z) return i;

    styles[len] = {
      numFmtId: z,
      fontId: 0,
      fillId: 0,
      borderId: 0,
      xfId: 0,
      applyNumberFormat: 1
    };
    return len;
  }

  function safe_format(p, fmtid, fillid, opts, themes, styles) {
    try {
      if (opts.cellNF) p.z = SSF._table[fmtid];
    } catch (e) {
      if (opts.WTF) throw e;
    }

    if (p.t === 'z') return;
    if (p.t === 'd' && typeof p.v === 'string') p.v = parseDate(p.v);
    if (!opts || opts.cellText !== false) try {
      if (SSF._table[fmtid] == null) SSF.load(SSFImplicit[fmtid] || "General", fmtid);
      if (p.t === 'e') p.w = p.w || BErr[p.v];else if (fmtid === 0) {
        if (p.t === 'n') {
          if ((p.v | 0) === p.v) p.w = SSF._general_int(p.v);else p.w = SSF._general_num(p.v);
        } else if (p.t === 'd') {
          var dd = datenum(p.v);
          if ((dd | 0) === dd) p.w = SSF._general_int(dd);else p.w = SSF._general_num(dd);
        } else if (p.v === undefined) return "";else p.w = SSF._general(p.v, _ssfopts);
      } else if (p.t === 'd') p.w = SSF.format(fmtid, datenum(p.v), _ssfopts);else p.w = SSF.format(fmtid, p.v, _ssfopts);
    } catch (e) {
      if (opts.WTF) throw e;
    }
    if (!opts.cellStyles) return;
    if (fillid != null) try {
      p.s = styles.Fills[fillid];

      if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {
        p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);
        if (opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
      }

      if (p.s.bgColor && p.s.bgColor.theme) {
        p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);
        if (opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
      }
    } catch (e) {
      if (opts.WTF && styles.Fills) throw e;
    }
  }

  function check_ws(ws, sname, i) {
    if (ws && ws['!ref']) {
      var range = safe_decode_range(ws['!ref']);
      if (range.e.c < range.s.c || range.e.r < range.s.r) throw new Error("Bad range (" + i + "): " + ws['!ref']);
    }
  }

  function parse_ws_xml_dim(ws, s) {
    var d = safe_decode_range(s);
    if (d.s.r <= d.e.r && d.s.c <= d.e.c && d.s.r >= 0 && d.s.c >= 0) ws["!ref"] = encode_range(d);
  }

  var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
  var sheetdataregex = /<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/;
  var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
  var dimregex = /"(\w*:\w*)"/;
  var colregex = /<(?:\w:)?col\b[^>]*[\/]?>/g;
  var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
  var marginregex = /<(?:\w:)?pageMargins[^>]*\/>/g;
  var sheetprregex = /<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/;
  var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;
  /* 18.3 Worksheets */

  function parse_ws_xml(data, opts, idx, rels, wb, themes, styles) {
    if (!data) return data;
    if (!rels) rels = {
      '!id': {}
    };
    if (DENSE != null && opts.dense == null) opts.dense = DENSE;
    /* 18.3.1.99 worksheet CT_Worksheet */

    var s = opts.dense ? [] : {};
    var refguess = {
      s: {
        r: 2000000,
        c: 2000000
      },
      e: {
        r: 0,
        c: 0
      }
    };
    var data1 = "",
        data2 = "";
    var mtch = data.match(sheetdataregex);

    if (mtch) {
      data1 = data.slice(0, mtch.index);
      data2 = data.slice(mtch.index + mtch[0].length);
    } else data1 = data2 = data;
    /* 18.3.1.82 sheetPr CT_SheetPr */


    var sheetPr = data1.match(sheetprregex);
    if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
    /* 18.3.1.35 dimension CT_SheetDimension */

    var ridx = (data1.match(/<(?:\w*:)?dimension/) || {
      index: -1
    }).index;

    if (ridx > 0) {
      var ref = data1.slice(ridx, ridx + 50).match(dimregex);
      if (ref) parse_ws_xml_dim(s, ref[1]);
    }
    /* 18.3.1.88 sheetViews CT_SheetViews */


    var svs = data1.match(svsregex);
    if (svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);
    /* 18.3.1.17 cols CT_Cols */

    var columns = [];

    if (opts.cellStyles) {
      /* 18.3.1.13 col CT_Col */
      var cols = data1.match(colregex);
      if (cols) parse_ws_xml_cols(columns, cols);
    }
    /* 18.3.1.80 sheetData CT_SheetData ? */


    if (mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);
    /* 18.3.1.2  autoFilter CT_AutoFilter */

    var afilter = data2.match(afregex);
    if (afilter) s['!autofilter'] = parse_ws_xml_autofilter(afilter[0]);
    /* 18.3.1.55 mergeCells CT_MergeCells */

    var merges = [];

    var _merge = data2.match(mergecregex);

    if (_merge) for (ridx = 0; ridx != _merge.length; ++ridx) merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf("\"") + 1));
    /* 18.3.1.48 hyperlinks CT_Hyperlinks */

    var hlink = data2.match(hlinkregex);
    if (hlink) parse_ws_xml_hlinks(s, hlink, rels);
    /* 18.3.1.62 pageMargins CT_PageMargins */

    var margins = data2.match(marginregex);
    if (margins) s['!margins'] = parse_ws_xml_margins(parsexmltag(margins[0]));
    if (!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s["!ref"] = encode_range(refguess);

    if (opts.sheetRows > 0 && s["!ref"]) {
      var tmpref = safe_decode_range(s["!ref"]);

      if (opts.sheetRows <= +tmpref.e.r) {
        tmpref.e.r = opts.sheetRows - 1;
        if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
        if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
        if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
        if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
        s["!fullref"] = s["!ref"];
        s["!ref"] = encode_range(tmpref);
      }
    }

    if (columns.length > 0) s["!cols"] = columns;
    if (merges.length > 0) s["!merges"] = merges;
    return s;
  }

  function write_ws_xml_merges(merges) {
    if (merges.length === 0) return "";
    var o = '<mergeCells count="' + merges.length + '">';

    for (var i = 0; i != merges.length; ++i) o += '<mergeCell ref="' + encode_range(merges[i]) + '"/>';

    return o + '</mergeCells>';
  }
  /* 18.3.1.82-3 sheetPr CT_ChartsheetPr / CT_SheetPr */


  function parse_ws_xml_sheetpr(sheetPr, s, wb, idx) {
    var data = parsexmltag(sheetPr);
    if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
    if (data.codeName) wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));
  }

  function write_ws_xml_sheetpr(ws, wb, idx, opts, o) {
    var needed = false;
    var props = {},
        payload = null;

    if (opts.bookType !== 'xlsx' && wb.vbaraw) {
      var cname = wb.SheetNames[idx];

      try {
        if (wb.Workbook) cname = wb.Workbook.Sheets[idx].CodeName || cname;
      } catch (e) {}

      needed = true;
      props.codeName = utf8write(escapexml(cname));
    }

    if (ws && ws["!outline"]) {
      var outlineprops = {
        summaryBelow: 1,
        summaryRight: 1
      };
      if (ws["!outline"].above) outlineprops.summaryBelow = 0;
      if (ws["!outline"].left) outlineprops.summaryRight = 0;
      payload = (payload || "") + writextag('outlinePr', null, outlineprops);
    }

    if (!needed && !payload) return;
    o[o.length] = writextag('sheetPr', payload, props);
  }
  /* 18.3.1.85 sheetProtection CT_SheetProtection */


  var sheetprot_deffalse = ["objects", "scenarios", "selectLockedCells", "selectUnlockedCells"];
  var sheetprot_deftrue = ["formatColumns", "formatRows", "formatCells", "insertColumns", "insertRows", "insertHyperlinks", "deleteColumns", "deleteRows", "sort", "autoFilter", "pivotTables"];

  function write_ws_xml_protection(sp) {
    // algorithmName, hashValue, saltValue, spinCount
    var o = {
      sheet: 1
    };
    sheetprot_deffalse.forEach(function (n) {
      if (sp[n] != null && sp[n]) o[n] = "1";
    });
    sheetprot_deftrue.forEach(function (n) {
      if (sp[n] != null && !sp[n]) o[n] = "0";
    });
    /* TODO: algorithm */

    if (sp.password) o.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();
    return writextag('sheetProtection', null, o);
  }

  function parse_ws_xml_hlinks(s, data, rels) {
    var dense = Array.isArray(s);

    for (var i = 0; i != data.length; ++i) {
      var val = parsexmltag(utf8read(data[i]), true);
      if (!val.ref) return;
      var rel = ((rels || {})['!id'] || [])[val.id];

      if (rel) {
        val.Target = rel.Target;
        if (val.location) val.Target += "#" + val.location;
      } else {
        val.Target = "#" + val.location;
        rel = {
          Target: val.Target,
          TargetMode: 'Internal'
        };
      }

      val.Rel = rel;

      if (val.tooltip) {
        val.Tooltip = val.tooltip;
        delete val.tooltip;
      }

      var rng = safe_decode_range(val.ref);

      for (var R = rng.s.r; R <= rng.e.r; ++R) for (var C = rng.s.c; C <= rng.e.c; ++C) {
        var addr = encode_cell({
          c: C,
          r: R
        });

        if (dense) {
          if (!s[R]) s[R] = [];
          if (!s[R][C]) s[R][C] = {
            t: "z",
            v: undefined
          };
          s[R][C].l = val;
        } else {
          if (!s[addr]) s[addr] = {
            t: "z",
            v: undefined
          };
          s[addr].l = val;
        }
      }
    }
  }

  function parse_ws_xml_margins(margin) {
    var o = {};
    ["left", "right", "top", "bottom", "header", "footer"].forEach(function (k) {
      if (margin[k]) o[k] = parseFloat(margin[k]);
    });
    return o;
  }

  function write_ws_xml_margins(margin) {
    default_margins(margin);
    return writextag('pageMargins', null, margin);
  }

  function parse_ws_xml_cols(columns, cols) {
    var seencol = false;

    for (var coli = 0; coli != cols.length; ++coli) {
      var coll = parsexmltag(cols[coli], true);
      if (coll.hidden) coll.hidden = parsexmlbool(coll.hidden);
      var colm = parseInt(coll.min, 10) - 1,
          colM = parseInt(coll.max, 10) - 1;
      delete coll.min;
      delete coll.max;
      coll.width = +coll.width;

      if (!seencol && coll.width) {
        seencol = true;
        find_mdw_colw(coll.width);
      }

      process_col(coll);

      while (colm <= colM) columns[colm++] = dup(coll);
    }
  }

  function write_ws_xml_cols(ws, cols) {
    var o = ["<cols>"],
        col;

    for (var i = 0; i != cols.length; ++i) {
      if (!(col = cols[i])) continue;
      o[o.length] = writextag('col', null, col_obj_w(i, col));
    }

    o[o.length] = "</cols>";
    return o.join("");
  }

  function parse_ws_xml_autofilter(data) {
    var o = {
      ref: (data.match(/ref="([^"]*)"/) || [])[1]
    };
    return o;
  }

  function write_ws_xml_autofilter(data, ws, wb, idx) {
    var ref = typeof data.ref == "string" ? data.ref : encode_range(data.ref);
    if (!wb.Workbook) wb.Workbook = {
      Sheets: []
    };
    if (!wb.Workbook.Names) wb.Workbook.Names = [];
    var names = wb.Workbook.Names;
    var range = decode_range(ref);

    if (range.s.r == range.e.r) {
      range.e.r = decode_range(ws["!ref"]).e.r;
      ref = encode_range(range);
    }

    for (var i = 0; i < names.length; ++i) {
      var name = names[i];
      if (name.Name != '_xlnm._FilterDatabase') continue;
      if (name.Sheet != idx) continue;
      name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
      break;
    }

    if (i == names.length) names.push({
      Name: '_xlnm._FilterDatabase',
      Sheet: idx,
      Ref: "'" + wb.SheetNames[idx] + "'!" + ref
    });
    return writextag("autoFilter", null, {
      ref: ref
    });
  }
  /* 18.3.1.88 sheetViews CT_SheetViews */

  /* 18.3.1.87 sheetView CT_SheetView */


  var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;

  function parse_ws_xml_sheetviews(data, wb) {
    if (!wb.Views) wb.Views = [{}];
    (data.match(sviewregex) || []).forEach(function (r, i) {
      var tag = parsexmltag(r); // $FlowIgnore

      if (!wb.Views[i]) wb.Views[i] = {}; // $FlowIgnore

      if (+tag.zoomScale) wb.Views[i].zoom = +tag.zoomScale; // $FlowIgnore

      if (parsexmlbool(tag.rightToLeft)) wb.Views[i].RTL = true;
    });
  }

  function write_ws_xml_sheetviews(ws, opts, idx, wb) {
    var sview = {
      workbookViewId: "0"
    }; // $FlowIgnore

    if ((((wb || {}).Workbook || {}).Views || [])[0]) sview.rightToLeft = wb.Workbook.Views[0].RTL ? "1" : "0";
    return writextag("sheetViews", writextag("sheetView", null, sview), {});
  }

  function write_ws_xml_cell(cell, ref, ws, opts) {
    if (cell.v === undefined && typeof cell.f !== "string" || cell.t === 'z') return "";
    var vv = "";
    var oldt = cell.t,
        oldv = cell.v;
    if (cell.t !== "z") switch (cell.t) {
      case 'b':
        vv = cell.v ? "1" : "0";
        break;

      case 'n':
        vv = '' + cell.v;
        break;

      case 'e':
        vv = BErr[cell.v];
        break;

      case 'd':
        if (opts && opts.cellDates) vv = parseDate(cell.v, -1).toISOString();else {
          cell = dup(cell);
          cell.t = 'n';
          vv = '' + (cell.v = datenum(parseDate(cell.v)));
        }
        if (typeof cell.z === 'undefined') cell.z = SSF._table[14];
        break;

      default:
        vv = cell.v;
        break;
    }
    var v = writetag('v', escapexml(vv)),
        o = {
      r: ref
    };
    /* TODO: cell style */

    var os = get_cell_style(opts.cellXfs, cell, opts);
    if (os !== 0) o.s = os;

    switch (cell.t) {
      case 'n':
        break;

      case 'd':
        o.t = "d";
        break;

      case 'b':
        o.t = "b";
        break;

      case 'e':
        o.t = "e";
        break;

      case 'z':
        break;

      default:
        if (cell.v == null) {
          delete cell.t;
          break;
        }

        if (opts && opts.bookSST) {
          v = writetag('v', '' + get_sst_id(opts.Strings, cell.v, opts.revStrings));
          o.t = "s";
          break;
        }

        o.t = "str";
        break;
    }

    if (cell.t != oldt) {
      cell.t = oldt;
      cell.v = oldv;
    }

    if (typeof cell.f == "string" && cell.f) {
      var ff = cell.F && cell.F.slice(0, ref.length) == ref ? {
        t: "array",
        ref: cell.F
      } : null;
      v = writextag('f', escapexml(cell.f), ff) + (cell.v != null ? v : "");
    }

    if (cell.l) ws['!links'].push([ref, cell.l]);
    if (cell.c) ws['!comments'].push([ref, cell.c]);
    return writextag('c', v, o);
  }

  var parse_ws_xml_data = function () {
    var cellregex = /<(?:\w+:)?c[ \/>]/,
        rowregex = /<\/(?:\w+:)?row>/;
    var rregex = /r=["']([^"']*)["']/,
        isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
    var refregex = /ref=["']([^"']*)["']/;
    var match_v = matchtag("v"),
        match_f = matchtag("f");
    return function parse_ws_xml_data(sdata, s, opts, guess, themes, styles) {
      var ri = 0,
          x = "",
          cells = [],
          cref = [],
          idx = 0,
          i = 0,
          cc = 0,
          d = "",
          p;
      var tag,
          tagr = 0,
          tagc = 0;
      var sstr, ftag;
      var fmtid = 0,
          fillid = 0;
      var do_format = Array.isArray(styles.CellXf),
          cf;
      var arrayf = [];
      var sharedf = [];
      var dense = Array.isArray(s);
      var rows = [],
          rowobj = {},
          rowrite = false;
      var sheetStubs = !!opts.sheetStubs;

      for (var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {
        x = marr[mt].trim();
        var xlen = x.length;
        if (xlen === 0) continue;
        /* 18.3.1.73 row CT_Row */

        for (ri = 0; ri < xlen; ++ri) if (x.charCodeAt(ri) === 62) break;

        ++ri;
        tag = parsexmltag(x.slice(0, ri), true);
        tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
        tagc = -1;
        if (opts.sheetRows && opts.sheetRows < tagr) continue;
        if (guess.s.r > tagr - 1) guess.s.r = tagr - 1;
        if (guess.e.r < tagr - 1) guess.e.r = tagr - 1;

        if (opts && opts.cellStyles) {
          rowobj = {};
          rowrite = false;

          if (tag.ht) {
            rowrite = true;
            rowobj.hpt = parseFloat(tag.ht);
            rowobj.hpx = pt2px(rowobj.hpt);
          }

          if (tag.hidden == "1") {
            rowrite = true;
            rowobj.hidden = true;
          }

          if (tag.outlineLevel != null) {
            rowrite = true;
            rowobj.level = +tag.outlineLevel;
          }

          if (rowrite) rows[tagr - 1] = rowobj;
        }
        /* 18.3.1.4 c CT_Cell */


        cells = x.slice(ri).split(cellregex);

        for (var rslice = 0; rslice != cells.length; ++rslice) if (cells[rslice].trim().charAt(0) != "<") break;

        cells = cells.slice(rslice);

        for (ri = 0; ri != cells.length; ++ri) {
          x = cells[ri].trim();
          if (x.length === 0) continue;
          cref = x.match(rregex);
          idx = ri;
          i = 0;
          cc = 0;
          x = "<c " + (x.slice(0, 1) == "<" ? ">" : "") + x;

          if (cref != null && cref.length === 2) {
            idx = 0;
            d = cref[1];

            for (i = 0; i != d.length; ++i) {
              if ((cc = d.charCodeAt(i) - 64) < 1 || cc > 26) break;
              idx = 26 * idx + cc;
            }

            --idx;
            tagc = idx;
          } else ++tagc;

          for (i = 0; i != x.length; ++i) if (x.charCodeAt(i) === 62) break;

          ++i;
          tag = parsexmltag(x.slice(0, i), true);
          if (!tag.r) tag.r = encode_cell({
            r: tagr - 1,
            c: tagc
          });
          d = x.slice(i);
          p = {
            t: ""
          };
          if ((cref = d.match(match_v)) != null && cref[1] !== '') p.v = unescapexml(cref[1]);

          if (opts.cellFormula) {
            if ((cref = d.match(match_f)) != null && cref[1] !== '') {
              /* TODO: match against XLSXFutureFunctions */
              p.f = unescapexml(utf8read(cref[1])).replace(/\r\n/g, "\n");
              if (!opts.xlfn) p.f = _xlfn(p.f);

              if (cref[0].indexOf('t="array"') > -1) {
                p.F = (d.match(refregex) || [])[1];
                if (p.F.indexOf(":") > -1) arrayf.push([safe_decode_range(p.F), p.F]);
              } else if (cref[0].indexOf('t="shared"') > -1) {
                // TODO: parse formula
                ftag = parsexmltag(cref[0]);

                var ___f = unescapexml(utf8read(cref[1]));

                if (!opts.xlfn) ___f = _xlfn(___f);
                sharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];
              }
            } else if (cref = d.match(/<f[^>]*\/>/)) {
              ftag = parsexmltag(cref[0]);
              if (sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2]
              /*[0].ref*/
              , tag.r);
            }
            /* TODO: factor out contains logic */


            var _tag = decode_cell(tag.r);

            for (i = 0; i < arrayf.length; ++i) if (_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r) if (_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c) p.F = arrayf[i][1];
          }

          if (tag.t == null && p.v === undefined) {
            if (p.f || p.F) {
              p.v = 0;
              p.t = "n";
            } else if (!sheetStubs) continue;else p.t = "z";
          } else p.t = tag.t || "n";

          if (guess.s.c > tagc) guess.s.c = tagc;
          if (guess.e.c < tagc) guess.e.c = tagc;
          /* 18.18.11 t ST_CellType */

          switch (p.t) {
            case 'n':
              if (p.v == "" || p.v == null) {
                if (!sheetStubs) continue;
                p.t = 'z';
              } else p.v = parseFloat(p.v);

              break;

            case 's':
              if (typeof p.v == 'undefined') {
                if (!sheetStubs) continue;
                p.t = 'z';
              } else {
                sstr = strs[parseInt(p.v, 10)];
                p.v = sstr.t;
                p.r = sstr.r;
                if (opts.cellHTML) p.h = sstr.h;
              }

              break;

            case 'str':
              p.t = "s";
              p.v = p.v != null ? utf8read(p.v) : '';
              if (opts.cellHTML) p.h = escapehtml(p.v);
              break;

            case 'inlineStr':
              cref = d.match(isregex);
              p.t = 's';

              if (cref != null && (sstr = parse_si(cref[1]))) {
                p.v = sstr.t;
                if (opts.cellHTML) p.h = sstr.h;
              } else p.v = "";

              break;

            case 'b':
              p.v = parsexmlbool(p.v);
              break;

            case 'd':
              if (opts.cellDates) p.v = parseDate(p.v, 1);else {
                p.v = datenum(parseDate(p.v, 1));
                p.t = 'n';
              }
              break;

            /* error string in .w, number in .v */

            case 'e':
              if (!opts || opts.cellText !== false) p.w = p.v;
              p.v = RBErr[p.v];
              break;
          }
          /* formatting */


          fmtid = fillid = 0;
          cf = null;

          if (do_format && tag.s !== undefined) {
            cf = styles.CellXf[tag.s];

            if (cf != null) {
              if (cf.numFmtId != null) fmtid = cf.numFmtId;

              if (opts.cellStyles) {
                if (cf.fillId != null) fillid = cf.fillId;
              }
            }
          }

          safe_format(p, fmtid, fillid, opts, themes, styles);

          if (opts.cellDates && do_format && p.t == 'n' && SSF.is_date(SSF._table[fmtid])) {
            p.t = 'd';
            p.v = numdate(p.v);
          }

          if (dense) {
            var _r = decode_cell(tag.r);

            if (!s[_r.r]) s[_r.r] = [];
            s[_r.r][_r.c] = p;
          } else s[tag.r] = p;
        }
      }

      if (rows.length > 0) s['!rows'] = rows;
    };
  }();

  function write_ws_xml_data(ws, opts, idx, wb) {
    var o = [],
        r = [],
        range = safe_decode_range(ws['!ref']),
        cell = "",
        ref,
        rr = "",
        cols = [],
        R = 0,
        C = 0,
        rows = ws['!rows'];
    var dense = Array.isArray(ws);
    var params = {
      r: rr
    },
        row,
        height = -1;

    for (C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C);

    for (R = range.s.r; R <= range.e.r; ++R) {
      r = [];
      rr = encode_row(R);

      for (C = range.s.c; C <= range.e.c; ++C) {
        ref = cols[C] + rr;

        var _cell = dense ? (ws[R] || [])[C] : ws[ref];

        if (_cell === undefined) continue;
        if ((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb)) != null) r.push(cell);
      }

      if (r.length > 0 || rows && rows[R]) {
        params = {
          r: rr
        };

        if (rows && rows[R]) {
          row = rows[R];
          if (row.hidden) params.hidden = 1;
          height = -1;
          if (row.hpx) height = px2pt(row.hpx);else if (row.hpt) height = row.hpt;

          if (height > -1) {
            params.ht = height;
            params.customHeight = 1;
          }

          if (row.level) {
            params.outlineLevel = row.level;
          }
        }

        o[o.length] = writextag('row', r.join(""), params);
      }
    }

    if (rows) for (; R < rows.length; ++R) {
      if (rows && rows[R]) {
        params = {
          r: R + 1
        };
        row = rows[R];
        if (row.hidden) params.hidden = 1;
        height = -1;
        if (row.hpx) height = px2pt(row.hpx);else if (row.hpt) height = row.hpt;

        if (height > -1) {
          params.ht = height;
          params.customHeight = 1;
        }

        if (row.level) {
          params.outlineLevel = row.level;
        }

        o[o.length] = writextag('row', "", params);
      }
    }
    return o.join("");
  }

  var WS_XML_ROOT = writextag('worksheet', null, {
    'xmlns': XMLNS.main[0],
    'xmlns:r': XMLNS.r
  });

  function write_ws_xml(idx, opts, wb, rels) {
    var o = [XML_HEADER, WS_XML_ROOT];
    var s = wb.SheetNames[idx],
        sidx = 0,
        rdata = "";
    var ws = wb.Sheets[s];
    if (ws == null) ws = {};
    var ref = ws['!ref'] || 'A1';
    var range = safe_decode_range(ref);

    if (range.e.c > 0x3FFF || range.e.r > 0xFFFFF) {
      if (opts.WTF) throw new Error("Range " + ref + " exceeds format limit A1:XFD1048576");
      range.e.c = Math.min(range.e.c, 0x3FFF);
      range.e.r = Math.min(range.e.c, 0xFFFFF);
      ref = encode_range(range);
    }

    if (!rels) rels = {};
    ws['!comments'] = [];
    var _drawing = [];
    write_ws_xml_sheetpr(ws, wb, idx, opts, o);
    o[o.length] = writextag('dimension', null, {
      'ref': ref
    });
    o[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);
    /* TODO: store in WB, process styles */

    if (opts.sheetFormat) o[o.length] = writextag('sheetFormatPr', null, {
      defaultRowHeight: opts.sheetFormat.defaultRowHeight || '16',
      baseColWidth: opts.sheetFormat.baseColWidth || '10',
      outlineLevelRow: opts.sheetFormat.outlineLevelRow || '7'
    });
    if (ws['!cols'] != null && ws['!cols'].length > 0) o[o.length] = write_ws_xml_cols(ws, ws['!cols']);
    o[sidx = o.length] = '<sheetData/>';
    ws['!links'] = [];

    if (ws['!ref'] != null) {
      rdata = write_ws_xml_data(ws, opts, idx, wb, rels);
      if (rdata.length > 0) o[o.length] = rdata;
    }

    if (o.length > sidx + 1) {
      o[o.length] = '</sheetData>';
      o[sidx] = o[sidx].replace("/>", ">");
    }
    /* sheetCalcPr */


    if (ws['!protect'] != null) o[o.length] = write_ws_xml_protection(ws['!protect']);
    /* protectedRanges */

    /* scenarios */

    if (ws['!autofilter'] != null) o[o.length] = write_ws_xml_autofilter(ws['!autofilter'], ws, wb, idx);
    /* sortState */

    /* dataConsolidate */

    /* customSheetViews */

    if (ws['!merges'] != null && ws['!merges'].length > 0) o[o.length] = write_ws_xml_merges(ws['!merges']);
    /* phoneticPr */

    /* conditionalFormatting */

    /* dataValidations */

    var relc = -1,
        rel,
        rId = -1;

    if (ws['!links'].length > 0) {
      o[o.length] = "<hyperlinks>";
      ws['!links'].forEach(function (l) {
        if (!l[1].Target) return;
        rel = {
          "ref": l[0]
        };

        if (l[1].Target.charAt(0) != "#") {
          rId = add_rels(rels, -1, escapexml(l[1].Target).replace(/#.*$/, ""), RELS.HLINK);
          rel["r:id"] = "rId" + rId;
        }

        if ((relc = l[1].Target.indexOf("#")) > -1) rel.location = escapexml(l[1].Target.slice(relc + 1));
        if (l[1].Tooltip) rel.tooltip = escapexml(l[1].Tooltip);
        o[o.length] = writextag("hyperlink", null, rel);
      });
      o[o.length] = "</hyperlinks>";
    }

    delete ws['!links'];
    /* printOptions */

    if (ws['!margins'] != null) o[o.length] = write_ws_xml_margins(ws['!margins']);
    /* pageSetup */

    /* headerFooter */

    /* rowBreaks */

    /* colBreaks */

    /* customProperties */

    /* cellWatches */

    if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) o[o.length] = writetag("ignoredErrors", writextag("ignoredError", null, {
      numberStoredAsText: 1,
      sqref: ref
    }));
    /* smartTags */

    if (_drawing.length > 0) {
      rId = add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);
      o[o.length] = writextag("drawing", null, {
        "r:id": "rId" + rId
      });
      ws['!drawing'] = _drawing;
    }

    if (ws['!comments'].length > 0) {
      rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
      o[o.length] = writextag("legacyDrawing", null, {
        "r:id": "rId" + rId
      });
      ws['!legacy'] = rId;
    }
    /* legacyDrawingHF */

    /* picture */

    /* oleObjects */

    /* controls */

    /* webPublishItems */

    /* tableParts */

    /* extLst */


    if (o.length > 1) {
      o[o.length] = '</worksheet>';
      o[1] = o[1].replace("/>", ">");
    }

    return o.join("");
  }
  /* [MS-XLSB] 2.4.726 BrtRowHdr */


  function parse_BrtRowHdr(data, length) {
    var z = {};
    var tgt = data.l + length;
    z.r = data.read_shift(4);
    data.l += 4; // TODO: ixfe

    var miyRw = data.read_shift(2);
    data.l += 1; // TODO: top/bot padding

    var flags = data.read_shift(1);
    data.l = tgt;
    if (flags & 0x07) z.level = flags & 0x07;
    if (flags & 0x10) z.hidden = true;
    if (flags & 0x20) z.hpt = miyRw / 20;
    return z;
  }

  function write_BrtRowHdr(R, range, ws) {
    var o = new_buf(17 + 8 * 16);
    var row = (ws['!rows'] || [])[R] || {};
    o.write_shift(4, R);
    o.write_shift(4, 0);
    /* TODO: ixfe */

    var miyRw = 0x0140;
    if (row.hpx) miyRw = px2pt(row.hpx) * 20;else if (row.hpt) miyRw = row.hpt * 20;
    o.write_shift(2, miyRw);
    o.write_shift(1, 0);
    /* top/bot padding */

    var flags = 0x0;
    if (row.level) flags |= row.level;
    if (row.hidden) flags |= 0x10;
    if (row.hpx || row.hpt) flags |= 0x20;
    o.write_shift(1, flags);
    o.write_shift(1, 0);
    /* phonetic guide */

    /* [MS-XLSB] 2.5.8 BrtColSpan explains the mechanism */

    var ncolspan = 0,
        lcs = o.l;
    o.l += 4;
    var caddr = {
      r: R,
      c: 0
    };

    for (var i = 0; i < 16; ++i) {
      if (range.s.c > i + 1 << 10 || range.e.c < i << 10) continue;
      var first = -1,
          last = -1;

      for (var j = i << 10; j < i + 1 << 10; ++j) {
        caddr.c = j;
        var cell = Array.isArray(ws) ? (ws[caddr.r] || [])[caddr.c] : ws[encode_cell(caddr)];

        if (cell) {
          if (first < 0) first = j;
          last = j;
        }
      }

      if (first < 0) continue;
      ++ncolspan;
      o.write_shift(4, first);
      o.write_shift(4, last);
    }

    var l = o.l;
    o.l = lcs;
    o.write_shift(4, ncolspan);
    o.l = l;
    return o.length > o.l ? o.slice(0, o.l) : o;
  }

  function write_row_header(ba, ws, range, R) {
    var o = write_BrtRowHdr(R, range, ws);
    if (o.length > 17 || (ws['!rows'] || [])[R]) write_record(ba, 'BrtRowHdr', o);
  }
  /* [MS-XLSB] 2.4.820 BrtWsDim */


  var parse_BrtWsDim = parse_UncheckedRfX;
  var write_BrtWsDim = write_UncheckedRfX;
  /* [MS-XLSB] 2.4.821 BrtWsFmtInfo */

  function parse_BrtWsFmtInfo() {} //function write_BrtWsFmtInfo(ws, o) { }

  /* [MS-XLSB] 2.4.823 BrtWsProp */


  function parse_BrtWsProp(data, length) {
    var z = {};
    /* TODO: pull flags */

    data.l += 19;
    z.name = parse_XLSBCodeName(data, length - 19);
    return z;
  }

  function write_BrtWsProp(str, o) {
    if (o == null) o = new_buf(84 + 4 * str.length);

    for (var i = 0; i < 3; ++i) o.write_shift(1, 0);

    write_BrtColor({
      auto: 1
    }, o);
    o.write_shift(-4, -1);
    o.write_shift(-4, -1);
    write_XLSBCodeName(str, o);
    return o.slice(0, o.l);
  }
  /* [MS-XLSB] 2.4.306 BrtCellBlank */


  function parse_BrtCellBlank(data) {
    var cell = parse_XLSBCell(data);
    return [cell];
  }

  function write_BrtCellBlank(cell, ncell, o) {
    if (o == null) o = new_buf(8);
    return write_XLSBCell(ncell, o);
  }
  /* [MS-XLSB] 2.4.307 BrtCellBool */


  function parse_BrtCellBool(data) {
    var cell = parse_XLSBCell(data);
    var fBool = data.read_shift(1);
    return [cell, fBool, 'b'];
  }

  function write_BrtCellBool(cell, ncell, o) {
    if (o == null) o = new_buf(9);
    write_XLSBCell(ncell, o);
    o.write_shift(1, cell.v ? 1 : 0);
    return o;
  }
  /* [MS-XLSB] 2.4.308 BrtCellError */


  function parse_BrtCellError(data) {
    var cell = parse_XLSBCell(data);
    var bError = data.read_shift(1);
    return [cell, bError, 'e'];
  }
  /* [MS-XLSB] 2.4.311 BrtCellIsst */


  function parse_BrtCellIsst(data) {
    var cell = parse_XLSBCell(data);
    var isst = data.read_shift(4);
    return [cell, isst, 's'];
  }

  function write_BrtCellIsst(cell, ncell, o) {
    if (o == null) o = new_buf(12);
    write_XLSBCell(ncell, o);
    o.write_shift(4, ncell.v);
    return o;
  }
  /* [MS-XLSB] 2.4.313 BrtCellReal */


  function parse_BrtCellReal(data) {
    var cell = parse_XLSBCell(data);
    var value = parse_Xnum(data);
    return [cell, value, 'n'];
  }

  function write_BrtCellReal(cell, ncell, o) {
    if (o == null) o = new_buf(16);
    write_XLSBCell(ncell, o);
    write_Xnum(cell.v, o);
    return o;
  }
  /* [MS-XLSB] 2.4.314 BrtCellRk */


  function parse_BrtCellRk(data) {
    var cell = parse_XLSBCell(data);
    var value = parse_RkNumber(data);
    return [cell, value, 'n'];
  }

  function write_BrtCellRk(cell, ncell, o) {
    if (o == null) o = new_buf(12);
    write_XLSBCell(ncell, o);
    write_RkNumber(cell.v, o);
    return o;
  }
  /* [MS-XLSB] 2.4.317 BrtCellSt */


  function parse_BrtCellSt(data) {
    var cell = parse_XLSBCell(data);
    var value = parse_XLWideString(data);
    return [cell, value, 'str'];
  }

  function write_BrtCellSt(cell, ncell, o) {
    if (o == null) o = new_buf(12 + 4 * cell.v.length);
    write_XLSBCell(ncell, o);
    write_XLWideString(cell.v, o);
    return o.length > o.l ? o.slice(0, o.l) : o;
  }
  /* [MS-XLSB] 2.4.653 BrtFmlaBool */


  function parse_BrtFmlaBool(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts['!row'];
    var value = data.read_shift(1);
    var o = [cell, value, 'b'];

    if (opts.cellFormula) {
      data.l += 2;
      var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
      o[3] = stringify_formula(formula, null
      /*range*/
      , cell, opts.supbooks, opts);
      /* TODO */
    } else data.l = end;

    return o;
  }
  /* [MS-XLSB] 2.4.654 BrtFmlaError */


  function parse_BrtFmlaError(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts['!row'];
    var value = data.read_shift(1);
    var o = [cell, value, 'e'];

    if (opts.cellFormula) {
      data.l += 2;
      var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
      o[3] = stringify_formula(formula, null
      /*range*/
      , cell, opts.supbooks, opts);
      /* TODO */
    } else data.l = end;

    return o;
  }
  /* [MS-XLSB] 2.4.655 BrtFmlaNum */


  function parse_BrtFmlaNum(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts['!row'];
    var value = parse_Xnum(data);
    var o = [cell, value, 'n'];

    if (opts.cellFormula) {
      data.l += 2;
      var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
      o[3] = stringify_formula(formula, null
      /*range*/
      , cell, opts.supbooks, opts);
      /* TODO */
    } else data.l = end;

    return o;
  }
  /* [MS-XLSB] 2.4.656 BrtFmlaString */


  function parse_BrtFmlaString(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts['!row'];
    var value = parse_XLWideString(data);
    var o = [cell, value, 'str'];

    if (opts.cellFormula) {
      data.l += 2;
      var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
      o[3] = stringify_formula(formula, null
      /*range*/
      , cell, opts.supbooks, opts);
      /* TODO */
    } else data.l = end;

    return o;
  }
  /* [MS-XLSB] 2.4.682 BrtMergeCell */


  var parse_BrtMergeCell = parse_UncheckedRfX;
  var write_BrtMergeCell = write_UncheckedRfX;
  /* [MS-XLSB] 2.4.107 BrtBeginMergeCells */

  function write_BrtBeginMergeCells(cnt, o) {
    if (o == null) o = new_buf(4);
    o.write_shift(4, cnt);
    return o;
  }
  /* [MS-XLSB] 2.4.662 BrtHLink */


  function parse_BrtHLink(data, length) {
    var end = data.l + length;
    var rfx = parse_UncheckedRfX(data, 16);
    var relId = parse_XLNullableWideString(data);
    var loc = parse_XLWideString(data);
    var tooltip = parse_XLWideString(data);
    var display = parse_XLWideString(data);
    data.l = end;
    var o = {
      rfx: rfx,
      relId: relId,
      loc: loc,
      display: display
    };
    if (tooltip) o.Tooltip = tooltip;
    return o;
  }

  function write_BrtHLink(l, rId) {
    var o = new_buf(50 + 4 * (l[1].Target.length + (l[1].Tooltip || "").length));
    write_UncheckedRfX({
      s: decode_cell(l[0]),
      e: decode_cell(l[0])
    }, o);
    write_RelID("rId" + rId, o);
    var locidx = l[1].Target.indexOf("#");
    var loc = locidx == -1 ? "" : l[1].Target.slice(locidx + 1);
    write_XLWideString(loc || "", o);
    write_XLWideString(l[1].Tooltip || "", o);
    write_XLWideString("", o);
    return o.slice(0, o.l);
  }
  /* [MS-XLSB] 2.4.692 BrtPane */


  function parse_BrtPane()
  /*data, length, opts*/
  {}
  /* [MS-XLSB] 2.4.6 BrtArrFmla */


  function parse_BrtArrFmla(data, length, opts) {
    var end = data.l + length;
    var rfx = parse_RfX(data, 16);
    var fAlwaysCalc = data.read_shift(1);
    var o = [rfx];
    o[2] = fAlwaysCalc;

    if (opts.cellFormula) {
      var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
      o[1] = formula;
    } else data.l = end;

    return o;
  }
  /* [MS-XLSB] 2.4.750 BrtShrFmla */


  function parse_BrtShrFmla(data, length, opts) {
    var end = data.l + length;
    var rfx = parse_UncheckedRfX(data, 16);
    var o = [rfx];

    if (opts.cellFormula) {
      var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
      o[1] = formula;
      data.l = end;
    } else data.l = end;

    return o;
  }
  /* [MS-XLSB] 2.4.323 BrtColInfo */

  /* TODO: once XLS ColInfo is set, combine the functions */


  function write_BrtColInfo(C, col, o) {
    if (o == null) o = new_buf(18);
    var p = col_obj_w(C, col);
    o.write_shift(-4, C);
    o.write_shift(-4, C);
    o.write_shift(4, (p.width || 10) * 256);
    o.write_shift(4, 0
    /*ixfe*/
    ); // style

    var flags = 0;
    if (col.hidden) flags |= 0x01;
    if (typeof p.width == 'number') flags |= 0x02;
    if (col.level) flags |= col.level << 8;
    o.write_shift(2, flags); // bit flag

    return o;
  }
  /* [MS-XLSB] 2.4.678 BrtMargins */


  var BrtMarginKeys = ["left", "right", "top", "bottom", "header", "footer"];

  function parse_BrtMargins(data) {
    var margins = {};
    BrtMarginKeys.forEach(function (k) {
      margins[k] = parse_Xnum(data, 8);
    });
    return margins;
  }

  function write_BrtMargins(margins, o) {
    if (o == null) o = new_buf(6 * 8);
    default_margins(margins);
    BrtMarginKeys.forEach(function (k) {
      write_Xnum(margins[k], o);
    });
    return o;
  }
  /* [MS-XLSB] 2.4.299 BrtBeginWsView */


  function parse_BrtBeginWsView(data) {
    var f = data.read_shift(2);
    data.l += 28;
    return {
      RTL: f & 0x20
    };
  }

  function write_BrtBeginWsView(ws, Workbook, o) {
    if (o == null) o = new_buf(30);
    var f = 0x39c;
    if ((((Workbook || {}).Views || [])[0] || {}).RTL) f |= 0x20;
    o.write_shift(2, f); // bit flag

    o.write_shift(4, 0);
    o.write_shift(4, 0); // view first row

    o.write_shift(4, 0); // view first col

    o.write_shift(1, 0); // gridline color ICV

    o.write_shift(1, 0);
    o.write_shift(2, 0);
    o.write_shift(2, 100); // zoom scale

    o.write_shift(2, 0);
    o.write_shift(2, 0);
    o.write_shift(2, 0);
    o.write_shift(4, 0); // workbook view id

    return o;
  }
  /* [MS-XLSB] 2.4.309 BrtCellIgnoreEC */


  function write_BrtCellIgnoreEC(ref) {
    var o = new_buf(24);
    o.write_shift(4, 4);
    o.write_shift(4, 1);
    write_UncheckedRfX(ref, o);
    return o;
  }
  /* [MS-XLSB] 2.4.748 BrtSheetProtection */


  function write_BrtSheetProtection(sp, o) {
    if (o == null) o = new_buf(16 * 4 + 2);
    o.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);
    o.write_shift(4, 1); // this record should not be written if no protection

    [["objects", false], // fObjects
    ["scenarios", false], // fScenarios
    ["formatCells", true], // fFormatCells
    ["formatColumns", true], // fFormatColumns
    ["formatRows", true], // fFormatRows
    ["insertColumns", true], // fInsertColumns
    ["insertRows", true], // fInsertRows
    ["insertHyperlinks", true], // fInsertHyperlinks
    ["deleteColumns", true], // fDeleteColumns
    ["deleteRows", true], // fDeleteRows
    ["selectLockedCells", false], // fSelLockedCells
    ["sort", true], // fSort
    ["autoFilter", true], // fAutoFilter
    ["pivotTables", true], // fPivotTables
    ["selectUnlockedCells", false] // fSelUnlockedCells
    ].forEach(function (n) {
      if (n[1]) o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0);else o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1);
    });
    return o;
  }

  function parse_BrtDVal()
  /*data, length, opts*/
  {}

  function parse_BrtDVal14()
  /*data, length, opts*/
  {}
  /* [MS-XLSB] 2.1.7.61 Worksheet */


  function parse_ws_bin(data, _opts, idx, rels, wb, themes, styles) {
    if (!data) return data;
    var opts = _opts || {};
    if (!rels) rels = {
      '!id': {}
    };
    if (DENSE != null && opts.dense == null) opts.dense = DENSE;
    var s = opts.dense ? [] : {};
    var ref;
    var refguess = {
      s: {
        r: 2000000,
        c: 2000000
      },
      e: {
        r: 0,
        c: 0
      }
    };
    var state = [];
    var pass = false,
        end = false;
    var row, p, cf, R, C, addr, sstr, rr, cell;
    var merges = [];
    opts.biff = 12;
    opts['!row'] = 0;
    var ai = 0,
        af = false;
    var arrayf = [];
    var sharedf = {};
    var supbooks = opts.supbooks || wb.supbooks || [[]];
    supbooks.sharedf = sharedf;
    supbooks.arrayf = arrayf;
    supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function (x) {
      return x.name;
    });

    if (!opts.supbooks) {
      opts.supbooks = supbooks;
      if (wb.Names) for (var i = 0; i < wb.Names.length; ++i) supbooks[0][i + 1] = wb.Names[i];
    }

    var colinfo = [],
        rowinfo = [];
    var seencol = false;
    recordhopper(data, function ws_parse(val, R_n, RT) {
      if (end) return;

      switch (RT) {
        case 0x0094:
          /* 'BrtWsDim' */
          ref = val;
          break;

        case 0x0000:
          /* 'BrtRowHdr' */
          row = val;
          if (opts.sheetRows && opts.sheetRows <= row.r) end = true;
          rr = encode_row(R = row.r);
          opts['!row'] = row.r;

          if (val.hidden || val.hpt || val.level != null) {
            if (val.hpt) val.hpx = pt2px(val.hpt);
            rowinfo[val.r] = val;
          }

          break;

        case 0x0002:
        /* 'BrtCellRk' */

        case 0x0003:
        /* 'BrtCellError' */

        case 0x0004:
        /* 'BrtCellBool' */

        case 0x0005:
        /* 'BrtCellReal' */

        case 0x0006:
        /* 'BrtCellSt' */

        case 0x0007:
        /* 'BrtCellIsst' */

        case 0x0008:
        /* 'BrtFmlaString' */

        case 0x0009:
        /* 'BrtFmlaNum' */

        case 0x000A:
        /* 'BrtFmlaBool' */

        case 0x000B:
          /* 'BrtFmlaError' */
          p = {
            t: val[2]
          };

          switch (val[2]) {
            case 'n':
              p.v = val[1];
              break;

            case 's':
              sstr = strs[val[1]];
              p.v = sstr.t;
              p.r = sstr.r;
              break;

            case 'b':
              p.v = val[1] ? true : false;
              break;

            case 'e':
              p.v = val[1];
              if (opts.cellText !== false) p.w = BErr[p.v];
              break;

            case 'str':
              p.t = 's';
              p.v = val[1];
              break;
          }

          if (cf = styles.CellXf[val[0].iStyleRef]) safe_format(p, cf.numFmtId, null, opts, themes, styles);
          C = val[0].c;

          if (opts.dense) {
            if (!s[R]) s[R] = [];
            s[R][C] = p;
          } else s[encode_col(C) + rr] = p;

          if (opts.cellFormula) {
            af = false;

            for (ai = 0; ai < arrayf.length; ++ai) {
              var aii = arrayf[ai];
              if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) if (C >= aii[0].s.c && C <= aii[0].e.c) {
                p.F = encode_range(aii[0]);
                af = true;
              }
            }

            if (!af && val.length > 3) p.f = val[3];
          }

          if (refguess.s.r > row.r) refguess.s.r = row.r;
          if (refguess.s.c > C) refguess.s.c = C;
          if (refguess.e.r < row.r) refguess.e.r = row.r;
          if (refguess.e.c < C) refguess.e.c = C;

          if (opts.cellDates && cf && p.t == 'n' && SSF.is_date(SSF._table[cf.numFmtId])) {
            var _d = SSF.parse_date_code(p.v);

            if (_d) {
              p.t = 'd';
              p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
            }
          }

          break;

        case 0x0001:
          /* 'BrtCellBlank' */
          if (!opts.sheetStubs || pass) break;
          p = {
            t: 'z',
            v: undefined
          };
          C = val[0].c;

          if (opts.dense) {
            if (!s[R]) s[R] = [];
            s[R][C] = p;
          } else s[encode_col(C) + rr] = p;

          if (refguess.s.r > row.r) refguess.s.r = row.r;
          if (refguess.s.c > C) refguess.s.c = C;
          if (refguess.e.r < row.r) refguess.e.r = row.r;
          if (refguess.e.c < C) refguess.e.c = C;
          break;

        case 0x00B0:
          /* 'BrtMergeCell' */
          merges.push(val);
          break;

        case 0x01EE:
          /* 'BrtHLink' */
          var rel = rels['!id'][val.relId];

          if (rel) {
            val.Target = rel.Target;
            if (val.loc) val.Target += "#" + val.loc;
            val.Rel = rel;
          } else if (val.relId == '') {
            val.Target = "#" + val.loc;
          }

          for (R = val.rfx.s.r; R <= val.rfx.e.r; ++R) for (C = val.rfx.s.c; C <= val.rfx.e.c; ++C) {
            if (opts.dense) {
              if (!s[R]) s[R] = [];
              if (!s[R][C]) s[R][C] = {
                t: 'z',
                v: undefined
              };
              s[R][C].l = val;
            } else {
              addr = encode_cell({
                c: C,
                r: R
              });
              if (!s[addr]) s[addr] = {
                t: 'z',
                v: undefined
              };
              s[addr].l = val;
            }
          }

          break;

        case 0x01AA:
          /* 'BrtArrFmla' */
          if (!opts.cellFormula) break;
          arrayf.push(val);
          cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];
          cell.f = stringify_formula(val[1], refguess, {
            r: row.r,
            c: C
          }, supbooks, opts);
          cell.F = encode_range(val[0]);
          break;

        case 0x01AB:
          /* 'BrtShrFmla' */
          if (!opts.cellFormula) break;
          sharedf[encode_cell(val[0].s)] = val[1];
          cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];
          cell.f = stringify_formula(val[1], refguess, {
            r: row.r,
            c: C
          }, supbooks, opts);
          break;

        /* identical to 'ColInfo' in XLS */

        case 0x003C:
          /* 'BrtColInfo' */
          if (!opts.cellStyles) break;

          while (val.e >= val.s) {
            colinfo[val.e--] = {
              width: val.w / 256,
              hidden: !!(val.flags & 0x01),
              level: val.level
            };

            if (!seencol) {
              seencol = true;
              find_mdw_colw(val.w / 256);
            }

            process_col(colinfo[val.e + 1]);
          }

          break;

        case 0x00A1:
          /* 'BrtBeginAFilter' */
          s['!autofilter'] = {
            ref: encode_range(val)
          };
          break;

        case 0x01DC:
          /* 'BrtMargins' */
          s['!margins'] = val;
          break;

        case 0x0093:
          /* 'BrtWsProp' */
          if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
          if (val.name) wb.Sheets[idx].CodeName = val.name;
          break;

        case 0x0089:
          /* 'BrtBeginWsView' */
          if (!wb.Views) wb.Views = [{}];
          if (!wb.Views[0]) wb.Views[0] = {};
          if (val.RTL) wb.Views[0].RTL = true;
          break;

        case 0x01E5:
          /* 'BrtWsFmtInfo' */
          break;

        case 0x0040:
        /* 'BrtDVal' */

        case 0x041D:
          /* 'BrtDVal14' */
          break;

        case 0x0097:
          /* 'BrtPane' */
          break;

        case 0x00AF:
        /* 'BrtAFilterDateGroupItem' */

        case 0x0284:
        /* 'BrtActiveX' */

        case 0x0271:
        /* 'BrtBigName' */

        case 0x0232:
        /* 'BrtBkHim' */

        case 0x018C:
        /* 'BrtBrk' */

        case 0x0458:
        /* 'BrtCFIcon' */

        case 0x047A:
        /* 'BrtCFRuleExt' */

        case 0x01D7:
        /* 'BrtCFVO' */

        case 0x041A:
        /* 'BrtCFVO14' */

        case 0x0289:
        /* 'BrtCellIgnoreEC' */

        case 0x0451:
        /* 'BrtCellIgnoreEC14' */

        case 0x0031:
        /* 'BrtCellMeta' */

        case 0x024D:
        /* 'BrtCellSmartTagProperty' */

        case 0x025F:
        /* 'BrtCellWatch' */

        case 0x0234:
        /* 'BrtColor' */

        case 0x041F:
        /* 'BrtColor14' */

        case 0x00A8:
        /* 'BrtColorFilter' */

        case 0x00AE:
        /* 'BrtCustomFilter' */

        case 0x049C:
        /* 'BrtCustomFilter14' */

        case 0x01F3:
        /* 'BrtDRef' */

        case 0x01FB:
        /* 'BrtDXF' */

        case 0x0226:
        /* 'BrtDrawing' */

        case 0x00AB:
        /* 'BrtDynamicFilter' */

        case 0x00A7:
        /* 'BrtFilter' */

        case 0x0499:
        /* 'BrtFilter14' */

        case 0x00A9:
        /* 'BrtIconFilter' */

        case 0x049D:
        /* 'BrtIconFilter14' */

        case 0x0227:
        /* 'BrtLegacyDrawing' */

        case 0x0228:
        /* 'BrtLegacyDrawingHF' */

        case 0x0295:
        /* 'BrtListPart' */

        case 0x027F:
        /* 'BrtOleObject' */

        case 0x01DE:
        /* 'BrtPageSetup' */

        case 0x0219:
        /* 'BrtPhoneticInfo' */

        case 0x01DD:
        /* 'BrtPrintOptions' */

        case 0x0218:
        /* 'BrtRangeProtection' */

        case 0x044F:
        /* 'BrtRangeProtection14' */

        case 0x02A8:
        /* 'BrtRangeProtectionIso' */

        case 0x0450:
        /* 'BrtRangeProtectionIso14' */

        case 0x0400:
        /* 'BrtRwDescent' */

        case 0x0098:
        /* 'BrtSel' */

        case 0x0297:
        /* 'BrtSheetCalcProp' */

        case 0x0217:
        /* 'BrtSheetProtection' */

        case 0x02A6:
        /* 'BrtSheetProtectionIso' */

        case 0x01F8:
        /* 'BrtSlc' */

        case 0x0413:
        /* 'BrtSparkline' */

        case 0x01AC:
        /* 'BrtTable' */

        case 0x00AA:
        /* 'BrtTop10Filter' */

        case 0x0C00:
        /* 'BrtUid' */

        case 0x0032:
        /* 'BrtValueMeta' */

        case 0x0816:
        /* 'BrtWebExtension' */

        case 0x0415:
          /* 'BrtWsFmtInfoEx14' */
          break;

        case 0x0023:
          /* 'BrtFRTBegin' */
          pass = true;
          break;

        case 0x0024:
          /* 'BrtFRTEnd' */
          pass = false;
          break;

        case 0x0025:
          /* 'BrtACBegin' */
          state.push(R_n);
          pass = true;
          break;

        case 0x0026:
          /* 'BrtACEnd' */
          state.pop();
          pass = false;
          break;

        default:
          if ((R_n || "").indexOf("Begin") > 0) {
            /* empty */
          } else if ((R_n || "").indexOf("End") > 0) {
            /* empty */
          } else if (!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);

      }
    }, opts);
    delete opts.supbooks;
    delete opts['!row'];
    if (!s["!ref"] && (refguess.s.r < 2000000 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s["!ref"] = encode_range(ref || refguess);

    if (opts.sheetRows && s["!ref"]) {
      var tmpref = safe_decode_range(s["!ref"]);

      if (opts.sheetRows <= +tmpref.e.r) {
        tmpref.e.r = opts.sheetRows - 1;
        if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
        if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
        if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
        if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
        s["!fullref"] = s["!ref"];
        s["!ref"] = encode_range(tmpref);
      }
    }

    if (merges.length > 0) s["!merges"] = merges;
    if (colinfo.length > 0) s["!cols"] = colinfo;
    if (rowinfo.length > 0) s["!rows"] = rowinfo;
    return s;
  }
  /* TODO: something useful -- this is a stub */


  function write_ws_bin_cell(ba, cell, R, C, opts, ws) {
    if (cell.v === undefined) return;
    var vv = "";

    switch (cell.t) {
      case 'b':
        vv = cell.v ? "1" : "0";
        break;

      case 'd':
        // no BrtCellDate :(
        cell = dup(cell);
        cell.z = cell.z || SSF._table[14];
        cell.v = datenum(parseDate(cell.v));
        cell.t = 'n';
        break;

      /* falls through */

      case 'n':
      case 'e':
        vv = '' + cell.v;
        break;

      default:
        vv = cell.v;
        break;
    }

    var o = {
      r: R,
      c: C
    };
    /* TODO: cell style */

    o.s = get_cell_style(opts.cellXfs, cell, opts);
    if (cell.l) ws['!links'].push([encode_cell(o), cell.l]);
    if (cell.c) ws['!comments'].push([encode_cell(o), cell.c]);

    switch (cell.t) {
      case 's':
      case 'str':
        if (opts.bookSST) {
          vv = get_sst_id(opts.Strings, cell.v, opts.revStrings);
          o.t = "s";
          o.v = vv;
          write_record(ba, "BrtCellIsst", write_BrtCellIsst(cell, o));
        } else {
          o.t = "str";
          write_record(ba, "BrtCellSt", write_BrtCellSt(cell, o));
        }

        return;

      case 'n':
        /* TODO: determine threshold for Real vs RK */
        if (cell.v == (cell.v | 0) && cell.v > -1000 && cell.v < 1000) write_record(ba, "BrtCellRk", write_BrtCellRk(cell, o));else write_record(ba, "BrtCellReal", write_BrtCellReal(cell, o));
        return;

      case 'b':
        o.t = "b";
        write_record(ba, "BrtCellBool", write_BrtCellBool(cell, o));
        return;

      case 'e':
        /* TODO: error */
        o.t = "e";
        break;
    }

    write_record(ba, "BrtCellBlank", write_BrtCellBlank(cell, o));
  }

  function write_CELLTABLE(ba, ws, idx, opts) {
    var range = safe_decode_range(ws['!ref'] || "A1"),
        ref,
        rr = "",
        cols = [];
    write_record(ba, 'BrtBeginSheetData');
    var dense = Array.isArray(ws);
    var cap = range.e.r;
    if (ws['!rows']) cap = Math.max(range.e.r, ws['!rows'].length - 1);

    for (var R = range.s.r; R <= cap; ++R) {
      rr = encode_row(R);
      /* [ACCELLTABLE] */

      /* BrtRowHdr */

      write_row_header(ba, ws, range, R);
      if (R <= range.e.r) for (var C = range.s.c; C <= range.e.c; ++C) {
        /* *16384CELL */
        if (R === range.s.r) cols[C] = encode_col(C);
        ref = cols[C] + rr;
        var cell = dense ? (ws[R] || [])[C] : ws[ref];
        if (!cell) continue;
        /* write cell */

        write_ws_bin_cell(ba, cell, R, C, opts, ws);
      }
    }

    write_record(ba, 'BrtEndSheetData');
  }

  function write_MERGECELLS(ba, ws) {
    if (!ws || !ws['!merges']) return;
    write_record(ba, 'BrtBeginMergeCells', write_BrtBeginMergeCells(ws['!merges'].length));
    ws['!merges'].forEach(function (m) {
      write_record(ba, 'BrtMergeCell', write_BrtMergeCell(m));
    });
    write_record(ba, 'BrtEndMergeCells');
  }

  function write_COLINFOS(ba, ws) {
    if (!ws || !ws['!cols']) return;
    write_record(ba, 'BrtBeginColInfos');
    ws['!cols'].forEach(function (m, i) {
      if (m) write_record(ba, 'BrtColInfo', write_BrtColInfo(i, m));
    });
    write_record(ba, 'BrtEndColInfos');
  }

  function write_IGNOREECS(ba, ws) {
    if (!ws || !ws['!ref']) return;
    write_record(ba, 'BrtBeginCellIgnoreECs');
    write_record(ba, 'BrtCellIgnoreEC', write_BrtCellIgnoreEC(safe_decode_range(ws['!ref'])));
    write_record(ba, 'BrtEndCellIgnoreECs');
  }

  function write_HLINKS(ba, ws, rels) {
    /* *BrtHLink */
    ws['!links'].forEach(function (l) {
      if (!l[1].Target) return;
      var rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, ""), RELS.HLINK);
      write_record(ba, "BrtHLink", write_BrtHLink(l, rId));
    });
    delete ws['!links'];
  }

  function write_LEGACYDRAWING(ba, ws, idx, rels) {
    /* [BrtLegacyDrawing] */
    if (ws['!comments'].length > 0) {
      var rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
      write_record(ba, "BrtLegacyDrawing", write_RelID("rId" + rId));
      ws['!legacy'] = rId;
    }
  }

  function write_AUTOFILTER(ba, ws, wb, idx) {
    if (!ws['!autofilter']) return;
    var data = ws['!autofilter'];
    var ref = typeof data.ref === "string" ? data.ref : encode_range(data.ref);
    /* Update FilterDatabase defined name for the worksheet */

    if (!wb.Workbook) wb.Workbook = {
      Sheets: []
    };
    if (!wb.Workbook.Names) wb.Workbook.Names = [];
    var names = wb.Workbook.Names;
    var range = decode_range(ref);

    if (range.s.r == range.e.r) {
      range.e.r = decode_range(ws["!ref"]).e.r;
      ref = encode_range(range);
    }

    for (var i = 0; i < names.length; ++i) {
      var name = names[i];
      if (name.Name != '_xlnm._FilterDatabase') continue;
      if (name.Sheet != idx) continue;
      name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
      break;
    }

    if (i == names.length) names.push({
      Name: '_xlnm._FilterDatabase',
      Sheet: idx,
      Ref: "'" + wb.SheetNames[idx] + "'!" + ref
    });
    write_record(ba, "BrtBeginAFilter", write_UncheckedRfX(safe_decode_range(ref)));
    /* *FILTERCOLUMN */

    /* [SORTSTATE] */

    /* BrtEndAFilter */

    write_record(ba, "BrtEndAFilter");
  }

  function write_WSVIEWS2(ba, ws, Workbook) {
    write_record(ba, "BrtBeginWsViews");
    {
      /* 1*WSVIEW2 */

      /* [ACUID] */
      write_record(ba, "BrtBeginWsView", write_BrtBeginWsView(ws, Workbook));
      /* [BrtPane] */

      /* *4BrtSel */

      /* *4SXSELECT */

      /* *FRT */

      write_record(ba, "BrtEndWsView");
    }
    /* *FRT */

    write_record(ba, "BrtEndWsViews");
  }

  function write_WSFMTINFO() {
    /* [ACWSFMTINFO] */
    //write_record(ba, "BrtWsFmtInfo", write_BrtWsFmtInfo(ws));
  }

  function write_SHEETPROTECT(ba, ws) {
    if (!ws['!protect']) return;
    /* [BrtSheetProtectionIso] */

    write_record(ba, "BrtSheetProtection", write_BrtSheetProtection(ws['!protect']));
  }

  function write_ws_bin(idx, opts, wb, rels) {
    var ba = buf_array();
    var s = wb.SheetNames[idx],
        ws = wb.Sheets[s] || {};
    var c = s;

    try {
      if (wb && wb.Workbook) c = wb.Workbook.Sheets[idx].CodeName || c;
    } catch (e) {}

    var r = safe_decode_range(ws['!ref'] || "A1");

    if (r.e.c > 0x3FFF || r.e.r > 0xFFFFF) {
      if (opts.WTF) throw new Error("Range " + (ws['!ref'] || "A1") + " exceeds format limit A1:XFD1048576");
      r.e.c = Math.min(r.e.c, 0x3FFF);
      r.e.r = Math.min(r.e.c, 0xFFFFF);
    }

    ws['!links'] = [];
    /* passed back to write_zip and removed there */

    ws['!comments'] = [];
    write_record(ba, "BrtBeginSheet");
    if (wb.vbaraw) write_record(ba, "BrtWsProp", write_BrtWsProp(c));
    write_record(ba, "BrtWsDim", write_BrtWsDim(r));
    write_WSVIEWS2(ba, ws, wb.Workbook);
    write_WSFMTINFO(ba, ws);
    write_COLINFOS(ba, ws, idx, opts, wb);
    write_CELLTABLE(ba, ws, idx, opts, wb);
    /* [BrtSheetCalcProp] */

    write_SHEETPROTECT(ba, ws);
    /* *([BrtRangeProtectionIso] BrtRangeProtection) */

    /* [SCENMAN] */

    write_AUTOFILTER(ba, ws, wb, idx);
    /* [SORTSTATE] */

    /* [DCON] */

    /* [USERSHVIEWS] */

    write_MERGECELLS(ba, ws);
    /* [BrtPhoneticInfo] */

    /* *CONDITIONALFORMATTING */

    /* [DVALS] */

    write_HLINKS(ba, ws, rels);
    /* [BrtPrintOptions] */

    if (ws['!margins']) write_record(ba, "BrtMargins", write_BrtMargins(ws['!margins']));
    /* [BrtPageSetup] */

    /* [HEADERFOOTER] */

    /* [RWBRK] */

    /* [COLBRK] */

    /* *BrtBigName */

    /* [CELLWATCHES] */

    if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) write_IGNOREECS(ba, ws);
    /* [SMARTTAGS] */

    /* [BrtDrawing] */

    write_LEGACYDRAWING(ba, ws, idx, rels);
    /* [BrtLegacyDrawingHF] */

    /* [BrtBkHim] */

    /* [OLEOBJECTS] */

    /* [ACTIVEXCONTROLS] */

    /* [WEBPUBITEMS] */

    /* [LISTPARTS] */

    /* FRTWORKSHEET */

    write_record(ba, "BrtEndSheet");
    return ba.end();
  }

  RELS.CHART = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart";
  RELS.CHARTEX = "http://schemas.microsoft.com/office/2014/relationships/chartEx";

  function parse_Cache(data) {
    var col = [];
    var num = data.match(/^<c:numCache>/);
    var f;
    /* 21.2.2.150 pt CT_NumVal */

    (data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg) || []).forEach(function (pt) {
      var q = pt.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
      if (!q) return;
      col[+q[1]] = num ? +q[2] : q[2];
    });
    /* 21.2.2.71 formatCode CT_Xstring */

    var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || ["", "General"])[1]);
    (data.match(/<c:f>(.*?)<\/c:f>/mg) || []).forEach(function (F) {
      f = F.replace(/<.*?>/g, "");
    });
    return [col, nf, f];
  }
  /* 21.2 DrawingML - Charts */


  function parse_chart(data, name, opts, rels, wb, csheet) {
    var cs = csheet || {
      "!type": "chart"
    };
    if (!data) return csheet;
    /* 21.2.2.27 chart CT_Chart */

    var C = 0,
        R = 0,
        col = "A";
    var refguess = {
      s: {
        r: 2000000,
        c: 2000000
      },
      e: {
        r: 0,
        c: 0
      }
    };
    /* 21.2.2.120 numCache CT_NumData */

    (data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm) || []).forEach(function (nc) {
      var cache = parse_Cache(nc);
      refguess.s.r = refguess.s.c = 0;
      refguess.e.c = C;
      col = encode_col(C);
      cache[0].forEach(function (n, i) {
        cs[col + encode_row(i)] = {
          t: 'n',
          v: n,
          z: cache[1]
        };
        R = i;
      });
      if (refguess.e.r < R) refguess.e.r = R;
      ++C;
    });
    if (C > 0) cs["!ref"] = encode_range(refguess);
    return cs;
  }

  RELS.CS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet";
  var CS_XML_ROOT = writextag('chartsheet', null, {
    'xmlns': XMLNS.main[0],
    'xmlns:r': XMLNS.r
  });
  /* 18.3 Worksheets also covers Chartsheets */

  function parse_cs_xml(data, opts, idx, rels, wb) {
    if (!data) return data;
    /* 18.3.1.12 chartsheet CT_ChartSheet */

    if (!rels) rels = {
      '!id': {}
    };
    var s = {
      '!type': "chart",
      '!drawel': null,
      '!rel': ""
    };
    var m;
    /* 18.3.1.83 sheetPr CT_ChartsheetPr */

    var sheetPr = data.match(sheetprregex);
    if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
    /* 18.3.1.36 drawing CT_Drawing */

    if (m = data.match(/drawing r:id="(.*?)"/)) s['!rel'] = m[1];
    if (rels['!id'][s['!rel']]) s['!drawel'] = rels['!id'][s['!rel']];
    return s;
  }

  function write_cs_xml(idx, opts, wb, rels) {
    var o = [XML_HEADER, CS_XML_ROOT];
    o[o.length] = writextag("drawing", null, {
      "r:id": "rId1"
    });
    add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);

    if (o.length > 2) {
      o[o.length] = '</chartsheet>';
      o[1] = o[1].replace("/>", ">");
    }

    return o.join("");
  }
  /* [MS-XLSB] 2.4.331 BrtCsProp */


  function parse_BrtCsProp(data, length) {
    data.l += 10;
    var name = parse_XLWideString(data, length - 10);
    return {
      name: name
    };
  }
  /* [MS-XLSB] 2.1.7.7 Chart Sheet */


  function parse_cs_bin(data, opts, idx, rels, wb) {
    if (!data) return data;
    if (!rels) rels = {
      '!id': {}
    };
    var s = {
      '!type': "chart",
      '!drawel': null,
      '!rel': ""
    };
    var state = [];
    var pass = false;
    recordhopper(data, function cs_parse(val, R_n, RT) {
      switch (RT) {
        case 0x0226:
          /* 'BrtDrawing' */
          s['!rel'] = val;
          break;

        case 0x028B:
          /* 'BrtCsProp' */
          if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
          if (val.name) wb.Sheets[idx].CodeName = val.name;
          break;

        case 0x0232:
        /* 'BrtBkHim' */

        case 0x028C:
        /* 'BrtCsPageSetup' */

        case 0x029D:
        /* 'BrtCsProtection' */

        case 0x02A7:
        /* 'BrtCsProtectionIso' */

        case 0x0227:
        /* 'BrtLegacyDrawing' */

        case 0x0228:
        /* 'BrtLegacyDrawingHF' */

        case 0x01DC:
        /* 'BrtMargins' */

        case 0x0C00:
          /* 'BrtUid' */
          break;

        case 0x0023:
          /* 'BrtFRTBegin' */
          pass = true;
          break;

        case 0x0024:
          /* 'BrtFRTEnd' */
          pass = false;
          break;

        case 0x0025:
          /* 'BrtACBegin' */
          state.push(R_n);
          break;

        case 0x0026:
          /* 'BrtACEnd' */
          state.pop();
          break;

        default:
          if ((R_n || "").indexOf("Begin") > 0) state.push(R_n);else if ((R_n || "").indexOf("End") > 0) state.pop();else if (!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
      }
    }, opts);
    if (rels['!id'][s['!rel']]) s['!drawel'] = rels['!id'][s['!rel']];
    return s;
  }

  function write_cs_bin() {
    var ba = buf_array();
    write_record(ba, "BrtBeginSheet");
    /* [BrtCsProp] */

    /* CSVIEWS */

    /* [[BrtCsProtectionIso] BrtCsProtection] */

    /* [USERCSVIEWS] */

    /* [BrtMargins] */

    /* [BrtCsPageSetup] */

    /* [HEADERFOOTER] */

    /* BrtDrawing */

    /* [BrtLegacyDrawing] */

    /* [BrtLegacyDrawingHF] */

    /* [BrtBkHim] */

    /* [WEBPUBITEMS] */

    /* FRTCHARTSHEET */

    write_record(ba, "BrtEndSheet");
    return ba.end();
  }
  /* 18.2.28 (CT_WorkbookProtection) Defaults */


  var WBPropsDef = [['allowRefreshQuery', false, "bool"], ['autoCompressPictures', true, "bool"], ['backupFile', false, "bool"], ['checkCompatibility', false, "bool"], ['CodeName', ''], ['date1904', false, "bool"], ['defaultThemeVersion', 0, "int"], ['filterPrivacy', false, "bool"], ['hidePivotFieldList', false, "bool"], ['promptedSolutions', false, "bool"], ['publishItems', false, "bool"], ['refreshAllConnections', false, "bool"], ['saveExternalLinkValues', true, "bool"], ['showBorderUnselectedTables', true, "bool"], ['showInkAnnotation', true, "bool"], ['showObjects', 'all'], ['showPivotChartFilter', false, "bool"], ['updateLinks', 'userSet']];
  /* 18.2.30 (CT_BookView) Defaults */

  var WBViewDef = [['activeTab', 0, "int"], ['autoFilterDateGrouping', true, "bool"], ['firstSheet', 0, "int"], ['minimized', false, "bool"], ['showHorizontalScroll', true, "bool"], ['showSheetTabs', true, "bool"], ['showVerticalScroll', true, "bool"], ['tabRatio', 600, "int"], ['visibility', 'visible'] //window{Height,Width}, {x,y}Window
  ];
  /* 18.2.19 (CT_Sheet) Defaults */

  var SheetDef = [//['state', 'visible']
  ];
  /* 18.2.2  (CT_CalcPr) Defaults */

  var CalcPrDef = [['calcCompleted', 'true'], ['calcMode', 'auto'], ['calcOnSave', 'true'], ['concurrentCalc', 'true'], ['fullCalcOnLoad', 'false'], ['fullPrecision', 'true'], ['iterate', 'false'], ['iterateCount', '100'], ['iterateDelta', '0.001'], ['refMode', 'A1']];
  /* 18.2.3 (CT_CustomWorkbookView) Defaults */

  /*var CustomWBViewDef = [
  	['autoUpdate', 'false'],
  	['changesSavedWin', 'false'],
  	['includeHiddenRowCol', 'true'],
  	['includePrintSettings', 'true'],
  	['maximized', 'false'],
  	['minimized', 'false'],
  	['onlySync', 'false'],
  	['personalView', 'false'],
  	['showComments', 'commIndicator'],
  	['showFormulaBar', 'true'],
  	['showHorizontalScroll', 'true'],
  	['showObjects', 'all'],
  	['showSheetTabs', 'true'],
  	['showStatusbar', 'true'],
  	['showVerticalScroll', 'true'],
  	['tabRatio', '600'],
  	['xWindow', '0'],
  	['yWindow', '0']
  ];*/

  function push_defaults_array(target, defaults) {
    for (var j = 0; j != target.length; ++j) {
      var w = target[j];

      for (var i = 0; i != defaults.length; ++i) {
        var z = defaults[i];
        if (w[z[0]] == null) w[z[0]] = z[1];else switch (z[2]) {
          case "bool":
            if (typeof w[z[0]] == "string") w[z[0]] = parsexmlbool(w[z[0]]);
            break;

          case "int":
            if (typeof w[z[0]] == "string") w[z[0]] = parseInt(w[z[0]], 10);
            break;
        }
      }
    }
  }

  function push_defaults(target, defaults) {
    for (var i = 0; i != defaults.length; ++i) {
      var z = defaults[i];
      if (target[z[0]] == null) target[z[0]] = z[1];else switch (z[2]) {
        case "bool":
          if (typeof target[z[0]] == "string") target[z[0]] = parsexmlbool(target[z[0]]);
          break;

        case "int":
          if (typeof target[z[0]] == "string") target[z[0]] = parseInt(target[z[0]], 10);
          break;
      }
    }
  }

  function parse_wb_defaults(wb) {
    push_defaults(wb.WBProps, WBPropsDef);
    push_defaults(wb.CalcPr, CalcPrDef);
    push_defaults_array(wb.WBView, WBViewDef);
    push_defaults_array(wb.Sheets, SheetDef);
    _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
  }

  function safe1904(wb) {
    /* TODO: store date1904 somewhere else */
    if (!wb.Workbook) return "false";
    if (!wb.Workbook.WBProps) return "false";
    return parsexmlbool(wb.Workbook.WBProps.date1904) ? "true" : "false";
  }

  var badchars = "][*?\/\\".split("");

  function check_ws_name(n, safe) {
    if (n.length > 31) {
      if (safe) return false;
      throw new Error("Sheet names cannot exceed 31 chars");
    }

    var _good = true;
    badchars.forEach(function (c) {
      if (n.indexOf(c) == -1) return;
      if (!safe) throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
      _good = false;
    });
    return _good;
  }

  function check_wb_names(N, S, codes) {
    N.forEach(function (n, i) {
      check_ws_name(n);

      for (var j = 0; j < i; ++j) if (n == N[j]) throw new Error("Duplicate Sheet Name: " + n);

      if (codes) {
        var cn = S && S[i] && S[i].CodeName || n;
        if (cn.charCodeAt(0) == 95 && cn.length > 22) throw new Error("Bad Code Name: Worksheet" + cn);
      }
    });
  }

  function check_wb(wb) {
    if (!wb || !wb.SheetNames || !wb.Sheets) throw new Error("Invalid Workbook");
    if (!wb.SheetNames.length) throw new Error("Workbook is empty");
    var Sheets = wb.Workbook && wb.Workbook.Sheets || [];
    check_wb_names(wb.SheetNames, Sheets, !!wb.vbaraw);

    for (var i = 0; i < wb.SheetNames.length; ++i) check_ws(wb.Sheets[wb.SheetNames[i]], wb.SheetNames[i], i);
    /* TODO: validate workbook */

  }
  /* 18.2 Workbook */


  var wbnsregex = /<\w+:workbook/;

  function parse_wb_xml(data, opts) {
    if (!data) throw new Error("Could not find file");
    var wb = {
      AppVersion: {},
      WBProps: {},
      WBView: [],
      Sheets: [],
      CalcPr: {},
      Names: [],
      xmlns: ""
    };
    var pass = false,
        xmlns = "xmlns";
    var dname = {},
        dnstart = 0;
    data.replace(tagregex, function xml_wb(x, idx) {
      var y = parsexmltag(x);

      switch (strip_ns(y[0])) {
        case '<?xml':
          break;

        /* 18.2.27 workbook CT_Workbook 1 */

        case '<workbook':
          if (x.match(wbnsregex)) xmlns = "xmlns" + x.match(/<(\w+):/)[1];
          wb.xmlns = y[xmlns];
          break;

        case '</workbook>':
          break;

        /* 18.2.13 fileVersion CT_FileVersion ? */

        case '<fileVersion':
          delete y[0];
          wb.AppVersion = y;
          break;

        case '<fileVersion/>':
        case '</fileVersion>':
          break;

        /* 18.2.12 fileSharing CT_FileSharing ? */

        case '<fileSharing':
          break;

        case '<fileSharing/>':
          break;

        /* 18.2.28 workbookPr CT_WorkbookPr ? */

        case '<workbookPr':
        case '<workbookPr/>':
          WBPropsDef.forEach(function (w) {
            if (y[w[0]] == null) return;

            switch (w[2]) {
              case "bool":
                wb.WBProps[w[0]] = parsexmlbool(y[w[0]]);
                break;

              case "int":
                wb.WBProps[w[0]] = parseInt(y[w[0]], 10);
                break;

              default:
                wb.WBProps[w[0]] = y[w[0]];
            }
          });
          if (y.codeName) wb.WBProps.CodeName = utf8read(y.codeName);
          break;

        case '</workbookPr>':
          break;

        /* 18.2.29 workbookProtection CT_WorkbookProtection ? */

        case '<workbookProtection':
          break;

        case '<workbookProtection/>':
          break;

        /* 18.2.1  bookViews CT_BookViews ? */

        case '<bookViews':
        case '<bookViews>':
        case '</bookViews>':
          break;

        /* 18.2.30   workbookView CT_BookView + */

        case '<workbookView':
        case '<workbookView/>':
          delete y[0];
          wb.WBView.push(y);
          break;

        case '</workbookView>':
          break;

        /* 18.2.20 sheets CT_Sheets 1 */

        case '<sheets':
        case '<sheets>':
        case '</sheets>':
          break;
        // aggregate sheet

        /* 18.2.19   sheet CT_Sheet + */

        case '<sheet':
          switch (y.state) {
            case "hidden":
              y.Hidden = 1;
              break;

            case "veryHidden":
              y.Hidden = 2;
              break;

            default:
              y.Hidden = 0;
          }

          delete y.state;
          y.name = unescapexml(utf8read(y.name));
          delete y[0];
          wb.Sheets.push(y);
          break;

        case '</sheet>':
          break;

        /* 18.2.15 functionGroups CT_FunctionGroups ? */

        case '<functionGroups':
        case '<functionGroups/>':
          break;

        /* 18.2.14   functionGroup CT_FunctionGroup + */

        case '<functionGroup':
          break;

        /* 18.2.9  externalReferences CT_ExternalReferences ? */

        case '<externalReferences':
        case '</externalReferences>':
        case '<externalReferences>':
          break;

        /* 18.2.8    externalReference CT_ExternalReference + */

        case '<externalReference':
          break;

        /* 18.2.6  definedNames CT_DefinedNames ? */

        case '<definedNames/>':
          break;

        case '<definedNames>':
        case '<definedNames':
          pass = true;
          break;

        case '</definedNames>':
          pass = false;
          break;

        /* 18.2.5    definedName CT_DefinedName + */

        case '<definedName':
          {
            dname = {};
            dname.Name = utf8read(y.name);
            if (y.comment) dname.Comment = y.comment;
            if (y.localSheetId) dname.Sheet = +y.localSheetId;
            if (parsexmlbool(y.hidden || "0")) dname.Hidden = true;
            dnstart = idx + x.length;
          }
          break;

        case '</definedName>':
          {
            dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));
            wb.Names.push(dname);
          }
          break;

        case '<definedName/>':
          break;

        /* 18.2.2  calcPr CT_CalcPr ? */

        case '<calcPr':
          delete y[0];
          wb.CalcPr = y;
          break;

        case '<calcPr/>':
          delete y[0];
          wb.CalcPr = y;
          break;

        case '</calcPr>':
          break;

        /* 18.2.16 oleSize CT_OleSize ? (ref required) */

        case '<oleSize':
          break;

        /* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */

        case '<customWorkbookViews>':
        case '</customWorkbookViews>':
        case '<customWorkbookViews':
          break;

        /* 18.2.3  customWorkbookView CT_CustomWorkbookView + */

        case '<customWorkbookView':
        case '</customWorkbookView>':
          break;

        /* 18.2.18 pivotCaches CT_PivotCaches ? */

        case '<pivotCaches>':
        case '</pivotCaches>':
        case '<pivotCaches':
          break;

        /* 18.2.17 pivotCache CT_PivotCache ? */

        case '<pivotCache':
          break;

        /* 18.2.21 smartTagPr CT_SmartTagPr ? */

        case '<smartTagPr':
        case '<smartTagPr/>':
          break;

        /* 18.2.23 smartTagTypes CT_SmartTagTypes ? */

        case '<smartTagTypes':
        case '<smartTagTypes>':
        case '</smartTagTypes>':
          break;

        /* 18.2.22 smartTagType CT_SmartTagType ? */

        case '<smartTagType':
          break;

        /* 18.2.24 webPublishing CT_WebPublishing ? */

        case '<webPublishing':
        case '<webPublishing/>':
          break;

        /* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */

        case '<fileRecoveryPr':
        case '<fileRecoveryPr/>':
          break;

        /* 18.2.26 webPublishObjects CT_WebPublishObjects ? */

        case '<webPublishObjects>':
        case '<webPublishObjects':
        case '</webPublishObjects>':
          break;

        /* 18.2.25 webPublishObject CT_WebPublishObject ? */

        case '<webPublishObject':
          break;

        /* 18.2.10 extLst CT_ExtensionList ? */

        case '<extLst':
        case '<extLst>':
        case '</extLst>':
        case '<extLst/>':
          break;

        /* 18.2.7  ext CT_Extension + */

        case '<ext':
          pass = true;
          break;
        //TODO: check with versions of excel

        case '</ext>':
          pass = false;
          break;

        /* Others */

        case '<ArchID':
          break;

        case '<AlternateContent':
        case '<AlternateContent>':
          pass = true;
          break;

        case '</AlternateContent>':
          pass = false;
          break;

        /* TODO */

        case '<revisionPtr':
          break;

        default:
          if (!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in workbook');
      }

      return x;
    });
    if (XMLNS.main.indexOf(wb.xmlns) === -1) throw new Error("Unknown Namespace: " + wb.xmlns);
    parse_wb_defaults(wb);
    return wb;
  }

  var WB_XML_ROOT = writextag('workbook', null, {
    'xmlns': XMLNS.main[0],
    //'xmlns:mx': XMLNS.mx,
    //'xmlns:s': XMLNS.main[0],
    'xmlns:r': XMLNS.r
  });

  function write_wb_xml(wb) {
    var o = [XML_HEADER];
    o[o.length] = WB_XML_ROOT;
    var write_names = wb.Workbook && (wb.Workbook.Names || []).length > 0;
    /* fileVersion */

    /* fileSharing */

    var workbookPr = {
      codeName: "ThisWorkbook"
    };

    if (wb.Workbook && wb.Workbook.WBProps) {
      WBPropsDef.forEach(function (x) {
        if (wb.Workbook.WBProps[x[0]] == null) return;
        if (wb.Workbook.WBProps[x[0]] == x[1]) return;
        workbookPr[x[0]] = wb.Workbook.WBProps[x[0]];
      });

      if (wb.Workbook.WBProps.CodeName) {
        workbookPr.codeName = wb.Workbook.WBProps.CodeName;
        delete workbookPr.CodeName;
      }
    }

    o[o.length] = writextag('workbookPr', null, workbookPr);
    /* workbookProtection */

    var sheets = wb.Workbook && wb.Workbook.Sheets || [];
    var i = 0;
    /* bookViews only written if first worksheet is hidden */

    if (sheets && sheets[0] && !!sheets[0].Hidden) {
      o[o.length] = "<bookViews>";

      for (i = 0; i != wb.SheetNames.length; ++i) {
        if (!sheets[i]) break;
        if (!sheets[i].Hidden) break;
      }

      if (i == wb.SheetNames.length) i = 0;
      o[o.length] = '<workbookView firstSheet="' + i + '" activeTab="' + i + '"/>';
      o[o.length] = "</bookViews>";
    }

    o[o.length] = "<sheets>";

    for (i = 0; i != wb.SheetNames.length; ++i) {
      var sht = {
        name: escapexml(wb.SheetNames[i].slice(0, 31))
      };
      sht.sheetId = "" + (i + 1);
      sht["r:id"] = "rId" + (i + 1);
      if (sheets[i]) switch (sheets[i].Hidden) {
        case 1:
          sht.state = "hidden";
          break;

        case 2:
          sht.state = "veryHidden";
          break;
      }
      o[o.length] = writextag('sheet', null, sht);
    }

    o[o.length] = "</sheets>";
    /* functionGroups */

    /* externalReferences */

    if (write_names) {
      o[o.length] = "<definedNames>";
      if (wb.Workbook && wb.Workbook.Names) wb.Workbook.Names.forEach(function (n) {
        var d = {
          name: n.Name
        };
        if (n.Comment) d.comment = n.Comment;
        if (n.Sheet != null) d.localSheetId = "" + n.Sheet;
        if (n.Hidden) d.hidden = "1";
        if (!n.Ref) return;
        o[o.length] = writextag('definedName', escapexml(n.Ref), d);
      });
      o[o.length] = "</definedNames>";
    }
    /* calcPr */

    /* oleSize */

    /* customWorkbookViews */

    /* pivotCaches */

    /* smartTagPr */

    /* smartTagTypes */

    /* webPublishing */

    /* fileRecoveryPr */

    /* webPublishObjects */

    /* extLst */


    if (o.length > 2) {
      o[o.length] = '</workbook>';
      o[1] = o[1].replace("/>", ">");
    }

    return o.join("");
  }
  /* [MS-XLSB] 2.4.304 BrtBundleSh */


  function parse_BrtBundleSh(data, length) {
    var z = {};
    z.Hidden = data.read_shift(4); //hsState ST_SheetState

    z.iTabID = data.read_shift(4);
    z.strRelID = parse_RelID(data, length - 8);
    z.name = parse_XLWideString(data);
    return z;
  }

  function write_BrtBundleSh(data, o) {
    if (!o) o = new_buf(127);
    o.write_shift(4, data.Hidden);
    o.write_shift(4, data.iTabID);
    write_RelID(data.strRelID, o);
    write_XLWideString(data.name.slice(0, 31), o);
    return o.length > o.l ? o.slice(0, o.l) : o;
  }
  /* [MS-XLSB] 2.4.815 BrtWbProp */


  function parse_BrtWbProp(data, length) {
    var o = {};
    var flags = data.read_shift(4);
    o.defaultThemeVersion = data.read_shift(4);
    var strName = length > 8 ? parse_XLWideString(data) : "";
    if (strName.length > 0) o.CodeName = strName;
    o.autoCompressPictures = !!(flags & 0x10000);
    o.backupFile = !!(flags & 0x40);
    o.checkCompatibility = !!(flags & 0x1000);
    o.date1904 = !!(flags & 0x01);
    o.filterPrivacy = !!(flags & 0x08);
    o.hidePivotFieldList = !!(flags & 0x400);
    o.promptedSolutions = !!(flags & 0x10);
    o.publishItems = !!(flags & 0x800);
    o.refreshAllConnections = !!(flags & 0x40000);
    o.saveExternalLinkValues = !!(flags & 0x80);
    o.showBorderUnselectedTables = !!(flags & 0x04);
    o.showInkAnnotation = !!(flags & 0x20);
    o.showObjects = ["all", "placeholders", "none"][flags >> 13 & 0x03];
    o.showPivotChartFilter = !!(flags & 0x8000);
    o.updateLinks = ["userSet", "never", "always"][flags >> 8 & 0x03];
    return o;
  }

  function write_BrtWbProp(data, o) {
    if (!o) o = new_buf(72);
    var flags = 0;

    if (data) {
      /* TODO: mirror parse_BrtWbProp fields */
      if (data.filterPrivacy) flags |= 0x08;
    }

    o.write_shift(4, flags);
    o.write_shift(4, 0);
    write_XLSBCodeName(data && data.CodeName || "ThisWorkbook", o);
    return o.slice(0, o.l);
  }

  function parse_BrtFRTArchID$(data, length) {
    var o = {};
    data.read_shift(4);
    o.ArchID = data.read_shift(4);
    data.l += length - 8;
    return o;
  }
  /* [MS-XLSB] 2.4.687 BrtName */


  function parse_BrtName(data, length, opts) {
    var end = data.l + length;
    data.l += 4; //var flags = data.read_shift(4);

    data.l += 1; //var chKey = data.read_shift(1);

    var itab = data.read_shift(4);
    var name = parse_XLNameWideString(data);
    var formula = parse_XLSBNameParsedFormula(data, 0, opts);
    var comment = parse_XLNullableWideString(data); //if(0 /* fProc */) {
    // unusedstring1: XLNullableWideString
    // description: XLNullableWideString
    // helpTopic: XLNullableWideString
    // unusedstring2: XLNullableWideString
    //}

    data.l = end;
    var out = {
      Name: name,
      Ptg: formula
    };
    if (itab < 0xFFFFFFF) out.Sheet = itab;
    if (comment) out.Comment = comment;
    return out;
  }
  /* [MS-XLSB] 2.1.7.61 Workbook */


  function parse_wb_bin(data, opts) {
    var wb = {
      AppVersion: {},
      WBProps: {},
      WBView: [],
      Sheets: [],
      CalcPr: {},
      xmlns: ""
    };
    var state = [];
    var pass = false;
    if (!opts) opts = {};
    opts.biff = 12;
    var Names = [];
    var supbooks = [[]];
    supbooks.SheetNames = [];
    supbooks.XTI = [];
    recordhopper(data, function hopper_wb(val, R_n, RT) {
      switch (RT) {
        case 0x009C:
          /* 'BrtBundleSh' */
          supbooks.SheetNames.push(val.name);
          wb.Sheets.push(val);
          break;

        case 0x0099:
          /* 'BrtWbProp' */
          wb.WBProps = val;
          break;

        case 0x0027:
          /* 'BrtName' */
          if (val.Sheet != null) opts.SID = val.Sheet;
          val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
          delete opts.SID;
          delete val.Ptg;
          Names.push(val);
          break;

        case 0x040C:
          /* 'BrtNameExt' */
          break;

        case 0x0165:
        /* 'BrtSupSelf' */

        case 0x0166:
        /* 'BrtSupSame' */

        case 0x0163:
        /* 'BrtSupBookSrc' */

        case 0x029B:
          /* 'BrtSupAddin' */
          if (!supbooks[0].length) supbooks[0] = [RT, val];else supbooks.push([RT, val]);
          supbooks[supbooks.length - 1].XTI = [];
          break;

        case 0x016A:
          /* 'BrtExternSheet' */
          if (supbooks.length === 0) {
            supbooks[0] = [];
            supbooks[0].XTI = [];
          }

          supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
          supbooks.XTI = supbooks.XTI.concat(val);
          break;

        case 0x0169:
          /* 'BrtPlaceholderName' */
          break;

        /* case 'BrtModelTimeGroupingCalcCol' */

        case 0x0C00:
        /* 'BrtUid' */

        case 0x0C01:
        /* 'BrtRevisionPtr' */

        case 0x0817:
        /* 'BrtAbsPath15' */

        case 0x0216:
        /* 'BrtBookProtection' */

        case 0x02A5:
        /* 'BrtBookProtectionIso' */

        case 0x009E:
        /* 'BrtBookView' */

        case 0x009D:
        /* 'BrtCalcProp' */

        case 0x0262:
        /* 'BrtCrashRecErr' */

        case 0x0802:
        /* 'BrtDecoupledPivotCacheID' */

        case 0x009B:
        /* 'BrtFileRecover' */

        case 0x0224:
        /* 'BrtFileSharing' */

        case 0x02A4:
        /* 'BrtFileSharingIso' */

        case 0x0080:
        /* 'BrtFileVersion' */

        case 0x0299:
        /* 'BrtFnGroup' */

        case 0x0850:
        /* 'BrtModelRelationship' */

        case 0x084D:
        /* 'BrtModelTable' */

        case 0x0225:
        /* 'BrtOleSize' */

        case 0x0805:
        /* 'BrtPivotTableRef' */

        case 0x0254:
        /* 'BrtSmartTagType' */

        case 0x081C:
        /* 'BrtTableSlicerCacheID' */

        case 0x081B:
        /* 'BrtTableSlicerCacheIDs' */

        case 0x0822:
        /* 'BrtTimelineCachePivotCacheID' */

        case 0x018D:
        /* 'BrtUserBookView' */

        case 0x009A:
        /* 'BrtWbFactoid' */

        case 0x045D:
        /* 'BrtWbProp14' */

        case 0x0229:
        /* 'BrtWebOpt' */

        case 0x082B:
          /* 'BrtWorkBookPr15' */
          break;

        case 0x0023:
          /* 'BrtFRTBegin' */
          state.push(R_n);
          pass = true;
          break;

        case 0x0024:
          /* 'BrtFRTEnd' */
          state.pop();
          pass = false;
          break;

        case 0x0025:
          /* 'BrtACBegin' */
          state.push(R_n);
          pass = true;
          break;

        case 0x0026:
          /* 'BrtACEnd' */
          state.pop();
          pass = false;
          break;

        case 0x0010:
          /* 'BrtFRTArchID$' */
          break;

        default:
          if ((R_n || "").indexOf("Begin") > 0) {
            /* empty */
          } else if ((R_n || "").indexOf("End") > 0) {
            /* empty */
          } else if (!pass || opts.WTF && state[state.length - 1] != "BrtACBegin" && state[state.length - 1] != "BrtFRTBegin") throw new Error("Unexpected record " + RT + " " + R_n);

      }
    }, opts);
    parse_wb_defaults(wb); // $FlowIgnore

    wb.Names = Names;
    wb.supbooks = supbooks;
    return wb;
  }

  function write_BUNDLESHS(ba, wb) {
    write_record(ba, "BrtBeginBundleShs");

    for (var idx = 0; idx != wb.SheetNames.length; ++idx) {
      var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;
      var d = {
        Hidden: viz,
        iTabID: idx + 1,
        strRelID: 'rId' + (idx + 1),
        name: wb.SheetNames[idx]
      };
      write_record(ba, "BrtBundleSh", write_BrtBundleSh(d));
    }

    write_record(ba, "BrtEndBundleShs");
  }
  /* [MS-XLSB] 2.4.649 BrtFileVersion */


  function write_BrtFileVersion(data, o) {
    if (!o) o = new_buf(127);

    for (var i = 0; i != 4; ++i) o.write_shift(4, 0);

    write_XLWideString("SheetJS", o);
    write_XLWideString(XLSX.version, o);
    write_XLWideString(XLSX.version, o);
    write_XLWideString("7262", o);
    o.length = o.l;
    return o.length > o.l ? o.slice(0, o.l) : o;
  }
  /* [MS-XLSB] 2.4.301 BrtBookView */


  function write_BrtBookView(idx, o) {
    if (!o) o = new_buf(29);
    o.write_shift(-4, 0);
    o.write_shift(-4, 460);
    o.write_shift(4, 28800);
    o.write_shift(4, 17600);
    o.write_shift(4, 500);
    o.write_shift(4, idx);
    o.write_shift(4, idx);
    var flags = 0x78;
    o.write_shift(1, flags);
    return o.length > o.l ? o.slice(0, o.l) : o;
  }

  function write_BOOKVIEWS(ba, wb) {
    /* required if hidden tab appears before visible tab */
    if (!wb.Workbook || !wb.Workbook.Sheets) return;
    var sheets = wb.Workbook.Sheets;
    var i = 0,
        vistab = -1,
        hidden = -1;

    for (; i < sheets.length; ++i) {
      if (!sheets[i] || !sheets[i].Hidden && vistab == -1) vistab = i;else if (sheets[i].Hidden == 1 && hidden == -1) hidden = i;
    }

    if (hidden > vistab) return;
    write_record(ba, "BrtBeginBookViews");
    write_record(ba, "BrtBookView", write_BrtBookView(vistab));
    /* 1*(BrtBookView *FRT) */

    write_record(ba, "BrtEndBookViews");
  }
  /* [MS-XLSB] 2.4.305 BrtCalcProp */

  /*function write_BrtCalcProp(data, o) {
  	if(!o) o = new_buf(26);
  	o.write_shift(4,0); // force recalc
  	o.write_shift(4,1);
  	o.write_shift(4,0);
  	write_Xnum(0, o);
  	o.write_shift(-4, 1023);
  	o.write_shift(1, 0x33);
  	o.write_shift(1, 0x00);
  	return o;
  }*/

  /* [MS-XLSB] 2.4.646 BrtFileRecover */

  /*function write_BrtFileRecover(data, o) {
  	if(!o) o = new_buf(1);
  	o.write_shift(1,0);
  	return o;
  }*/

  /* [MS-XLSB] 2.1.7.61 Workbook */


  function write_wb_bin(wb, opts) {
    var ba = buf_array();
    write_record(ba, "BrtBeginBook");
    write_record(ba, "BrtFileVersion", write_BrtFileVersion());
    /* [[BrtFileSharingIso] BrtFileSharing] */

    write_record(ba, "BrtWbProp", write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null));
    /* [ACABSPATH] */

    /* [[BrtBookProtectionIso] BrtBookProtection] */

    write_BOOKVIEWS(ba, wb, opts);
    write_BUNDLESHS(ba, wb, opts);
    /* [FNGROUP] */

    /* [EXTERNALS] */

    /* *BrtName */

    /* write_record(ba, "BrtCalcProp", write_BrtCalcProp()); */

    /* [BrtOleSize] */

    /* *(BrtUserBookView *FRT) */

    /* [PIVOTCACHEIDS] */

    /* [BrtWbFactoid] */

    /* [SMARTTAGTYPES] */

    /* [BrtWebOpt] */

    /* write_record(ba, "BrtFileRecover", write_BrtFileRecover()); */

    /* [WEBPUBITEMS] */

    /* [CRERRS] */

    /* FRTWORKBOOK */

    write_record(ba, "BrtEndBook");
    return ba.end();
  }

  function parse_wb(data, name, opts) {
    if (name.slice(-4) === ".bin") return parse_wb_bin(data, opts);
    return parse_wb_xml(data, opts);
  }

  function parse_ws(data, name, idx, opts, rels, wb, themes, styles) {
    if (name.slice(-4) === ".bin") return parse_ws_bin(data, opts, idx, rels, wb, themes, styles);
    return parse_ws_xml(data, opts, idx, rels, wb, themes, styles);
  }

  function parse_cs(data, name, idx, opts, rels, wb, themes, styles) {
    if (name.slice(-4) === ".bin") return parse_cs_bin(data, opts, idx, rels, wb, themes, styles);
    return parse_cs_xml(data, opts, idx, rels, wb, themes, styles);
  }

  function parse_ms(data, name, idx, opts, rels, wb, themes, styles) {
    if (name.slice(-4) === ".bin") return parse_ms_bin(data, opts, idx, rels, wb, themes, styles);
    return parse_ms_xml(data, opts, idx, rels, wb, themes, styles);
  }

  function parse_ds(data, name, idx, opts, rels, wb, themes, styles) {
    if (name.slice(-4) === ".bin") return parse_ds_bin(data, opts, idx, rels, wb, themes, styles);
    return parse_ds_xml(data, opts, idx, rels, wb, themes, styles);
  }

  function parse_sty(data, name, themes, opts) {
    if (name.slice(-4) === ".bin") return parse_sty_bin(data, themes, opts);
    return parse_sty_xml(data, themes, opts);
  }

  function parse_theme(data, name, opts) {
    return parse_theme_xml(data, opts);
  }

  function parse_sst(data, name, opts) {
    if (name.slice(-4) === ".bin") return parse_sst_bin(data, opts);
    return parse_sst_xml(data, opts);
  }

  function parse_cmnt(data, name, opts) {
    if (name.slice(-4) === ".bin") return parse_comments_bin(data, opts);
    return parse_comments_xml(data, opts);
  }

  function parse_cc(data, name, opts) {
    if (name.slice(-4) === ".bin") return parse_cc_bin(data, name, opts);
    return parse_cc_xml(data, name, opts);
  }

  function parse_xlink(data, rel, name, opts) {
    if (name.slice(-4) === ".bin") return parse_xlink_bin(data, rel, name, opts);
    return parse_xlink_xml(data, rel, name, opts);
  }

  function write_wb(wb, name, opts) {
    return (name.slice(-4) === ".bin" ? write_wb_bin : write_wb_xml)(wb, opts);
  }

  function write_ws(data, name, opts, wb, rels) {
    return (name.slice(-4) === ".bin" ? write_ws_bin : write_ws_xml)(data, opts, wb, rels);
  } // eslint-disable-next-line no-unused-vars


  function write_cs(data, name, opts, wb, rels) {
    return (name.slice(-4) === ".bin" ? write_cs_bin : write_cs_xml)(data, opts, wb, rels);
  }

  function write_sty(data, name, opts) {
    return (name.slice(-4) === ".bin" ? write_sty_bin : write_sty_xml)(data, opts);
  }

  function write_sst(data, name, opts) {
    return (name.slice(-4) === ".bin" ? write_sst_bin : write_sst_xml)(data, opts);
  }

  function write_cmnt(data, name, opts) {
    return (name.slice(-4) === ".bin" ? write_comments_bin : write_comments_xml)(data, opts);
  }
  /*
  function write_cc(data, name:string, opts) {
  	return (name.slice(-4)===".bin" ? write_cc_bin : write_cc_xml)(data, opts);
  }
  */


  var attregexg2 = /([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
  var attregex2 = /([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;

  function xlml_parsexmltag(tag, skip_root) {
    var words = tag.split(/\s+/);
    var z = [];
    if (!skip_root) z[0] = words[0];
    if (words.length === 1) return z;
    var m = tag.match(attregexg2),
        y,
        j,
        w,
        i;
    if (m) for (i = 0; i != m.length; ++i) {
      y = m[i].match(attregex2);
      if ((j = y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1);else {
        if (y[1].slice(0, 6) === "xmlns:") w = "xmlns" + y[1].slice(6);else w = y[1].slice(j + 1);
        z[w] = y[2].slice(1, y[2].length - 1);
      }
    }
    return z;
  }

  function xlml_parsexmltagobj(tag) {
    var words = tag.split(/\s+/);
    var z = {};
    if (words.length === 1) return z;
    var m = tag.match(attregexg2),
        y,
        j,
        w,
        i;
    if (m) for (i = 0; i != m.length; ++i) {
      y = m[i].match(attregex2);
      if ((j = y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1);else {
        if (y[1].slice(0, 6) === "xmlns:") w = "xmlns" + y[1].slice(6);else w = y[1].slice(j + 1);
        z[w] = y[2].slice(1, y[2].length - 1);
      }
    }
    return z;
  } // ----


  function xlml_format(format, value) {
    var fmt = XLMLFormatMap[format] || unescapexml(format);
    if (fmt === "General") return SSF._general(value);
    return SSF.format(fmt, value);
  }

  function xlml_set_custprop(Custprops, key, cp, val) {
    var oval = val;

    switch ((cp[0].match(/dt:dt="([\w.]+)"/) || ["", ""])[1]) {
      case "boolean":
        oval = parsexmlbool(val);
        break;

      case "i2":
      case "int":
        oval = parseInt(val, 10);
        break;

      case "r4":
      case "float":
        oval = parseFloat(val);
        break;

      case "date":
      case "dateTime.tz":
        oval = parseDate(val);
        break;

      case "i8":
      case "string":
      case "fixed":
      case "uuid":
      case "bin.base64":
        break;

      default:
        throw new Error("bad custprop:" + cp[0]);
    }

    Custprops[unescapexml(key)] = oval;
  }

  function safe_format_xlml(cell, nf, o) {
    if (cell.t === 'z') return;
    if (!o || o.cellText !== false) try {
      if (cell.t === 'e') {
        cell.w = cell.w || BErr[cell.v];
      } else if (nf === "General") {
        if (cell.t === 'n') {
          if ((cell.v | 0) === cell.v) cell.w = SSF._general_int(cell.v);else cell.w = SSF._general_num(cell.v);
        } else cell.w = SSF._general(cell.v);
      } else cell.w = xlml_format(nf || "General", cell.v);
    } catch (e) {
      if (o.WTF) throw e;
    }

    try {
      var z = XLMLFormatMap[nf] || nf || "General";
      if (o.cellNF) cell.z = z;

      if (o.cellDates && cell.t == 'n' && SSF.is_date(z)) {
        var _d = SSF.parse_date_code(cell.v);

        if (_d) {
          cell.t = 'd';
          cell.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
        }
      }
    } catch (e) {
      if (o.WTF) throw e;
    }
  }

  function process_style_xlml(styles, stag, opts) {
    if (opts.cellStyles) {
      if (stag.Interior) {
        var I = stag.Interior;
        if (I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;
      }
    }

    styles[stag.ID] = stag;
  }
  /* TODO: there must exist some form of OSP-blessed spec */


  function parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, arrayf, o) {
    var nf = "General",
        sid = cell.StyleID,
        S = {};
    o = o || {};
    var interiors = [];
    var i = 0;
    if (sid === undefined && row) sid = row.StyleID;
    if (sid === undefined && csty) sid = csty.StyleID;

    while (styles[sid] !== undefined) {
      if (styles[sid].nf) nf = styles[sid].nf;
      if (styles[sid].Interior) interiors.push(styles[sid].Interior);
      if (!styles[sid].Parent) break;
      sid = styles[sid].Parent;
    }

    switch (data.Type) {
      case 'Boolean':
        cell.t = 'b';
        cell.v = parsexmlbool(xml);
        break;

      case 'String':
        cell.t = 's';
        cell.r = xlml_fixstr(unescapexml(xml));
        cell.v = xml.indexOf("<") > -1 ? unescapexml(ss || xml).replace(/<.*?>/g, "") : cell.r; // todo: BR etc

        break;

      case 'DateTime':
        if (xml.slice(-1) != "Z") xml += "Z";
        cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
        if (cell.v !== cell.v) cell.v = unescapexml(xml);else if (cell.v < 60) cell.v = cell.v - 1;
        if (!nf || nf == "General") nf = "yyyy-mm-dd";

      /* falls through */

      case 'Number':
        if (cell.v === undefined) cell.v = +xml;
        if (!cell.t) cell.t = 'n';
        break;

      case 'Error':
        cell.t = 'e';
        cell.v = RBErr[xml];
        if (o.cellText !== false) cell.w = xml;
        break;

      default:
        if (xml == "" && ss == "") {
          cell.t = 'z';
        } else {
          cell.t = 's';
          cell.v = xlml_fixstr(ss || xml);
        }

        break;
    }

    safe_format_xlml(cell, nf, o);

    if (o.cellFormula !== false) {
      if (cell.Formula) {
        var fstr = unescapexml(cell.Formula);
        /* strictly speaking, the leading = is required but some writers omit */

        if (fstr.charCodeAt(0) == 61
        /* = */
        ) fstr = fstr.slice(1);
        cell.f = rc_to_a1(fstr, base);
        delete cell.Formula;
        if (cell.ArrayRange == "RC") cell.F = rc_to_a1("RC:RC", base);else if (cell.ArrayRange) {
          cell.F = rc_to_a1(cell.ArrayRange, base);
          arrayf.push([safe_decode_range(cell.F), cell.F]);
        }
      } else {
        for (i = 0; i < arrayf.length; ++i) if (base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r) if (base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c) cell.F = arrayf[i][1];
      }
    }

    if (o.cellStyles) {
      interiors.forEach(function (x) {
        if (!S.patternType && x.patternType) S.patternType = x.patternType;
      });
      cell.s = S;
    }

    if (cell.StyleID !== undefined) cell.ixfe = cell.StyleID;
  }

  function xlml_clean_comment(comment) {
    comment.t = comment.v || "";
    comment.t = comment.t.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
    comment.v = comment.w = comment.ixfe = undefined;
  }

  function xlml_normalize(d) {
    if (has_buf && Buffer.isBuffer(d)) return d.toString('utf8');
    if (typeof d === 'string') return d;
    /* duktape */

    if (typeof Uint8Array !== 'undefined' && d instanceof Uint8Array) return utf8read(a2s(ab2a(d)));
    throw new Error("Bad input format: expected Buffer or string");
  }
  /* TODO: Everything */

  /* UOS uses CJK in tags */


  var xlmlregex = /<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/mg; //var xlmlregex = /<(\/?)([a-z0-9]*:|)(\w+)[^>]*>/mg;

  function parse_xlml_xml(d, _opts) {
    var opts = _opts || {};
    make_ssf(SSF);
    var str = debom(xlml_normalize(d));

    if (opts.type == 'binary' || opts.type == 'array' || opts.type == 'base64') {
      if (typeof cptable !== 'undefined') str = cptable.utils.decode(65001, char_codes(str));else str = utf8read(str);
    }

    var opening = str.slice(0, 1024).toLowerCase(),
        ishtml = false;
    if (opening.indexOf("<?xml") == -1) ["html", "table", "head", "meta", "script", "style", "div"].forEach(function (tag) {
      if (opening.indexOf("<" + tag) >= 0) ishtml = true;
    });
    if (ishtml) return HTML_.to_workbook(str, opts);
    var Rn;
    var state = [],
        tmp;
    if (DENSE != null && opts.dense == null) opts.dense = DENSE;
    var sheets = {},
        sheetnames = [],
        cursheet = opts.dense ? [] : {},
        sheetname = "";
    var table = {},
        cell = {},
        row = {}; // eslint-disable-line no-unused-vars

    var dtag = xlml_parsexmltag('<Data ss:Type="String">'),
        didx = 0;
    var c = 0,
        r = 0;
    var refguess = {
      s: {
        r: 2000000,
        c: 2000000
      },
      e: {
        r: 0,
        c: 0
      }
    };
    var styles = {},
        stag = {};
    var ss = "",
        fidx = 0;
    var merges = [];
    var Props = {},
        Custprops = {},
        pidx = 0,
        cp = [];
    var comments = [],
        comment = {};
    var cstys = [],
        csty,
        seencol = false;
    var arrayf = [];
    var rowinfo = [],
        rowobj = {},
        cc = 0,
        rr = 0;
    var Workbook = {
      Sheets: [],
      WBProps: {
        date1904: false
      }
    },
        wsprops = {};
    xlmlregex.lastIndex = 0;
    str = str.replace(/<!--([\s\S]*?)-->/mg, "");
    var raw_Rn3 = "";

    while (Rn = xlmlregex.exec(str)) switch (Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase()) {
      case 'data'
      /*case 'Data'*/
      :
        if (raw_Rn3 == "data") {
          if (Rn[1] === '/') {
            if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
          } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') state.push([Rn[3], true]);

          break;
        }

        if (state[state.length - 1][1]) break;
        if (Rn[1] === '/') parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length - 1][0] ==
        /*"Comment"*/
        "comment" ? comment : cell, {
          c: c,
          r: r
        }, styles, cstys[c], row, arrayf, opts);else {
          ss = "";
          dtag = xlml_parsexmltag(Rn[0]);
          didx = Rn.index + Rn[0].length;
        }
        break;

      case 'cell'
      /*case 'Cell'*/
      :
        if (Rn[1] === '/') {
          if (comments.length > 0) cell.c = comments;

          if ((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) {
            if (opts.dense) {
              if (!cursheet[r]) cursheet[r] = [];
              cursheet[r][c] = cell;
            } else cursheet[encode_col(c) + encode_row(r)] = cell;
          }

          if (cell.HRef) {
            cell.l = {
              Target: cell.HRef
            };
            if (cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;
            delete cell.HRef;
            delete cell.HRefScreenTip;
          }

          if (cell.MergeAcross || cell.MergeDown) {
            cc = c + (parseInt(cell.MergeAcross, 10) | 0);
            rr = r + (parseInt(cell.MergeDown, 10) | 0);
            merges.push({
              s: {
                c: c,
                r: r
              },
              e: {
                c: cc,
                r: rr
              }
            });
          }

          if (!opts.sheetStubs) {
            if (cell.MergeAcross) c = cc + 1;else ++c;
          } else if (cell.MergeAcross || cell.MergeDown) {
            for (var cma = c; cma <= cc; ++cma) {
              for (var cmd = r; cmd <= rr; ++cmd) {
                if (cma > c || cmd > r) {
                  if (opts.dense) {
                    if (!cursheet[cmd]) cursheet[cmd] = [];
                    cursheet[cmd][cma] = {
                      t: 'z'
                    };
                  } else cursheet[encode_col(cma) + encode_row(cmd)] = {
                    t: 'z'
                  };
                }
              }
            }

            c = cc + 1;
          } else ++c;
        } else {
          cell = xlml_parsexmltagobj(Rn[0]);
          if (cell.Index) c = +cell.Index - 1;
          if (c < refguess.s.c) refguess.s.c = c;
          if (c > refguess.e.c) refguess.e.c = c;
          if (Rn[0].slice(-2) === "/>") ++c;
          comments = [];
        }

        break;

      case 'row'
      /*case 'Row'*/
      :
        if (Rn[1] === '/' || Rn[0].slice(-2) === "/>") {
          if (r < refguess.s.r) refguess.s.r = r;
          if (r > refguess.e.r) refguess.e.r = r;

          if (Rn[0].slice(-2) === "/>") {
            row = xlml_parsexmltag(Rn[0]);
            if (row.Index) r = +row.Index - 1;
          }

          c = 0;
          ++r;
        } else {
          row = xlml_parsexmltag(Rn[0]);
          if (row.Index) r = +row.Index - 1;
          rowobj = {};

          if (row.AutoFitHeight == "0" || row.Height) {
            rowobj.hpx = parseInt(row.Height, 10);
            rowobj.hpt = px2pt(rowobj.hpx);
            rowinfo[r] = rowobj;
          }

          if (row.Hidden == "1") {
            rowobj.hidden = true;
            rowinfo[r] = rowobj;
          }
        }

        break;

      case 'worksheet'
      /*case 'Worksheet'*/
      :
        /* TODO: read range from FullRows/FullColumns */
        if (Rn[1] === '/') {
          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
          sheetnames.push(sheetname);

          if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
            cursheet["!ref"] = encode_range(refguess);

            if (opts.sheetRows && opts.sheetRows <= refguess.e.r) {
              cursheet["!fullref"] = cursheet["!ref"];
              refguess.e.r = opts.sheetRows - 1;
              cursheet["!ref"] = encode_range(refguess);
            }
          }

          if (merges.length) cursheet["!merges"] = merges;
          if (cstys.length > 0) cursheet["!cols"] = cstys;
          if (rowinfo.length > 0) cursheet["!rows"] = rowinfo;
          sheets[sheetname] = cursheet;
        } else {
          refguess = {
            s: {
              r: 2000000,
              c: 2000000
            },
            e: {
              r: 0,
              c: 0
            }
          };
          r = c = 0;
          state.push([Rn[3], false]);
          tmp = xlml_parsexmltag(Rn[0]);
          sheetname = unescapexml(tmp.Name);
          cursheet = opts.dense ? [] : {};
          merges = [];
          arrayf = [];
          rowinfo = [];
          wsprops = {
            name: sheetname,
            Hidden: 0
          };
          Workbook.Sheets.push(wsprops);
        }

        break;

      case 'table'
      /*case 'Table'*/
      :
        if (Rn[1] === '/') {
          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
        } else if (Rn[0].slice(-2) == "/>") break;else {
          table = xlml_parsexmltag(Rn[0]);
          state.push([Rn[3], false]);
          cstys = [];
          seencol = false;
        }

        break;

      case 'style'
      /*case 'Style'*/
      :
        if (Rn[1] === '/') process_style_xlml(styles, stag, opts);else stag = xlml_parsexmltag(Rn[0]);
        break;

      case 'numberformat'
      /*case 'NumberFormat'*/
      :
        stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
        if (XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];

        for (var ssfidx = 0; ssfidx != 0x188; ++ssfidx) if (SSF._table[ssfidx] == stag.nf) break;

        if (ssfidx == 0x188) for (ssfidx = 0x39; ssfidx != 0x188; ++ssfidx) if (SSF._table[ssfidx] == null) {
          SSF.load(stag.nf, ssfidx);
          break;
        }
        break;

      case 'column'
      /*case 'Column'*/
      :
        if (state[state.length - 1][0] !==
        /*'Table'*/
        'table') break;
        csty = xlml_parsexmltag(Rn[0]);

        if (csty.Hidden) {
          csty.hidden = true;
          delete csty.Hidden;
        }

        if (csty.Width) csty.wpx = parseInt(csty.Width, 10);

        if (!seencol && csty.wpx > 10) {
          seencol = true;
          MDW = DEF_MDW; //find_mdw_wpx(csty.wpx);

          for (var _col = 0; _col < cstys.length; ++_col) if (cstys[_col]) process_col(cstys[_col]);
        }

        if (seencol) process_col(csty);
        cstys[csty.Index - 1 || cstys.length] = csty;

        for (var i = 0; i < +csty.Span; ++i) cstys[cstys.length] = dup(csty);

        break;

      case 'namedrange'
      /*case 'NamedRange'*/
      :
        if (Rn[1] === '/') break;
        if (!Workbook.Names) Workbook.Names = [];

        var _NamedRange = parsexmltag(Rn[0]);

        var _DefinedName = {
          Name: _NamedRange.Name,
          Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), {
            r: 0,
            c: 0
          })
        };
        if (Workbook.Sheets.length > 0) _DefinedName.Sheet = Workbook.Sheets.length - 1;
        Workbook.Names.push(_DefinedName);
        break;

      case 'namedcell'
      /*case 'NamedCell'*/
      :
        break;

      case 'b'
      /*case 'B'*/
      :
        break;

      case 'i'
      /*case 'I'*/
      :
        break;

      case 'u'
      /*case 'U'*/
      :
        break;

      case 's'
      /*case 'S'*/
      :
        break;

      case 'em'
      /*case 'EM'*/
      :
        break;

      case 'h2'
      /*case 'H2'*/
      :
        break;

      case 'h3'
      /*case 'H3'*/
      :
        break;

      case 'sub'
      /*case 'Sub'*/
      :
        break;

      case 'sup'
      /*case 'Sup'*/
      :
        break;

      case 'span'
      /*case 'Span'*/
      :
        break;

      case 'alignment'
      /*case 'Alignment'*/
      :
        break;

      case 'borders'
      /*case 'Borders'*/
      :
        break;

      case 'border'
      /*case 'Border'*/
      :
        break;

      case 'font'
      /*case 'Font'*/
      :
        if (Rn[0].slice(-2) === "/>") break;else if (Rn[1] === "/") ss += str.slice(fidx, Rn.index);else fidx = Rn.index + Rn[0].length;
        break;

      case 'interior'
      /*case 'Interior'*/
      :
        if (!opts.cellStyles) break;
        stag.Interior = xlml_parsexmltag(Rn[0]);
        break;

      case 'protection'
      /*case 'Protection'*/
      :
        break;

      case 'author'
      /*case 'Author'*/
      :
      case 'title'
      /*case 'Title'*/
      :
      case 'description'
      /*case 'Description'*/
      :
      case 'created'
      /*case 'Created'*/
      :
      case 'keywords'
      /*case 'Keywords'*/
      :
      case 'subject'
      /*case 'Subject'*/
      :
      case 'category'
      /*case 'Category'*/
      :
      case 'company'
      /*case 'Company'*/
      :
      case 'lastauthor'
      /*case 'LastAuthor'*/
      :
      case 'lastsaved'
      /*case 'LastSaved'*/
      :
      case 'lastprinted'
      /*case 'LastPrinted'*/
      :
      case 'version'
      /*case 'Version'*/
      :
      case 'revision'
      /*case 'Revision'*/
      :
      case 'totaltime'
      /*case 'TotalTime'*/
      :
      case 'hyperlinkbase'
      /*case 'HyperlinkBase'*/
      :
      case 'manager'
      /*case 'Manager'*/
      :
      case 'contentstatus'
      /*case 'ContentStatus'*/
      :
      case 'identifier'
      /*case 'Identifier'*/
      :
      case 'language'
      /*case 'Language'*/
      :
      case 'appname'
      /*case 'AppName'*/
      :
        if (Rn[0].slice(-2) === "/>") break;else if (Rn[1] === "/") xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));else pidx = Rn.index + Rn[0].length;
        break;

      case 'paragraphs'
      /*case 'Paragraphs'*/
      :
        break;

      case 'styles'
      /*case 'Styles'*/
      :
      case 'workbook'
      /*case 'Workbook'*/
      :
        if (Rn[1] === '/') {
          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
        } else state.push([Rn[3], false]);

        break;

      case 'comment'
      /*case 'Comment'*/
      :
        if (Rn[1] === '/') {
          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
          xlml_clean_comment(comment);
          comments.push(comment);
        } else {
          state.push([Rn[3], false]);
          tmp = xlml_parsexmltag(Rn[0]);
          comment = {
            a: tmp.Author
          };
        }

        break;

      case 'autofilter'
      /*case 'AutoFilter'*/
      :
        if (Rn[1] === '/') {
          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {
          var AutoFilter = xlml_parsexmltag(Rn[0]);
          cursheet['!autofilter'] = {
            ref: rc_to_a1(AutoFilter.Range).replace(/\$/g, "")
          };
          state.push([Rn[3], true]);
        }

        break;

      case 'name'
      /*case 'Name'*/
      :
        break;

      case 'datavalidation'
      /*case 'DataValidation'*/
      :
        if (Rn[1] === '/') {
          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
        } else {
          if (Rn[0].charAt(Rn[0].length - 2) !== '/') state.push([Rn[3], true]);
        }

        break;

      case 'pixelsperinch'
      /*case 'PixelsPerInch'*/
      :
        break;

      case 'componentoptions'
      /*case 'ComponentOptions'*/
      :
      case 'documentproperties'
      /*case 'DocumentProperties'*/
      :
      case 'customdocumentproperties'
      /*case 'CustomDocumentProperties'*/
      :
      case 'officedocumentsettings'
      /*case 'OfficeDocumentSettings'*/
      :
      case 'pivottable'
      /*case 'PivotTable'*/
      :
      case 'pivotcache'
      /*case 'PivotCache'*/
      :
      case 'names'
      /*case 'Names'*/
      :
      case 'mapinfo'
      /*case 'MapInfo'*/
      :
      case 'pagebreaks'
      /*case 'PageBreaks'*/
      :
      case 'querytable'
      /*case 'QueryTable'*/
      :
      case 'sorting'
      /*case 'Sorting'*/
      :
      case 'schema'
      /*case 'Schema'*/
      : //case 'data' /*case 'data'*/:

      case 'conditionalformatting'
      /*case 'ConditionalFormatting'*/
      :
      case 'smarttagtype'
      /*case 'SmartTagType'*/
      :
      case 'smarttags'
      /*case 'SmartTags'*/
      :
      case 'excelworkbook'
      /*case 'ExcelWorkbook'*/
      :
      case 'workbookoptions'
      /*case 'WorkbookOptions'*/
      :
      case 'worksheetoptions'
      /*case 'WorksheetOptions'*/
      :
        if (Rn[1] === '/') {
          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') state.push([Rn[3], true]);

        break;

      default:
        /* FODS file root is <office:document> */
        if (state.length == 0 && Rn[3] == "document") return parse_fods(str, opts);
        /* UOS file root is <uof:UOF> */

        if (state.length == 0 && Rn[3] == "uof"
        /*"UOF"*/
        ) return parse_fods(str, opts);
        var seen = true;

        switch (state[state.length - 1][0]) {
          /* OfficeDocumentSettings */
          case 'officedocumentsettings'
          /*case 'OfficeDocumentSettings'*/
          :
            switch (Rn[3]) {
              case 'allowpng'
              /*case 'AllowPNG'*/
              :
                break;

              case 'removepersonalinformation'
              /*case 'RemovePersonalInformation'*/
              :
                break;

              case 'downloadcomponents'
              /*case 'DownloadComponents'*/
              :
                break;

              case 'locationofcomponents'
              /*case 'LocationOfComponents'*/
              :
                break;

              case 'colors'
              /*case 'Colors'*/
              :
                break;

              case 'color'
              /*case 'Color'*/
              :
                break;

              case 'index'
              /*case 'Index'*/
              :
                break;

              case 'rgb'
              /*case 'RGB'*/
              :
                break;

              case 'targetscreensize'
              /*case 'TargetScreenSize'*/
              :
                break;

              case 'readonlyrecommended'
              /*case 'ReadOnlyRecommended'*/
              :
                break;

              default:
                seen = false;
            }

            break;

          /* ComponentOptions */

          case 'componentoptions'
          /*case 'ComponentOptions'*/
          :
            switch (Rn[3]) {
              case 'toolbar'
              /*case 'Toolbar'*/
              :
                break;

              case 'hideofficelogo'
              /*case 'HideOfficeLogo'*/
              :
                break;

              case 'spreadsheetautofit'
              /*case 'SpreadsheetAutoFit'*/
              :
                break;

              case 'label'
              /*case 'Label'*/
              :
                break;

              case 'caption'
              /*case 'Caption'*/
              :
                break;

              case 'maxheight'
              /*case 'MaxHeight'*/
              :
                break;

              case 'maxwidth'
              /*case 'MaxWidth'*/
              :
                break;

              case 'nextsheetnumber'
              /*case 'NextSheetNumber'*/
              :
                break;

              default:
                seen = false;
            }

            break;

          /* ExcelWorkbook */

          case 'excelworkbook'
          /*case 'ExcelWorkbook'*/
          :
            switch (Rn[3]) {
              case 'date1904'
              /*case 'Date1904'*/
              :
                Workbook.WBProps.date1904 = true;
                break;

              case 'windowheight'
              /*case 'WindowHeight'*/
              :
                break;

              case 'windowwidth'
              /*case 'WindowWidth'*/
              :
                break;

              case 'windowtopx'
              /*case 'WindowTopX'*/
              :
                break;

              case 'windowtopy'
              /*case 'WindowTopY'*/
              :
                break;

              case 'tabratio'
              /*case 'TabRatio'*/
              :
                break;

              case 'protectstructure'
              /*case 'ProtectStructure'*/
              :
                break;

              case 'protectwindow'
              /*case 'ProtectWindow'*/
              :
                break;

              case 'protectwindows'
              /*case 'ProtectWindows'*/
              :
                break;

              case 'activesheet'
              /*case 'ActiveSheet'*/
              :
                break;

              case 'displayinknotes'
              /*case 'DisplayInkNotes'*/
              :
                break;

              case 'firstvisiblesheet'
              /*case 'FirstVisibleSheet'*/
              :
                break;

              case 'supbook'
              /*case 'SupBook'*/
              :
                break;

              case 'sheetname'
              /*case 'SheetName'*/
              :
                break;

              case 'sheetindex'
              /*case 'SheetIndex'*/
              :
                break;

              case 'sheetindexfirst'
              /*case 'SheetIndexFirst'*/
              :
                break;

              case 'sheetindexlast'
              /*case 'SheetIndexLast'*/
              :
                break;

              case 'dll'
              /*case 'Dll'*/
              :
                break;

              case 'acceptlabelsinformulas'
              /*case 'AcceptLabelsInFormulas'*/
              :
                break;

              case 'donotsavelinkvalues'
              /*case 'DoNotSaveLinkValues'*/
              :
                break;

              case 'iteration'
              /*case 'Iteration'*/
              :
                break;

              case 'maxiterations'
              /*case 'MaxIterations'*/
              :
                break;

              case 'maxchange'
              /*case 'MaxChange'*/
              :
                break;

              case 'path'
              /*case 'Path'*/
              :
                break;

              case 'xct'
              /*case 'Xct'*/
              :
                break;

              case 'count'
              /*case 'Count'*/
              :
                break;

              case 'selectedsheets'
              /*case 'SelectedSheets'*/
              :
                break;

              case 'calculation'
              /*case 'Calculation'*/
              :
                break;

              case 'uncalced'
              /*case 'Uncalced'*/
              :
                break;

              case 'startupprompt'
              /*case 'StartupPrompt'*/
              :
                break;

              case 'crn'
              /*case 'Crn'*/
              :
                break;

              case 'externname'
              /*case 'ExternName'*/
              :
                break;

              case 'formula'
              /*case 'Formula'*/
              :
                break;

              case 'colfirst'
              /*case 'ColFirst'*/
              :
                break;

              case 'collast'
              /*case 'ColLast'*/
              :
                break;

              case 'wantadvise'
              /*case 'WantAdvise'*/
              :
                break;

              case 'boolean'
              /*case 'Boolean'*/
              :
                break;

              case 'error'
              /*case 'Error'*/
              :
                break;

              case 'text'
              /*case 'Text'*/
              :
                break;

              case 'ole'
              /*case 'OLE'*/
              :
                break;

              case 'noautorecover'
              /*case 'NoAutoRecover'*/
              :
                break;

              case 'publishobjects'
              /*case 'PublishObjects'*/
              :
                break;

              case 'donotcalculatebeforesave'
              /*case 'DoNotCalculateBeforeSave'*/
              :
                break;

              case 'number'
              /*case 'Number'*/
              :
                break;

              case 'refmoder1c1'
              /*case 'RefModeR1C1'*/
              :
                break;

              case 'embedsavesmarttags'
              /*case 'EmbedSaveSmartTags'*/
              :
                break;

              default:
                seen = false;
            }

            break;

          /* WorkbookOptions */

          case 'workbookoptions'
          /*case 'WorkbookOptions'*/
          :
            switch (Rn[3]) {
              case 'owcversion'
              /*case 'OWCVersion'*/
              :
                break;

              case 'height'
              /*case 'Height'*/
              :
                break;

              case 'width'
              /*case 'Width'*/
              :
                break;

              default:
                seen = false;
            }

            break;

          /* WorksheetOptions */

          case 'worksheetoptions'
          /*case 'WorksheetOptions'*/
          :
            switch (Rn[3]) {
              case 'visible'
              /*case 'Visible'*/
              :
                if (Rn[0].slice(-2) === "/>") {
                  /* empty */
                } else if (Rn[1] === "/") switch (str.slice(pidx, Rn.index)) {
                  case "SheetHidden":
                    wsprops.Hidden = 1;
                    break;

                  case "SheetVeryHidden":
                    wsprops.Hidden = 2;
                    break;
                } else pidx = Rn.index + Rn[0].length;

                break;

              case 'header'
              /*case 'Header'*/
              :
                if (!cursheet['!margins']) default_margins(cursheet['!margins'] = {}, 'xlml');
                cursheet['!margins'].header = parsexmltag(Rn[0]).Margin;
                break;

              case 'footer'
              /*case 'Footer'*/
              :
                if (!cursheet['!margins']) default_margins(cursheet['!margins'] = {}, 'xlml');
                cursheet['!margins'].footer = parsexmltag(Rn[0]).Margin;
                break;

              case 'pagemargins'
              /*case 'PageMargins'*/
              :
                var pagemargins = parsexmltag(Rn[0]);
                if (!cursheet['!margins']) default_margins(cursheet['!margins'] = {}, 'xlml');
                if (pagemargins.Top) cursheet['!margins'].top = pagemargins.Top;
                if (pagemargins.Left) cursheet['!margins'].left = pagemargins.Left;
                if (pagemargins.Right) cursheet['!margins'].right = pagemargins.Right;
                if (pagemargins.Bottom) cursheet['!margins'].bottom = pagemargins.Bottom;
                break;

              case 'displayrighttoleft'
              /*case 'DisplayRightToLeft'*/
              :
                if (!Workbook.Views) Workbook.Views = [];
                if (!Workbook.Views[0]) Workbook.Views[0] = {};
                Workbook.Views[0].RTL = true;
                break;

              case 'freezepanes'
              /*case 'FreezePanes'*/
              :
                break;

              case 'frozennosplit'
              /*case 'FrozenNoSplit'*/
              :
                break;

              case 'splithorizontal'
              /*case 'SplitHorizontal'*/
              :
              case 'splitvertical'
              /*case 'SplitVertical'*/
              :
                break;

              case 'donotdisplaygridlines'
              /*case 'DoNotDisplayGridlines'*/
              :
                break;

              case 'activerow'
              /*case 'ActiveRow'*/
              :
                break;

              case 'activecol'
              /*case 'ActiveCol'*/
              :
                break;

              case 'toprowbottompane'
              /*case 'TopRowBottomPane'*/
              :
                break;

              case 'leftcolumnrightpane'
              /*case 'LeftColumnRightPane'*/
              :
                break;

              case 'unsynced'
              /*case 'Unsynced'*/
              :
                break;

              case 'print'
              /*case 'Print'*/
              :
                break;

              case 'panes'
              /*case 'Panes'*/
              :
                break;

              case 'scale'
              /*case 'Scale'*/
              :
                break;

              case 'pane'
              /*case 'Pane'*/
              :
                break;

              case 'number'
              /*case 'Number'*/
              :
                break;

              case 'layout'
              /*case 'Layout'*/
              :
                break;

              case 'pagesetup'
              /*case 'PageSetup'*/
              :
                break;

              case 'selected'
              /*case 'Selected'*/
              :
                break;

              case 'protectobjects'
              /*case 'ProtectObjects'*/
              :
                break;

              case 'enableselection'
              /*case 'EnableSelection'*/
              :
                break;

              case 'protectscenarios'
              /*case 'ProtectScenarios'*/
              :
                break;

              case 'validprinterinfo'
              /*case 'ValidPrinterInfo'*/
              :
                break;

              case 'horizontalresolution'
              /*case 'HorizontalResolution'*/
              :
                break;

              case 'verticalresolution'
              /*case 'VerticalResolution'*/
              :
                break;

              case 'numberofcopies'
              /*case 'NumberofCopies'*/
              :
                break;

              case 'activepane'
              /*case 'ActivePane'*/
              :
                break;

              case 'toprowvisible'
              /*case 'TopRowVisible'*/
              :
                break;

              case 'leftcolumnvisible'
              /*case 'LeftColumnVisible'*/
              :
                break;

              case 'fittopage'
              /*case 'FitToPage'*/
              :
                break;

              case 'rangeselection'
              /*case 'RangeSelection'*/
              :
                break;

              case 'papersizeindex'
              /*case 'PaperSizeIndex'*/
              :
                break;

              case 'pagelayoutzoom'
              /*case 'PageLayoutZoom'*/
              :
                break;

              case 'pagebreakzoom'
              /*case 'PageBreakZoom'*/
              :
                break;

              case 'filteron'
              /*case 'FilterOn'*/
              :
                break;

              case 'fitwidth'
              /*case 'FitWidth'*/
              :
                break;

              case 'fitheight'
              /*case 'FitHeight'*/
              :
                break;

              case 'commentslayout'
              /*case 'CommentsLayout'*/
              :
                break;

              case 'zoom'
              /*case 'Zoom'*/
              :
                break;

              case 'lefttoright'
              /*case 'LeftToRight'*/
              :
                break;

              case 'gridlines'
              /*case 'Gridlines'*/
              :
                break;

              case 'allowsort'
              /*case 'AllowSort'*/
              :
                break;

              case 'allowfilter'
              /*case 'AllowFilter'*/
              :
                break;

              case 'allowinsertrows'
              /*case 'AllowInsertRows'*/
              :
                break;

              case 'allowdeleterows'
              /*case 'AllowDeleteRows'*/
              :
                break;

              case 'allowinsertcols'
              /*case 'AllowInsertCols'*/
              :
                break;

              case 'allowdeletecols'
              /*case 'AllowDeleteCols'*/
              :
                break;

              case 'allowinserthyperlinks'
              /*case 'AllowInsertHyperlinks'*/
              :
                break;

              case 'allowformatcells'
              /*case 'AllowFormatCells'*/
              :
                break;

              case 'allowsizecols'
              /*case 'AllowSizeCols'*/
              :
                break;

              case 'allowsizerows'
              /*case 'AllowSizeRows'*/
              :
                break;

              case 'nosummaryrowsbelowdetail'
              /*case 'NoSummaryRowsBelowDetail'*/
              :
                break;

              case 'tabcolorindex'
              /*case 'TabColorIndex'*/
              :
                break;

              case 'donotdisplayheadings'
              /*case 'DoNotDisplayHeadings'*/
              :
                break;

              case 'showpagelayoutzoom'
              /*case 'ShowPageLayoutZoom'*/
              :
                break;

              case 'nosummarycolumnsrightdetail'
              /*case 'NoSummaryColumnsRightDetail'*/
              :
                break;

              case 'blackandwhite'
              /*case 'BlackAndWhite'*/
              :
                break;

              case 'donotdisplayzeros'
              /*case 'DoNotDisplayZeros'*/
              :
                break;

              case 'displaypagebreak'
              /*case 'DisplayPageBreak'*/
              :
                break;

              case 'rowcolheadings'
              /*case 'RowColHeadings'*/
              :
                break;

              case 'donotdisplayoutline'
              /*case 'DoNotDisplayOutline'*/
              :
                break;

              case 'noorientation'
              /*case 'NoOrientation'*/
              :
                break;

              case 'allowusepivottables'
              /*case 'AllowUsePivotTables'*/
              :
                break;

              case 'zeroheight'
              /*case 'ZeroHeight'*/
              :
                break;

              case 'viewablerange'
              /*case 'ViewableRange'*/
              :
                break;

              case 'selection'
              /*case 'Selection'*/
              :
                break;

              case 'protectcontents'
              /*case 'ProtectContents'*/
              :
                break;

              default:
                seen = false;
            }

            break;

          /* PivotTable */

          case 'pivottable'
          /*case 'PivotTable'*/
          :
          case 'pivotcache'
          /*case 'PivotCache'*/
          :
            switch (Rn[3]) {
              case 'immediateitemsondrop'
              /*case 'ImmediateItemsOnDrop'*/
              :
                break;

              case 'showpagemultipleitemlabel'
              /*case 'ShowPageMultipleItemLabel'*/
              :
                break;

              case 'compactrowindent'
              /*case 'CompactRowIndent'*/
              :
                break;

              case 'location'
              /*case 'Location'*/
              :
                break;

              case 'pivotfield'
              /*case 'PivotField'*/
              :
                break;

              case 'orientation'
              /*case 'Orientation'*/
              :
                break;

              case 'layoutform'
              /*case 'LayoutForm'*/
              :
                break;

              case 'layoutsubtotallocation'
              /*case 'LayoutSubtotalLocation'*/
              :
                break;

              case 'layoutcompactrow'
              /*case 'LayoutCompactRow'*/
              :
                break;

              case 'position'
              /*case 'Position'*/
              :
                break;

              case 'pivotitem'
              /*case 'PivotItem'*/
              :
                break;

              case 'datatype'
              /*case 'DataType'*/
              :
                break;

              case 'datafield'
              /*case 'DataField'*/
              :
                break;

              case 'sourcename'
              /*case 'SourceName'*/
              :
                break;

              case 'parentfield'
              /*case 'ParentField'*/
              :
                break;

              case 'ptlineitems'
              /*case 'PTLineItems'*/
              :
                break;

              case 'ptlineitem'
              /*case 'PTLineItem'*/
              :
                break;

              case 'countofsameitems'
              /*case 'CountOfSameItems'*/
              :
                break;

              case 'item'
              /*case 'Item'*/
              :
                break;

              case 'itemtype'
              /*case 'ItemType'*/
              :
                break;

              case 'ptsource'
              /*case 'PTSource'*/
              :
                break;

              case 'cacheindex'
              /*case 'CacheIndex'*/
              :
                break;

              case 'consolidationreference'
              /*case 'ConsolidationReference'*/
              :
                break;

              case 'filename'
              /*case 'FileName'*/
              :
                break;

              case 'reference'
              /*case 'Reference'*/
              :
                break;

              case 'nocolumngrand'
              /*case 'NoColumnGrand'*/
              :
                break;

              case 'norowgrand'
              /*case 'NoRowGrand'*/
              :
                break;

              case 'blanklineafteritems'
              /*case 'BlankLineAfterItems'*/
              :
                break;

              case 'hidden'
              /*case 'Hidden'*/
              :
                break;

              case 'subtotal'
              /*case 'Subtotal'*/
              :
                break;

              case 'basefield'
              /*case 'BaseField'*/
              :
                break;

              case 'mapchilditems'
              /*case 'MapChildItems'*/
              :
                break;

              case 'function'
              /*case 'Function'*/
              :
                break;

              case 'refreshonfileopen'
              /*case 'RefreshOnFileOpen'*/
              :
                break;

              case 'printsettitles'
              /*case 'PrintSetTitles'*/
              :
                break;

              case 'mergelabels'
              /*case 'MergeLabels'*/
              :
                break;

              case 'defaultversion'
              /*case 'DefaultVersion'*/
              :
                break;

              case 'refreshname'
              /*case 'RefreshName'*/
              :
                break;

              case 'refreshdate'
              /*case 'RefreshDate'*/
              :
                break;

              case 'refreshdatecopy'
              /*case 'RefreshDateCopy'*/
              :
                break;

              case 'versionlastrefresh'
              /*case 'VersionLastRefresh'*/
              :
                break;

              case 'versionlastupdate'
              /*case 'VersionLastUpdate'*/
              :
                break;

              case 'versionupdateablemin'
              /*case 'VersionUpdateableMin'*/
              :
                break;

              case 'versionrefreshablemin'
              /*case 'VersionRefreshableMin'*/
              :
                break;

              case 'calculation'
              /*case 'Calculation'*/
              :
                break;

              default:
                seen = false;
            }

            break;

          /* PageBreaks */

          case 'pagebreaks'
          /*case 'PageBreaks'*/
          :
            switch (Rn[3]) {
              case 'colbreaks'
              /*case 'ColBreaks'*/
              :
                break;

              case 'colbreak'
              /*case 'ColBreak'*/
              :
                break;

              case 'rowbreaks'
              /*case 'RowBreaks'*/
              :
                break;

              case 'rowbreak'
              /*case 'RowBreak'*/
              :
                break;

              case 'colstart'
              /*case 'ColStart'*/
              :
                break;

              case 'colend'
              /*case 'ColEnd'*/
              :
                break;

              case 'rowend'
              /*case 'RowEnd'*/
              :
                break;

              default:
                seen = false;
            }

            break;

          /* AutoFilter */

          case 'autofilter'
          /*case 'AutoFilter'*/
          :
            switch (Rn[3]) {
              case 'autofiltercolumn'
              /*case 'AutoFilterColumn'*/
              :
                break;

              case 'autofiltercondition'
              /*case 'AutoFilterCondition'*/
              :
                break;

              case 'autofilterand'
              /*case 'AutoFilterAnd'*/
              :
                break;

              case 'autofilteror'
              /*case 'AutoFilterOr'*/
              :
                break;

              default:
                seen = false;
            }

            break;

          /* QueryTable */

          case 'querytable'
          /*case 'QueryTable'*/
          :
            switch (Rn[3]) {
              case 'id'
              /*case 'Id'*/
              :
                break;

              case 'autoformatfont'
              /*case 'AutoFormatFont'*/
              :
                break;

              case 'autoformatpattern'
              /*case 'AutoFormatPattern'*/
              :
                break;

              case 'querysource'
              /*case 'QuerySource'*/
              :
                break;

              case 'querytype'
              /*case 'QueryType'*/
              :
                break;

              case 'enableredirections'
              /*case 'EnableRedirections'*/
              :
                break;

              case 'refreshedinxl9'
              /*case 'RefreshedInXl9'*/
              :
                break;

              case 'urlstring'
              /*case 'URLString'*/
              :
                break;

              case 'htmltables'
              /*case 'HTMLTables'*/
              :
                break;

              case 'connection'
              /*case 'Connection'*/
              :
                break;

              case 'commandtext'
              /*case 'CommandText'*/
              :
                break;

              case 'refreshinfo'
              /*case 'RefreshInfo'*/
              :
                break;

              case 'notitles'
              /*case 'NoTitles'*/
              :
                break;

              case 'nextid'
              /*case 'NextId'*/
              :
                break;

              case 'columninfo'
              /*case 'ColumnInfo'*/
              :
                break;

              case 'overwritecells'
              /*case 'OverwriteCells'*/
              :
                break;

              case 'donotpromptforfile'
              /*case 'DoNotPromptForFile'*/
              :
                break;

              case 'textwizardsettings'
              /*case 'TextWizardSettings'*/
              :
                break;

              case 'source'
              /*case 'Source'*/
              :
                break;

              case 'number'
              /*case 'Number'*/
              :
                break;

              case 'decimal'
              /*case 'Decimal'*/
              :
                break;

              case 'thousandseparator'
              /*case 'ThousandSeparator'*/
              :
                break;

              case 'trailingminusnumbers'
              /*case 'TrailingMinusNumbers'*/
              :
                break;

              case 'formatsettings'
              /*case 'FormatSettings'*/
              :
                break;

              case 'fieldtype'
              /*case 'FieldType'*/
              :
                break;

              case 'delimiters'
              /*case 'Delimiters'*/
              :
                break;

              case 'tab'
              /*case 'Tab'*/
              :
                break;

              case 'comma'
              /*case 'Comma'*/
              :
                break;

              case 'autoformatname'
              /*case 'AutoFormatName'*/
              :
                break;

              case 'versionlastedit'
              /*case 'VersionLastEdit'*/
              :
                break;

              case 'versionlastrefresh'
              /*case 'VersionLastRefresh'*/
              :
                break;

              default:
                seen = false;
            }

            break;

          case 'datavalidation'
          /*case 'DataValidation'*/
          :
            switch (Rn[3]) {
              case 'range'
              /*case 'Range'*/
              :
                break;

              case 'type'
              /*case 'Type'*/
              :
                break;

              case 'min'
              /*case 'Min'*/
              :
                break;

              case 'max'
              /*case 'Max'*/
              :
                break;

              case 'sort'
              /*case 'Sort'*/
              :
                break;

              case 'descending'
              /*case 'Descending'*/
              :
                break;

              case 'order'
              /*case 'Order'*/
              :
                break;

              case 'casesensitive'
              /*case 'CaseSensitive'*/
              :
                break;

              case 'value'
              /*case 'Value'*/
              :
                break;

              case 'errorstyle'
              /*case 'ErrorStyle'*/
              :
                break;

              case 'errormessage'
              /*case 'ErrorMessage'*/
              :
                break;

              case 'errortitle'
              /*case 'ErrorTitle'*/
              :
                break;

              case 'inputmessage'
              /*case 'InputMessage'*/
              :
                break;

              case 'inputtitle'
              /*case 'InputTitle'*/
              :
                break;

              case 'combohide'
              /*case 'ComboHide'*/
              :
                break;

              case 'inputhide'
              /*case 'InputHide'*/
              :
                break;

              case 'condition'
              /*case 'Condition'*/
              :
                break;

              case 'qualifier'
              /*case 'Qualifier'*/
              :
                break;

              case 'useblank'
              /*case 'UseBlank'*/
              :
                break;

              case 'value1'
              /*case 'Value1'*/
              :
                break;

              case 'value2'
              /*case 'Value2'*/
              :
                break;

              case 'format'
              /*case 'Format'*/
              :
                break;

              case 'cellrangelist'
              /*case 'CellRangeList'*/
              :
                break;

              default:
                seen = false;
            }

            break;

          case 'sorting'
          /*case 'Sorting'*/
          :
          case 'conditionalformatting'
          /*case 'ConditionalFormatting'*/
          :
            switch (Rn[3]) {
              case 'range'
              /*case 'Range'*/
              :
                break;

              case 'type'
              /*case 'Type'*/
              :
                break;

              case 'min'
              /*case 'Min'*/
              :
                break;

              case 'max'
              /*case 'Max'*/
              :
                break;

              case 'sort'
              /*case 'Sort'*/
              :
                break;

              case 'descending'
              /*case 'Descending'*/
              :
                break;

              case 'order'
              /*case 'Order'*/
              :
                break;

              case 'casesensitive'
              /*case 'CaseSensitive'*/
              :
                break;

              case 'value'
              /*case 'Value'*/
              :
                break;

              case 'errorstyle'
              /*case 'ErrorStyle'*/
              :
                break;

              case 'errormessage'
              /*case 'ErrorMessage'*/
              :
                break;

              case 'errortitle'
              /*case 'ErrorTitle'*/
              :
                break;

              case 'cellrangelist'
              /*case 'CellRangeList'*/
              :
                break;

              case 'inputmessage'
              /*case 'InputMessage'*/
              :
                break;

              case 'inputtitle'
              /*case 'InputTitle'*/
              :
                break;

              case 'combohide'
              /*case 'ComboHide'*/
              :
                break;

              case 'inputhide'
              /*case 'InputHide'*/
              :
                break;

              case 'condition'
              /*case 'Condition'*/
              :
                break;

              case 'qualifier'
              /*case 'Qualifier'*/
              :
                break;

              case 'useblank'
              /*case 'UseBlank'*/
              :
                break;

              case 'value1'
              /*case 'Value1'*/
              :
                break;

              case 'value2'
              /*case 'Value2'*/
              :
                break;

              case 'format'
              /*case 'Format'*/
              :
                break;

              default:
                seen = false;
            }

            break;

          /* MapInfo (schema) */

          case 'mapinfo'
          /*case 'MapInfo'*/
          :
          case 'schema'
          /*case 'Schema'*/
          :
          case 'data'
          /*case 'data'*/
          :
            switch (Rn[3]) {
              case 'map'
              /*case 'Map'*/
              :
                break;

              case 'entry'
              /*case 'Entry'*/
              :
                break;

              case 'range'
              /*case 'Range'*/
              :
                break;

              case 'xpath'
              /*case 'XPath'*/
              :
                break;

              case 'field'
              /*case 'Field'*/
              :
                break;

              case 'xsdtype'
              /*case 'XSDType'*/
              :
                break;

              case 'filteron'
              /*case 'FilterOn'*/
              :
                break;

              case 'aggregate'
              /*case 'Aggregate'*/
              :
                break;

              case 'elementtype'
              /*case 'ElementType'*/
              :
                break;

              case 'attributetype'
              /*case 'AttributeType'*/
              :
                break;

              /* These are from xsd (XML Schema Definition) */

              case 'schema'
              /*case 'schema'*/
              :
              case 'element'
              /*case 'element'*/
              :
              case 'complextype'
              /*case 'complexType'*/
              :
              case 'datatype'
              /*case 'datatype'*/
              :
              case 'all'
              /*case 'all'*/
              :
              case 'attribute'
              /*case 'attribute'*/
              :
              case 'extends'
              /*case 'extends'*/
              :
                break;

              case 'row'
              /*case 'row'*/
              :
                break;

              default:
                seen = false;
            }

            break;

          /* SmartTags (can be anything) */

          case 'smarttags'
          /*case 'SmartTags'*/
          :
            break;

          default:
            seen = false;
            break;
        }

        if (seen) break;
        /* CustomDocumentProperties */

        if (Rn[3].match(/!\[CDATA/)) break;
        if (!state[state.length - 1][1]) throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");

        if (state[state.length - 1][0] ===
        /*'CustomDocumentProperties'*/
        'customdocumentproperties') {
          if (Rn[0].slice(-2) === "/>") break;else if (Rn[1] === "/") xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));else {
            cp = Rn;
            pidx = Rn.index + Rn[0].length;
          }
          break;
        }

        if (opts.WTF) throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");
    }

    var out = {};
    if (!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;
    out.SheetNames = sheetnames;
    out.Workbook = Workbook;
    out.SSF = SSF.get_table();
    out.Props = Props;
    out.Custprops = Custprops;
    return out;
  }

  function parse_xlml(data, opts) {
    fix_read_opts(opts = opts || {});

    switch (opts.type || "base64") {
      case "base64":
        return parse_xlml_xml(Base64.decode(data), opts);

      case "binary":
      case "buffer":
      case "file":
        return parse_xlml_xml(data, opts);

      case "array":
        return parse_xlml_xml(a2s(data), opts);
    }
  }
  /* TODO */


  function write_props_xlml(wb, opts) {
    var o = [];
    /* DocumentProperties */

    if (wb.Props) o.push(xlml_write_docprops(wb.Props, opts));
    /* CustomDocumentProperties */

    if (wb.Custprops) o.push(xlml_write_custprops(wb.Props, wb.Custprops, opts));
    return o.join("");
  }
  /* TODO */


  function write_wb_xlml() {
    /* OfficeDocumentSettings */

    /* ExcelWorkbook */
    return "";
  }
  /* TODO */


  function write_sty_xlml(wb, opts) {
    /* Styles */
    var styles = ['<Style ss:ID="Default" ss:Name="Normal"><NumberFormat/></Style>'];
    opts.cellXfs.forEach(function (xf, id) {
      var payload = [];
      payload.push(writextag('NumberFormat', null, {
        "ss:Format": escapexml(SSF._table[xf.numFmtId])
      }));
      var o = {
        "ss:ID": "s" + (21 + id)
      };
      styles.push(writextag('Style', payload.join(""), o));
    });
    return writextag("Styles", styles.join(""));
  }

  function write_name_xlml(n) {
    return writextag("NamedRange", null, {
      "ss:Name": n.Name,
      "ss:RefersTo": "=" + a1_to_rc(n.Ref, {
        r: 0,
        c: 0
      })
    });
  }

  function write_names_xlml(wb) {
    if (!((wb || {}).Workbook || {}).Names) return "";
    var names = wb.Workbook.Names;
    var out = [];

    for (var i = 0; i < names.length; ++i) {
      var n = names[i];
      if (n.Sheet != null) continue;
      if (n.Name.match(/^_xlfn\./)) continue;
      out.push(write_name_xlml(n));
    }

    return writextag("Names", out.join(""));
  }

  function write_ws_xlml_names(ws, opts, idx, wb) {
    if (!ws) return "";
    if (!((wb || {}).Workbook || {}).Names) return "";
    var names = wb.Workbook.Names;
    var out = [];

    for (var i = 0; i < names.length; ++i) {
      var n = names[i];
      if (n.Sheet != idx) continue;
      /*switch(n.Name) {
      	case "_": continue;
      }*/

      if (n.Name.match(/^_xlfn\./)) continue;
      out.push(write_name_xlml(n));
    }

    return out.join("");
  }
  /* WorksheetOptions */


  function write_ws_xlml_wsopts(ws, opts, idx, wb) {
    if (!ws) return "";
    var o = [];
    /* NOTE: spec technically allows any order, but stick with implied order */

    /* FitToPage */

    /* DoNotDisplayColHeaders */

    /* DoNotDisplayRowHeaders */

    /* ViewableRange */

    /* Selection */

    /* GridlineColor */

    /* Name */

    /* ExcelWorksheetType */

    /* IntlMacro */

    /* Unsynced */

    /* Selected */

    /* CodeName */

    if (ws['!margins']) {
      o.push("<PageSetup>");
      if (ws['!margins'].header) o.push(writextag("Header", null, {
        'x:Margin': ws['!margins'].header
      }));
      if (ws['!margins'].footer) o.push(writextag("Footer", null, {
        'x:Margin': ws['!margins'].footer
      }));
      o.push(writextag("PageMargins", null, {
        'x:Bottom': ws['!margins'].bottom || "0.75",
        'x:Left': ws['!margins'].left || "0.7",
        'x:Right': ws['!margins'].right || "0.7",
        'x:Top': ws['!margins'].top || "0.75"
      }));
      o.push("</PageSetup>");
    }
    /* PageSetup */

    /* DisplayPageBreak */

    /* TransitionExpressionEvaluation */

    /* TransitionFormulaEntry */

    /* Print */

    /* Zoom */

    /* PageLayoutZoom */

    /* PageBreakZoom */

    /* ShowPageBreakZoom */

    /* DefaultRowHeight */

    /* DefaultColumnWidth */

    /* StandardWidth */


    if (wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {
      /* Visible */
      if (wb.Workbook.Sheets[idx].Hidden) o.push(writextag("Visible", wb.Workbook.Sheets[idx].Hidden == 1 ? "SheetHidden" : "SheetVeryHidden", {}));else {
        /* Selected */
        for (var i = 0; i < idx; ++i) if (wb.Workbook.Sheets[i] && !wb.Workbook.Sheets[i].Hidden) break;

        if (i == idx) o.push("<Selected/>");
      }
    }
    /* LeftColumnVisible */


    if (((((wb || {}).Workbook || {}).Views || [])[0] || {}).RTL) o.push("<DisplayRightToLeft/>");
    /* GridlineColorIndex */

    /* DisplayFormulas */

    /* DoNotDisplayGridlines */

    /* DoNotDisplayHeadings */

    /* DoNotDisplayOutline */

    /* ApplyAutomaticOutlineStyles */

    /* NoSummaryRowsBelowDetail */

    /* NoSummaryColumnsRightDetail */

    /* DoNotDisplayZeros */

    /* ActiveRow */

    /* ActiveColumn */

    /* FilterOn */

    /* RangeSelection */

    /* TopRowVisible */

    /* TopRowBottomPane */

    /* LeftColumnRightPane */

    /* ActivePane */

    /* SplitHorizontal */

    /* SplitVertical */

    /* FreezePanes */

    /* FrozenNoSplit */

    /* TabColorIndex */

    /* Panes */

    /* NOTE: Password not supported in XLML Format */

    if (ws['!protect']) {
      o.push(writetag("ProtectContents", "True"));
      if (ws['!protect'].objects) o.push(writetag("ProtectObjects", "True"));
      if (ws['!protect'].scenarios) o.push(writetag("ProtectScenarios", "True"));
      if (ws['!protect'].selectLockedCells != null && !ws['!protect'].selectLockedCells) o.push(writetag("EnableSelection", "NoSelection"));else if (ws['!protect'].selectUnlockedCells != null && !ws['!protect'].selectUnlockedCells) o.push(writetag("EnableSelection", "UnlockedCells"));
      [["formatCells", "AllowFormatCells"], ["formatColumns", "AllowSizeCols"], ["formatRows", "AllowSizeRows"], ["insertColumns", "AllowInsertCols"], ["insertRows", "AllowInsertRows"], ["insertHyperlinks", "AllowInsertHyperlinks"], ["deleteColumns", "AllowDeleteCols"], ["deleteRows", "AllowDeleteRows"], ["sort", "AllowSort"], ["autoFilter", "AllowFilter"], ["pivotTables", "AllowUsePivotTables"]].forEach(function (x) {
        if (ws['!protect'][x[0]]) o.push("<" + x[1] + "/>");
      });
    }

    if (o.length == 0) return "";
    return writextag("WorksheetOptions", o.join(""), {
      xmlns: XLMLNS.x
    });
  }

  function write_ws_xlml_comment(comments) {
    return comments.map(function (c) {
      // TODO: formatted text
      var t = xlml_unfixstr(c.t || "");
      var d = writextag("ss:Data", t, {
        "xmlns": "http://www.w3.org/TR/REC-html40"
      });
      return writextag("Comment", d, {
        "ss:Author": c.a
      });
    }).join("");
  }

  function write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr) {
    if (!cell || cell.v == undefined && cell.f == undefined) return "";
    var attr = {};
    if (cell.f) attr["ss:Formula"] = "=" + escapexml(a1_to_rc(cell.f, addr));

    if (cell.F && cell.F.slice(0, ref.length) == ref) {
      var end = decode_cell(cell.F.slice(ref.length + 1));
      attr["ss:ArrayRange"] = "RC:R" + (end.r == addr.r ? "" : "[" + (end.r - addr.r) + "]") + "C" + (end.c == addr.c ? "" : "[" + (end.c - addr.c) + "]");
    }

    if (cell.l && cell.l.Target) {
      attr["ss:HRef"] = escapexml(cell.l.Target);
      if (cell.l.Tooltip) attr["x:HRefScreenTip"] = escapexml(cell.l.Tooltip);
    }

    if (ws['!merges']) {
      var marr = ws['!merges'];

      for (var mi = 0; mi != marr.length; ++mi) {
        if (marr[mi].s.c != addr.c || marr[mi].s.r != addr.r) continue;
        if (marr[mi].e.c > marr[mi].s.c) attr['ss:MergeAcross'] = marr[mi].e.c - marr[mi].s.c;
        if (marr[mi].e.r > marr[mi].s.r) attr['ss:MergeDown'] = marr[mi].e.r - marr[mi].s.r;
      }
    }

    var t = "",
        p = "";

    switch (cell.t) {
      case 'z':
        if (!opts.sheetStubs) return "";
        break;

      case 'n':
        t = 'Number';
        p = String(cell.v);
        break;

      case 'b':
        t = 'Boolean';
        p = cell.v ? "1" : "0";
        break;

      case 'e':
        t = 'Error';
        p = BErr[cell.v];
        break;

      case 'd':
        t = 'DateTime';
        p = new Date(cell.v).toISOString();
        if (cell.z == null) cell.z = cell.z || SSF._table[14];
        break;

      case 's':
        t = 'String';
        p = escapexlml(cell.v || "");
        break;
    }
    /* TODO: cell style */


    var os = get_cell_style(opts.cellXfs, cell, opts);
    attr["ss:StyleID"] = "s" + (21 + os);
    attr["ss:Index"] = addr.c + 1;

    var _v = cell.v != null ? p : "";

    var m = cell.t == 'z' ? "" : '<Data ss:Type="' + t + '">' + _v + '</Data>';
    if ((cell.c || []).length > 0) m += write_ws_xlml_comment(cell.c);
    return writextag("Cell", m, attr);
  }

  function write_ws_xlml_row(R, row) {
    var o = '<Row ss:Index="' + (R + 1) + '"';

    if (row) {
      if (row.hpt && !row.hpx) row.hpx = pt2px(row.hpt);
      if (row.hpx) o += ' ss:AutoFitHeight="0" ss:Height="' + row.hpx + '"';
      if (row.hidden) o += ' ss:Hidden="1"';
    }

    return o + '>';
  }
  /* TODO */


  function write_ws_xlml_table(ws, opts, idx, wb) {
    if (!ws['!ref']) return "";
    var range = safe_decode_range(ws['!ref']);
    var marr = ws['!merges'] || [],
        mi = 0;
    var o = [];
    if (ws['!cols']) ws['!cols'].forEach(function (n, i) {
      process_col(n);
      var w = !!n.width;
      var p = col_obj_w(i, n);
      var k = {
        "ss:Index": i + 1
      };
      if (w) k['ss:Width'] = width2px(p.width);
      if (n.hidden) k['ss:Hidden'] = "1";
      o.push(writextag("Column", null, k));
    });
    var dense = Array.isArray(ws);

    for (var R = range.s.r; R <= range.e.r; ++R) {
      var row = [write_ws_xlml_row(R, (ws['!rows'] || [])[R])];

      for (var C = range.s.c; C <= range.e.c; ++C) {
        var skip = false;

        for (mi = 0; mi != marr.length; ++mi) {
          if (marr[mi].s.c > C) continue;
          if (marr[mi].s.r > R) continue;
          if (marr[mi].e.c < C) continue;
          if (marr[mi].e.r < R) continue;
          if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
          break;
        }

        if (skip) continue;
        var addr = {
          r: R,
          c: C
        };
        var ref = encode_cell(addr),
            cell = dense ? (ws[R] || [])[C] : ws[ref];
        row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));
      }

      row.push("</Row>");
      if (row.length > 2) o.push(row.join(""));
    }

    return o.join("");
  }

  function write_ws_xlml(idx, opts, wb) {
    var o = [];
    var s = wb.SheetNames[idx];
    var ws = wb.Sheets[s];
    var t = ws ? write_ws_xlml_names(ws, opts, idx, wb) : "";
    if (t.length > 0) o.push("<Names>" + t + "</Names>");
    /* Table */

    t = ws ? write_ws_xlml_table(ws, opts, idx, wb) : "";
    if (t.length > 0) o.push("<Table>" + t + "</Table>");
    /* WorksheetOptions */

    o.push(write_ws_xlml_wsopts(ws, opts, idx, wb));
    return o.join("");
  }

  function write_xlml(wb, opts) {
    if (!opts) opts = {};
    if (!wb.SSF) wb.SSF = SSF.get_table();

    if (wb.SSF) {
      make_ssf(SSF);
      SSF.load_table(wb.SSF); // $FlowIgnore

      opts.revssf = evert_num(wb.SSF);
      opts.revssf[wb.SSF[65535]] = 0;
      opts.ssf = wb.SSF;
      opts.cellXfs = [];
      get_cell_style(opts.cellXfs, {}, {
        revssf: {
          "General": 0
        }
      });
    }

    var d = [];
    d.push(write_props_xlml(wb, opts));
    d.push(write_wb_xlml(wb, opts));
    d.push("");
    d.push("");

    for (var i = 0; i < wb.SheetNames.length; ++i) d.push(writextag("Worksheet", write_ws_xlml(i, opts, wb), {
      "ss:Name": escapexml(wb.SheetNames[i])
    }));

    d[2] = write_sty_xlml(wb, opts);
    d[3] = write_names_xlml(wb, opts);
    return XML_HEADER + writextag("Workbook", d.join(""), {
      'xmlns': XLMLNS.ss,
      'xmlns:o': XLMLNS.o,
      'xmlns:x': XLMLNS.x,
      'xmlns:ss': XLMLNS.ss,
      'xmlns:dt': XLMLNS.dt,
      'xmlns:html': XLMLNS.html
    });
  }
  /* [MS-OLEDS] 2.3.8 CompObjStream */


  function parse_compobj(obj) {
    var v = {};
    var o = obj.content;
    /* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */

    o.l = 28;
    v.AnsiUserType = o.read_shift(0, "lpstr-ansi");
    v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);
    if (o.length - o.l <= 4) return v;
    var m = o.read_shift(4);
    if (m == 0 || m > 40) return v;
    o.l -= 4;
    v.Reserved1 = o.read_shift(0, "lpstr-ansi");
    if (o.length - o.l <= 4) return v;
    m = o.read_shift(4);
    if (m !== 0x71b239f4) return v;
    v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);
    m = o.read_shift(4);
    if (m == 0 || m > 40) return v;
    o.l -= 4;
    v.Reserved2 = o.read_shift(0, "lpwstr");
  }
  /*
  	Continue logic for:
  	- 2.4.58 Continue
  	- 2.4.59 ContinueBigName
  	- 2.4.60 ContinueFrt
  	- 2.4.61 ContinueFrt11
  	- 2.4.62 ContinueFrt12
  */


  function slurp(R, blob, length, opts) {
    var l = length;
    var bufs = [];
    var d = blob.slice(blob.l, blob.l + l);
    if (opts && opts.enc && opts.enc.insitu && d.length > 0) switch (R.n) {
      case 'BOF':
      case 'FilePass':
      case 'FileLock':
      case 'InterfaceHdr':
      case 'RRDInfo':
      case 'RRDHead':
      case 'UsrExcl':
      case 'EOF':
        break;

      case 'BoundSheet8':
        break;

      default:
        opts.enc.insitu(d);
    }
    bufs.push(d);
    blob.l += l;

    var next = XLSRecordEnum[__readUInt16LE(blob, blob.l)];

    var start = 0;

    while (next != null && next.n.slice(0, 8) === 'Continue') {
      l = __readUInt16LE(blob, blob.l + 2);
      start = blob.l + 4;
      if (next.n == 'ContinueFrt') start += 4;else if (next.n.slice(0, 11) == 'ContinueFrt') {
        start += 12;
      }
      d = blob.slice(start, blob.l + 4 + l);
      bufs.push(d);
      blob.l += 4 + l;
      next = XLSRecordEnum[__readUInt16LE(blob, blob.l)];
    }

    var b = bconcat(bufs);
    prep_blob(b, 0);
    var ll = 0;
    b.lens = [];

    for (var j = 0; j < bufs.length; ++j) {
      b.lens.push(ll);
      ll += bufs[j].length;
    }

    if (b.length < length) throw "XLS Record " + (R && R.n || "??") + " Truncated: " + b.length + " < " + length;
    return R.f(b, b.length, opts);
  }

  function safe_format_xf(p, opts, date1904) {
    if (p.t === 'z') return;
    if (!p.XF) return;
    var fmtid = 0;

    try {
      fmtid = p.z || p.XF.numFmtId || 0;
      if (opts.cellNF) p.z = SSF._table[fmtid];
    } catch (e) {
      if (opts.WTF) throw e;
    }

    if (!opts || opts.cellText !== false) try {
      if (p.t === 'e') {
        p.w = p.w || BErr[p.v];
      } else if (fmtid === 0 || fmtid == "General") {
        if (p.t === 'n') {
          if ((p.v | 0) === p.v) p.w = SSF._general_int(p.v);else p.w = SSF._general_num(p.v);
        } else p.w = SSF._general(p.v);
      } else p.w = SSF.format(fmtid, p.v, {
        date1904: !!date1904
      });
    } catch (e) {
      if (opts.WTF) throw e;
    }

    if (opts.cellDates && fmtid && p.t == 'n' && SSF.is_date(SSF._table[fmtid] || String(fmtid))) {
      var _d = SSF.parse_date_code(p.v);

      if (_d) {
        p.t = 'd';
        p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
      }
    }
  }

  function make_cell(val, ixfe, t) {
    return {
      v: val,
      ixfe: ixfe,
      t: t
    };
  } // 2.3.2


  function parse_workbook(blob, options) {
    var wb = {
      opts: {}
    };
    var Sheets = {};
    if (DENSE != null && options.dense == null) options.dense = DENSE;
    var out = options.dense ? [] : {};
    var Directory = {};
    var range = {};
    var last_formula = null;
    var sst = [];
    var cur_sheet = "";
    var Preamble = {};
    var lastcell,
        last_cell = "",
        cc,
        cmnt,
        rngC,
        rngR;
    var sharedf = {};
    var arrayf = [];
    var temp_val;
    var country;
    var cell_valid = true;
    var XFs = [];
    /* XF records */

    var palette = [];
    var Workbook = {
      Sheets: [],
      WBProps: {
        date1904: false
      },
      Views: [{}]
    },
        wsprops = {};

    var get_rgb = function getrgb(icv) {
      if (icv < 8) return XLSIcv[icv];
      if (icv < 64) return palette[icv - 8] || XLSIcv[icv];
      return XLSIcv[icv];
    };

    var process_cell_style = function pcs(cell, line, options) {
      var xfd = line.XF.data;
      if (!xfd || !xfd.patternType || !options || !options.cellStyles) return;
      line.s = {};
      line.s.patternType = xfd.patternType;
      var t;

      if (t = rgb2Hex(get_rgb(xfd.icvFore))) {
        line.s.fgColor = {
          rgb: t
        };
      }

      if (t = rgb2Hex(get_rgb(xfd.icvBack))) {
        line.s.bgColor = {
          rgb: t
        };
      }
    };

    var addcell = function addcell(cell, line, options) {
      if (file_depth > 1) return;
      if (options.sheetRows && cell.r >= options.sheetRows) cell_valid = false;
      if (!cell_valid) return;
      if (options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options);
      delete line.ixfe;
      delete line.XF;
      lastcell = cell;
      last_cell = encode_cell(cell);
      if (!range || !range.s || !range.e) range = {
        s: {
          r: 0,
          c: 0
        },
        e: {
          r: 0,
          c: 0
        }
      };
      if (cell.r < range.s.r) range.s.r = cell.r;
      if (cell.c < range.s.c) range.s.c = cell.c;
      if (cell.r + 1 > range.e.r) range.e.r = cell.r + 1;
      if (cell.c + 1 > range.e.c) range.e.c = cell.c + 1;

      if (options.cellFormula && line.f) {
        for (var afi = 0; afi < arrayf.length; ++afi) {
          if (arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r) continue;
          if (arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r) continue;
          line.F = encode_range(arrayf[afi][0]);
          if (arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r) delete line.f;
          if (line.f) line.f = "" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);
          break;
        }
      }

      {
        if (options.dense) {
          if (!out[cell.r]) out[cell.r] = [];
          out[cell.r][cell.c] = line;
        } else out[last_cell] = line;
      }
    };

    var opts = {
      enc: false,
      // encrypted
      sbcch: 0,
      // cch in the preceding SupBook
      snames: [],
      // sheetnames
      sharedf: sharedf,
      // shared formulae by address
      arrayf: arrayf,
      // array formulae array
      rrtabid: [],
      // RRTabId
      lastuser: "",
      // Last User from WriteAccess
      biff: 8,
      // BIFF version
      codepage: 0,
      // CP from CodePage record
      winlocked: 0,
      // fLockWn from WinProtect
      cellStyles: !!options && !!options.cellStyles,
      WTF: !!options && !!options.wtf
    };
    if (options.password) opts.password = options.password;
    var themes;
    var merges = [];
    var objects = [];
    var colinfo = [],
        rowinfo = []; // eslint-disable-next-line no-unused-vars

    var defwidth = 0,
        defheight = 0; // twips / MDW respectively

    var seencol = false;
    var supbooks = []; // 1-indexed, will hold extern names

    supbooks.SheetNames = opts.snames;
    supbooks.sharedf = opts.sharedf;
    supbooks.arrayf = opts.arrayf;
    supbooks.names = [];
    supbooks.XTI = [];
    var last_Rn = '';
    var file_depth = 0;
    /* TODO: make a real stack */

    var BIFF2Fmt = 0,
        BIFF2FmtTable = [];
    var FilterDatabases = [];
    /* TODO: sort out supbooks and process elsewhere */

    var last_lbl;
    /* explicit override for some broken writers */

    opts.codepage = 1200;
    set_cp(1200);
    var seen_codepage = false;

    while (blob.l < blob.length - 1) {
      var s = blob.l;
      var RecordType = blob.read_shift(2);
      if (RecordType === 0 && last_Rn === 'EOF') break;
      var length = blob.l === blob.length ? 0 : blob.read_shift(2);
      var R = XLSRecordEnum[RecordType]; //console.log(RecordType.toString(16), RecordType, R, blob.l, length, blob.length);
      //if(!R) console.log(blob.slice(blob.l, blob.l + length));

      if (R && R.f) {
        if (options.bookSheets) {
          if (last_Rn === 'BoundSheet8' && R.n !== 'BoundSheet8') break;
        }

        last_Rn = R.n;

        if (R.r === 2 || R.r == 12) {
          var rt = blob.read_shift(2);
          length -= 2;
          if (!opts.enc && rt !== RecordType && ((rt & 0xFF) << 8 | rt >> 8) !== RecordType) throw new Error("rt mismatch: " + rt + "!=" + RecordType);

          if (R.r == 12) {
            blob.l += 10;
            length -= 10;
          } // skip FRT

        } //console.error(R,blob.l,length,blob.length);


        var val = {};
        if (R.n === 'EOF') val = R.f(blob, length, opts);else val = slurp(R, blob, length, opts);
        var Rn = R.n;
        if (file_depth == 0 && Rn != 'BOF') continue;
        /* nested switch statements to workaround V8 128 limit */

        switch (Rn) {
          /* Workbook Options */
          case 'Date1904':
            wb.opts.Date1904 = Workbook.WBProps.date1904 = val;
            break;

          case 'WriteProtect':
            wb.opts.WriteProtect = true;
            break;

          case 'FilePass':
            if (!opts.enc) blob.l = 0;
            opts.enc = val;
            if (!options.password) throw new Error("File is password-protected");
            if (val.valid == null) throw new Error("Encryption scheme unsupported");
            if (!val.valid) throw new Error("Password is incorrect");
            break;

          case 'WriteAccess':
            opts.lastuser = val;
            break;

          case 'FileSharing':
            break;
          //TODO

          case 'CodePage':
            var cpval = Number(val);
            /* overrides based on test cases */

            switch (cpval) {
              case 0x5212:
                cpval = 1200;
                break;

              case 0x8000:
                cpval = 10000;
                break;

              case 0x8001:
                cpval = 1252;
                break;
            }

            set_cp(opts.codepage = cpval);
            seen_codepage = true;
            break;

          case 'RRTabId':
            opts.rrtabid = val;
            break;

          case 'WinProtect':
            opts.winlocked = val;
            break;

          case 'Template':
            break;
          // TODO

          case 'BookBool':
            break;
          // TODO

          case 'UsesELFs':
            break;

          case 'MTRSettings':
            break;

          case 'RefreshAll':
          case 'CalcCount':
          case 'CalcDelta':
          case 'CalcIter':
          case 'CalcMode':
          case 'CalcPrecision':
          case 'CalcSaveRecalc':
            wb.opts[Rn] = val;
            break;

          case 'CalcRefMode':
            opts.CalcRefMode = val;
            break;
          // TODO: implement R1C1

          case 'Uncalced':
            break;

          case 'ForceFullCalculation':
            wb.opts.FullCalc = val;
            break;

          case 'WsBool':
            if (val.fDialog) out["!type"] = "dialog";
            break;
          // TODO

          case 'XF':
            XFs.push(val);
            break;

          case 'ExtSST':
            break;
          // TODO

          case 'BookExt':
            break;
          // TODO

          case 'RichTextStream':
            break;

          case 'BkHim':
            break;

          case 'SupBook':
            supbooks.push([val]);
            supbooks[supbooks.length - 1].XTI = [];
            break;

          case 'ExternName':
            supbooks[supbooks.length - 1].push(val);
            break;

          case 'Index':
            break;
          // TODO

          case 'Lbl':
            last_lbl = {
              Name: val.Name,
              Ref: stringify_formula(val.rgce, range, null, supbooks, opts)
            };
            if (val.itab > 0) last_lbl.Sheet = val.itab - 1;
            supbooks.names.push(last_lbl);

            if (!supbooks[0]) {
              supbooks[0] = [];
              supbooks[0].XTI = [];
            }

            supbooks[supbooks.length - 1].push(val);
            if (val.Name == "_xlnm._FilterDatabase" && val.itab > 0) if (val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == 'PtgArea3d') FilterDatabases[val.itab - 1] = {
              ref: encode_range(val.rgce[0][0][1][2])
            };
            break;

          case 'ExternCount':
            opts.ExternCount = val;
            break;

          case 'ExternSheet':
            if (supbooks.length == 0) {
              supbooks[0] = [];
              supbooks[0].XTI = [];
            }

            supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
            supbooks.XTI = supbooks.XTI.concat(val);
            break;

          case 'NameCmt':
            /* TODO: search for correct name */
            if (opts.biff < 8) break;
            if (last_lbl != null) last_lbl.Comment = val[1];
            break;

          case 'Protect':
            out["!protect"] = val;
            break;

          /* for sheet or book */

          case 'Password':
            if (val !== 0 && opts.WTF) console.error("Password verifier: " + val);
            break;

          case 'Prot4Rev':
          case 'Prot4RevPass':
            break;

          /*TODO: Revision Control*/

          case 'BoundSheet8':
            {
              Directory[val.pos] = val;
              opts.snames.push(val.name);
            }
            break;

          case 'EOF':
            {
              if (--file_depth) break;

              if (range.e) {
                if (range.e.r > 0 && range.e.c > 0) {
                  range.e.r--;
                  range.e.c--;
                  out["!ref"] = encode_range(range);

                  if (options.sheetRows && options.sheetRows <= range.e.r) {
                    var tmpri = range.e.r;
                    range.e.r = options.sheetRows - 1;
                    out["!fullref"] = out["!ref"];
                    out["!ref"] = encode_range(range);
                    range.e.r = tmpri;
                  }

                  range.e.r++;
                  range.e.c++;
                }

                if (merges.length > 0) out["!merges"] = merges;
                if (objects.length > 0) out["!objects"] = objects;
                if (colinfo.length > 0) out["!cols"] = colinfo;
                if (rowinfo.length > 0) out["!rows"] = rowinfo;
                Workbook.Sheets.push(wsprops);
              }

              if (cur_sheet === "") Preamble = out;else Sheets[cur_sheet] = out;
              out = options.dense ? [] : {};
            }
            break;

          case 'BOF':
            {
              if (opts.biff === 8) opts.biff = {
                0x0009: 2,
                0x0209: 3,
                0x0409: 4
              }[RecordType] || {
                0x0200: 2,
                0x0300: 3,
                0x0400: 4,
                0x0500: 5,
                0x0600: 8,
                0x0002: 2,
                0x0007: 2
              }[val.BIFFVer] || 8;
              if (opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16) opts.biff = 2;
              if (file_depth++) break;
              cell_valid = true;
              out = options.dense ? [] : {};

              if (opts.biff < 8 && !seen_codepage) {
                seen_codepage = true;
                set_cp(opts.codepage = options.codepage || 1252);
              }

              if (opts.biff < 5) {
                if (cur_sheet === "") cur_sheet = "Sheet1";
                range = {
                  s: {
                    r: 0,
                    c: 0
                  },
                  e: {
                    r: 0,
                    c: 0
                  }
                };
                /* fake BoundSheet8 */

                var fakebs8 = {
                  pos: blob.l - length,
                  name: cur_sheet
                };
                Directory[fakebs8.pos] = fakebs8;
                opts.snames.push(cur_sheet);
              } else cur_sheet = (Directory[s] || {
                name: ""
              }).name;

              if (val.dt == 0x20) out["!type"] = "chart";
              if (val.dt == 0x40) out["!type"] = "macro";
              merges = [];
              objects = [];
              opts.arrayf = arrayf = [];
              colinfo = [];
              rowinfo = [];
              defwidth = defheight = 0;
              seencol = false;
              wsprops = {
                Hidden: (Directory[s] || {
                  hs: 0
                }).hs,
                name: cur_sheet
              };
            }
            break;

          case 'Number':
          case 'BIFF2NUM':
          case 'BIFF2INT':
            {
              if (out["!type"] == "chart") if (options.dense ? (out[val.r] || [])[val.c] : out[encode_cell({
                c: val.c,
                r: val.r
              })]) ++val.c;
              temp_val = {
                ixfe: val.ixfe,
                XF: XFs[val.ixfe] || {},
                v: val.val,
                t: 'n'
              };
              if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x1F];
              safe_format_xf(temp_val, options, wb.opts.Date1904);
              addcell({
                c: val.c,
                r: val.r
              }, temp_val, options);
            }
            break;

          case 'BoolErr':
            {
              temp_val = {
                ixfe: val.ixfe,
                XF: XFs[val.ixfe],
                v: val.val,
                t: val.t
              };
              if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x1F];
              safe_format_xf(temp_val, options, wb.opts.Date1904);
              addcell({
                c: val.c,
                r: val.r
              }, temp_val, options);
            }
            break;

          case 'RK':
            {
              temp_val = {
                ixfe: val.ixfe,
                XF: XFs[val.ixfe],
                v: val.rknum,
                t: 'n'
              };
              if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x1F];
              safe_format_xf(temp_val, options, wb.opts.Date1904);
              addcell({
                c: val.c,
                r: val.r
              }, temp_val, options);
            }
            break;

          case 'MulRk':
            {
              for (var j = val.c; j <= val.C; ++j) {
                var ixfe = val.rkrec[j - val.c][0];
                temp_val = {
                  ixfe: ixfe,
                  XF: XFs[ixfe],
                  v: val.rkrec[j - val.c][1],
                  t: 'n'
                };
                if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x1F];
                safe_format_xf(temp_val, options, wb.opts.Date1904);
                addcell({
                  c: j,
                  r: val.r
                }, temp_val, options);
              }
            }
            break;

          case 'Formula':
            {
              if (val.val == 'String') {
                last_formula = val;
                break;
              }

              temp_val = make_cell(val.val, val.cell.ixfe, val.tt);
              temp_val.XF = XFs[temp_val.ixfe];

              if (options.cellFormula) {
                var _f = val.formula;

                if (_f && _f[0] && _f[0][0] && _f[0][0][0] == 'PtgExp') {
                  var _fr = _f[0][0][1][0],
                      _fc = _f[0][0][1][1];

                  var _fe = encode_cell({
                    r: _fr,
                    c: _fc
                  });

                  if (sharedf[_fe]) temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts);else temp_val.F = ((options.dense ? (out[_fr] || [])[_fc] : out[_fe]) || {}).F;
                } else temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts);
              }

              if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x1F];
              safe_format_xf(temp_val, options, wb.opts.Date1904);
              addcell(val.cell, temp_val, options);
              last_formula = val;
            }
            break;

          case 'String':
            {
              if (last_formula) {
                /* technically always true */
                last_formula.val = val;
                temp_val = make_cell(val, last_formula.cell.ixfe, 's');
                temp_val.XF = XFs[temp_val.ixfe];

                if (options.cellFormula) {
                  temp_val.f = "" + stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
                }

                if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x1F];
                safe_format_xf(temp_val, options, wb.opts.Date1904);
                addcell(last_formula.cell, temp_val, options);
                last_formula = null;
              } else throw new Error("String record expects Formula");
            }
            break;

          case 'Array':
            {
              arrayf.push(val);

              var _arraystart = encode_cell(val[0].s);

              cc = options.dense ? (out[val[0].s.r] || [])[val[0].s.c] : out[_arraystart];

              if (options.cellFormula && cc) {
                if (!last_formula) break;
                /* technically unreachable */

                if (!_arraystart || !cc) break;
                cc.f = "" + stringify_formula(val[1], range, val[0], supbooks, opts);
                cc.F = encode_range(val[0]);
              }
            }
            break;

          case 'ShrFmla':
            {
              if (!cell_valid) break;
              if (!options.cellFormula) break;

              if (last_cell) {
                /* TODO: capture range */
                if (!last_formula) break;
                /* technically unreachable */

                sharedf[encode_cell(last_formula.cell)] = val[0];
                cc = options.dense ? (out[last_formula.cell.r] || [])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
                (cc || {}).f = "" + stringify_formula(val[0], range, lastcell, supbooks, opts);
              }
            }
            break;

          case 'LabelSst':
            temp_val = make_cell(sst[val.isst].t, val.ixfe, 's');
            if (sst[val.isst].h) temp_val.h = sst[val.isst].h;
            temp_val.XF = XFs[temp_val.ixfe];
            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x1F];
            safe_format_xf(temp_val, options, wb.opts.Date1904);
            addcell({
              c: val.c,
              r: val.r
            }, temp_val, options);
            break;

          case 'Blank':
            if (options.sheetStubs) {
              temp_val = {
                ixfe: val.ixfe,
                XF: XFs[val.ixfe],
                t: 'z'
              };
              if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x1F];
              safe_format_xf(temp_val, options, wb.opts.Date1904);
              addcell({
                c: val.c,
                r: val.r
              }, temp_val, options);
            }

            break;

          case 'MulBlank':
            if (options.sheetStubs) {
              for (var _j = val.c; _j <= val.C; ++_j) {
                var _ixfe = val.ixfe[_j - val.c];
                temp_val = {
                  ixfe: _ixfe,
                  XF: XFs[_ixfe],
                  t: 'z'
                };
                if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x1F];
                safe_format_xf(temp_val, options, wb.opts.Date1904);
                addcell({
                  c: _j,
                  r: val.r
                }, temp_val, options);
              }
            }

            break;

          case 'RString':
          case 'Label':
          case 'BIFF2STR':
            temp_val = make_cell(val.val, val.ixfe, 's');
            temp_val.XF = XFs[temp_val.ixfe];
            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x1F];
            safe_format_xf(temp_val, options, wb.opts.Date1904);
            addcell({
              c: val.c,
              r: val.r
            }, temp_val, options);
            break;

          case 'Dimensions':
            {
              if (file_depth === 1) range = val;
              /* TODO: stack */
            }
            break;

          case 'SST':
            {
              sst = val;
            }
            break;

          case 'Format':
            {
              /* val = [id, fmt] */
              if (opts.biff == 4) {
                BIFF2FmtTable[BIFF2Fmt++] = val[1];

                for (var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx) if (SSF._table[b4idx] == val[1]) break;

                if (b4idx >= 163) SSF.load(val[1], BIFF2Fmt + 163);
              } else SSF.load(val[1], val[0]);
            }
            break;

          case 'BIFF2FORMAT':
            {
              BIFF2FmtTable[BIFF2Fmt++] = val;

              for (var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx) if (SSF._table[b2idx] == val) break;

              if (b2idx >= 163) SSF.load(val, BIFF2Fmt + 163);
            }
            break;

          case 'MergeCells':
            merges = merges.concat(val);
            break;

          case 'Obj':
            objects[val.cmo[0]] = opts.lastobj = val;
            break;

          case 'TxO':
            opts.lastobj.TxO = val;
            break;

          case 'ImData':
            opts.lastobj.ImData = val;
            break;

          case 'HLink':
            {
              for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR) for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({
                  c: rngC,
                  r: rngR
                })];
                if (cc) cc.l = val[1];
              }
            }
            break;

          case 'HLinkTooltip':
            {
              for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR) for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({
                  c: rngC,
                  r: rngR
                })];
                if (cc && cc.l) cc.l.Tooltip = val[1];
              }
            }
            break;

          /* Comments */

          case 'Note':
            {
              if (opts.biff <= 5 && opts.biff >= 2) break;
              /* TODO: BIFF5 */

              cc = options.dense ? (out[val[0].r] || [])[val[0].c] : out[encode_cell(val[0])];
              var noteobj = objects[val[2]];

              if (!cc) {
                if (options.dense) {
                  if (!out[val[0].r]) out[val[0].r] = [];
                  cc = out[val[0].r][val[0].c] = {
                    t: "z"
                  };
                } else {
                  cc = out[encode_cell(val[0])] = {
                    t: "z"
                  };
                }

                range.e.r = Math.max(range.e.r, val[0].r);
                range.s.r = Math.min(range.s.r, val[0].r);
                range.e.c = Math.max(range.e.c, val[0].c);
                range.s.c = Math.min(range.s.c, val[0].c);
              }

              if (!cc.c) cc.c = [];
              cmnt = {
                a: val[1],
                t: noteobj.TxO.t
              };
              cc.c.push(cmnt);
            }
            break;

          default:
            switch (R.n) {
              /* nested */
              case 'ClrtClient':
                break;

              case 'XFExt':
                update_xfext(XFs[val.ixfe], val.ext);
                break;

              case 'DefColWidth':
                defwidth = val;
                break;

              case 'DefaultRowHeight':
                defheight = val[1];
                break;
              // TODO: flags

              case 'ColInfo':
                {
                  if (!opts.cellStyles) break;

                  while (val.e >= val.s) {
                    colinfo[val.e--] = {
                      width: val.w / 256
                    };

                    if (!seencol) {
                      seencol = true;
                      find_mdw_colw(val.w / 256);
                    }

                    process_col(colinfo[val.e + 1]);
                  }
                }
                break;

              case 'Row':
                {
                  var rowobj = {};

                  if (val.level != null) {
                    rowinfo[val.r] = rowobj;
                    rowobj.level = val.level;
                  }

                  if (val.hidden) {
                    rowinfo[val.r] = rowobj;
                    rowobj.hidden = true;
                  }

                  if (val.hpt) {
                    rowinfo[val.r] = rowobj;
                    rowobj.hpt = val.hpt;
                    rowobj.hpx = pt2px(val.hpt);
                  }
                }
                break;

              case 'LeftMargin':
              case 'RightMargin':
              case 'TopMargin':
              case 'BottomMargin':
                if (!out['!margins']) default_margins(out['!margins'] = {});
                out['!margins'][Rn.slice(0, -6).toLowerCase()] = val;
                break;

              case 'Setup':
                // TODO
                if (!out['!margins']) default_margins(out['!margins'] = {});
                out['!margins'].header = val.header;
                out['!margins'].footer = val.footer;
                break;

              case 'Window2':
                // TODO
                // $FlowIgnore
                if (val.RTL) Workbook.Views[0].RTL = true;
                break;

              case 'Header':
                break;
              // TODO

              case 'Footer':
                break;
              // TODO

              case 'HCenter':
                break;
              // TODO

              case 'VCenter':
                break;
              // TODO

              case 'Pls':
                break;
              // TODO

              case 'GCW':
                break;

              case 'LHRecord':
                break;

              case 'DBCell':
                break;
              // TODO

              case 'EntExU2':
                break;
              // TODO

              case 'SxView':
                break;
              // TODO

              case 'Sxvd':
                break;
              // TODO

              case 'SXVI':
                break;
              // TODO

              case 'SXVDEx':
                break;
              // TODO

              case 'SxIvd':
                break;
              // TODO

              case 'SXString':
                break;
              // TODO

              case 'Sync':
                break;

              case 'Addin':
                break;

              case 'SXDI':
                break;
              // TODO

              case 'SXLI':
                break;
              // TODO

              case 'SXEx':
                break;
              // TODO

              case 'QsiSXTag':
                break;
              // TODO

              case 'Selection':
                break;

              case 'Feat':
                break;

              case 'FeatHdr':
              case 'FeatHdr11':
                break;

              case 'Feature11':
              case 'Feature12':
              case 'List12':
                break;

              case 'Country':
                country = val;
                break;

              case 'RecalcId':
                break;

              case 'DxGCol':
                break;
              // TODO: htmlify

              case 'Fbi':
              case 'Fbi2':
              case 'GelFrame':
                break;

              case 'Font':
                break;
              // TODO

              case 'XFCRC':
                break;
              // TODO

              case 'Style':
                break;
              // TODO

              case 'StyleExt':
                break;
              // TODO

              case 'Palette':
                palette = val;
                break;

              case 'Theme':
                themes = val;
                break;

              /* Protection */

              case 'ScenarioProtect':
                break;

              case 'ObjProtect':
                break;

              /* Conditional Formatting */

              case 'CondFmt12':
                break;

              /* Table */

              case 'Table':
                break;
              // TODO

              case 'TableStyles':
                break;
              // TODO

              case 'TableStyle':
                break;
              // TODO

              case 'TableStyleElement':
                break;
              // TODO

              /* PivotTable */

              case 'SXStreamID':
                break;
              // TODO

              case 'SXVS':
                break;
              // TODO

              case 'DConRef':
                break;
              // TODO

              case 'SXAddl':
                break;
              // TODO

              case 'DConBin':
                break;
              // TODO

              case 'DConName':
                break;
              // TODO

              case 'SXPI':
                break;
              // TODO

              case 'SxFormat':
                break;
              // TODO

              case 'SxSelect':
                break;
              // TODO

              case 'SxRule':
                break;
              // TODO

              case 'SxFilt':
                break;
              // TODO

              case 'SxItm':
                break;
              // TODO

              case 'SxDXF':
                break;
              // TODO

              /* Scenario Manager */

              case 'ScenMan':
                break;

              /* Data Consolidation */

              case 'DCon':
                break;

              /* Watched Cell */

              case 'CellWatch':
                break;

              /* Print Settings */

              case 'PrintRowCol':
                break;

              case 'PrintGrid':
                break;

              case 'PrintSize':
                break;

              case 'XCT':
                break;

              case 'CRN':
                break;

              case 'Scl':
                {//console.log("Zoom Level:", val[0]/val[1],val);
                }
                break;

              case 'SheetExt':
                {
                  /* empty */
                }
                break;

              case 'SheetExtOptional':
                {
                  /* empty */
                }
                break;

              /* VBA */

              case 'ObNoMacros':
                {
                  /* empty */
                }
                break;

              case 'ObProj':
                {
                  /* empty */
                }
                break;

              case 'CodeName':
                {
                  if (!cur_sheet) Workbook.WBProps.CodeName = val || "ThisWorkbook";else wsprops.CodeName = val || wsprops.name;
                }
                break;

              case 'GUIDTypeLib':
                {
                  /* empty */
                }
                break;

              case 'WOpt':
                break;
              // TODO: WTF?

              case 'PhoneticInfo':
                break;

              case 'OleObjectSize':
                break;

              /* Differential Formatting */

              case 'DXF':
              case 'DXFN':
              case 'DXFN12':
              case 'DXFN12List':
              case 'DXFN12NoCB':
                break;

              /* Data Validation */

              case 'Dv':
              case 'DVal':
                break;

              /* Data Series */

              case 'BRAI':
              case 'Series':
              case 'SeriesText':
                break;

              /* Data Connection */

              case 'DConn':
                break;

              case 'DbOrParamQry':
                break;

              case 'DBQueryExt':
                break;

              case 'OleDbConn':
                break;

              case 'ExtString':
                break;

              /* Formatting */

              case 'IFmtRecord':
                break;

              case 'CondFmt':
              case 'CF':
              case 'CF12':
              case 'CFEx':
                break;

              /* Explicitly Ignored */

              case 'Excel9File':
                break;

              case 'Units':
                break;

              case 'InterfaceHdr':
              case 'Mms':
              case 'InterfaceEnd':
              case 'DSF':
                break;

              case 'BuiltInFnGroupCount':
                /* 2.4.30 0x0E or 0x10 but excel 2011 generates 0x11? */
                break;

              /* View Stuff */

              case 'Window1':
              case 'HideObj':
              case 'GridSet':
              case 'Guts':
              case 'UserBView':
              case 'UserSViewBegin':
              case 'UserSViewEnd':
                break;

              case 'Pane':
                break;

              default:
                switch (R.n) {
                  /* nested */

                  /* Chart */
                  case 'Dat':
                  case 'Begin':
                  case 'End':
                  case 'StartBlock':
                  case 'EndBlock':
                  case 'Frame':
                  case 'Area':
                  case 'Axis':
                  case 'AxisLine':
                  case 'Tick':
                    break;

                  case 'AxesUsed':
                  case 'CrtLayout12':
                  case 'CrtLayout12A':
                  case 'CrtLink':
                  case 'CrtLine':
                  case 'CrtMlFrt':
                  case 'CrtMlFrtContinue':
                    break;

                  case 'LineFormat':
                  case 'AreaFormat':
                  case 'Chart':
                  case 'Chart3d':
                  case 'Chart3DBarShape':
                  case 'ChartFormat':
                  case 'ChartFrtInfo':
                    break;

                  case 'PlotArea':
                  case 'PlotGrowth':
                    break;

                  case 'SeriesList':
                  case 'SerParent':
                  case 'SerAuxTrend':
                    break;

                  case 'DataFormat':
                  case 'SerToCrt':
                  case 'FontX':
                    break;

                  case 'CatSerRange':
                  case 'AxcExt':
                  case 'SerFmt':
                    break;

                  case 'ShtProps':
                    break;

                  case 'DefaultText':
                  case 'Text':
                  case 'CatLab':
                    break;

                  case 'DataLabExtContents':
                    break;

                  case 'Legend':
                  case 'LegendException':
                    break;

                  case 'Pie':
                  case 'Scatter':
                    break;

                  case 'PieFormat':
                  case 'MarkerFormat':
                    break;

                  case 'StartObject':
                  case 'EndObject':
                    break;

                  case 'AlRuns':
                  case 'ObjectLink':
                    break;

                  case 'SIIndex':
                    break;

                  case 'AttachedLabel':
                  case 'YMult':
                    break;

                  /* Chart Group */

                  case 'Line':
                  case 'Bar':
                    break;

                  case 'Surf':
                    break;

                  /* Axis Group */

                  case 'AxisParent':
                    break;

                  case 'Pos':
                    break;

                  case 'ValueRange':
                    break;

                  /* Pivot Chart */

                  case 'SXViewEx9':
                    break;
                  // TODO

                  case 'SXViewLink':
                    break;

                  case 'PivotChartBits':
                    break;

                  case 'SBaseRef':
                    break;

                  case 'TextPropsStream':
                    break;

                  /* Chart Misc */

                  case 'LnExt':
                    break;

                  case 'MkrExt':
                    break;

                  case 'CrtCoopt':
                    break;

                  /* Query Table */

                  case 'Qsi':
                  case 'Qsif':
                  case 'Qsir':
                  case 'QsiSXTag':
                    break;

                  case 'TxtQry':
                    break;

                  /* Filter */

                  case 'FilterMode':
                    break;

                  case 'AutoFilter':
                  case 'AutoFilterInfo':
                    break;

                  case 'AutoFilter12':
                    break;

                  case 'DropDownObjIds':
                    break;

                  case 'Sort':
                    break;

                  case 'SortData':
                    break;

                  /* Drawing */

                  case 'ShapePropsStream':
                    break;

                  case 'MsoDrawing':
                  case 'MsoDrawingGroup':
                  case 'MsoDrawingSelection':
                    break;

                  /* Pub Stuff */

                  case 'WebPub':
                  case 'AutoWebPub':
                    break;

                  /* Print Stuff */

                  case 'HeaderFooter':
                  case 'HFPicture':
                  case 'PLV':
                  case 'HorizontalPageBreaks':
                  case 'VerticalPageBreaks':
                    break;

                  /* Behavioral */

                  case 'Backup':
                  case 'CompressPictures':
                  case 'Compat12':
                    break;

                  /* Should not Happen */

                  case 'Continue':
                  case 'ContinueFrt12':
                    break;

                  /* Future Records */

                  case 'FrtFontList':
                  case 'FrtWrapper':
                    break;

                  default:
                    switch (R.n) {
                      /* nested */

                      /* BIFF5 records */
                      case 'TabIdConf':
                      case 'Radar':
                      case 'RadarArea':
                      case 'DropBar':
                      case 'Intl':
                      case 'CoordList':
                      case 'SerAuxErrBar':
                        break;

                      /* BIFF2-4 records */

                      case 'BIFF2FONTCLR':
                      case 'BIFF2FMTCNT':
                      case 'BIFF2FONTXTRA':
                        break;

                      case 'BIFF2XF':
                      case 'BIFF3XF':
                      case 'BIFF4XF':
                        break;

                      case 'BIFF4FMTCNT':
                      case 'BIFF2ROW':
                      case 'BIFF2WINDOW2':
                        break;

                      /* Miscellaneous */

                      case 'SCENARIO':
                      case 'DConBin':
                      case 'PicF':
                      case 'DataLabExt':
                      case 'Lel':
                      case 'BopPop':
                      case 'BopPopCustom':
                      case 'RealTimeData':
                      case 'Name':
                        break;

                      case 'LHNGraph':
                      case 'FnGroupName':
                      case 'AddMenu':
                      case 'LPr':
                        break;

                      case 'ListObj':
                      case 'ListField':
                        break;

                      case 'RRSort':
                        break;

                      case 'BigName':
                        break;

                      case 'ToolbarHdr':
                      case 'ToolbarEnd':
                        break;

                      case 'DDEObjName':
                        break;

                      case 'FRTArchId$':
                        break;

                      default:
                        if (options.WTF) throw 'Unrecognized Record ' + R.n;
                    }

                }

            }

        }
      } else blob.l += length;
    }

    wb.SheetNames = keys(Directory).sort(function (a, b) {
      return Number(a) - Number(b);
    }).map(function (x) {
      return Directory[x].name;
    });
    if (!options.bookSheets) wb.Sheets = Sheets;
    if (wb.Sheets) FilterDatabases.forEach(function (r, i) {
      wb.Sheets[wb.SheetNames[i]]['!autofilter'] = r;
    });
    wb.Preamble = Preamble;
    wb.Strings = sst;
    wb.SSF = SSF.get_table();
    if (opts.enc) wb.Encryption = opts.enc;
    if (themes) wb.Themes = themes;
    wb.Metadata = {};
    if (country !== undefined) wb.Metadata.Country = country;
    if (supbooks.names.length > 0) Workbook.Names = supbooks.names;
    wb.Workbook = Workbook;
    return wb;
  }
  /* TODO: split props*/


  var PSCLSID = {
    SI: "e0859ff2f94f6810ab9108002b27b3d9",
    DSI: "02d5cdd59c2e1b10939708002b2cf9ae",
    UDI: "05d5cdd59c2e1b10939708002b2cf9ae"
  };

  function parse_xls_props(cfb, props, o) {
    /* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */
    var DSI = CFB.find(cfb, '!DocumentSummaryInformation');
    if (DSI && DSI.size > 0) try {
      var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);

      for (var d in DocSummary) props[d] = DocSummary[d];
    } catch (e) {
      if (o.WTF) throw e;
      /* empty */
    }
    /* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/

    var SI = CFB.find(cfb, '!SummaryInformation');
    if (SI && SI.size > 0) try {
      var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);

      for (var s in Summary) if (props[s] == null) props[s] = Summary[s];
    } catch (e) {
      if (o.WTF) throw e;
      /* empty */
    }

    if (props.HeadingPairs && props.TitlesOfParts) {
      load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);
      delete props.HeadingPairs;
      delete props.TitlesOfParts;
    }
  }

  function write_xls_props(wb, cfb) {
    var DSEntries = [],
        SEntries = [],
        CEntries = [];
    var i = 0,
        Keys;

    if (wb.Props) {
      Keys = keys(wb.Props); // $FlowIgnore

      for (i = 0; i < Keys.length; ++i) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([Keys[i], wb.Props[Keys[i]]]);
    }

    if (wb.Custprops) {
      Keys = keys(wb.Custprops); // $FlowIgnore

      for (i = 0; i < Keys.length; ++i) if (!Object.prototype.hasOwnProperty.call(wb.Props || {}, Keys[i])) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([Keys[i], wb.Custprops[Keys[i]]]);
    }

    var CEntries2 = [];

    for (i = 0; i < CEntries.length; ++i) {
      if (XLSPSSkip.indexOf(CEntries[i][0]) > -1) continue;
      if (CEntries[i][1] == null) continue;
      CEntries2.push(CEntries[i]);
    }

    if (SEntries.length) CFB.utils.cfb_add(cfb, "/\u0005SummaryInformation", write_PropertySetStream(SEntries, PSCLSID.SI, SummaryRE, SummaryPIDSI));
    if (DSEntries.length || CEntries2.length) CFB.utils.cfb_add(cfb, "/\u0005DocumentSummaryInformation", write_PropertySetStream(DSEntries, PSCLSID.DSI, DocSummaryRE, DocSummaryPIDDSI, CEntries2.length ? CEntries2 : null, PSCLSID.UDI));
  }

  function parse_xlscfb(cfb, options) {
    if (!options) options = {};
    fix_read_opts(options);
    reset_cp();
    if (options.codepage) set_ansi(options.codepage);
    var CompObj, WB;

    if (cfb.FullPaths) {
      if (CFB.find(cfb, '/encryption')) throw new Error("File is password-protected");
      CompObj = CFB.find(cfb, '!CompObj');
      WB = CFB.find(cfb, '/Workbook') || CFB.find(cfb, '/Book');
    } else {
      switch (options.type) {
        case 'base64':
          cfb = s2a(Base64.decode(cfb));
          break;

        case 'binary':
          cfb = s2a(cfb);
          break;

        case 'buffer':
          break;

        case 'array':
          if (!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb);
          break;
      }

      prep_blob(cfb, 0);
      WB = {
        content: cfb
      };
    }

    var WorkbookP;

    var _data;

    if (CompObj) parse_compobj(CompObj);
    if (options.bookProps && !options.bookSheets) WorkbookP = {};else {
      var T = has_buf ? 'buffer' : 'array';
      if (WB && WB.content) WorkbookP = parse_workbook(WB.content, options);
      /* Quattro Pro 7-8 */
      else if ((_data = CFB.find(cfb, 'PerfectOffice_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
        /* Quattro Pro 9 */
        else if ((_data = CFB.find(cfb, 'NativeContent_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));else throw new Error("Cannot find Workbook stream");
      if (options.bookVBA && cfb.FullPaths && CFB.find(cfb, '/_VBA_PROJECT_CUR/VBA/dir')) WorkbookP.vbaraw = make_vba_xls(cfb);
    }
    var props = {};
    if (cfb.FullPaths) parse_xls_props(cfb, props, options);
    WorkbookP.Props = WorkbookP.Custprops = props;
    /* TODO: split up properties */

    if (options.bookFiles) WorkbookP.cfb = cfb;
    /*WorkbookP.CompObjP = CompObjP; // TODO: storage? */

    return WorkbookP;
  }

  function write_xlscfb(wb, opts) {
    var o = opts || {};
    var cfb = CFB.utils.cfb_new({
      root: "R"
    });
    var wbpath = "/Workbook";

    switch (o.bookType || "xls") {
      case "xls":
        o.bookType = "biff8";

      /* falls through */

      case "xla":
        if (!o.bookType) o.bookType = "xla";

      /* falls through */

      case "biff8":
        wbpath = "/Workbook";
        o.biff = 8;
        break;

      case "biff5":
        wbpath = "/Book";
        o.biff = 5;
        break;

      default:
        throw new Error("invalid type " + o.bookType + " for XLS CFB");
    }

    CFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o));
    if (o.biff == 8 && (wb.Props || wb.Custprops)) write_xls_props(wb, cfb); // TODO: SI, DSI, CO

    if (o.biff == 8 && wb.vbaraw) fill_vba_xls(cfb, CFB.read(wb.vbaraw, {
      type: typeof wb.vbaraw == "string" ? "binary" : "buffer"
    }));
    return cfb;
  }
  /* [MS-XLSB] 2.3 Record Enumeration */


  var XLSBRecordEnum = {
    0x0000: {
      n: "BrtRowHdr",
      f: parse_BrtRowHdr
    },
    0x0001: {
      n: "BrtCellBlank",
      f: parse_BrtCellBlank
    },
    0x0002: {
      n: "BrtCellRk",
      f: parse_BrtCellRk
    },
    0x0003: {
      n: "BrtCellError",
      f: parse_BrtCellError
    },
    0x0004: {
      n: "BrtCellBool",
      f: parse_BrtCellBool
    },
    0x0005: {
      n: "BrtCellReal",
      f: parse_BrtCellReal
    },
    0x0006: {
      n: "BrtCellSt",
      f: parse_BrtCellSt
    },
    0x0007: {
      n: "BrtCellIsst",
      f: parse_BrtCellIsst
    },
    0x0008: {
      n: "BrtFmlaString",
      f: parse_BrtFmlaString
    },
    0x0009: {
      n: "BrtFmlaNum",
      f: parse_BrtFmlaNum
    },
    0x000A: {
      n: "BrtFmlaBool",
      f: parse_BrtFmlaBool
    },
    0x000B: {
      n: "BrtFmlaError",
      f: parse_BrtFmlaError
    },
    0x0010: {
      n: "BrtFRTArchID$",
      f: parse_BrtFRTArchID$
    },
    0x0013: {
      n: "BrtSSTItem",
      f: parse_RichStr
    },
    0x0014: {
      n: "BrtPCDIMissing"
    },
    0x0015: {
      n: "BrtPCDINumber"
    },
    0x0016: {
      n: "BrtPCDIBoolean"
    },
    0x0017: {
      n: "BrtPCDIError"
    },
    0x0018: {
      n: "BrtPCDIString"
    },
    0x0019: {
      n: "BrtPCDIDatetime"
    },
    0x001A: {
      n: "BrtPCDIIndex"
    },
    0x001B: {
      n: "BrtPCDIAMissing"
    },
    0x001C: {
      n: "BrtPCDIANumber"
    },
    0x001D: {
      n: "BrtPCDIABoolean"
    },
    0x001E: {
      n: "BrtPCDIAError"
    },
    0x001F: {
      n: "BrtPCDIAString"
    },
    0x0020: {
      n: "BrtPCDIADatetime"
    },
    0x0021: {
      n: "BrtPCRRecord"
    },
    0x0022: {
      n: "BrtPCRRecordDt"
    },
    0x0023: {
      n: "BrtFRTBegin"
    },
    0x0024: {
      n: "BrtFRTEnd"
    },
    0x0025: {
      n: "BrtACBegin"
    },
    0x0026: {
      n: "BrtACEnd"
    },
    0x0027: {
      n: "BrtName",
      f: parse_BrtName
    },
    0x0028: {
      n: "BrtIndexRowBlock"
    },
    0x002A: {
      n: "BrtIndexBlock"
    },
    0x002B: {
      n: "BrtFont",
      f: parse_BrtFont
    },
    0x002C: {
      n: "BrtFmt",
      f: parse_BrtFmt
    },
    0x002D: {
      n: "BrtFill",
      f: parse_BrtFill
    },
    0x002E: {
      n: "BrtBorder",
      f: parse_BrtBorder
    },
    0x002F: {
      n: "BrtXF",
      f: parse_BrtXF
    },
    0x0030: {
      n: "BrtStyle"
    },
    0x0031: {
      n: "BrtCellMeta"
    },
    0x0032: {
      n: "BrtValueMeta"
    },
    0x0033: {
      n: "BrtMdb"
    },
    0x0034: {
      n: "BrtBeginFmd"
    },
    0x0035: {
      n: "BrtEndFmd"
    },
    0x0036: {
      n: "BrtBeginMdx"
    },
    0x0037: {
      n: "BrtEndMdx"
    },
    0x0038: {
      n: "BrtBeginMdxTuple"
    },
    0x0039: {
      n: "BrtEndMdxTuple"
    },
    0x003A: {
      n: "BrtMdxMbrIstr"
    },
    0x003B: {
      n: "BrtStr"
    },
    0x003C: {
      n: "BrtColInfo",
      f: parse_ColInfo
    },
    0x003E: {
      n: "BrtCellRString"
    },
    0x003F: {
      n: "BrtCalcChainItem$",
      f: parse_BrtCalcChainItem$
    },
    0x0040: {
      n: "BrtDVal",
      f: parse_BrtDVal
    },
    0x0041: {
      n: "BrtSxvcellNum"
    },
    0x0042: {
      n: "BrtSxvcellStr"
    },
    0x0043: {
      n: "BrtSxvcellBool"
    },
    0x0044: {
      n: "BrtSxvcellErr"
    },
    0x0045: {
      n: "BrtSxvcellDate"
    },
    0x0046: {
      n: "BrtSxvcellNil"
    },
    0x0080: {
      n: "BrtFileVersion"
    },
    0x0081: {
      n: "BrtBeginSheet"
    },
    0x0082: {
      n: "BrtEndSheet"
    },
    0x0083: {
      n: "BrtBeginBook",
      f: parsenoop,
      p: 0
    },
    0x0084: {
      n: "BrtEndBook"
    },
    0x0085: {
      n: "BrtBeginWsViews"
    },
    0x0086: {
      n: "BrtEndWsViews"
    },
    0x0087: {
      n: "BrtBeginBookViews"
    },
    0x0088: {
      n: "BrtEndBookViews"
    },
    0x0089: {
      n: "BrtBeginWsView",
      f: parse_BrtBeginWsView
    },
    0x008A: {
      n: "BrtEndWsView"
    },
    0x008B: {
      n: "BrtBeginCsViews"
    },
    0x008C: {
      n: "BrtEndCsViews"
    },
    0x008D: {
      n: "BrtBeginCsView"
    },
    0x008E: {
      n: "BrtEndCsView"
    },
    0x008F: {
      n: "BrtBeginBundleShs"
    },
    0x0090: {
      n: "BrtEndBundleShs"
    },
    0x0091: {
      n: "BrtBeginSheetData"
    },
    0x0092: {
      n: "BrtEndSheetData"
    },
    0x0093: {
      n: "BrtWsProp",
      f: parse_BrtWsProp
    },
    0x0094: {
      n: "BrtWsDim",
      f: parse_BrtWsDim,
      p: 16
    },
    0x0097: {
      n: "BrtPane",
      f: parse_BrtPane
    },
    0x0098: {
      n: "BrtSel"
    },
    0x0099: {
      n: "BrtWbProp",
      f: parse_BrtWbProp
    },
    0x009A: {
      n: "BrtWbFactoid"
    },
    0x009B: {
      n: "BrtFileRecover"
    },
    0x009C: {
      n: "BrtBundleSh",
      f: parse_BrtBundleSh
    },
    0x009D: {
      n: "BrtCalcProp"
    },
    0x009E: {
      n: "BrtBookView"
    },
    0x009F: {
      n: "BrtBeginSst",
      f: parse_BrtBeginSst
    },
    0x00A0: {
      n: "BrtEndSst"
    },
    0x00A1: {
      n: "BrtBeginAFilter",
      f: parse_UncheckedRfX
    },
    0x00A2: {
      n: "BrtEndAFilter"
    },
    0x00A3: {
      n: "BrtBeginFilterColumn"
    },
    0x00A4: {
      n: "BrtEndFilterColumn"
    },
    0x00A5: {
      n: "BrtBeginFilters"
    },
    0x00A6: {
      n: "BrtEndFilters"
    },
    0x00A7: {
      n: "BrtFilter"
    },
    0x00A8: {
      n: "BrtColorFilter"
    },
    0x00A9: {
      n: "BrtIconFilter"
    },
    0x00AA: {
      n: "BrtTop10Filter"
    },
    0x00AB: {
      n: "BrtDynamicFilter"
    },
    0x00AC: {
      n: "BrtBeginCustomFilters"
    },
    0x00AD: {
      n: "BrtEndCustomFilters"
    },
    0x00AE: {
      n: "BrtCustomFilter"
    },
    0x00AF: {
      n: "BrtAFilterDateGroupItem"
    },
    0x00B0: {
      n: "BrtMergeCell",
      f: parse_BrtMergeCell
    },
    0x00B1: {
      n: "BrtBeginMergeCells"
    },
    0x00B2: {
      n: "BrtEndMergeCells"
    },
    0x00B3: {
      n: "BrtBeginPivotCacheDef"
    },
    0x00B4: {
      n: "BrtEndPivotCacheDef"
    },
    0x00B5: {
      n: "BrtBeginPCDFields"
    },
    0x00B6: {
      n: "BrtEndPCDFields"
    },
    0x00B7: {
      n: "BrtBeginPCDField"
    },
    0x00B8: {
      n: "BrtEndPCDField"
    },
    0x00B9: {
      n: "BrtBeginPCDSource"
    },
    0x00BA: {
      n: "BrtEndPCDSource"
    },
    0x00BB: {
      n: "BrtBeginPCDSRange"
    },
    0x00BC: {
      n: "BrtEndPCDSRange"
    },
    0x00BD: {
      n: "BrtBeginPCDFAtbl"
    },
    0x00BE: {
      n: "BrtEndPCDFAtbl"
    },
    0x00BF: {
      n: "BrtBeginPCDIRun"
    },
    0x00C0: {
      n: "BrtEndPCDIRun"
    },
    0x00C1: {
      n: "BrtBeginPivotCacheRecords"
    },
    0x00C2: {
      n: "BrtEndPivotCacheRecords"
    },
    0x00C3: {
      n: "BrtBeginPCDHierarchies"
    },
    0x00C4: {
      n: "BrtEndPCDHierarchies"
    },
    0x00C5: {
      n: "BrtBeginPCDHierarchy"
    },
    0x00C6: {
      n: "BrtEndPCDHierarchy"
    },
    0x00C7: {
      n: "BrtBeginPCDHFieldsUsage"
    },
    0x00C8: {
      n: "BrtEndPCDHFieldsUsage"
    },
    0x00C9: {
      n: "BrtBeginExtConnection"
    },
    0x00CA: {
      n: "BrtEndExtConnection"
    },
    0x00CB: {
      n: "BrtBeginECDbProps"
    },
    0x00CC: {
      n: "BrtEndECDbProps"
    },
    0x00CD: {
      n: "BrtBeginECOlapProps"
    },
    0x00CE: {
      n: "BrtEndECOlapProps"
    },
    0x00CF: {
      n: "BrtBeginPCDSConsol"
    },
    0x00D0: {
      n: "BrtEndPCDSConsol"
    },
    0x00D1: {
      n: "BrtBeginPCDSCPages"
    },
    0x00D2: {
      n: "BrtEndPCDSCPages"
    },
    0x00D3: {
      n: "BrtBeginPCDSCPage"
    },
    0x00D4: {
      n: "BrtEndPCDSCPage"
    },
    0x00D5: {
      n: "BrtBeginPCDSCPItem"
    },
    0x00D6: {
      n: "BrtEndPCDSCPItem"
    },
    0x00D7: {
      n: "BrtBeginPCDSCSets"
    },
    0x00D8: {
      n: "BrtEndPCDSCSets"
    },
    0x00D9: {
      n: "BrtBeginPCDSCSet"
    },
    0x00DA: {
      n: "BrtEndPCDSCSet"
    },
    0x00DB: {
      n: "BrtBeginPCDFGroup"
    },
    0x00DC: {
      n: "BrtEndPCDFGroup"
    },
    0x00DD: {
      n: "BrtBeginPCDFGItems"
    },
    0x00DE: {
      n: "BrtEndPCDFGItems"
    },
    0x00DF: {
      n: "BrtBeginPCDFGRange"
    },
    0x00E0: {
      n: "BrtEndPCDFGRange"
    },
    0x00E1: {
      n: "BrtBeginPCDFGDiscrete"
    },
    0x00E2: {
      n: "BrtEndPCDFGDiscrete"
    },
    0x00E3: {
      n: "BrtBeginPCDSDTupleCache"
    },
    0x00E4: {
      n: "BrtEndPCDSDTupleCache"
    },
    0x00E5: {
      n: "BrtBeginPCDSDTCEntries"
    },
    0x00E6: {
      n: "BrtEndPCDSDTCEntries"
    },
    0x00E7: {
      n: "BrtBeginPCDSDTCEMembers"
    },
    0x00E8: {
      n: "BrtEndPCDSDTCEMembers"
    },
    0x00E9: {
      n: "BrtBeginPCDSDTCEMember"
    },
    0x00EA: {
      n: "BrtEndPCDSDTCEMember"
    },
    0x00EB: {
      n: "BrtBeginPCDSDTCQueries"
    },
    0x00EC: {
      n: "BrtEndPCDSDTCQueries"
    },
    0x00ED: {
      n: "BrtBeginPCDSDTCQuery"
    },
    0x00EE: {
      n: "BrtEndPCDSDTCQuery"
    },
    0x00EF: {
      n: "BrtBeginPCDSDTCSets"
    },
    0x00F0: {
      n: "BrtEndPCDSDTCSets"
    },
    0x00F1: {
      n: "BrtBeginPCDSDTCSet"
    },
    0x00F2: {
      n: "BrtEndPCDSDTCSet"
    },
    0x00F3: {
      n: "BrtBeginPCDCalcItems"
    },
    0x00F4: {
      n: "BrtEndPCDCalcItems"
    },
    0x00F5: {
      n: "BrtBeginPCDCalcItem"
    },
    0x00F6: {
      n: "BrtEndPCDCalcItem"
    },
    0x00F7: {
      n: "BrtBeginPRule"
    },
    0x00F8: {
      n: "BrtEndPRule"
    },
    0x00F9: {
      n: "BrtBeginPRFilters"
    },
    0x00FA: {
      n: "BrtEndPRFilters"
    },
    0x00FB: {
      n: "BrtBeginPRFilter"
    },
    0x00FC: {
      n: "BrtEndPRFilter"
    },
    0x00FD: {
      n: "BrtBeginPNames"
    },
    0x00FE: {
      n: "BrtEndPNames"
    },
    0x00FF: {
      n: "BrtBeginPName"
    },
    0x0100: {
      n: "BrtEndPName"
    },
    0x0101: {
      n: "BrtBeginPNPairs"
    },
    0x0102: {
      n: "BrtEndPNPairs"
    },
    0x0103: {
      n: "BrtBeginPNPair"
    },
    0x0104: {
      n: "BrtEndPNPair"
    },
    0x0105: {
      n: "BrtBeginECWebProps"
    },
    0x0106: {
      n: "BrtEndECWebProps"
    },
    0x0107: {
      n: "BrtBeginEcWpTables"
    },
    0x0108: {
      n: "BrtEndECWPTables"
    },
    0x0109: {
      n: "BrtBeginECParams"
    },
    0x010A: {
      n: "BrtEndECParams"
    },
    0x010B: {
      n: "BrtBeginECParam"
    },
    0x010C: {
      n: "BrtEndECParam"
    },
    0x010D: {
      n: "BrtBeginPCDKPIs"
    },
    0x010E: {
      n: "BrtEndPCDKPIs"
    },
    0x010F: {
      n: "BrtBeginPCDKPI"
    },
    0x0110: {
      n: "BrtEndPCDKPI"
    },
    0x0111: {
      n: "BrtBeginDims"
    },
    0x0112: {
      n: "BrtEndDims"
    },
    0x0113: {
      n: "BrtBeginDim"
    },
    0x0114: {
      n: "BrtEndDim"
    },
    0x0115: {
      n: "BrtIndexPartEnd"
    },
    0x0116: {
      n: "BrtBeginStyleSheet"
    },
    0x0117: {
      n: "BrtEndStyleSheet"
    },
    0x0118: {
      n: "BrtBeginSXView"
    },
    0x0119: {
      n: "BrtEndSXVI"
    },
    0x011A: {
      n: "BrtBeginSXVI"
    },
    0x011B: {
      n: "BrtBeginSXVIs"
    },
    0x011C: {
      n: "BrtEndSXVIs"
    },
    0x011D: {
      n: "BrtBeginSXVD"
    },
    0x011E: {
      n: "BrtEndSXVD"
    },
    0x011F: {
      n: "BrtBeginSXVDs"
    },
    0x0120: {
      n: "BrtEndSXVDs"
    },
    0x0121: {
      n: "BrtBeginSXPI"
    },
    0x0122: {
      n: "BrtEndSXPI"
    },
    0x0123: {
      n: "BrtBeginSXPIs"
    },
    0x0124: {
      n: "BrtEndSXPIs"
    },
    0x0125: {
      n: "BrtBeginSXDI"
    },
    0x0126: {
      n: "BrtEndSXDI"
    },
    0x0127: {
      n: "BrtBeginSXDIs"
    },
    0x0128: {
      n: "BrtEndSXDIs"
    },
    0x0129: {
      n: "BrtBeginSXLI"
    },
    0x012A: {
      n: "BrtEndSXLI"
    },
    0x012B: {
      n: "BrtBeginSXLIRws"
    },
    0x012C: {
      n: "BrtEndSXLIRws"
    },
    0x012D: {
      n: "BrtBeginSXLICols"
    },
    0x012E: {
      n: "BrtEndSXLICols"
    },
    0x012F: {
      n: "BrtBeginSXFormat"
    },
    0x0130: {
      n: "BrtEndSXFormat"
    },
    0x0131: {
      n: "BrtBeginSXFormats"
    },
    0x0132: {
      n: "BrtEndSxFormats"
    },
    0x0133: {
      n: "BrtBeginSxSelect"
    },
    0x0134: {
      n: "BrtEndSxSelect"
    },
    0x0135: {
      n: "BrtBeginISXVDRws"
    },
    0x0136: {
      n: "BrtEndISXVDRws"
    },
    0x0137: {
      n: "BrtBeginISXVDCols"
    },
    0x0138: {
      n: "BrtEndISXVDCols"
    },
    0x0139: {
      n: "BrtEndSXLocation"
    },
    0x013A: {
      n: "BrtBeginSXLocation"
    },
    0x013B: {
      n: "BrtEndSXView"
    },
    0x013C: {
      n: "BrtBeginSXTHs"
    },
    0x013D: {
      n: "BrtEndSXTHs"
    },
    0x013E: {
      n: "BrtBeginSXTH"
    },
    0x013F: {
      n: "BrtEndSXTH"
    },
    0x0140: {
      n: "BrtBeginISXTHRws"
    },
    0x0141: {
      n: "BrtEndISXTHRws"
    },
    0x0142: {
      n: "BrtBeginISXTHCols"
    },
    0x0143: {
      n: "BrtEndISXTHCols"
    },
    0x0144: {
      n: "BrtBeginSXTDMPS"
    },
    0x0145: {
      n: "BrtEndSXTDMPs"
    },
    0x0146: {
      n: "BrtBeginSXTDMP"
    },
    0x0147: {
      n: "BrtEndSXTDMP"
    },
    0x0148: {
      n: "BrtBeginSXTHItems"
    },
    0x0149: {
      n: "BrtEndSXTHItems"
    },
    0x014A: {
      n: "BrtBeginSXTHItem"
    },
    0x014B: {
      n: "BrtEndSXTHItem"
    },
    0x014C: {
      n: "BrtBeginMetadata"
    },
    0x014D: {
      n: "BrtEndMetadata"
    },
    0x014E: {
      n: "BrtBeginEsmdtinfo"
    },
    0x014F: {
      n: "BrtMdtinfo"
    },
    0x0150: {
      n: "BrtEndEsmdtinfo"
    },
    0x0151: {
      n: "BrtBeginEsmdb"
    },
    0x0152: {
      n: "BrtEndEsmdb"
    },
    0x0153: {
      n: "BrtBeginEsfmd"
    },
    0x0154: {
      n: "BrtEndEsfmd"
    },
    0x0155: {
      n: "BrtBeginSingleCells"
    },
    0x0156: {
      n: "BrtEndSingleCells"
    },
    0x0157: {
      n: "BrtBeginList"
    },
    0x0158: {
      n: "BrtEndList"
    },
    0x0159: {
      n: "BrtBeginListCols"
    },
    0x015A: {
      n: "BrtEndListCols"
    },
    0x015B: {
      n: "BrtBeginListCol"
    },
    0x015C: {
      n: "BrtEndListCol"
    },
    0x015D: {
      n: "BrtBeginListXmlCPr"
    },
    0x015E: {
      n: "BrtEndListXmlCPr"
    },
    0x015F: {
      n: "BrtListCCFmla"
    },
    0x0160: {
      n: "BrtListTrFmla"
    },
    0x0161: {
      n: "BrtBeginExternals"
    },
    0x0162: {
      n: "BrtEndExternals"
    },
    0x0163: {
      n: "BrtSupBookSrc",
      f: parse_RelID
    },
    0x0165: {
      n: "BrtSupSelf"
    },
    0x0166: {
      n: "BrtSupSame"
    },
    0x0167: {
      n: "BrtSupTabs"
    },
    0x0168: {
      n: "BrtBeginSupBook"
    },
    0x0169: {
      n: "BrtPlaceholderName"
    },
    0x016A: {
      n: "BrtExternSheet",
      f: parse_ExternSheet
    },
    0x016B: {
      n: "BrtExternTableStart"
    },
    0x016C: {
      n: "BrtExternTableEnd"
    },
    0x016E: {
      n: "BrtExternRowHdr"
    },
    0x016F: {
      n: "BrtExternCellBlank"
    },
    0x0170: {
      n: "BrtExternCellReal"
    },
    0x0171: {
      n: "BrtExternCellBool"
    },
    0x0172: {
      n: "BrtExternCellError"
    },
    0x0173: {
      n: "BrtExternCellString"
    },
    0x0174: {
      n: "BrtBeginEsmdx"
    },
    0x0175: {
      n: "BrtEndEsmdx"
    },
    0x0176: {
      n: "BrtBeginMdxSet"
    },
    0x0177: {
      n: "BrtEndMdxSet"
    },
    0x0178: {
      n: "BrtBeginMdxMbrProp"
    },
    0x0179: {
      n: "BrtEndMdxMbrProp"
    },
    0x017A: {
      n: "BrtBeginMdxKPI"
    },
    0x017B: {
      n: "BrtEndMdxKPI"
    },
    0x017C: {
      n: "BrtBeginEsstr"
    },
    0x017D: {
      n: "BrtEndEsstr"
    },
    0x017E: {
      n: "BrtBeginPRFItem"
    },
    0x017F: {
      n: "BrtEndPRFItem"
    },
    0x0180: {
      n: "BrtBeginPivotCacheIDs"
    },
    0x0181: {
      n: "BrtEndPivotCacheIDs"
    },
    0x0182: {
      n: "BrtBeginPivotCacheID"
    },
    0x0183: {
      n: "BrtEndPivotCacheID"
    },
    0x0184: {
      n: "BrtBeginISXVIs"
    },
    0x0185: {
      n: "BrtEndISXVIs"
    },
    0x0186: {
      n: "BrtBeginColInfos"
    },
    0x0187: {
      n: "BrtEndColInfos"
    },
    0x0188: {
      n: "BrtBeginRwBrk"
    },
    0x0189: {
      n: "BrtEndRwBrk"
    },
    0x018A: {
      n: "BrtBeginColBrk"
    },
    0x018B: {
      n: "BrtEndColBrk"
    },
    0x018C: {
      n: "BrtBrk"
    },
    0x018D: {
      n: "BrtUserBookView"
    },
    0x018E: {
      n: "BrtInfo"
    },
    0x018F: {
      n: "BrtCUsr"
    },
    0x0190: {
      n: "BrtUsr"
    },
    0x0191: {
      n: "BrtBeginUsers"
    },
    0x0193: {
      n: "BrtEOF"
    },
    0x0194: {
      n: "BrtUCR"
    },
    0x0195: {
      n: "BrtRRInsDel"
    },
    0x0196: {
      n: "BrtRREndInsDel"
    },
    0x0197: {
      n: "BrtRRMove"
    },
    0x0198: {
      n: "BrtRREndMove"
    },
    0x0199: {
      n: "BrtRRChgCell"
    },
    0x019A: {
      n: "BrtRREndChgCell"
    },
    0x019B: {
      n: "BrtRRHeader"
    },
    0x019C: {
      n: "BrtRRUserView"
    },
    0x019D: {
      n: "BrtRRRenSheet"
    },
    0x019E: {
      n: "BrtRRInsertSh"
    },
    0x019F: {
      n: "BrtRRDefName"
    },
    0x01A0: {
      n: "BrtRRNote"
    },
    0x01A1: {
      n: "BrtRRConflict"
    },
    0x01A2: {
      n: "BrtRRTQSIF"
    },
    0x01A3: {
      n: "BrtRRFormat"
    },
    0x01A4: {
      n: "BrtRREndFormat"
    },
    0x01A5: {
      n: "BrtRRAutoFmt"
    },
    0x01A6: {
      n: "BrtBeginUserShViews"
    },
    0x01A7: {
      n: "BrtBeginUserShView"
    },
    0x01A8: {
      n: "BrtEndUserShView"
    },
    0x01A9: {
      n: "BrtEndUserShViews"
    },
    0x01AA: {
      n: "BrtArrFmla",
      f: parse_BrtArrFmla
    },
    0x01AB: {
      n: "BrtShrFmla",
      f: parse_BrtShrFmla
    },
    0x01AC: {
      n: "BrtTable"
    },
    0x01AD: {
      n: "BrtBeginExtConnections"
    },
    0x01AE: {
      n: "BrtEndExtConnections"
    },
    0x01AF: {
      n: "BrtBeginPCDCalcMems"
    },
    0x01B0: {
      n: "BrtEndPCDCalcMems"
    },
    0x01B1: {
      n: "BrtBeginPCDCalcMem"
    },
    0x01B2: {
      n: "BrtEndPCDCalcMem"
    },
    0x01B3: {
      n: "BrtBeginPCDHGLevels"
    },
    0x01B4: {
      n: "BrtEndPCDHGLevels"
    },
    0x01B5: {
      n: "BrtBeginPCDHGLevel"
    },
    0x01B6: {
      n: "BrtEndPCDHGLevel"
    },
    0x01B7: {
      n: "BrtBeginPCDHGLGroups"
    },
    0x01B8: {
      n: "BrtEndPCDHGLGroups"
    },
    0x01B9: {
      n: "BrtBeginPCDHGLGroup"
    },
    0x01BA: {
      n: "BrtEndPCDHGLGroup"
    },
    0x01BB: {
      n: "BrtBeginPCDHGLGMembers"
    },
    0x01BC: {
      n: "BrtEndPCDHGLGMembers"
    },
    0x01BD: {
      n: "BrtBeginPCDHGLGMember"
    },
    0x01BE: {
      n: "BrtEndPCDHGLGMember"
    },
    0x01BF: {
      n: "BrtBeginQSI"
    },
    0x01C0: {
      n: "BrtEndQSI"
    },
    0x01C1: {
      n: "BrtBeginQSIR"
    },
    0x01C2: {
      n: "BrtEndQSIR"
    },
    0x01C3: {
      n: "BrtBeginDeletedNames"
    },
    0x01C4: {
      n: "BrtEndDeletedNames"
    },
    0x01C5: {
      n: "BrtBeginDeletedName"
    },
    0x01C6: {
      n: "BrtEndDeletedName"
    },
    0x01C7: {
      n: "BrtBeginQSIFs"
    },
    0x01C8: {
      n: "BrtEndQSIFs"
    },
    0x01C9: {
      n: "BrtBeginQSIF"
    },
    0x01CA: {
      n: "BrtEndQSIF"
    },
    0x01CB: {
      n: "BrtBeginAutoSortScope"
    },
    0x01CC: {
      n: "BrtEndAutoSortScope"
    },
    0x01CD: {
      n: "BrtBeginConditionalFormatting"
    },
    0x01CE: {
      n: "BrtEndConditionalFormatting"
    },
    0x01CF: {
      n: "BrtBeginCFRule"
    },
    0x01D0: {
      n: "BrtEndCFRule"
    },
    0x01D1: {
      n: "BrtBeginIconSet"
    },
    0x01D2: {
      n: "BrtEndIconSet"
    },
    0x01D3: {
      n: "BrtBeginDatabar"
    },
    0x01D4: {
      n: "BrtEndDatabar"
    },
    0x01D5: {
      n: "BrtBeginColorScale"
    },
    0x01D6: {
      n: "BrtEndColorScale"
    },
    0x01D7: {
      n: "BrtCFVO"
    },
    0x01D8: {
      n: "BrtExternValueMeta"
    },
    0x01D9: {
      n: "BrtBeginColorPalette"
    },
    0x01DA: {
      n: "BrtEndColorPalette"
    },
    0x01DB: {
      n: "BrtIndexedColor"
    },
    0x01DC: {
      n: "BrtMargins",
      f: parse_BrtMargins
    },
    0x01DD: {
      n: "BrtPrintOptions"
    },
    0x01DE: {
      n: "BrtPageSetup"
    },
    0x01DF: {
      n: "BrtBeginHeaderFooter"
    },
    0x01E0: {
      n: "BrtEndHeaderFooter"
    },
    0x01E1: {
      n: "BrtBeginSXCrtFormat"
    },
    0x01E2: {
      n: "BrtEndSXCrtFormat"
    },
    0x01E3: {
      n: "BrtBeginSXCrtFormats"
    },
    0x01E4: {
      n: "BrtEndSXCrtFormats"
    },
    0x01E5: {
      n: "BrtWsFmtInfo",
      f: parse_BrtWsFmtInfo
    },
    0x01E6: {
      n: "BrtBeginMgs"
    },
    0x01E7: {
      n: "BrtEndMGs"
    },
    0x01E8: {
      n: "BrtBeginMGMaps"
    },
    0x01E9: {
      n: "BrtEndMGMaps"
    },
    0x01EA: {
      n: "BrtBeginMG"
    },
    0x01EB: {
      n: "BrtEndMG"
    },
    0x01EC: {
      n: "BrtBeginMap"
    },
    0x01ED: {
      n: "BrtEndMap"
    },
    0x01EE: {
      n: "BrtHLink",
      f: parse_BrtHLink
    },
    0x01EF: {
      n: "BrtBeginDCon"
    },
    0x01F0: {
      n: "BrtEndDCon"
    },
    0x01F1: {
      n: "BrtBeginDRefs"
    },
    0x01F2: {
      n: "BrtEndDRefs"
    },
    0x01F3: {
      n: "BrtDRef"
    },
    0x01F4: {
      n: "BrtBeginScenMan"
    },
    0x01F5: {
      n: "BrtEndScenMan"
    },
    0x01F6: {
      n: "BrtBeginSct"
    },
    0x01F7: {
      n: "BrtEndSct"
    },
    0x01F8: {
      n: "BrtSlc"
    },
    0x01F9: {
      n: "BrtBeginDXFs"
    },
    0x01FA: {
      n: "BrtEndDXFs"
    },
    0x01FB: {
      n: "BrtDXF"
    },
    0x01FC: {
      n: "BrtBeginTableStyles"
    },
    0x01FD: {
      n: "BrtEndTableStyles"
    },
    0x01FE: {
      n: "BrtBeginTableStyle"
    },
    0x01FF: {
      n: "BrtEndTableStyle"
    },
    0x0200: {
      n: "BrtTableStyleElement"
    },
    0x0201: {
      n: "BrtTableStyleClient"
    },
    0x0202: {
      n: "BrtBeginVolDeps"
    },
    0x0203: {
      n: "BrtEndVolDeps"
    },
    0x0204: {
      n: "BrtBeginVolType"
    },
    0x0205: {
      n: "BrtEndVolType"
    },
    0x0206: {
      n: "BrtBeginVolMain"
    },
    0x0207: {
      n: "BrtEndVolMain"
    },
    0x0208: {
      n: "BrtBeginVolTopic"
    },
    0x0209: {
      n: "BrtEndVolTopic"
    },
    0x020A: {
      n: "BrtVolSubtopic"
    },
    0x020B: {
      n: "BrtVolRef"
    },
    0x020C: {
      n: "BrtVolNum"
    },
    0x020D: {
      n: "BrtVolErr"
    },
    0x020E: {
      n: "BrtVolStr"
    },
    0x020F: {
      n: "BrtVolBool"
    },
    0x0210: {
      n: "BrtBeginCalcChain$"
    },
    0x0211: {
      n: "BrtEndCalcChain$"
    },
    0x0212: {
      n: "BrtBeginSortState"
    },
    0x0213: {
      n: "BrtEndSortState"
    },
    0x0214: {
      n: "BrtBeginSortCond"
    },
    0x0215: {
      n: "BrtEndSortCond"
    },
    0x0216: {
      n: "BrtBookProtection"
    },
    0x0217: {
      n: "BrtSheetProtection"
    },
    0x0218: {
      n: "BrtRangeProtection"
    },
    0x0219: {
      n: "BrtPhoneticInfo"
    },
    0x021A: {
      n: "BrtBeginECTxtWiz"
    },
    0x021B: {
      n: "BrtEndECTxtWiz"
    },
    0x021C: {
      n: "BrtBeginECTWFldInfoLst"
    },
    0x021D: {
      n: "BrtEndECTWFldInfoLst"
    },
    0x021E: {
      n: "BrtBeginECTwFldInfo"
    },
    0x0224: {
      n: "BrtFileSharing"
    },
    0x0225: {
      n: "BrtOleSize"
    },
    0x0226: {
      n: "BrtDrawing",
      f: parse_RelID
    },
    0x0227: {
      n: "BrtLegacyDrawing"
    },
    0x0228: {
      n: "BrtLegacyDrawingHF"
    },
    0x0229: {
      n: "BrtWebOpt"
    },
    0x022A: {
      n: "BrtBeginWebPubItems"
    },
    0x022B: {
      n: "BrtEndWebPubItems"
    },
    0x022C: {
      n: "BrtBeginWebPubItem"
    },
    0x022D: {
      n: "BrtEndWebPubItem"
    },
    0x022E: {
      n: "BrtBeginSXCondFmt"
    },
    0x022F: {
      n: "BrtEndSXCondFmt"
    },
    0x0230: {
      n: "BrtBeginSXCondFmts"
    },
    0x0231: {
      n: "BrtEndSXCondFmts"
    },
    0x0232: {
      n: "BrtBkHim"
    },
    0x0234: {
      n: "BrtColor"
    },
    0x0235: {
      n: "BrtBeginIndexedColors"
    },
    0x0236: {
      n: "BrtEndIndexedColors"
    },
    0x0239: {
      n: "BrtBeginMRUColors"
    },
    0x023A: {
      n: "BrtEndMRUColors"
    },
    0x023C: {
      n: "BrtMRUColor"
    },
    0x023D: {
      n: "BrtBeginDVals"
    },
    0x023E: {
      n: "BrtEndDVals"
    },
    0x0241: {
      n: "BrtSupNameStart"
    },
    0x0242: {
      n: "BrtSupNameValueStart"
    },
    0x0243: {
      n: "BrtSupNameValueEnd"
    },
    0x0244: {
      n: "BrtSupNameNum"
    },
    0x0245: {
      n: "BrtSupNameErr"
    },
    0x0246: {
      n: "BrtSupNameSt"
    },
    0x0247: {
      n: "BrtSupNameNil"
    },
    0x0248: {
      n: "BrtSupNameBool"
    },
    0x0249: {
      n: "BrtSupNameFmla"
    },
    0x024A: {
      n: "BrtSupNameBits"
    },
    0x024B: {
      n: "BrtSupNameEnd"
    },
    0x024C: {
      n: "BrtEndSupBook"
    },
    0x024D: {
      n: "BrtCellSmartTagProperty"
    },
    0x024E: {
      n: "BrtBeginCellSmartTag"
    },
    0x024F: {
      n: "BrtEndCellSmartTag"
    },
    0x0250: {
      n: "BrtBeginCellSmartTags"
    },
    0x0251: {
      n: "BrtEndCellSmartTags"
    },
    0x0252: {
      n: "BrtBeginSmartTags"
    },
    0x0253: {
      n: "BrtEndSmartTags"
    },
    0x0254: {
      n: "BrtSmartTagType"
    },
    0x0255: {
      n: "BrtBeginSmartTagTypes"
    },
    0x0256: {
      n: "BrtEndSmartTagTypes"
    },
    0x0257: {
      n: "BrtBeginSXFilters"
    },
    0x0258: {
      n: "BrtEndSXFilters"
    },
    0x0259: {
      n: "BrtBeginSXFILTER"
    },
    0x025A: {
      n: "BrtEndSXFilter"
    },
    0x025B: {
      n: "BrtBeginFills"
    },
    0x025C: {
      n: "BrtEndFills"
    },
    0x025D: {
      n: "BrtBeginCellWatches"
    },
    0x025E: {
      n: "BrtEndCellWatches"
    },
    0x025F: {
      n: "BrtCellWatch"
    },
    0x0260: {
      n: "BrtBeginCRErrs"
    },
    0x0261: {
      n: "BrtEndCRErrs"
    },
    0x0262: {
      n: "BrtCrashRecErr"
    },
    0x0263: {
      n: "BrtBeginFonts"
    },
    0x0264: {
      n: "BrtEndFonts"
    },
    0x0265: {
      n: "BrtBeginBorders"
    },
    0x0266: {
      n: "BrtEndBorders"
    },
    0x0267: {
      n: "BrtBeginFmts"
    },
    0x0268: {
      n: "BrtEndFmts"
    },
    0x0269: {
      n: "BrtBeginCellXFs"
    },
    0x026A: {
      n: "BrtEndCellXFs"
    },
    0x026B: {
      n: "BrtBeginStyles"
    },
    0x026C: {
      n: "BrtEndStyles"
    },
    0x0271: {
      n: "BrtBigName"
    },
    0x0272: {
      n: "BrtBeginCellStyleXFs"
    },
    0x0273: {
      n: "BrtEndCellStyleXFs"
    },
    0x0274: {
      n: "BrtBeginComments"
    },
    0x0275: {
      n: "BrtEndComments"
    },
    0x0276: {
      n: "BrtBeginCommentAuthors"
    },
    0x0277: {
      n: "BrtEndCommentAuthors"
    },
    0x0278: {
      n: "BrtCommentAuthor",
      f: parse_BrtCommentAuthor
    },
    0x0279: {
      n: "BrtBeginCommentList"
    },
    0x027A: {
      n: "BrtEndCommentList"
    },
    0x027B: {
      n: "BrtBeginComment",
      f: parse_BrtBeginComment
    },
    0x027C: {
      n: "BrtEndComment"
    },
    0x027D: {
      n: "BrtCommentText",
      f: parse_BrtCommentText
    },
    0x027E: {
      n: "BrtBeginOleObjects"
    },
    0x027F: {
      n: "BrtOleObject"
    },
    0x0280: {
      n: "BrtEndOleObjects"
    },
    0x0281: {
      n: "BrtBeginSxrules"
    },
    0x0282: {
      n: "BrtEndSxRules"
    },
    0x0283: {
      n: "BrtBeginActiveXControls"
    },
    0x0284: {
      n: "BrtActiveX"
    },
    0x0285: {
      n: "BrtEndActiveXControls"
    },
    0x0286: {
      n: "BrtBeginPCDSDTCEMembersSortBy"
    },
    0x0288: {
      n: "BrtBeginCellIgnoreECs"
    },
    0x0289: {
      n: "BrtCellIgnoreEC"
    },
    0x028A: {
      n: "BrtEndCellIgnoreECs"
    },
    0x028B: {
      n: "BrtCsProp",
      f: parse_BrtCsProp
    },
    0x028C: {
      n: "BrtCsPageSetup"
    },
    0x028D: {
      n: "BrtBeginUserCsViews"
    },
    0x028E: {
      n: "BrtEndUserCsViews"
    },
    0x028F: {
      n: "BrtBeginUserCsView"
    },
    0x0290: {
      n: "BrtEndUserCsView"
    },
    0x0291: {
      n: "BrtBeginPcdSFCIEntries"
    },
    0x0292: {
      n: "BrtEndPCDSFCIEntries"
    },
    0x0293: {
      n: "BrtPCDSFCIEntry"
    },
    0x0294: {
      n: "BrtBeginListParts"
    },
    0x0295: {
      n: "BrtListPart"
    },
    0x0296: {
      n: "BrtEndListParts"
    },
    0x0297: {
      n: "BrtSheetCalcProp"
    },
    0x0298: {
      n: "BrtBeginFnGroup"
    },
    0x0299: {
      n: "BrtFnGroup"
    },
    0x029A: {
      n: "BrtEndFnGroup"
    },
    0x029B: {
      n: "BrtSupAddin"
    },
    0x029C: {
      n: "BrtSXTDMPOrder"
    },
    0x029D: {
      n: "BrtCsProtection"
    },
    0x029F: {
      n: "BrtBeginWsSortMap"
    },
    0x02A0: {
      n: "BrtEndWsSortMap"
    },
    0x02A1: {
      n: "BrtBeginRRSort"
    },
    0x02A2: {
      n: "BrtEndRRSort"
    },
    0x02A3: {
      n: "BrtRRSortItem"
    },
    0x02A4: {
      n: "BrtFileSharingIso"
    },
    0x02A5: {
      n: "BrtBookProtectionIso"
    },
    0x02A6: {
      n: "BrtSheetProtectionIso"
    },
    0x02A7: {
      n: "BrtCsProtectionIso"
    },
    0x02A8: {
      n: "BrtRangeProtectionIso"
    },
    0x02A9: {
      n: "BrtDValList"
    },
    0x0400: {
      n: "BrtRwDescent"
    },
    0x0401: {
      n: "BrtKnownFonts"
    },
    0x0402: {
      n: "BrtBeginSXTupleSet"
    },
    0x0403: {
      n: "BrtEndSXTupleSet"
    },
    0x0404: {
      n: "BrtBeginSXTupleSetHeader"
    },
    0x0405: {
      n: "BrtEndSXTupleSetHeader"
    },
    0x0406: {
      n: "BrtSXTupleSetHeaderItem"
    },
    0x0407: {
      n: "BrtBeginSXTupleSetData"
    },
    0x0408: {
      n: "BrtEndSXTupleSetData"
    },
    0x0409: {
      n: "BrtBeginSXTupleSetRow"
    },
    0x040A: {
      n: "BrtEndSXTupleSetRow"
    },
    0x040B: {
      n: "BrtSXTupleSetRowItem"
    },
    0x040C: {
      n: "BrtNameExt"
    },
    0x040D: {
      n: "BrtPCDH14"
    },
    0x040E: {
      n: "BrtBeginPCDCalcMem14"
    },
    0x040F: {
      n: "BrtEndPCDCalcMem14"
    },
    0x0410: {
      n: "BrtSXTH14"
    },
    0x0411: {
      n: "BrtBeginSparklineGroup"
    },
    0x0412: {
      n: "BrtEndSparklineGroup"
    },
    0x0413: {
      n: "BrtSparkline"
    },
    0x0414: {
      n: "BrtSXDI14"
    },
    0x0415: {
      n: "BrtWsFmtInfoEx14"
    },
    0x0416: {
      n: "BrtBeginConditionalFormatting14"
    },
    0x0417: {
      n: "BrtEndConditionalFormatting14"
    },
    0x0418: {
      n: "BrtBeginCFRule14"
    },
    0x0419: {
      n: "BrtEndCFRule14"
    },
    0x041A: {
      n: "BrtCFVO14"
    },
    0x041B: {
      n: "BrtBeginDatabar14"
    },
    0x041C: {
      n: "BrtBeginIconSet14"
    },
    0x041D: {
      n: "BrtDVal14",
      f: parse_BrtDVal14
    },
    0x041E: {
      n: "BrtBeginDVals14"
    },
    0x041F: {
      n: "BrtColor14"
    },
    0x0420: {
      n: "BrtBeginSparklines"
    },
    0x0421: {
      n: "BrtEndSparklines"
    },
    0x0422: {
      n: "BrtBeginSparklineGroups"
    },
    0x0423: {
      n: "BrtEndSparklineGroups"
    },
    0x0425: {
      n: "BrtSXVD14"
    },
    0x0426: {
      n: "BrtBeginSXView14"
    },
    0x0427: {
      n: "BrtEndSXView14"
    },
    0x0428: {
      n: "BrtBeginSXView16"
    },
    0x0429: {
      n: "BrtEndSXView16"
    },
    0x042A: {
      n: "BrtBeginPCD14"
    },
    0x042B: {
      n: "BrtEndPCD14"
    },
    0x042C: {
      n: "BrtBeginExtConn14"
    },
    0x042D: {
      n: "BrtEndExtConn14"
    },
    0x042E: {
      n: "BrtBeginSlicerCacheIDs"
    },
    0x042F: {
      n: "BrtEndSlicerCacheIDs"
    },
    0x0430: {
      n: "BrtBeginSlicerCacheID"
    },
    0x0431: {
      n: "BrtEndSlicerCacheID"
    },
    0x0433: {
      n: "BrtBeginSlicerCache"
    },
    0x0434: {
      n: "BrtEndSlicerCache"
    },
    0x0435: {
      n: "BrtBeginSlicerCacheDef"
    },
    0x0436: {
      n: "BrtEndSlicerCacheDef"
    },
    0x0437: {
      n: "BrtBeginSlicersEx"
    },
    0x0438: {
      n: "BrtEndSlicersEx"
    },
    0x0439: {
      n: "BrtBeginSlicerEx"
    },
    0x043A: {
      n: "BrtEndSlicerEx"
    },
    0x043B: {
      n: "BrtBeginSlicer"
    },
    0x043C: {
      n: "BrtEndSlicer"
    },
    0x043D: {
      n: "BrtSlicerCachePivotTables"
    },
    0x043E: {
      n: "BrtBeginSlicerCacheOlapImpl"
    },
    0x043F: {
      n: "BrtEndSlicerCacheOlapImpl"
    },
    0x0440: {
      n: "BrtBeginSlicerCacheLevelsData"
    },
    0x0441: {
      n: "BrtEndSlicerCacheLevelsData"
    },
    0x0442: {
      n: "BrtBeginSlicerCacheLevelData"
    },
    0x0443: {
      n: "BrtEndSlicerCacheLevelData"
    },
    0x0444: {
      n: "BrtBeginSlicerCacheSiRanges"
    },
    0x0445: {
      n: "BrtEndSlicerCacheSiRanges"
    },
    0x0446: {
      n: "BrtBeginSlicerCacheSiRange"
    },
    0x0447: {
      n: "BrtEndSlicerCacheSiRange"
    },
    0x0448: {
      n: "BrtSlicerCacheOlapItem"
    },
    0x0449: {
      n: "BrtBeginSlicerCacheSelections"
    },
    0x044A: {
      n: "BrtSlicerCacheSelection"
    },
    0x044B: {
      n: "BrtEndSlicerCacheSelections"
    },
    0x044C: {
      n: "BrtBeginSlicerCacheNative"
    },
    0x044D: {
      n: "BrtEndSlicerCacheNative"
    },
    0x044E: {
      n: "BrtSlicerCacheNativeItem"
    },
    0x044F: {
      n: "BrtRangeProtection14"
    },
    0x0450: {
      n: "BrtRangeProtectionIso14"
    },
    0x0451: {
      n: "BrtCellIgnoreEC14"
    },
    0x0457: {
      n: "BrtList14"
    },
    0x0458: {
      n: "BrtCFIcon"
    },
    0x0459: {
      n: "BrtBeginSlicerCachesPivotCacheIDs"
    },
    0x045A: {
      n: "BrtEndSlicerCachesPivotCacheIDs"
    },
    0x045B: {
      n: "BrtBeginSlicers"
    },
    0x045C: {
      n: "BrtEndSlicers"
    },
    0x045D: {
      n: "BrtWbProp14"
    },
    0x045E: {
      n: "BrtBeginSXEdit"
    },
    0x045F: {
      n: "BrtEndSXEdit"
    },
    0x0460: {
      n: "BrtBeginSXEdits"
    },
    0x0461: {
      n: "BrtEndSXEdits"
    },
    0x0462: {
      n: "BrtBeginSXChange"
    },
    0x0463: {
      n: "BrtEndSXChange"
    },
    0x0464: {
      n: "BrtBeginSXChanges"
    },
    0x0465: {
      n: "BrtEndSXChanges"
    },
    0x0466: {
      n: "BrtSXTupleItems"
    },
    0x0468: {
      n: "BrtBeginSlicerStyle"
    },
    0x0469: {
      n: "BrtEndSlicerStyle"
    },
    0x046A: {
      n: "BrtSlicerStyleElement"
    },
    0x046B: {
      n: "BrtBeginStyleSheetExt14"
    },
    0x046C: {
      n: "BrtEndStyleSheetExt14"
    },
    0x046D: {
      n: "BrtBeginSlicerCachesPivotCacheID"
    },
    0x046E: {
      n: "BrtEndSlicerCachesPivotCacheID"
    },
    0x046F: {
      n: "BrtBeginConditionalFormattings"
    },
    0x0470: {
      n: "BrtEndConditionalFormattings"
    },
    0x0471: {
      n: "BrtBeginPCDCalcMemExt"
    },
    0x0472: {
      n: "BrtEndPCDCalcMemExt"
    },
    0x0473: {
      n: "BrtBeginPCDCalcMemsExt"
    },
    0x0474: {
      n: "BrtEndPCDCalcMemsExt"
    },
    0x0475: {
      n: "BrtPCDField14"
    },
    0x0476: {
      n: "BrtBeginSlicerStyles"
    },
    0x0477: {
      n: "BrtEndSlicerStyles"
    },
    0x0478: {
      n: "BrtBeginSlicerStyleElements"
    },
    0x0479: {
      n: "BrtEndSlicerStyleElements"
    },
    0x047A: {
      n: "BrtCFRuleExt"
    },
    0x047B: {
      n: "BrtBeginSXCondFmt14"
    },
    0x047C: {
      n: "BrtEndSXCondFmt14"
    },
    0x047D: {
      n: "BrtBeginSXCondFmts14"
    },
    0x047E: {
      n: "BrtEndSXCondFmts14"
    },
    0x0480: {
      n: "BrtBeginSortCond14"
    },
    0x0481: {
      n: "BrtEndSortCond14"
    },
    0x0482: {
      n: "BrtEndDVals14"
    },
    0x0483: {
      n: "BrtEndIconSet14"
    },
    0x0484: {
      n: "BrtEndDatabar14"
    },
    0x0485: {
      n: "BrtBeginColorScale14"
    },
    0x0486: {
      n: "BrtEndColorScale14"
    },
    0x0487: {
      n: "BrtBeginSxrules14"
    },
    0x0488: {
      n: "BrtEndSxrules14"
    },
    0x0489: {
      n: "BrtBeginPRule14"
    },
    0x048A: {
      n: "BrtEndPRule14"
    },
    0x048B: {
      n: "BrtBeginPRFilters14"
    },
    0x048C: {
      n: "BrtEndPRFilters14"
    },
    0x048D: {
      n: "BrtBeginPRFilter14"
    },
    0x048E: {
      n: "BrtEndPRFilter14"
    },
    0x048F: {
      n: "BrtBeginPRFItem14"
    },
    0x0490: {
      n: "BrtEndPRFItem14"
    },
    0x0491: {
      n: "BrtBeginCellIgnoreECs14"
    },
    0x0492: {
      n: "BrtEndCellIgnoreECs14"
    },
    0x0493: {
      n: "BrtDxf14"
    },
    0x0494: {
      n: "BrtBeginDxF14s"
    },
    0x0495: {
      n: "BrtEndDxf14s"
    },
    0x0499: {
      n: "BrtFilter14"
    },
    0x049A: {
      n: "BrtBeginCustomFilters14"
    },
    0x049C: {
      n: "BrtCustomFilter14"
    },
    0x049D: {
      n: "BrtIconFilter14"
    },
    0x049E: {
      n: "BrtPivotCacheConnectionName"
    },
    0x0800: {
      n: "BrtBeginDecoupledPivotCacheIDs"
    },
    0x0801: {
      n: "BrtEndDecoupledPivotCacheIDs"
    },
    0x0802: {
      n: "BrtDecoupledPivotCacheID"
    },
    0x0803: {
      n: "BrtBeginPivotTableRefs"
    },
    0x0804: {
      n: "BrtEndPivotTableRefs"
    },
    0x0805: {
      n: "BrtPivotTableRef"
    },
    0x0806: {
      n: "BrtSlicerCacheBookPivotTables"
    },
    0x0807: {
      n: "BrtBeginSxvcells"
    },
    0x0808: {
      n: "BrtEndSxvcells"
    },
    0x0809: {
      n: "BrtBeginSxRow"
    },
    0x080A: {
      n: "BrtEndSxRow"
    },
    0x080C: {
      n: "BrtPcdCalcMem15"
    },
    0x0813: {
      n: "BrtQsi15"
    },
    0x0814: {
      n: "BrtBeginWebExtensions"
    },
    0x0815: {
      n: "BrtEndWebExtensions"
    },
    0x0816: {
      n: "BrtWebExtension"
    },
    0x0817: {
      n: "BrtAbsPath15"
    },
    0x0818: {
      n: "BrtBeginPivotTableUISettings"
    },
    0x0819: {
      n: "BrtEndPivotTableUISettings"
    },
    0x081B: {
      n: "BrtTableSlicerCacheIDs"
    },
    0x081C: {
      n: "BrtTableSlicerCacheID"
    },
    0x081D: {
      n: "BrtBeginTableSlicerCache"
    },
    0x081E: {
      n: "BrtEndTableSlicerCache"
    },
    0x081F: {
      n: "BrtSxFilter15"
    },
    0x0820: {
      n: "BrtBeginTimelineCachePivotCacheIDs"
    },
    0x0821: {
      n: "BrtEndTimelineCachePivotCacheIDs"
    },
    0x0822: {
      n: "BrtTimelineCachePivotCacheID"
    },
    0x0823: {
      n: "BrtBeginTimelineCacheIDs"
    },
    0x0824: {
      n: "BrtEndTimelineCacheIDs"
    },
    0x0825: {
      n: "BrtBeginTimelineCacheID"
    },
    0x0826: {
      n: "BrtEndTimelineCacheID"
    },
    0x0827: {
      n: "BrtBeginTimelinesEx"
    },
    0x0828: {
      n: "BrtEndTimelinesEx"
    },
    0x0829: {
      n: "BrtBeginTimelineEx"
    },
    0x082A: {
      n: "BrtEndTimelineEx"
    },
    0x082B: {
      n: "BrtWorkBookPr15"
    },
    0x082C: {
      n: "BrtPCDH15"
    },
    0x082D: {
      n: "BrtBeginTimelineStyle"
    },
    0x082E: {
      n: "BrtEndTimelineStyle"
    },
    0x082F: {
      n: "BrtTimelineStyleElement"
    },
    0x0830: {
      n: "BrtBeginTimelineStylesheetExt15"
    },
    0x0831: {
      n: "BrtEndTimelineStylesheetExt15"
    },
    0x0832: {
      n: "BrtBeginTimelineStyles"
    },
    0x0833: {
      n: "BrtEndTimelineStyles"
    },
    0x0834: {
      n: "BrtBeginTimelineStyleElements"
    },
    0x0835: {
      n: "BrtEndTimelineStyleElements"
    },
    0x0836: {
      n: "BrtDxf15"
    },
    0x0837: {
      n: "BrtBeginDxfs15"
    },
    0x0838: {
      n: "brtEndDxfs15"
    },
    0x0839: {
      n: "BrtSlicerCacheHideItemsWithNoData"
    },
    0x083A: {
      n: "BrtBeginItemUniqueNames"
    },
    0x083B: {
      n: "BrtEndItemUniqueNames"
    },
    0x083C: {
      n: "BrtItemUniqueName"
    },
    0x083D: {
      n: "BrtBeginExtConn15"
    },
    0x083E: {
      n: "BrtEndExtConn15"
    },
    0x083F: {
      n: "BrtBeginOledbPr15"
    },
    0x0840: {
      n: "BrtEndOledbPr15"
    },
    0x0841: {
      n: "BrtBeginDataFeedPr15"
    },
    0x0842: {
      n: "BrtEndDataFeedPr15"
    },
    0x0843: {
      n: "BrtTextPr15"
    },
    0x0844: {
      n: "BrtRangePr15"
    },
    0x0845: {
      n: "BrtDbCommand15"
    },
    0x0846: {
      n: "BrtBeginDbTables15"
    },
    0x0847: {
      n: "BrtEndDbTables15"
    },
    0x0848: {
      n: "BrtDbTable15"
    },
    0x0849: {
      n: "BrtBeginDataModel"
    },
    0x084A: {
      n: "BrtEndDataModel"
    },
    0x084B: {
      n: "BrtBeginModelTables"
    },
    0x084C: {
      n: "BrtEndModelTables"
    },
    0x084D: {
      n: "BrtModelTable"
    },
    0x084E: {
      n: "BrtBeginModelRelationships"
    },
    0x084F: {
      n: "BrtEndModelRelationships"
    },
    0x0850: {
      n: "BrtModelRelationship"
    },
    0x0851: {
      n: "BrtBeginECTxtWiz15"
    },
    0x0852: {
      n: "BrtEndECTxtWiz15"
    },
    0x0853: {
      n: "BrtBeginECTWFldInfoLst15"
    },
    0x0854: {
      n: "BrtEndECTWFldInfoLst15"
    },
    0x0855: {
      n: "BrtBeginECTWFldInfo15"
    },
    0x0856: {
      n: "BrtFieldListActiveItem"
    },
    0x0857: {
      n: "BrtPivotCacheIdVersion"
    },
    0x0858: {
      n: "BrtSXDI15"
    },
    0x0859: {
      n: "BrtBeginModelTimeGroupings"
    },
    0x085A: {
      n: "BrtEndModelTimeGroupings"
    },
    0x085B: {
      n: "BrtBeginModelTimeGrouping"
    },
    0x085C: {
      n: "BrtEndModelTimeGrouping"
    },
    0x085D: {
      n: "BrtModelTimeGroupingCalcCol"
    },
    0x0C00: {
      n: "BrtUid"
    },
    0x0C01: {
      n: "BrtRevisionPtr"
    },
    0x13e7: {
      n: "BrtBeginCalcFeatures"
    },
    0x13e8: {
      n: "BrtEndCalcFeatures"
    },
    0x13e9: {
      n: "BrtCalcFeature"
    },
    0xFFFF: {
      n: ""
    }
  };
  var XLSBRE = evert_key(XLSBRecordEnum, 'n');
  /* [MS-XLS] 2.3 Record Enumeration */

  var XLSRecordEnum = {
    0x0003: {
      n: "BIFF2NUM",
      f: parse_BIFF2NUM
    },
    0x0004: {
      n: "BIFF2STR",
      f: parse_BIFF2STR
    },
    0x0006: {
      n: "Formula",
      f: parse_Formula
    },
    0x0009: {
      n: 'BOF',
      f: parse_BOF
    },
    0x000a: {
      n: 'EOF',
      f: parsenoop2
    },
    0x000c: {
      n: "CalcCount",
      f: parseuint16
    },
    0x000d: {
      n: "CalcMode",
      f: parseuint16
    },
    0x000e: {
      n: "CalcPrecision",
      f: parsebool
    },
    0x000f: {
      n: "CalcRefMode",
      f: parsebool
    },
    0x0010: {
      n: "CalcDelta",
      f: parse_Xnum
    },
    0x0011: {
      n: "CalcIter",
      f: parsebool
    },
    0x0012: {
      n: "Protect",
      f: parsebool
    },
    0x0013: {
      n: "Password",
      f: parseuint16
    },
    0x0014: {
      n: "Header",
      f: parse_XLHeaderFooter
    },
    0x0015: {
      n: "Footer",
      f: parse_XLHeaderFooter
    },
    0x0017: {
      n: "ExternSheet",
      f: parse_ExternSheet
    },
    0x0018: {
      n: "Lbl",
      f: parse_Lbl
    },
    0x0019: {
      n: "WinProtect",
      f: parsebool
    },
    0x001a: {
      n: "VerticalPageBreaks"
    },
    0x001b: {
      n: "HorizontalPageBreaks"
    },
    0x001c: {
      n: "Note",
      f: parse_Note
    },
    0x001d: {
      n: "Selection"
    },
    0x0022: {
      n: "Date1904",
      f: parsebool
    },
    0x0023: {
      n: "ExternName",
      f: parse_ExternName
    },
    0x0024: {
      n: "COLWIDTH"
    },
    0x0026: {
      n: "LeftMargin",
      f: parse_Xnum
    },
    0x0027: {
      n: "RightMargin",
      f: parse_Xnum
    },
    0x0028: {
      n: "TopMargin",
      f: parse_Xnum
    },
    0x0029: {
      n: "BottomMargin",
      f: parse_Xnum
    },
    0x002a: {
      n: "PrintRowCol",
      f: parsebool
    },
    0x002b: {
      n: "PrintGrid",
      f: parsebool
    },
    0x002f: {
      n: "FilePass",
      f: parse_FilePass
    },
    0x0031: {
      n: "Font",
      f: parse_Font
    },
    0x0033: {
      n: "PrintSize",
      f: parseuint16
    },
    0x003c: {
      n: "Continue"
    },
    0x003d: {
      n: "Window1",
      f: parse_Window1
    },
    0x0040: {
      n: "Backup",
      f: parsebool
    },
    0x0041: {
      n: "Pane",
      f: parse_Pane
    },
    0x0042: {
      n: 'CodePage',
      f: parseuint16
    },
    0x004d: {
      n: "Pls"
    },
    0x0050: {
      n: "DCon"
    },
    0x0051: {
      n: "DConRef"
    },
    0x0052: {
      n: "DConName"
    },
    0x0055: {
      n: "DefColWidth",
      f: parseuint16
    },
    0x0059: {
      n: "XCT"
    },
    0x005a: {
      n: "CRN"
    },
    0x005b: {
      n: "FileSharing"
    },
    0x005c: {
      n: 'WriteAccess',
      f: parse_WriteAccess
    },
    0x005d: {
      n: "Obj",
      f: parse_Obj
    },
    0x005e: {
      n: "Uncalced"
    },
    0x005f: {
      n: "CalcSaveRecalc",
      f: parsebool
    },
    0x0060: {
      n: "Template"
    },
    0x0061: {
      n: "Intl"
    },
    0x0063: {
      n: "ObjProtect",
      f: parsebool
    },
    0x007d: {
      n: "ColInfo",
      f: parse_ColInfo
    },
    0x0080: {
      n: "Guts",
      f: parse_Guts
    },
    0x0081: {
      n: "WsBool",
      f: parse_WsBool
    },
    0x0082: {
      n: "GridSet",
      f: parseuint16
    },
    0x0083: {
      n: "HCenter",
      f: parsebool
    },
    0x0084: {
      n: "VCenter",
      f: parsebool
    },
    0x0085: {
      n: 'BoundSheet8',
      f: parse_BoundSheet8
    },
    0x0086: {
      n: "WriteProtect"
    },
    0x008c: {
      n: "Country",
      f: parse_Country
    },
    0x008d: {
      n: "HideObj",
      f: parseuint16
    },
    0x0090: {
      n: "Sort"
    },
    0x0092: {
      n: "Palette",
      f: parse_Palette
    },
    0x0097: {
      n: "Sync"
    },
    0x0098: {
      n: "LPr"
    },
    0x0099: {
      n: "DxGCol"
    },
    0x009a: {
      n: "FnGroupName"
    },
    0x009b: {
      n: "FilterMode"
    },
    0x009c: {
      n: "BuiltInFnGroupCount",
      f: parseuint16
    },
    0x009d: {
      n: "AutoFilterInfo"
    },
    0x009e: {
      n: "AutoFilter"
    },
    0x00a0: {
      n: "Scl",
      f: parse_Scl
    },
    0x00a1: {
      n: "Setup",
      f: parse_Setup
    },
    0x00ae: {
      n: "ScenMan"
    },
    0x00af: {
      n: "SCENARIO"
    },
    0x00b0: {
      n: "SxView"
    },
    0x00b1: {
      n: "Sxvd"
    },
    0x00b2: {
      n: "SXVI"
    },
    0x00b4: {
      n: "SxIvd"
    },
    0x00b5: {
      n: "SXLI"
    },
    0x00b6: {
      n: "SXPI"
    },
    0x00b8: {
      n: "DocRoute"
    },
    0x00b9: {
      n: "RecipName"
    },
    0x00bd: {
      n: "MulRk",
      f: parse_MulRk
    },
    0x00be: {
      n: "MulBlank",
      f: parse_MulBlank
    },
    0x00c1: {
      n: 'Mms',
      f: parsenoop2
    },
    0x00c5: {
      n: "SXDI"
    },
    0x00c6: {
      n: "SXDB"
    },
    0x00c7: {
      n: "SXFDB"
    },
    0x00c8: {
      n: "SXDBB"
    },
    0x00c9: {
      n: "SXNum"
    },
    0x00ca: {
      n: "SxBool",
      f: parsebool
    },
    0x00cb: {
      n: "SxErr"
    },
    0x00cc: {
      n: "SXInt"
    },
    0x00cd: {
      n: "SXString"
    },
    0x00ce: {
      n: "SXDtr"
    },
    0x00cf: {
      n: "SxNil"
    },
    0x00d0: {
      n: "SXTbl"
    },
    0x00d1: {
      n: "SXTBRGIITM"
    },
    0x00d2: {
      n: "SxTbpg"
    },
    0x00d3: {
      n: "ObProj"
    },
    0x00d5: {
      n: "SXStreamID"
    },
    0x00d7: {
      n: "DBCell"
    },
    0x00d8: {
      n: "SXRng"
    },
    0x00d9: {
      n: "SxIsxoper"
    },
    0x00da: {
      n: "BookBool",
      f: parseuint16
    },
    0x00dc: {
      n: "DbOrParamQry"
    },
    0x00dd: {
      n: "ScenarioProtect",
      f: parsebool
    },
    0x00de: {
      n: "OleObjectSize"
    },
    0x00e0: {
      n: "XF",
      f: parse_XF
    },
    0x00e1: {
      n: 'InterfaceHdr',
      f: parse_InterfaceHdr
    },
    0x00e2: {
      n: 'InterfaceEnd',
      f: parsenoop2
    },
    0x00e3: {
      n: "SXVS"
    },
    0x00e5: {
      n: "MergeCells",
      f: parse_MergeCells
    },
    0x00e9: {
      n: "BkHim"
    },
    0x00eb: {
      n: "MsoDrawingGroup"
    },
    0x00ec: {
      n: "MsoDrawing"
    },
    0x00ed: {
      n: "MsoDrawingSelection"
    },
    0x00ef: {
      n: "PhoneticInfo"
    },
    0x00f0: {
      n: "SxRule"
    },
    0x00f1: {
      n: "SXEx"
    },
    0x00f2: {
      n: "SxFilt"
    },
    0x00f4: {
      n: "SxDXF"
    },
    0x00f5: {
      n: "SxItm"
    },
    0x00f6: {
      n: "SxName"
    },
    0x00f7: {
      n: "SxSelect"
    },
    0x00f8: {
      n: "SXPair"
    },
    0x00f9: {
      n: "SxFmla"
    },
    0x00fb: {
      n: "SxFormat"
    },
    0x00fc: {
      n: "SST",
      f: parse_SST
    },
    0x00fd: {
      n: "LabelSst",
      f: parse_LabelSst
    },
    0x00ff: {
      n: "ExtSST",
      f: parse_ExtSST
    },
    0x0100: {
      n: "SXVDEx"
    },
    0x0103: {
      n: "SXFormula"
    },
    0x0122: {
      n: "SXDBEx"
    },
    0x0137: {
      n: "RRDInsDel"
    },
    0x0138: {
      n: "RRDHead"
    },
    0x013b: {
      n: "RRDChgCell"
    },
    0x013d: {
      n: "RRTabId",
      f: parseuint16a
    },
    0x013e: {
      n: "RRDRenSheet"
    },
    0x013f: {
      n: "RRSort"
    },
    0x0140: {
      n: "RRDMove"
    },
    0x014a: {
      n: "RRFormat"
    },
    0x014b: {
      n: "RRAutoFmt"
    },
    0x014d: {
      n: "RRInsertSh"
    },
    0x014e: {
      n: "RRDMoveBegin"
    },
    0x014f: {
      n: "RRDMoveEnd"
    },
    0x0150: {
      n: "RRDInsDelBegin"
    },
    0x0151: {
      n: "RRDInsDelEnd"
    },
    0x0152: {
      n: "RRDConflict"
    },
    0x0153: {
      n: "RRDDefName"
    },
    0x0154: {
      n: "RRDRstEtxp"
    },
    0x015f: {
      n: "LRng"
    },
    0x0160: {
      n: "UsesELFs",
      f: parsebool
    },
    0x0161: {
      n: "DSF",
      f: parsenoop2
    },
    0x0191: {
      n: "CUsr"
    },
    0x0192: {
      n: "CbUsr"
    },
    0x0193: {
      n: "UsrInfo"
    },
    0x0194: {
      n: "UsrExcl"
    },
    0x0195: {
      n: "FileLock"
    },
    0x0196: {
      n: "RRDInfo"
    },
    0x0197: {
      n: "BCUsrs"
    },
    0x0198: {
      n: "UsrChk"
    },
    0x01a9: {
      n: "UserBView"
    },
    0x01aa: {
      n: "UserSViewBegin"
    },
    0x01ab: {
      n: "UserSViewEnd"
    },
    0x01ac: {
      n: "RRDUserView"
    },
    0x01ad: {
      n: "Qsi"
    },
    0x01ae: {
      n: "SupBook",
      f: parse_SupBook
    },
    0x01af: {
      n: "Prot4Rev",
      f: parsebool
    },
    0x01b0: {
      n: "CondFmt"
    },
    0x01b1: {
      n: "CF"
    },
    0x01b2: {
      n: "DVal"
    },
    0x01b5: {
      n: "DConBin"
    },
    0x01b6: {
      n: "TxO",
      f: parse_TxO
    },
    0x01b7: {
      n: "RefreshAll",
      f: parsebool
    },
    0x01b8: {
      n: "HLink",
      f: parse_HLink
    },
    0x01b9: {
      n: "Lel"
    },
    0x01ba: {
      n: "CodeName",
      f: parse_XLUnicodeString
    },
    0x01bb: {
      n: "SXFDBType"
    },
    0x01bc: {
      n: "Prot4RevPass",
      f: parseuint16
    },
    0x01bd: {
      n: "ObNoMacros"
    },
    0x01be: {
      n: "Dv"
    },
    0x01c0: {
      n: "Excel9File",
      f: parsenoop2
    },
    0x01c1: {
      n: "RecalcId",
      f: parse_RecalcId,
      r: 2
    },
    0x01c2: {
      n: "EntExU2",
      f: parsenoop2
    },
    0x0200: {
      n: "Dimensions",
      f: parse_Dimensions
    },
    0x0201: {
      n: "Blank",
      f: parse_Blank
    },
    0x0203: {
      n: "Number",
      f: parse_Number
    },
    0x0204: {
      n: "Label",
      f: parse_Label
    },
    0x0205: {
      n: "BoolErr",
      f: parse_BoolErr
    },
    0x0206: {
      n: "Formula",
      f: parse_Formula
    },
    0x0207: {
      n: "String",
      f: parse_String
    },
    0x0208: {
      n: 'Row',
      f: parse_Row
    },
    0x020b: {
      n: "Index"
    },
    0x0221: {
      n: "Array",
      f: parse_Array
    },
    0x0225: {
      n: "DefaultRowHeight",
      f: parse_DefaultRowHeight
    },
    0x0236: {
      n: "Table"
    },
    0x023e: {
      n: "Window2",
      f: parse_Window2
    },
    0x027e: {
      n: "RK",
      f: parse_RK
    },
    0x0293: {
      n: "Style"
    },
    0x0406: {
      n: "Formula",
      f: parse_Formula
    },
    0x0418: {
      n: "BigName"
    },
    0x041e: {
      n: "Format",
      f: parse_Format
    },
    0x043c: {
      n: "ContinueBigName"
    },
    0x04bc: {
      n: "ShrFmla",
      f: parse_ShrFmla
    },
    0x0800: {
      n: "HLinkTooltip",
      f: parse_HLinkTooltip
    },
    0x0801: {
      n: "WebPub"
    },
    0x0802: {
      n: "QsiSXTag"
    },
    0x0803: {
      n: "DBQueryExt"
    },
    0x0804: {
      n: "ExtString"
    },
    0x0805: {
      n: "TxtQry"
    },
    0x0806: {
      n: "Qsir"
    },
    0x0807: {
      n: "Qsif"
    },
    0x0808: {
      n: "RRDTQSIF"
    },
    0x0809: {
      n: 'BOF',
      f: parse_BOF
    },
    0x080a: {
      n: "OleDbConn"
    },
    0x080b: {
      n: "WOpt"
    },
    0x080c: {
      n: "SXViewEx"
    },
    0x080d: {
      n: "SXTH"
    },
    0x080e: {
      n: "SXPIEx"
    },
    0x080f: {
      n: "SXVDTEx"
    },
    0x0810: {
      n: "SXViewEx9"
    },
    0x0812: {
      n: "ContinueFrt"
    },
    0x0813: {
      n: "RealTimeData"
    },
    0x0850: {
      n: "ChartFrtInfo"
    },
    0x0851: {
      n: "FrtWrapper"
    },
    0x0852: {
      n: "StartBlock"
    },
    0x0853: {
      n: "EndBlock"
    },
    0x0854: {
      n: "StartObject"
    },
    0x0855: {
      n: "EndObject"
    },
    0x0856: {
      n: "CatLab"
    },
    0x0857: {
      n: "YMult"
    },
    0x0858: {
      n: "SXViewLink"
    },
    0x0859: {
      n: "PivotChartBits"
    },
    0x085a: {
      n: "FrtFontList"
    },
    0x0862: {
      n: "SheetExt"
    },
    0x0863: {
      n: "BookExt",
      r: 12
    },
    0x0864: {
      n: "SXAddl"
    },
    0x0865: {
      n: "CrErr"
    },
    0x0866: {
      n: "HFPicture"
    },
    0x0867: {
      n: 'FeatHdr',
      f: parsenoop2
    },
    0x0868: {
      n: "Feat"
    },
    0x086a: {
      n: "DataLabExt"
    },
    0x086b: {
      n: "DataLabExtContents"
    },
    0x086c: {
      n: "CellWatch"
    },
    0x0871: {
      n: "FeatHdr11"
    },
    0x0872: {
      n: "Feature11"
    },
    0x0874: {
      n: "DropDownObjIds"
    },
    0x0875: {
      n: "ContinueFrt11"
    },
    0x0876: {
      n: "DConn"
    },
    0x0877: {
      n: "List12"
    },
    0x0878: {
      n: "Feature12"
    },
    0x0879: {
      n: "CondFmt12"
    },
    0x087a: {
      n: "CF12"
    },
    0x087b: {
      n: "CFEx"
    },
    0x087c: {
      n: "XFCRC",
      f: parse_XFCRC,
      r: 12
    },
    0x087d: {
      n: "XFExt",
      f: parse_XFExt,
      r: 12
    },
    0x087e: {
      n: "AutoFilter12"
    },
    0x087f: {
      n: "ContinueFrt12"
    },
    0x0884: {
      n: "MDTInfo"
    },
    0x0885: {
      n: "MDXStr"
    },
    0x0886: {
      n: "MDXTuple"
    },
    0x0887: {
      n: "MDXSet"
    },
    0x0888: {
      n: "MDXProp"
    },
    0x0889: {
      n: "MDXKPI"
    },
    0x088a: {
      n: "MDB"
    },
    0x088b: {
      n: "PLV"
    },
    0x088c: {
      n: "Compat12",
      f: parsebool,
      r: 12
    },
    0x088d: {
      n: "DXF"
    },
    0x088e: {
      n: "TableStyles",
      r: 12
    },
    0x088f: {
      n: "TableStyle"
    },
    0x0890: {
      n: "TableStyleElement"
    },
    0x0892: {
      n: "StyleExt"
    },
    0x0893: {
      n: "NamePublish"
    },
    0x0894: {
      n: "NameCmt",
      f: parse_NameCmt,
      r: 12
    },
    0x0895: {
      n: "SortData"
    },
    0x0896: {
      n: "Theme",
      f: parse_Theme,
      r: 12
    },
    0x0897: {
      n: "GUIDTypeLib"
    },
    0x0898: {
      n: "FnGrp12"
    },
    0x0899: {
      n: "NameFnGrp12"
    },
    0x089a: {
      n: "MTRSettings",
      f: parse_MTRSettings,
      r: 12
    },
    0x089b: {
      n: "CompressPictures",
      f: parsenoop2
    },
    0x089c: {
      n: "HeaderFooter"
    },
    0x089d: {
      n: "CrtLayout12"
    },
    0x089e: {
      n: "CrtMlFrt"
    },
    0x089f: {
      n: "CrtMlFrtContinue"
    },
    0x08a3: {
      n: "ForceFullCalculation",
      f: parse_ForceFullCalculation
    },
    0x08a4: {
      n: "ShapePropsStream"
    },
    0x08a5: {
      n: "TextPropsStream"
    },
    0x08a6: {
      n: "RichTextStream"
    },
    0x08a7: {
      n: "CrtLayout12A"
    },
    0x1001: {
      n: "Units"
    },
    0x1002: {
      n: "Chart"
    },
    0x1003: {
      n: "Series"
    },
    0x1006: {
      n: "DataFormat"
    },
    0x1007: {
      n: "LineFormat"
    },
    0x1009: {
      n: "MarkerFormat"
    },
    0x100a: {
      n: "AreaFormat"
    },
    0x100b: {
      n: "PieFormat"
    },
    0x100c: {
      n: "AttachedLabel"
    },
    0x100d: {
      n: "SeriesText"
    },
    0x1014: {
      n: "ChartFormat"
    },
    0x1015: {
      n: "Legend"
    },
    0x1016: {
      n: "SeriesList"
    },
    0x1017: {
      n: "Bar"
    },
    0x1018: {
      n: "Line"
    },
    0x1019: {
      n: "Pie"
    },
    0x101a: {
      n: "Area"
    },
    0x101b: {
      n: "Scatter"
    },
    0x101c: {
      n: "CrtLine"
    },
    0x101d: {
      n: "Axis"
    },
    0x101e: {
      n: "Tick"
    },
    0x101f: {
      n: "ValueRange"
    },
    0x1020: {
      n: "CatSerRange"
    },
    0x1021: {
      n: "AxisLine"
    },
    0x1022: {
      n: "CrtLink"
    },
    0x1024: {
      n: "DefaultText"
    },
    0x1025: {
      n: "Text"
    },
    0x1026: {
      n: "FontX",
      f: parseuint16
    },
    0x1027: {
      n: "ObjectLink"
    },
    0x1032: {
      n: "Frame"
    },
    0x1033: {
      n: "Begin"
    },
    0x1034: {
      n: "End"
    },
    0x1035: {
      n: "PlotArea"
    },
    0x103a: {
      n: "Chart3d"
    },
    0x103c: {
      n: "PicF"
    },
    0x103d: {
      n: "DropBar"
    },
    0x103e: {
      n: "Radar"
    },
    0x103f: {
      n: "Surf"
    },
    0x1040: {
      n: "RadarArea"
    },
    0x1041: {
      n: "AxisParent"
    },
    0x1043: {
      n: "LegendException"
    },
    0x1044: {
      n: "ShtProps",
      f: parse_ShtProps
    },
    0x1045: {
      n: "SerToCrt"
    },
    0x1046: {
      n: "AxesUsed"
    },
    0x1048: {
      n: "SBaseRef"
    },
    0x104a: {
      n: "SerParent"
    },
    0x104b: {
      n: "SerAuxTrend"
    },
    0x104e: {
      n: "IFmtRecord"
    },
    0x104f: {
      n: "Pos"
    },
    0x1050: {
      n: "AlRuns"
    },
    0x1051: {
      n: "BRAI"
    },
    0x105b: {
      n: "SerAuxErrBar"
    },
    0x105c: {
      n: "ClrtClient",
      f: parse_ClrtClient
    },
    0x105d: {
      n: "SerFmt"
    },
    0x105f: {
      n: "Chart3DBarShape"
    },
    0x1060: {
      n: "Fbi"
    },
    0x1061: {
      n: "BopPop"
    },
    0x1062: {
      n: "AxcExt"
    },
    0x1063: {
      n: "Dat"
    },
    0x1064: {
      n: "PlotGrowth"
    },
    0x1065: {
      n: "SIIndex"
    },
    0x1066: {
      n: "GelFrame"
    },
    0x1067: {
      n: "BopPopCustom"
    },
    0x1068: {
      n: "Fbi2"
    },
    0x0000: {
      n: "Dimensions",
      f: parse_Dimensions
    },
    0x0002: {
      n: "BIFF2INT",
      f: parse_BIFF2INT
    },
    0x0005: {
      n: "BoolErr",
      f: parse_BoolErr
    },
    0x0007: {
      n: "String",
      f: parse_BIFF2STRING
    },
    0x0008: {
      n: "BIFF2ROW"
    },
    0x000b: {
      n: "Index"
    },
    0x0016: {
      n: "ExternCount",
      f: parseuint16
    },
    0x001e: {
      n: "BIFF2FORMAT",
      f: parse_BIFF2Format
    },
    0x001f: {
      n: "BIFF2FMTCNT"
    },

    /* 16-bit cnt of BIFF2FORMAT records */
    0x0020: {
      n: "BIFF2COLINFO"
    },
    0x0021: {
      n: "Array",
      f: parse_Array
    },
    0x0025: {
      n: "DefaultRowHeight",
      f: parse_DefaultRowHeight
    },
    0x0032: {
      n: "BIFF2FONTXTRA",
      f: parse_BIFF2FONTXTRA
    },
    0x0034: {
      n: "DDEObjName"
    },
    0x003e: {
      n: "BIFF2WINDOW2"
    },
    0x0043: {
      n: "BIFF2XF"
    },
    0x0045: {
      n: "BIFF2FONTCLR"
    },
    0x0056: {
      n: "BIFF4FMTCNT"
    },

    /* 16-bit cnt, similar to BIFF2 */
    0x007e: {
      n: "RK"
    },

    /* Not necessarily same as 0x027e */
    0x007f: {
      n: "ImData",
      f: parse_ImData
    },
    0x0087: {
      n: "Addin"
    },
    0x0088: {
      n: "Edg"
    },
    0x0089: {
      n: "Pub"
    },
    0x0091: {
      n: "Sub"
    },
    0x0094: {
      n: "LHRecord"
    },
    0x0095: {
      n: "LHNGraph"
    },
    0x0096: {
      n: "Sound"
    },
    0x00a9: {
      n: "CoordList"
    },
    0x00ab: {
      n: "GCW"
    },
    0x00bc: {
      n: "ShrFmla"
    },

    /* Not necessarily same as 0x04bc */
    0x00bf: {
      n: "ToolbarHdr"
    },
    0x00c0: {
      n: "ToolbarEnd"
    },
    0x00c2: {
      n: "AddMenu"
    },
    0x00c3: {
      n: "DelMenu"
    },
    0x00d6: {
      n: "RString",
      f: parse_RString
    },
    0x00df: {
      n: "UDDesc"
    },
    0x00ea: {
      n: "TabIdConf"
    },
    0x0162: {
      n: "XL5Modify"
    },
    0x01a5: {
      n: "FileSharing2"
    },
    0x0209: {
      n: 'BOF',
      f: parse_BOF
    },
    0x0218: {
      n: "Lbl",
      f: parse_Lbl
    },
    0x0223: {
      n: "ExternName",
      f: parse_ExternName
    },
    0x0231: {
      n: "Font"
    },
    0x0243: {
      n: "BIFF3XF"
    },
    0x0409: {
      n: 'BOF',
      f: parse_BOF
    },
    0x0443: {
      n: "BIFF4XF"
    },
    0x086d: {
      n: "FeatInfo"
    },
    0x0873: {
      n: "FeatInfo11"
    },
    0x0881: {
      n: "SXAddl12"
    },
    0x08c0: {
      n: "AutoWebPub"
    },
    0x08c1: {
      n: "ListObj"
    },
    0x08c2: {
      n: "ListField"
    },
    0x08c3: {
      n: "ListDV"
    },
    0x08c4: {
      n: "ListCondFmt"
    },
    0x08c5: {
      n: "ListCF"
    },
    0x08c6: {
      n: "FMQry"
    },
    0x08c7: {
      n: "FMSQry"
    },
    0x08c8: {
      n: "PLV"
    },
    0x08c9: {
      n: "LnExt"
    },
    0x08ca: {
      n: "MkrExt"
    },
    0x08cb: {
      n: "CrtCoopt"
    },
    0x08d6: {
      n: "FRTArchId$",
      r: 12
    },
    0x7262: {}
  };
  var XLSRE = evert_key(XLSRecordEnum, 'n');

  function write_biff_rec(ba, type, payload, length) {
    var t = +type || +XLSRE[type];
    if (isNaN(t)) return;
    var len = length || (payload || []).length || 0;
    var o = ba.next(4);
    o.write_shift(2, t);
    o.write_shift(2, len);
    if (len > 0 && is_buf(payload)) ba.push(payload);
  }

  function write_biff_continue(ba, type, payload, length) {
    var len = length || (payload || []).length || 0;
    if (len <= 8224) return write_biff_rec(ba, type, payload, len);
    var t = +type || +XLSRE[type];
    if (isNaN(t)) return;
    var parts = payload.parts || [],
        sidx = 0;
    var i = 0,
        w = 0;

    while (w + (parts[sidx] || 8224) <= 8224) {
      w += parts[sidx] || 8224;
      sidx++;
    }

    var o = ba.next(4);
    o.write_shift(2, t);
    o.write_shift(2, w);
    ba.push(payload.slice(i, i + w));
    i += w;

    while (i < len) {
      o = ba.next(4);
      o.write_shift(2, 0x3c); // TODO: figure out correct continue type

      w = 0;

      while (w + (parts[sidx] || 8224) <= 8224) {
        w += parts[sidx] || 8224;
        sidx++;
      }

      o.write_shift(2, w);
      ba.push(payload.slice(i, i + w));
      i += w;
    }
  }

  function write_BIFF2Cell(out, r, c) {
    if (!out) out = new_buf(7);
    out.write_shift(2, r);
    out.write_shift(2, c);
    out.write_shift(2, 0);
    out.write_shift(1, 0);
    return out;
  }

  function write_BIFF2BERR(r, c, val, t) {
    var out = new_buf(9);
    write_BIFF2Cell(out, r, c);

    if (t == 'e') {
      out.write_shift(1, val);
      out.write_shift(1, 1);
    } else {
      out.write_shift(1, val ? 1 : 0);
      out.write_shift(1, 0);
    }

    return out;
  }
  /* TODO: codepage, large strings */


  function write_BIFF2LABEL(r, c, val) {
    var out = new_buf(8 + 2 * val.length);
    write_BIFF2Cell(out, r, c);
    out.write_shift(1, val.length);
    out.write_shift(val.length, val, 'sbcs');
    return out.l < out.length ? out.slice(0, out.l) : out;
  }

  function write_ws_biff2_cell(ba, cell, R, C) {
    if (cell.v != null) switch (cell.t) {
      case 'd':
      case 'n':
        var v = cell.t == 'd' ? datenum(parseDate(cell.v)) : cell.v;
        if (v == (v | 0) && v >= 0 && v < 65536) write_biff_rec(ba, 0x0002, write_BIFF2INT(R, C, v));else write_biff_rec(ba, 0x0003, write_BIFF2NUM(R, C, v));
        return;

      case 'b':
      case 'e':
        write_biff_rec(ba, 0x0005, write_BIFF2BERR(R, C, cell.v, cell.t));
        return;

      /* TODO: codepage, sst */

      case 's':
      case 'str':
        write_biff_rec(ba, 0x0004, write_BIFF2LABEL(R, C, cell.v));
        return;
    }
    write_biff_rec(ba, 0x0001, write_BIFF2Cell(null, R, C));
  }

  function write_ws_biff2(ba, ws, idx, opts) {
    var dense = Array.isArray(ws);
    var range = safe_decode_range(ws['!ref'] || "A1"),
        ref,
        rr = "",
        cols = [];

    if (range.e.c > 0xFF || range.e.r > 0x3FFF) {
      if (opts.WTF) throw new Error("Range " + (ws['!ref'] || "A1") + " exceeds format limit A1:IV16384");
      range.e.c = Math.min(range.e.c, 0xFF);
      range.e.r = Math.min(range.e.c, 0x3FFF);
      ref = encode_range(range);
    }

    for (var R = range.s.r; R <= range.e.r; ++R) {
      rr = encode_row(R);

      for (var C = range.s.c; C <= range.e.c; ++C) {
        if (R === range.s.r) cols[C] = encode_col(C);
        ref = cols[C] + rr;
        var cell = dense ? (ws[R] || [])[C] : ws[ref];
        if (!cell) continue;
        /* write cell */

        write_ws_biff2_cell(ba, cell, R, C, opts);
      }
    }
  }
  /* Based on test files */


  function write_biff2_buf(wb, opts) {
    var o = opts || {};
    if (DENSE != null && o.dense == null) o.dense = DENSE;
    var ba = buf_array();
    var idx = 0;

    for (var i = 0; i < wb.SheetNames.length; ++i) if (wb.SheetNames[i] == o.sheet) idx = i;

    if (idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet) throw new Error("Sheet not found: " + o.sheet);
    write_biff_rec(ba, 0x0009, write_BOF(wb, 0x10, o));
    /* ... */

    write_ws_biff2(ba, wb.Sheets[wb.SheetNames[idx]], idx, o, wb);
    /* ... */

    write_biff_rec(ba, 0x000A);
    return ba.end();
  }

  function write_FONTS_biff8(ba, data, opts) {
    write_biff_rec(ba, "Font", write_Font({
      sz: 12,
      color: {
        theme: 1
      },
      name: "Arial",
      family: 2,
      scheme: "minor"
    }, opts));
  }

  function write_FMTS_biff8(ba, NF, opts) {
    if (!NF) return;
    [[5, 8], [23, 26], [41, 44], [
    /*63*/
    50,
    /*66],[164,*/
    392]].forEach(function (r) {
      for (var i = r[0]; i <= r[1]; ++i) if (NF[i] != null) write_biff_rec(ba, "Format", write_Format(i, NF[i], opts));
    });
  }

  function write_FEAT(ba, ws) {
    /* [MS-XLS] 2.4.112 */
    var o = new_buf(19);
    o.write_shift(4, 0x867);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    o.write_shift(2, 3);
    o.write_shift(1, 1);
    o.write_shift(4, 0);
    write_biff_rec(ba, "FeatHdr", o);
    /* [MS-XLS] 2.4.111 */

    o = new_buf(39);
    o.write_shift(4, 0x868);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    o.write_shift(2, 3);
    o.write_shift(1, 0);
    o.write_shift(4, 0);
    o.write_shift(2, 1);
    o.write_shift(4, 4);
    o.write_shift(2, 0);
    write_Ref8U(safe_decode_range(ws['!ref'] || "A1"), o);
    o.write_shift(4, 4);
    write_biff_rec(ba, "Feat", o);
  }

  function write_CELLXFS_biff8(ba, opts) {
    for (var i = 0; i < 16; ++i) write_biff_rec(ba, "XF", write_XF({
      numFmtId: 0,
      style: true
    }, 0, opts));

    opts.cellXfs.forEach(function (c) {
      write_biff_rec(ba, "XF", write_XF(c, 0, opts));
    });
  }

  function write_ws_biff8_hlinks(ba, ws) {
    for (var R = 0; R < ws['!links'].length; ++R) {
      var HL = ws['!links'][R];
      write_biff_rec(ba, "HLink", write_HLink(HL));
      if (HL[1].Tooltip) write_biff_rec(ba, "HLinkTooltip", write_HLinkTooltip(HL));
    }

    delete ws['!links'];
  }

  function write_ws_biff8_cell(ba, cell, R, C, opts) {
    var os = 16 + get_cell_style(opts.cellXfs, cell, opts);

    if (cell.v == null && !cell.bf) {
      write_biff_rec(ba, "Blank", write_XLSCell(R, C, os));
      return;
    }

    if (cell.bf) write_biff_rec(ba, "Formula", write_Formula(cell, R, C, opts, os));else switch (cell.t) {
      case 'd':
      case 'n':
        var v = cell.t == 'd' ? datenum(parseDate(cell.v)) : cell.v;
        /* TODO: emit RK as appropriate */

        write_biff_rec(ba, "Number", write_Number(R, C, v, os, opts));
        break;

      case 'b':
      case 'e':
        write_biff_rec(ba, 0x0205, write_BoolErr(R, C, cell.v, os, opts, cell.t));
        break;

      /* TODO: codepage, sst */

      case 's':
      case 'str':
        if (opts.bookSST) {
          var isst = get_sst_id(opts.Strings, cell.v, opts.revStrings);
          write_biff_rec(ba, "LabelSst", write_LabelSst(R, C, isst, os, opts));
        } else write_biff_rec(ba, "Label", write_Label(R, C, cell.v, os, opts));

        break;

      default:
        write_biff_rec(ba, "Blank", write_XLSCell(R, C, os));
    }
  }
  /* [MS-XLS] 2.1.7.20.5 */


  function write_ws_biff8(idx, opts, wb) {
    var ba = buf_array();
    var s = wb.SheetNames[idx],
        ws = wb.Sheets[s] || {};

    var _WB = (wb || {}).Workbook || {};

    var _sheet = (_WB.Sheets || [])[idx] || {};

    var dense = Array.isArray(ws);
    var b8 = opts.biff == 8;
    var ref,
        rr = "",
        cols = [];
    var range = safe_decode_range(ws['!ref'] || "A1");
    var MAX_ROWS = b8 ? 65536 : 16384;

    if (range.e.c > 0xFF || range.e.r >= MAX_ROWS) {
      if (opts.WTF) throw new Error("Range " + (ws['!ref'] || "A1") + " exceeds format limit A1:IV16384");
      range.e.c = Math.min(range.e.c, 0xFF);
      range.e.r = Math.min(range.e.c, MAX_ROWS - 1);
    }

    write_biff_rec(ba, 0x0809, write_BOF(wb, 0x10, opts));
    /* [Uncalced] Index */

    write_biff_rec(ba, "CalcMode", writeuint16(1));
    write_biff_rec(ba, "CalcCount", writeuint16(100));
    write_biff_rec(ba, "CalcRefMode", writebool(true));
    write_biff_rec(ba, "CalcIter", writebool(false));
    write_biff_rec(ba, "CalcDelta", write_Xnum(0.001));
    write_biff_rec(ba, "CalcSaveRecalc", writebool(true));
    write_biff_rec(ba, "PrintRowCol", writebool(false));
    write_biff_rec(ba, "PrintGrid", writebool(false));
    write_biff_rec(ba, "GridSet", writeuint16(1));
    write_biff_rec(ba, "Guts", write_Guts([0, 0]));
    /* DefaultRowHeight WsBool [Sync] [LPr] [HorizontalPageBreaks] [VerticalPageBreaks] */

    /* Header (string) */

    /* Footer (string) */

    write_biff_rec(ba, "HCenter", writebool(false));
    write_biff_rec(ba, "VCenter", writebool(false));
    /* ... */

    write_biff_rec(ba, 0x200, write_Dimensions(range, opts));
    /* ... */

    if (b8) ws['!links'] = [];

    for (var R = range.s.r; R <= range.e.r; ++R) {
      rr = encode_row(R);

      for (var C = range.s.c; C <= range.e.c; ++C) {
        if (R === range.s.r) cols[C] = encode_col(C);
        ref = cols[C] + rr;
        var cell = dense ? (ws[R] || [])[C] : ws[ref];
        if (!cell) continue;
        /* write cell */

        write_ws_biff8_cell(ba, cell, R, C, opts);
        if (b8 && cell.l) ws['!links'].push([ref, cell.l]);
      }
    }

    var cname = _sheet.CodeName || _sheet.name || s;
    /* ... */

    if (b8) write_biff_rec(ba, "Window2", write_Window2((_WB.Views || [])[0]));
    /* ... */

    if (b8 && (ws['!merges'] || []).length) write_biff_rec(ba, "MergeCells", write_MergeCells(ws['!merges']));
    /* [LRng] *QUERYTABLE [PHONETICINFO] CONDFMTS */

    if (b8) write_ws_biff8_hlinks(ba, ws);
    /* [DVAL] */

    write_biff_rec(ba, "CodeName", write_XLUnicodeString(cname, opts));
    /* *WebPub *CellWatch [SheetExt] */

    if (b8) write_FEAT(ba, ws);
    /* *FEAT11 *RECORD12 */

    write_biff_rec(ba, "EOF");
    return ba.end();
  }
  /* [MS-XLS] 2.1.7.20.3 */


  function write_biff8_global(wb, bufs, opts) {
    var A = buf_array();

    var _WB = (wb || {}).Workbook || {};

    var _sheets = _WB.Sheets || [];

    var _wb = _WB.WBProps || {};

    var b8 = opts.biff == 8,
        b5 = opts.biff == 5;
    write_biff_rec(A, 0x0809, write_BOF(wb, 0x05, opts));
    if (opts.bookType == "xla") write_biff_rec(A, "Addin");
    write_biff_rec(A, "InterfaceHdr", b8 ? writeuint16(0x04b0) : null);
    write_biff_rec(A, "Mms", writezeroes(2));
    if (b5) write_biff_rec(A, "ToolbarHdr");
    if (b5) write_biff_rec(A, "ToolbarEnd");
    write_biff_rec(A, "InterfaceEnd");
    write_biff_rec(A, "WriteAccess", write_WriteAccess("SheetJS", opts));
    /* [FileSharing] */

    write_biff_rec(A, "CodePage", writeuint16(b8 ? 0x04b0 : 0x04E4));
    /* *2047 Lel */

    if (b8) write_biff_rec(A, "DSF", writeuint16(0));
    if (b8) write_biff_rec(A, "Excel9File");
    write_biff_rec(A, "RRTabId", write_RRTabId(wb.SheetNames.length));
    if (b8 && wb.vbaraw) write_biff_rec(A, "ObProj");
    /* [ObNoMacros] */

    if (b8 && wb.vbaraw) {
      var cname = _wb.CodeName || "ThisWorkbook";
      write_biff_rec(A, "CodeName", write_XLUnicodeString(cname, opts));
    }

    write_biff_rec(A, "BuiltInFnGroupCount", writeuint16(0x11));
    /* *FnGroupName *FnGrp12 */

    /* *Lbl */

    /* [OleObjectSize] */

    write_biff_rec(A, "WinProtect", writebool(false));
    write_biff_rec(A, "Protect", writebool(false));
    write_biff_rec(A, "Password", writeuint16(0));
    if (b8) write_biff_rec(A, "Prot4Rev", writebool(false));
    if (b8) write_biff_rec(A, "Prot4RevPass", writeuint16(0));
    write_biff_rec(A, "Window1", write_Window1(opts));
    write_biff_rec(A, "Backup", writebool(false));
    write_biff_rec(A, "HideObj", writeuint16(0));
    write_biff_rec(A, "Date1904", writebool(safe1904(wb) == "true"));
    write_biff_rec(A, "CalcPrecision", writebool(true));
    if (b8) write_biff_rec(A, "RefreshAll", writebool(false));
    write_biff_rec(A, "BookBool", writeuint16(0));
    /* ... */

    write_FONTS_biff8(A, wb, opts);
    write_FMTS_biff8(A, wb.SSF, opts);
    write_CELLXFS_biff8(A, opts);
    /* ... */

    if (b8) write_biff_rec(A, "UsesELFs", writebool(false));
    var a = A.end();
    var C = buf_array();
    /* METADATA [MTRSettings] [ForceFullCalculation] */

    if (b8) write_biff_rec(C, "Country", write_Country());
    /* *SUPBOOK *LBL *RTD [RecalcId] *HFPicture *MSODRAWINGGROUP */

    /* BIFF8: [SST *Continue] ExtSST */

    if (b8 && opts.Strings) write_biff_continue(C, "SST", write_SST(opts.Strings, opts));
    /* *WebPub [WOpt] [CrErr] [BookExt] *FeatHdr *DConn [THEME] [CompressPictures] [Compat12] [GUIDTypeLib] */

    write_biff_rec(C, "EOF");
    var c = C.end();
    var B = buf_array();
    var blen = 0,
        j = 0;

    for (j = 0; j < wb.SheetNames.length; ++j) blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j].length;

    var start = a.length + blen + c.length;

    for (j = 0; j < wb.SheetNames.length; ++j) {
      var _sheet = _sheets[j] || {};

      write_biff_rec(B, "BoundSheet8", write_BoundSheet8({
        pos: start,
        hs: _sheet.Hidden || 0,
        dt: 0,
        name: wb.SheetNames[j]
      }, opts));
      start += bufs[j].length;
    }
    /* 1*BoundSheet8 */


    var b = B.end();
    if (blen != b.length) throw new Error("BS8 " + blen + " != " + b.length);
    var out = [];
    if (a.length) out.push(a);
    if (b.length) out.push(b);
    if (c.length) out.push(c);
    return __toBuffer([out]);
  }
  /* [MS-XLS] 2.1.7.20 Workbook Stream */


  function write_biff8_buf(wb, opts) {
    var o = opts || {};
    var bufs = [];

    if (wb && !wb.SSF) {
      wb.SSF = SSF.get_table();
    }

    if (wb && wb.SSF) {
      make_ssf(SSF);
      SSF.load_table(wb.SSF); // $FlowIgnore

      o.revssf = evert_num(wb.SSF);
      o.revssf[wb.SSF[65535]] = 0;
      o.ssf = wb.SSF;
    }

    o.Strings = [];
    o.Strings.Count = 0;
    o.Strings.Unique = 0;
    fix_write_opts(o);
    o.cellXfs = [];
    get_cell_style(o.cellXfs, {}, {
      revssf: {
        "General": 0
      }
    });
    if (!wb.Props) wb.Props = {};

    for (var i = 0; i < wb.SheetNames.length; ++i) bufs[bufs.length] = write_ws_biff8(i, o, wb);

    bufs.unshift(write_biff8_global(wb, bufs, o));
    return __toBuffer([bufs]);
  }

  function write_biff_buf(wb, opts) {
    var o = opts || {};

    switch (o.biff || 2) {
      case 8:
      case 5:
        return write_biff8_buf(wb, opts);

      case 4:
      case 3:
      case 2:
        return write_biff2_buf(wb, opts);
    }

    throw new Error("invalid type " + o.bookType + " for BIFF");
  }
  /* note: browser DOM element cannot see mso- style attrs, must parse */


  var HTML_ = function () {
    function html_to_sheet(str, _opts) {
      var opts = _opts || {};
      if (DENSE != null && opts.dense == null) opts.dense = DENSE;
      var ws = opts.dense ? [] : {};
      str = str.replace(/<!--.*?-->/g, "");
      var mtch = str.match(/<table/i);
      if (!mtch) throw new Error("Invalid HTML: could not find <table>");
      var mtch2 = str.match(/<\/table/i);
      var i = mtch.index,
          j = mtch2 && mtch2.index || str.length;
      var rows = split_regex(str.slice(i, j), /(:?<tr[^>]*>)/i, "<tr>");
      var R = -1,
          C = 0,
          RS = 0,
          CS = 0;
      var range = {
        s: {
          r: 10000000,
          c: 10000000
        },
        e: {
          r: 0,
          c: 0
        }
      };
      var merges = [];

      for (i = 0; i < rows.length; ++i) {
        var row = rows[i].trim();
        var hd = row.slice(0, 3).toLowerCase();

        if (hd == "<tr") {
          ++R;

          if (opts.sheetRows && opts.sheetRows <= R) {
            --R;
            break;
          }

          C = 0;
          continue;
        }

        if (hd != "<td" && hd != "<th") continue;
        var cells = row.split(/<\/t[dh]>/i);

        for (j = 0; j < cells.length; ++j) {
          var cell = cells[j].trim();
          if (!cell.match(/<t[dh]/i)) continue;
          var m = cell,
              cc = 0;
          /* TODO: parse styles etc */

          while (m.charAt(0) == "<" && (cc = m.indexOf(">")) > -1) m = m.slice(cc + 1);

          for (var midx = 0; midx < merges.length; ++midx) {
            var _merge = merges[midx];

            if (_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) {
              C = _merge.e.c + 1;
              midx = -1;
            }
          }

          var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
          CS = tag.colspan ? +tag.colspan : 1;
          if ((RS = +tag.rowspan) > 1 || CS > 1) merges.push({
            s: {
              r: R,
              c: C
            },
            e: {
              r: R + (RS || 1) - 1,
              c: C + CS - 1
            }
          });

          var _t = tag.t || "";
          /* TODO: generate stub cells */


          if (!m.length) {
            C += CS;
            continue;
          }

          m = htmldecode(m);
          if (range.s.r > R) range.s.r = R;
          if (range.e.r < R) range.e.r = R;
          if (range.s.c > C) range.s.c = C;
          if (range.e.c < C) range.e.c = C;
          if (!m.length) continue;
          var o = {
            t: 's',
            v: m
          };

          if (opts.raw || !m.trim().length || _t == 's') {} else if (m === 'TRUE') o = {
            t: 'b',
            v: true
          };else if (m === 'FALSE') o = {
            t: 'b',
            v: false
          };else if (!isNaN(fuzzynum(m))) o = {
            t: 'n',
            v: fuzzynum(m)
          };else if (!isNaN(fuzzydate(m).getDate())) {
            o = {
              t: 'd',
              v: parseDate(m)
            };
            if (!opts.cellDates) o = {
              t: 'n',
              v: datenum(o.v)
            };
            o.z = opts.dateNF || SSF._table[14];
          }

          if (opts.dense) {
            if (!ws[R]) ws[R] = [];
            ws[R][C] = o;
          } else ws[encode_cell({
            r: R,
            c: C
          })] = o;

          C += CS;
        }
      }

      ws['!ref'] = encode_range(range);
      if (merges.length) ws["!merges"] = merges;
      return ws;
    }

    function html_to_book(str, opts) {
      return sheet_to_workbook(html_to_sheet(str, opts), opts);
    }

    function make_html_row(ws, r, R, o) {
      var M = ws['!merges'] || [];
      var oo = [];

      for (var C = r.s.c; C <= r.e.c; ++C) {
        var RS = 0,
            CS = 0;

        for (var j = 0; j < M.length; ++j) {
          if (M[j].s.r > R || M[j].s.c > C) continue;
          if (M[j].e.r < R || M[j].e.c < C) continue;

          if (M[j].s.r < R || M[j].s.c < C) {
            RS = -1;
            break;
          }

          RS = M[j].e.r - M[j].s.r + 1;
          CS = M[j].e.c - M[j].s.c + 1;
          break;
        }

        if (RS < 0) continue;
        var coord = encode_cell({
          r: R,
          c: C
        });
        var cell = o.dense ? (ws[R] || [])[C] : ws[coord];
        /* TODO: html entities */

        var w = cell && cell.v != null && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || "")) || "";
        var sp = {};
        if (RS > 1) sp.rowspan = RS;
        if (CS > 1) sp.colspan = CS;
        sp.t = cell && cell.t || 'z';
        if (o.editable) w = '<span contenteditable="true">' + w + '</span>';
        sp.id = (o.id || "sjs") + "-" + coord;

        if (sp.t != "z") {
          sp.v = cell.v;
          if (cell.z != null) sp.z = cell.z;
        }

        oo.push(writextag('td', w, sp));
      }

      var preamble = "<tr>";
      return preamble + oo.join("") + "</tr>";
    }

    function make_html_preamble(ws, R, o) {
      var out = [];
      return out.join("") + '<table' + (o && o.id ? ' id="' + o.id + '"' : "") + '>';
    }

    var _BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
    var _END = '</body></html>';

    function sheet_to_html(ws, opts
    /*, wb:?Workbook*/
    ) {
      var o = opts || {};
      var header = o.header != null ? o.header : _BEGIN;
      var footer = o.footer != null ? o.footer : _END;
      var out = [header];
      var r = decode_range(ws['!ref']);
      o.dense = Array.isArray(ws);
      out.push(make_html_preamble(ws, r, o));

      for (var R = r.s.r; R <= r.e.r; ++R) out.push(make_html_row(ws, r, R, o));

      out.push("</table>" + footer);
      return out.join("");
    }

    return {
      to_workbook: html_to_book,
      to_sheet: html_to_sheet,
      _row: make_html_row,
      BEGIN: _BEGIN,
      END: _END,
      _preamble: make_html_preamble,
      from_sheet: sheet_to_html
    };
  }();

  function sheet_add_dom(ws, table, _opts) {
    var opts = _opts || {};
    if (DENSE != null) opts.dense = DENSE;
    var or_R = 0,
        or_C = 0;

    if (opts.origin != null) {
      if (typeof opts.origin == 'number') or_R = opts.origin;else {
        var _origin = typeof opts.origin == "string" ? decode_cell(opts.origin) : opts.origin;

        or_R = _origin.r;
        or_C = _origin.c;
      }
    }

    var rows = table.getElementsByTagName('tr');
    var sheetRows = Math.min(opts.sheetRows || 10000000, rows.length);
    var range = {
      s: {
        r: 0,
        c: 0
      },
      e: {
        r: or_R,
        c: or_C
      }
    };

    if (ws["!ref"]) {
      var _range = decode_range(ws["!ref"]);

      range.s.r = Math.min(range.s.r, _range.s.r);
      range.s.c = Math.min(range.s.c, _range.s.c);
      range.e.r = Math.max(range.e.r, _range.e.r);
      range.e.c = Math.max(range.e.c, _range.e.c);
      if (or_R == -1) range.e.r = or_R = _range.e.r + 1;
    }

    var merges = [],
        midx = 0;
    var rowinfo = ws["!rows"] || (ws["!rows"] = []);
    var _R = 0,
        R = 0,
        _C = 0,
        C = 0,
        RS = 0,
        CS = 0;
    if (!ws["!cols"]) ws['!cols'] = [];

    for (; _R < rows.length && R < sheetRows; ++_R) {
      var row = rows[_R];

      if (is_dom_element_hidden(row)) {
        if (opts.display) continue;
        rowinfo[R] = {
          hidden: true
        };
      }

      var elts = row.children;

      for (_C = C = 0; _C < elts.length; ++_C) {
        var elt = elts[_C];
        if (opts.display && is_dom_element_hidden(elt)) continue;
        var v = elt.hasAttribute('v') ? elt.getAttribute('v') : htmldecode(elt.innerHTML);
        var z = elt.getAttribute('z');

        for (midx = 0; midx < merges.length; ++midx) {
          var m = merges[midx];

          if (m.s.c == C + or_C && m.s.r < R + or_R && R + or_R <= m.e.r) {
            C = m.e.c + 1 - or_C;
            midx = -1;
          }
        }
        /* TODO: figure out how to extract nonstandard mso- style */


        CS = +elt.getAttribute("colspan") || 1;
        if ((RS = +elt.getAttribute("rowspan") || 1) > 1 || CS > 1) merges.push({
          s: {
            r: R + or_R,
            c: C + or_C
          },
          e: {
            r: R + or_R + (RS || 1) - 1,
            c: C + or_C + (CS || 1) - 1
          }
        });
        var o = {
          t: 's',
          v: v
        };

        var _t = elt.getAttribute("t") || "";

        if (v != null) {
          if (v.length == 0) o.t = _t || 'z';else if (opts.raw || v.trim().length == 0 || _t == "s") {} else if (v === 'TRUE') o = {
            t: 'b',
            v: true
          };else if (v === 'FALSE') o = {
            t: 'b',
            v: false
          };else if (!isNaN(fuzzynum(v))) o = {
            t: 'n',
            v: fuzzynum(v)
          };else if (!isNaN(fuzzydate(v).getDate())) {
            o = {
              t: 'd',
              v: parseDate(v)
            };
            if (!opts.cellDates) o = {
              t: 'n',
              v: datenum(o.v)
            };
            o.z = opts.dateNF || SSF._table[14];
          }
        }

        if (o.z === undefined && z != null) o.z = z;

        if (opts.dense) {
          if (!ws[R + or_R]) ws[R + or_R] = [];
          ws[R + or_R][C + or_C] = o;
        } else ws[encode_cell({
          c: C + or_C,
          r: R + or_R
        })] = o;

        if (range.e.c < C + or_C) range.e.c = C + or_C;
        C += CS;
      }

      ++R;
    }

    if (merges.length) ws['!merges'] = (ws["!merges"] || []).concat(merges);
    range.e.r = Math.max(range.e.r, R - 1 + or_R);
    ws['!ref'] = encode_range(range);
    if (R >= sheetRows) ws['!fullref'] = encode_range((range.e.r = rows.length - _R + R - 1 + or_R, range)); // We can count the real number of rows to parse but we don't to improve the performance

    return ws;
  }

  function parse_dom_table(table, _opts) {
    var opts = _opts || {};
    var ws = opts.dense ? [] : {};
    return sheet_add_dom(ws, table, _opts);
  }

  function table_to_book(table, opts) {
    return sheet_to_workbook(parse_dom_table(table, opts), opts);
  }

  function is_dom_element_hidden(element) {
    var display = '';
    var get_computed_style = get_get_computed_style_function(element);
    if (get_computed_style) display = get_computed_style(element).getPropertyValue('display');
    if (!display) display = element.style.display; // Fallback for cases when getComputedStyle is not available (e.g. an old browser or some Node.js environments) or doesn't work (e.g. if the element is not inserted to a document)

    return display === 'none';
  }
  /* global getComputedStyle */


  function get_get_computed_style_function(element) {
    // The proper getComputedStyle implementation is the one defined in the element window
    if (element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === 'function') return element.ownerDocument.defaultView.getComputedStyle; // If it is not available, try to get one from the global namespace

    if (typeof getComputedStyle === 'function') return getComputedStyle;
    return null;
  }
  /* OpenDocument */


  var parse_content_xml = function () {
    var parse_text_p = function (text) {
      /* 6.1.2 White Space Characters */
      var fixed = text.replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ").replace(/<text:s\/>/g, " ").replace(/<text:s text:c="(\d+)"\/>/g, function ($$, $1) {
        return Array(parseInt($1, 10) + 1).join(" ");
      }).replace(/<text:tab[^>]*\/>/g, "\t").replace(/<text:line-break\/>/g, "\n");
      var v = unescapexml(fixed.replace(/<[^>]*>/g, ""));
      return [v];
    };

    var number_formats = {
      /* ods name: [short ssf fmt, long ssf fmt] */
      day: ["d", "dd"],
      month: ["m", "mm"],
      year: ["y", "yy"],
      hours: ["h", "hh"],
      minutes: ["m", "mm"],
      seconds: ["s", "ss"],
      "am-pm": ["A/P", "AM/PM"],
      "day-of-week": ["ddd", "dddd"],
      era: ["e", "ee"],

      /* there is no native representation of LO "Q" format */
      quarter: ["\\Qm", "m\\\"th quarter\""]
    };
    return function pcx(d, _opts) {
      var opts = _opts || {};
      if (DENSE != null && opts.dense == null) opts.dense = DENSE;
      var str = xlml_normalize(d);
      var state = [],
          tmp;
      var tag;
      var NFtag = {
        name: ""
      },
          NF = "",
          pidx = 0;
      var sheetag;
      var rowtag;
      var Sheets = {},
          SheetNames = [];
      var ws = opts.dense ? [] : {};
      var Rn, q;
      var ctag = {
        value: ""
      };
      var textp = "",
          textpidx = 0,
          textptag;
      var textR = [];
      var R = -1,
          C = -1,
          range = {
        s: {
          r: 1000000,
          c: 10000000
        },
        e: {
          r: 0,
          c: 0
        }
      };
      var row_ol = 0;
      var number_format_map = {};
      var merges = [],
          mrange = {},
          mR = 0,
          mC = 0;
      var rowinfo = [],
          rowpeat = 1,
          colpeat = 1;
      var arrayf = [];
      var WB = {
        Names: []
      };
      var atag = {};
      var _Ref = ["", ""];
      var comments = [],
          comment = {};
      var creator = "",
          creatoridx = 0;
      var isstub = false,
          intable = false;
      var i = 0;
      xlmlregex.lastIndex = 0;
      str = str.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");

      while (Rn = xlmlregex.exec(str)) switch (Rn[3] = Rn[3].replace(/_.*$/, "")) {
        case 'table':
        case 'å·¥ä½è¡¨':
          // 9.1.2 <table:table>
          if (Rn[1] === '/') {
            if (range.e.c >= range.s.c && range.e.r >= range.s.r) ws['!ref'] = encode_range(range);else ws['!ref'] = "A1:A1";

            if (opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {
              ws['!fullref'] = ws['!ref'];
              range.e.r = opts.sheetRows - 1;
              ws['!ref'] = encode_range(range);
            }

            if (merges.length) ws['!merges'] = merges;
            if (rowinfo.length) ws["!rows"] = rowinfo;
            sheetag.name = sheetag['åç§°'] || sheetag.name;
            if (typeof JSON !== 'undefined') JSON.stringify(sheetag);
            SheetNames.push(sheetag.name);
            Sheets[sheetag.name] = ws;
            intable = false;
          } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {
            sheetag = parsexmltag(Rn[0], false);
            R = C = -1;
            range.s.r = range.s.c = 10000000;
            range.e.r = range.e.c = 0;
            ws = opts.dense ? [] : {};
            merges = [];
            rowinfo = [];
            intable = true;
          }

          break;

        case 'table-row-group':
          // 9.1.9 <table:table-row-group>
          if (Rn[1] === "/") --row_ol;else ++row_ol;
          break;

        case 'table-row':
        case 'è¡':
          // 9.1.3 <table:table-row>
          if (Rn[1] === '/') {
            R += rowpeat;
            rowpeat = 1;
            break;
          }

          rowtag = parsexmltag(Rn[0], false);
          if (rowtag['è¡å·']) R = rowtag['è¡å·'] - 1;else if (R == -1) R = 0;
          rowpeat = +rowtag['number-rows-repeated'] || 1;
          /* TODO: remove magic */

          if (rowpeat < 10) for (i = 0; i < rowpeat; ++i) if (row_ol > 0) rowinfo[R + i] = {
            level: row_ol
          };
          C = -1;
          break;

        case 'covered-table-cell':
          // 9.1.5 <table:covered-table-cell>
          if (Rn[1] !== '/') ++C;

          if (opts.sheetStubs) {
            if (opts.dense) {
              if (!ws[R]) ws[R] = [];
              ws[R][C] = {
                t: 'z'
              };
            } else ws[encode_cell({
              r: R,
              c: C
            })] = {
              t: 'z'
            };
          }

          textp = "";
          textR = [];
          break;

        /* stub */

        case 'table-cell':
        case 'æ°æ®':
          if (Rn[0].charAt(Rn[0].length - 2) === '/') {
            ++C;
            ctag = parsexmltag(Rn[0], false);
            colpeat = parseInt(ctag['number-columns-repeated'] || "1", 10);
            q = {
              t: 'z',
              v: null
            };
            if (ctag.formula && opts.cellFormula != false) q.f = ods_to_csf_formula(unescapexml(ctag.formula));

            if ((ctag['æ°æ®ç±»å'] || ctag['value-type']) == "string") {
              q.t = "s";
              q.v = unescapexml(ctag['string-value'] || "");

              if (opts.dense) {
                if (!ws[R]) ws[R] = [];
                ws[R][C] = q;
              } else {
                ws[encode_cell({
                  r: R,
                  c: C
                })] = q;
              }
            }

            C += colpeat - 1;
          } else if (Rn[1] !== '/') {
            ++C;
            colpeat = 1;
            var rptR = rowpeat ? R + rowpeat - 1 : R;
            if (C > range.e.c) range.e.c = C;
            if (C < range.s.c) range.s.c = C;
            if (R < range.s.r) range.s.r = R;
            if (rptR > range.e.r) range.e.r = rptR;
            ctag = parsexmltag(Rn[0], false);
            comments = [];
            comment = {};
            q = {
              t: ctag['æ°æ®ç±»å'] || ctag['value-type'],
              v: null
            };

            if (opts.cellFormula) {
              if (ctag.formula) ctag.formula = unescapexml(ctag.formula);

              if (ctag['number-matrix-columns-spanned'] && ctag['number-matrix-rows-spanned']) {
                mR = parseInt(ctag['number-matrix-rows-spanned'], 10) || 0;
                mC = parseInt(ctag['number-matrix-columns-spanned'], 10) || 0;
                mrange = {
                  s: {
                    r: R,
                    c: C
                  },
                  e: {
                    r: R + mR - 1,
                    c: C + mC - 1
                  }
                };
                q.F = encode_range(mrange);
                arrayf.push([mrange, q.F]);
              }

              if (ctag.formula) q.f = ods_to_csf_formula(ctag.formula);else for (i = 0; i < arrayf.length; ++i) if (R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r) if (C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c) q.F = arrayf[i][1];
            }

            if (ctag['number-columns-spanned'] || ctag['number-rows-spanned']) {
              mR = parseInt(ctag['number-rows-spanned'], 10) || 0;
              mC = parseInt(ctag['number-columns-spanned'], 10) || 0;
              mrange = {
                s: {
                  r: R,
                  c: C
                },
                e: {
                  r: R + mR - 1,
                  c: C + mC - 1
                }
              };
              merges.push(mrange);
            }
            /* 19.675.2 table:number-columns-repeated */


            if (ctag['number-columns-repeated']) colpeat = parseInt(ctag['number-columns-repeated'], 10);
            /* 19.385 office:value-type */

            switch (q.t) {
              case 'boolean':
                q.t = 'b';
                q.v = parsexmlbool(ctag['boolean-value']);
                break;

              case 'float':
                q.t = 'n';
                q.v = parseFloat(ctag.value);
                break;

              case 'percentage':
                q.t = 'n';
                q.v = parseFloat(ctag.value);
                break;

              case 'currency':
                q.t = 'n';
                q.v = parseFloat(ctag.value);
                break;

              case 'date':
                q.t = 'd';
                q.v = parseDate(ctag['date-value']);

                if (!opts.cellDates) {
                  q.t = 'n';
                  q.v = datenum(q.v);
                }

                q.z = 'm/d/yy';
                break;

              case 'time':
                q.t = 'n';
                q.v = parse_isodur(ctag['time-value']) / 86400;
                break;

              case 'number':
                q.t = 'n';
                q.v = parseFloat(ctag['æ°æ®æ°å¼']);
                break;

              default:
                if (q.t === 'string' || q.t === 'text' || !q.t) {
                  q.t = 's';

                  if (ctag['string-value'] != null) {
                    textp = unescapexml(ctag['string-value']);
                    textR = [];
                  }
                } else throw new Error('Unsupported value type ' + q.t);

            }
          } else {
            isstub = false;

            if (q.t === 's') {
              q.v = textp || '';
              if (textR.length) q.R = textR;
              isstub = textpidx == 0;
            }

            if (atag.Target) q.l = atag;

            if (comments.length > 0) {
              q.c = comments;
              comments = [];
            }

            if (textp && opts.cellText !== false) q.w = textp;

            if (isstub) {
              q.t = "z";
              delete q.v;
            }

            if (!isstub || opts.sheetStubs) {
              if (!(opts.sheetRows && opts.sheetRows <= R)) {
                for (var rpt = 0; rpt < rowpeat; ++rpt) {
                  colpeat = parseInt(ctag['number-columns-repeated'] || "1", 10);

                  if (opts.dense) {
                    if (!ws[R + rpt]) ws[R + rpt] = [];
                    ws[R + rpt][C] = rpt == 0 ? q : dup(q);

                    while (--colpeat > 0) ws[R + rpt][C + colpeat] = dup(q);
                  } else {
                    ws[encode_cell({
                      r: R + rpt,
                      c: C
                    })] = q;

                    while (--colpeat > 0) ws[encode_cell({
                      r: R + rpt,
                      c: C + colpeat
                    })] = dup(q);
                  }

                  if (range.e.c <= C) range.e.c = C;
                }
              }
            }

            colpeat = parseInt(ctag['number-columns-repeated'] || "1", 10);
            C += colpeat - 1;
            colpeat = 0;
            q = {};
            textp = "";
            textR = [];
          }

          atag = {};
          break;
        // 9.1.4 <table:table-cell>

        /* pure state */

        case 'document': // TODO: <office:document> is the root for FODS

        case 'document-content':
        case 'çµå­è¡¨æ ¼ææ¡£': // 3.1.3.2 <office:document-content>

        case 'spreadsheet':
        case 'ä¸»ä½': // 3.7 <office:spreadsheet>

        case 'scripts': // 3.12 <office:scripts>

        case 'styles': // TODO <office:styles>

        case 'font-face-decls': // 3.14 <office:font-face-decls>

        case 'master-styles':
          //3.15.4 <office:master-styles> -- relevant for FODS
          if (Rn[1] === '/') {
            if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
          } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') state.push([Rn[3], true]);

          break;

        case 'annotation':
          // 14.1 <office:annotation>
          if (Rn[1] === '/') {
            if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
            comment.t = textp;
            if (textR.length) comment.R = textR;
            comment.a = creator;
            comments.push(comment);
          } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {
            state.push([Rn[3], false]);
          }

          creator = "";
          creatoridx = 0;
          textp = "";
          textpidx = 0;
          textR = [];
          break;

        case 'creator':
          // 4.3.2.7 <dc:creator>
          if (Rn[1] === '/') {
            creator = str.slice(creatoridx, Rn.index);
          } else creatoridx = Rn.index + Rn[0].length;

          break;

        /* ignore state */

        case 'meta':
        case 'åæ°æ®': // TODO: <office:meta> <uof:åæ°æ®> FODS/UOF

        case 'settings': // TODO: <office:settings>

        case 'config-item-set': // TODO: <office:config-item-set>

        case 'config-item-map-indexed': // TODO: <office:config-item-map-indexed>

        case 'config-item-map-entry': // TODO: <office:config-item-map-entry>

        case 'config-item-map-named': // TODO: <office:config-item-map-entry>

        case 'shapes': // 9.2.8 <table:shapes>

        case 'frame': // 10.4.2 <draw:frame>

        case 'text-box': // 10.4.3 <draw:text-box>

        case 'image': // 10.4.4 <draw:image>

        case 'data-pilot-tables': // 9.6.2 <table:data-pilot-tables>

        case 'list-style': // 16.30 <text:list-style>

        case 'form': // 13.13 <form:form>

        case 'dde-links': // 9.8 <table:dde-links>

        case 'event-listeners': // TODO

        case 'chart':
          // TODO
          if (Rn[1] === '/') {
            if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
          } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') state.push([Rn[3], false]);

          textp = "";
          textpidx = 0;
          textR = [];
          break;

        case 'scientific-number':
          // TODO: <number:scientific-number>
          break;

        case 'currency-symbol':
          // TODO: <number:currency-symbol>
          break;

        case 'currency-style':
          // TODO: <number:currency-style>
          break;

        case 'number-style': // 16.27.2 <number:number-style>

        case 'percentage-style': // 16.27.9 <number:percentage-style>

        case 'date-style': // 16.27.10 <number:date-style>

        case 'time-style':
          // 16.27.18 <number:time-style>
          if (Rn[1] === '/') {
            number_format_map[NFtag.name] = NF;
            if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
          } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {
            NF = "";
            NFtag = parsexmltag(Rn[0], false);
            state.push([Rn[3], true]);
          }

          break;

        case 'script':
          break;
        // 3.13 <office:script>

        case 'libraries':
          break;
        // TODO: <ooo:libraries>

        case 'automatic-styles':
          break;
        // 3.15.3 <office:automatic-styles>

        case 'default-style': // TODO: <style:default-style>

        case 'page-layout':
          break;
        // TODO: <style:page-layout>

        case 'style':
          // 16.2 <style:style>
          break;

        case 'map':
          break;
        // 16.3 <style:map>

        case 'font-face':
          break;
        // 16.21 <style:font-face>

        case 'paragraph-properties':
          break;
        // 17.6 <style:paragraph-properties>

        case 'table-properties':
          break;
        // 17.15 <style:table-properties>

        case 'table-column-properties':
          break;
        // 17.16 <style:table-column-properties>

        case 'table-row-properties':
          break;
        // 17.17 <style:table-row-properties>

        case 'table-cell-properties':
          break;
        // 17.18 <style:table-cell-properties>

        case 'number':
          // 16.27.3 <number:number>
          switch (state[state.length - 1][0]) {
            case 'time-style':
            case 'date-style':
              tag = parsexmltag(Rn[0], false);
              NF += number_formats[Rn[3]][tag.style === 'long' ? 1 : 0];
              break;
          }

          break;

        case 'fraction':
          break;
        // TODO 16.27.6 <number:fraction>

        case 'day': // 16.27.11 <number:day>

        case 'month': // 16.27.12 <number:month>

        case 'year': // 16.27.13 <number:year>

        case 'era': // 16.27.14 <number:era>

        case 'day-of-week': // 16.27.15 <number:day-of-week>

        case 'week-of-year': // 16.27.16 <number:week-of-year>

        case 'quarter': // 16.27.17 <number:quarter>

        case 'hours': // 16.27.19 <number:hours>

        case 'minutes': // 16.27.20 <number:minutes>

        case 'seconds': // 16.27.21 <number:seconds>

        case 'am-pm':
          // 16.27.22 <number:am-pm>
          switch (state[state.length - 1][0]) {
            case 'time-style':
            case 'date-style':
              tag = parsexmltag(Rn[0], false);
              NF += number_formats[Rn[3]][tag.style === 'long' ? 1 : 0];
              break;
          }

          break;

        case 'boolean-style':
          break;
        // 16.27.23 <number:boolean-style>

        case 'boolean':
          break;
        // 16.27.24 <number:boolean>

        case 'text-style':
          break;
        // 16.27.25 <number:text-style>

        case 'text':
          // 16.27.26 <number:text>
          if (Rn[0].slice(-2) === "/>") break;else if (Rn[1] === "/") switch (state[state.length - 1][0]) {
            case 'number-style':
            case 'date-style':
            case 'time-style':
              NF += str.slice(pidx, Rn.index);
              break;
          } else pidx = Rn.index + Rn[0].length;
          break;

        case 'named-range':
          // 9.4.12 <table:named-range>
          tag = parsexmltag(Rn[0], false);
          _Ref = ods_to_csf_3D(tag['cell-range-address']);
          var nrange = {
            Name: tag.name,
            Ref: _Ref[0] + '!' + _Ref[1]
          };
          if (intable) nrange.Sheet = SheetNames.length;
          WB.Names.push(nrange);
          break;

        case 'text-content':
          break;
        // 16.27.27 <number:text-content>

        case 'text-properties':
          break;
        // 16.27.27 <style:text-properties>

        case 'embedded-text':
          break;
        // 16.27.4 <number:embedded-text>

        case 'body':
        case 'çµå­è¡¨æ ¼':
          break;
        // 3.3 16.9.6 19.726.3

        case 'forms':
          break;
        // 12.25.2 13.2

        case 'table-column':
          break;
        // 9.1.6 <table:table-column>

        case 'table-header-rows':
          break;
        // 9.1.7 <table:table-header-rows>

        case 'table-rows':
          break;
        // 9.1.12 <table:table-rows>

        /* TODO: outline levels */

        case 'table-column-group':
          break;
        // 9.1.10 <table:table-column-group>

        case 'table-header-columns':
          break;
        // 9.1.11 <table:table-header-columns>

        case 'table-columns':
          break;
        // 9.1.12 <table:table-columns>

        case 'null-date':
          break;
        // 9.4.2 <table:null-date> TODO: date1904

        case 'graphic-properties':
          break;
        // 17.21 <style:graphic-properties>

        case 'calculation-settings':
          break;
        // 9.4.1 <table:calculation-settings>

        case 'named-expressions':
          break;
        // 9.4.11 <table:named-expressions>

        case 'label-range':
          break;
        // 9.4.9 <table:label-range>

        case 'label-ranges':
          break;
        // 9.4.10 <table:label-ranges>

        case 'named-expression':
          break;
        // 9.4.13 <table:named-expression>

        case 'sort':
          break;
        // 9.4.19 <table:sort>

        case 'sort-by':
          break;
        // 9.4.20 <table:sort-by>

        case 'sort-groups':
          break;
        // 9.4.22 <table:sort-groups>

        case 'tab':
          break;
        // 6.1.4 <text:tab>

        case 'line-break':
          break;
        // 6.1.5 <text:line-break>

        case 'span':
          break;
        // 6.1.7 <text:span>

        case 'p':
        case 'ææ¬ä¸²':
          // 5.1.3 <text:p>
          if (['master-styles'].indexOf(state[state.length - 1][0]) > -1) break;

          if (Rn[1] === '/' && (!ctag || !ctag['string-value'])) {
            var ptp = parse_text_p(str.slice(textpidx, Rn.index), textptag);
            textp = (textp.length > 0 ? textp + "\n" : "") + ptp[0];
          } else {
            textptag = parsexmltag(Rn[0], false);
            textpidx = Rn.index + Rn[0].length;
          }

          break;
        // <text:p>

        case 's':
          break;
        // <text:s>

        case 'database-range':
          // 9.4.15 <table:database-range>
          if (Rn[1] === '/') break;

          try {
            _Ref = ods_to_csf_3D(parsexmltag(Rn[0])['target-range-address']);
            Sheets[_Ref[0]]['!autofilter'] = {
              ref: _Ref[1]
            };
          } catch (e) {
            /* empty */
          }

          break;

        case 'date':
          break;
        // <*:date>

        case 'object':
          break;
        // 10.4.6.2 <draw:object>

        case 'title':
        case 'æ é¢':
          break;
        // <*:title> OR <uof:æ é¢>

        case 'desc':
          break;
        // <*:desc>

        case 'binary-data':
          break;
        // 10.4.5 TODO: b64 blob

        /* 9.2 Advanced Tables */

        case 'table-source':
          break;
        // 9.2.6

        case 'scenario':
          break;
        // 9.2.6

        case 'iteration':
          break;
        // 9.4.3 <table:iteration>

        case 'content-validations':
          break;
        // 9.4.4 <table:

        case 'content-validation':
          break;
        // 9.4.5 <table:

        case 'help-message':
          break;
        // 9.4.6 <table:

        case 'error-message':
          break;
        // 9.4.7 <table:

        case 'database-ranges':
          break;
        // 9.4.14 <table:database-ranges>

        case 'filter':
          break;
        // 9.5.2 <table:filter>

        case 'filter-and':
          break;
        // 9.5.3 <table:filter-and>

        case 'filter-or':
          break;
        // 9.5.4 <table:filter-or>

        case 'filter-condition':
          break;
        // 9.5.5 <table:filter-condition>

        case 'list-level-style-bullet':
          break;
        // 16.31 <text:

        case 'list-level-style-number':
          break;
        // 16.32 <text:

        case 'list-level-properties':
          break;
        // 17.19 <style:

        /* 7.3 Document Fields */

        case 'sender-firstname': // 7.3.6.2

        case 'sender-lastname': // 7.3.6.3

        case 'sender-initials': // 7.3.6.4

        case 'sender-title': // 7.3.6.5

        case 'sender-position': // 7.3.6.6

        case 'sender-email': // 7.3.6.7

        case 'sender-phone-private': // 7.3.6.8

        case 'sender-fax': // 7.3.6.9

        case 'sender-company': // 7.3.6.10

        case 'sender-phone-work': // 7.3.6.11

        case 'sender-street': // 7.3.6.12

        case 'sender-city': // 7.3.6.13

        case 'sender-postal-code': // 7.3.6.14

        case 'sender-country': // 7.3.6.15

        case 'sender-state-or-province': // 7.3.6.16

        case 'author-name': // 7.3.7.1

        case 'author-initials': // 7.3.7.2

        case 'chapter': // 7.3.8

        case 'file-name': // 7.3.9

        case 'template-name': // 7.3.9

        case 'sheet-name':
          // 7.3.9
          break;

        case 'event-listener':
          break;

        /* TODO: FODS Properties */

        case 'initial-creator':
        case 'creation-date':
        case 'print-date':
        case 'generator':
        case 'document-statistic':
        case 'user-defined':
        case 'editing-duration':
        case 'editing-cycles':
          break;

        /* TODO: FODS Config */

        case 'config-item':
          break;

        /* TODO: style tokens */

        case 'page-number':
          break;
        // TODO <text:page-number>

        case 'page-count':
          break;
        // TODO <text:page-count>

        case 'time':
          break;
        // TODO <text:time>

        /* 9.3 Advanced Table Cells */

        case 'cell-range-source':
          break;
        // 9.3.1 <table:

        case 'detective':
          break;
        // 9.3.2 <table:

        case 'operation':
          break;
        // 9.3.3 <table:

        case 'highlighted-range':
          break;
        // 9.3.4 <table:

        /* 9.6 Data Pilot Tables <table: */

        case 'data-pilot-table': // 9.6.3

        case 'source-cell-range': // 9.6.5

        case 'source-service': // 9.6.6

        case 'data-pilot-field': // 9.6.7

        case 'data-pilot-level': // 9.6.8

        case 'data-pilot-subtotals': // 9.6.9

        case 'data-pilot-subtotal': // 9.6.10

        case 'data-pilot-members': // 9.6.11

        case 'data-pilot-member': // 9.6.12

        case 'data-pilot-display-info': // 9.6.13

        case 'data-pilot-sort-info': // 9.6.14

        case 'data-pilot-layout-info': // 9.6.15

        case 'data-pilot-field-reference': // 9.6.16

        case 'data-pilot-groups': // 9.6.17

        case 'data-pilot-group': // 9.6.18

        case 'data-pilot-group-member':
          // 9.6.19
          break;

        /* 10.3 Drawing Shapes */

        case 'rect':
          // 10.3.2
          break;

        /* 14.6 DDE Connections */

        case 'dde-connection-decls': // 14.6.2 <text:

        case 'dde-connection-decl': // 14.6.3 <text:

        case 'dde-link': // 14.6.4 <table:

        case 'dde-source':
          // 14.6.5 <office:
          break;

        case 'properties':
          break;
        // 13.7 <form:properties>

        case 'property':
          break;
        // 13.8 <form:property>

        case 'a':
          // 6.1.8 hyperlink
          if (Rn[1] !== '/') {
            atag = parsexmltag(Rn[0], false);
            if (!atag.href) break;
            atag.Target = atag.href;
            delete atag.href;

            if (atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
              _Ref = ods_to_csf_3D(atag.Target.slice(1));
              atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
            }
          }

          break;

        /* non-standard */

        case 'table-protection':
          break;

        case 'data-pilot-grand-total':
          break;
        // <table:

        case 'office-document-common-attrs':
          break;
        // bare

        default:
          switch (Rn[2]) {
            case 'dc:': // TODO: properties

            case 'calcext:': // ignore undocumented extensions

            case 'loext:': // ignore undocumented extensions

            case 'ooo:': // ignore undocumented extensions

            case 'chartooo:': // ignore undocumented extensions

            case 'draw:': // TODO: drawing

            case 'style:': // TODO: styles

            case 'chart:': // TODO: charts

            case 'form:': // TODO: forms

            case 'uof:': // TODO: uof

            case 'è¡¨:': // TODO: uof

            case 'å­:':
              // TODO: uof
              break;

            default:
              if (opts.WTF) throw new Error(Rn);
          }

      }

      var out = {
        Sheets: Sheets,
        SheetNames: SheetNames,
        Workbook: WB
      };
      if (opts.bookSheets) delete out.Sheets;
      return out;
    };
  }();

  function parse_ods(zip, opts) {
    opts = opts || {};
    var ods = !!safegetzipfile(zip, 'objectdata');
    if (ods) parse_manifest(getzipdata(zip, 'META-INF/manifest.xml'), opts);
    var content = getzipstr(zip, 'content.xml');
    if (!content) throw new Error("Missing content.xml in " + (ods ? "ODS" : "UOF") + " file");
    var wb = parse_content_xml(ods ? content : utf8read(content), opts);
    if (safegetzipfile(zip, 'meta.xml')) wb.Props = parse_core_props(getzipdata(zip, 'meta.xml'));
    return wb;
  }

  function parse_fods(data, opts) {
    return parse_content_xml(data, opts);
  }
  /* OpenDocument */


  var write_styles_ods = function () {
    var payload = '<office:document-styles ' + wxt_helper({
      'xmlns:office': "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
      'xmlns:table': "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
      'xmlns:style': "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
      'xmlns:text': "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
      'xmlns:draw': "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
      'xmlns:fo': "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
      'xmlns:xlink': "http://www.w3.org/1999/xlink",
      'xmlns:dc': "http://purl.org/dc/elements/1.1/",
      'xmlns:number': "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
      'xmlns:svg': "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
      'xmlns:of': "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
      'office:version': "1.2"
    }) + '></office:document-styles>';
    return function wso() {
      return XML_HEADER + payload;
    };
  }();

  var write_content_ods = function () {
    /* 6.1.2 White Space Characters */
    var write_text_p = function (text) {
      return escapexml(text).replace(/  +/g, function ($$) {
        return '<text:s text:c="' + $$.length + '"/>';
      }).replace(/\t/g, "<text:tab/>").replace(/\n/g, "<text:line-break/>").replace(/^ /, "<text:s/>").replace(/ $/, "<text:s/>");
    };

    var null_cell_xml = '          <table:table-cell />\n';
    var covered_cell_xml = '          <table:covered-table-cell/>\n';

    var write_ws = function (ws, wb, i) {
      /* Section 9 Tables */
      var o = [];
      o.push('      <table:table table:name="' + escapexml(wb.SheetNames[i]) + '" table:style-name="ta1">\n');
      var R = 0,
          C = 0,
          range = decode_range(ws['!ref']);
      var marr = ws['!merges'] || [],
          mi = 0;
      var dense = Array.isArray(ws);

      for (R = 0; R < range.s.r; ++R) o.push('        <table:table-row></table:table-row>\n');

      for (; R <= range.e.r; ++R) {
        o.push('        <table:table-row>\n');

        for (C = 0; C < range.s.c; ++C) o.push(null_cell_xml);

        for (; C <= range.e.c; ++C) {
          var skip = false,
              ct = {},
              textp = "";

          for (mi = 0; mi != marr.length; ++mi) {
            if (marr[mi].s.c > C) continue;
            if (marr[mi].s.r > R) continue;
            if (marr[mi].e.c < C) continue;
            if (marr[mi].e.r < R) continue;
            if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
            ct['table:number-columns-spanned'] = marr[mi].e.c - marr[mi].s.c + 1;
            ct['table:number-rows-spanned'] = marr[mi].e.r - marr[mi].s.r + 1;
            break;
          }

          if (skip) {
            o.push(covered_cell_xml);
            continue;
          }

          var ref = encode_cell({
            r: R,
            c: C
          }),
              cell = dense ? (ws[R] || [])[C] : ws[ref];

          if (cell && cell.f) {
            ct['table:formula'] = escapexml(csf_to_ods_formula(cell.f));

            if (cell.F) {
              if (cell.F.slice(0, ref.length) == ref) {
                var _Fref = decode_range(cell.F);

                ct['table:number-matrix-columns-spanned'] = _Fref.e.c - _Fref.s.c + 1;
                ct['table:number-matrix-rows-spanned'] = _Fref.e.r - _Fref.s.r + 1;
              }
            }
          }

          if (!cell) {
            o.push(null_cell_xml);
            continue;
          }

          switch (cell.t) {
            case 'b':
              textp = cell.v ? 'TRUE' : 'FALSE';
              ct['office:value-type'] = "boolean";
              ct['office:boolean-value'] = cell.v ? 'true' : 'false';
              break;

            case 'n':
              textp = cell.w || String(cell.v || 0);
              ct['office:value-type'] = "float";
              ct['office:value'] = cell.v || 0;
              break;

            case 's':
            case 'str':
              textp = cell.v == null ? "" : cell.v;
              ct['office:value-type'] = "string";
              break;

            case 'd':
              textp = cell.w || parseDate(cell.v).toISOString();
              ct['office:value-type'] = "date";
              ct['office:date-value'] = parseDate(cell.v).toISOString();
              ct['table:style-name'] = "ce1";
              break;
            //case 'e':

            default:
              o.push(null_cell_xml);
              continue;
          }

          var text_p = write_text_p(textp);

          if (cell.l && cell.l.Target) {
            var _tgt = cell.l.Target;
            _tgt = _tgt.charAt(0) == "#" ? "#" + csf_to_ods_3D(_tgt.slice(1)) : _tgt;
            text_p = writextag('text:a', text_p, {
              'xlink:href': _tgt
            });
          }

          o.push('          ' + writextag('table:table-cell', writextag('text:p', text_p, {}), ct) + '\n');
        }

        o.push('        </table:table-row>\n');
      }

      o.push('      </table:table>\n');
      return o.join("");
    };

    var write_automatic_styles_ods = function (o) {
      o.push(' <office:automatic-styles>\n');
      o.push('  <number:date-style style:name="N37" number:automatic-order="true">\n');
      o.push('   <number:month number:style="long"/>\n');
      o.push('   <number:text>/</number:text>\n');
      o.push('   <number:day number:style="long"/>\n');
      o.push('   <number:text>/</number:text>\n');
      o.push('   <number:year/>\n');
      o.push('  </number:date-style>\n');
      /* table */

      o.push('  <style:style style:name="ta1" style:family="table">\n'); // style:master-page-name="mp1">\n');

      o.push('   <style:table-properties table:display="true" style:writing-mode="lr-tb"/>\n');
      o.push('  </style:style>\n');
      /* table cells, text */

      o.push('  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>\n');
      /* page-layout */

      o.push(' </office:automatic-styles>\n');
    };

    return function wcx(wb, opts) {
      var o = [XML_HEADER];
      /* 3.1.3.2 */

      var attr = wxt_helper({
        'xmlns:office': "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
        'xmlns:table': "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
        'xmlns:style': "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
        'xmlns:text': "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
        'xmlns:draw': "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
        'xmlns:fo': "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
        'xmlns:xlink': "http://www.w3.org/1999/xlink",
        'xmlns:dc': "http://purl.org/dc/elements/1.1/",
        'xmlns:meta': "urn:oasis:names:tc:opendocument:xmlns:meta:1.0",
        'xmlns:number': "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
        'xmlns:presentation': "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0",
        'xmlns:svg': "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
        'xmlns:chart': "urn:oasis:names:tc:opendocument:xmlns:chart:1.0",
        'xmlns:dr3d': "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0",
        'xmlns:math': "http://www.w3.org/1998/Math/MathML",
        'xmlns:form': "urn:oasis:names:tc:opendocument:xmlns:form:1.0",
        'xmlns:script': "urn:oasis:names:tc:opendocument:xmlns:script:1.0",
        'xmlns:ooo': "http://openoffice.org/2004/office",
        'xmlns:ooow': "http://openoffice.org/2004/writer",
        'xmlns:oooc': "http://openoffice.org/2004/calc",
        'xmlns:dom': "http://www.w3.org/2001/xml-events",
        'xmlns:xforms': "http://www.w3.org/2002/xforms",
        'xmlns:xsd': "http://www.w3.org/2001/XMLSchema",
        'xmlns:xsi': "http://www.w3.org/2001/XMLSchema-instance",
        'xmlns:sheet': "urn:oasis:names:tc:opendocument:sh33tjs:1.0",
        'xmlns:rpt': "http://openoffice.org/2005/report",
        'xmlns:of': "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
        'xmlns:xhtml': "http://www.w3.org/1999/xhtml",
        'xmlns:grddl': "http://www.w3.org/2003/g/data-view#",
        'xmlns:tableooo': "http://openoffice.org/2009/table",
        'xmlns:drawooo': "http://openoffice.org/2010/draw",
        'xmlns:calcext': "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0",
        'xmlns:loext': "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0",
        'xmlns:field': "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0",
        'xmlns:formx': "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0",
        'xmlns:css3t': "http://www.w3.org/TR/css3-text/",
        'office:version': "1.2"
      });
      var fods = wxt_helper({
        'xmlns:config': "urn:oasis:names:tc:opendocument:xmlns:config:1.0",
        'office:mimetype': "application/vnd.oasis.opendocument.spreadsheet"
      });
      if (opts.bookType == "fods") o.push('<office:document' + attr + fods + '>\n');else o.push('<office:document-content' + attr + '>\n');
      write_automatic_styles_ods(o);
      o.push('  <office:body>\n');
      o.push('    <office:spreadsheet>\n');

      for (var i = 0; i != wb.SheetNames.length; ++i) o.push(write_ws(wb.Sheets[wb.SheetNames[i]], wb, i, opts));

      o.push('    </office:spreadsheet>\n');
      o.push('  </office:body>\n');
      if (opts.bookType == "fods") o.push('</office:document>');else o.push('</office:document-content>');
      return o.join("");
    };
  }();

  function write_ods(wb, opts) {
    if (opts.bookType == "fods") return write_content_ods(wb, opts);
    var zip = zip_new();
    var f = "";
    var manifest = [];
    var rdf = [];
    /* Part 3 Section 3.3 MIME Media Type */

    f = "mimetype";
    zip_add_file(zip, f, "application/vnd.oasis.opendocument.spreadsheet");
    /* Part 1 Section 2.2 Documents */

    f = "content.xml";
    zip_add_file(zip, f, write_content_ods(wb, opts));
    manifest.push([f, "text/xml"]);
    rdf.push([f, "ContentFile"]);
    /* TODO: these are hard-coded styles to satiate excel */

    f = "styles.xml";
    zip_add_file(zip, f, write_styles_ods(wb, opts));
    manifest.push([f, "text/xml"]);
    rdf.push([f, "StylesFile"]);
    /* TODO: this is hard-coded to satiate excel */

    f = "meta.xml";
    zip_add_file(zip, f, write_meta_ods());
    manifest.push([f, "text/xml"]);
    rdf.push([f, "MetadataFile"]);
    /* Part 3 Section 6 Metadata Manifest File */

    f = "manifest.rdf";
    zip_add_file(zip, f, write_rdf(rdf
    /*, opts*/
    ));
    manifest.push([f, "application/rdf+xml"]);
    /* Part 3 Section 4 Manifest File */

    f = "META-INF/manifest.xml";
    zip_add_file(zip, f, write_manifest(manifest
    /*, opts*/
    ));
    return zip;
  }

  function write_sheet_index(wb, sheet) {
    if (!sheet) return 0;
    var idx = wb.SheetNames.indexOf(sheet);
    if (idx == -1) throw new Error("Sheet not found: " + sheet);
    return idx;
  }

  function write_obj_str(factory) {
    return function write_str(wb, o) {
      var idx = write_sheet_index(wb, o.sheet);
      return factory.from_sheet(wb.Sheets[wb.SheetNames[idx]], o, wb);
    };
  }

  var write_htm_str = write_obj_str(HTML_);
  var write_csv_str = write_obj_str({
    from_sheet: sheet_to_csv
  });
  var write_slk_str = write_obj_str(typeof SYLK !== "undefined" ? SYLK : {});
  var write_dif_str = write_obj_str(typeof DIF !== "undefined" ? DIF : {});
  var write_prn_str = write_obj_str(typeof PRN !== "undefined" ? PRN : {});
  var write_rtf_str = write_obj_str(typeof RTF !== "undefined" ? RTF : {});
  var write_txt_str = write_obj_str({
    from_sheet: sheet_to_txt
  });
  var write_dbf_buf = write_obj_str(typeof DBF !== "undefined" ? DBF : {});
  var write_eth_str = write_obj_str(typeof ETH !== "undefined" ? ETH : {});

  function fix_opts_func(defaults) {
    return function fix_opts(opts) {
      for (var i = 0; i != defaults.length; ++i) {
        var d = defaults[i];
        if (opts[d[0]] === undefined) opts[d[0]] = d[1];
        if (d[2] === 'n') opts[d[0]] = Number(opts[d[0]]);
      }
    };
  }

  var fix_read_opts = function (opts) {
    fix_opts_func([['cellNF', false],
    /* emit cell number format string as .z */
    ['cellHTML', true],
    /* emit html string as .h */
    ['cellFormula', true],
    /* emit formulae as .f */
    ['cellStyles', false],
    /* emits style/theme as .s */
    ['cellText', true],
    /* emit formatted text as .w */
    ['cellDates', false],
    /* emit date cells with type `d` */
    ['sheetStubs', false],
    /* emit empty cells */
    ['sheetRows', 0, 'n'],
    /* read n rows (0 = read all rows) */
    ['bookDeps', false],
    /* parse calculation chains */
    ['bookSheets', false],
    /* only try to get sheet names (no Sheets) */
    ['bookProps', false],
    /* only try to get properties (no Sheets) */
    ['bookFiles', false],
    /* include raw file structure (keys, files, cfb) */
    ['bookVBA', false],
    /* include vba raw data (vbaraw) */
    ['password', ''],
    /* password */
    ['WTF', false]
    /* WTF mode (throws errors) */
    ])(opts);
  };

  var fix_write_opts = fix_opts_func([['cellDates', false],
  /* write date cells with type `d` */
  ['bookSST', false],
  /* Generate Shared String Table */
  ['bookType', 'xlsx'],
  /* Type of workbook (xlsx/m/b) */
  ['compression', false],
  /* Use file compression */
  ['WTF', false]
  /* WTF mode (throws errors) */
  ]);

  function get_sheet_type(n) {
    if (RELS.WS.indexOf(n) > -1) return "sheet";
    if (RELS.CS && n == RELS.CS) return "chart";
    if (RELS.DS && n == RELS.DS) return "dialog";
    if (RELS.MS && n == RELS.MS) return "macro";
    return n && n.length ? n : "sheet";
  }

  function safe_parse_wbrels(wbrels, sheets) {
    if (!wbrels) return 0;

    try {
      wbrels = sheets.map(function pwbr(w) {
        if (!w.id) w.id = w.strRelID;
        return [w.name, wbrels['!id'][w.id].Target, get_sheet_type(wbrels['!id'][w.id].Type)];
      });
    } catch (e) {
      return null;
    }

    return !wbrels || wbrels.length === 0 ? null : wbrels;
  }

  function safe_parse_sheet(zip, path, relsPath, sheet, idx, sheetRels, sheets, stype, opts, wb, themes, styles) {
    try {
      sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path);
      var data = getzipdata(zip, path);

      var _ws;

      switch (stype) {
        case 'sheet':
          _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
          break;

        case 'chart':
          _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
          if (!_ws || !_ws['!drawel']) break;
          var dfile = resolve_path(_ws['!drawel'].Target, path);
          var drelsp = get_rels_path(dfile);
          var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
          var chartp = resolve_path(draw, dfile);
          var crelsp = get_rels_path(chartp);
          _ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);
          break;

        case 'macro':
          _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
          break;

        case 'dialog':
          _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
          break;

        default:
          throw new Error("Unrecognized sheet type " + stype);
      }

      sheets[sheet] = _ws;
      /* scan rels for comments */

      var comments = [];
      if (sheetRels && sheetRels[sheet]) keys(sheetRels[sheet]).forEach(function (n) {
        if (sheetRels[sheet][n].Type == RELS.CMNT) {
          var dfile = resolve_path(sheetRels[sheet][n].Target, path);
          comments = parse_cmnt(getzipdata(zip, dfile, true), dfile, opts);
          if (!comments || !comments.length) return;
          sheet_insert_comments(_ws, comments);
        }
      });
    } catch (e) {
      if (opts.WTF) throw e;
    }
  }

  function strip_front_slash(x) {
    return x.charAt(0) == '/' ? x.slice(1) : x;
  }

  function parse_zip(zip, opts) {
    make_ssf(SSF);
    opts = opts || {};
    fix_read_opts(opts);
    /* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */

    if (safegetzipfile(zip, 'META-INF/manifest.xml')) return parse_ods(zip, opts);
    /* UOC */

    if (safegetzipfile(zip, 'objectdata.xml')) return parse_ods(zip, opts);
    /* Numbers */

    if (safegetzipfile(zip, 'Index/Document.iwa')) throw new Error('Unsupported NUMBERS file');
    var entries = zipentries(zip);
    var dir = parse_ct(getzipstr(zip, '[Content_Types].xml'));
    var xlsb = false;
    var sheets, binname;

    if (dir.workbooks.length === 0) {
      binname = "xl/workbook.xml";
      if (getzipdata(zip, binname, true)) dir.workbooks.push(binname);
    }

    if (dir.workbooks.length === 0) {
      binname = "xl/workbook.bin";
      if (!getzipdata(zip, binname, true)) throw new Error("Could not find workbook");
      dir.workbooks.push(binname);
      xlsb = true;
    }

    if (dir.workbooks[0].slice(-3) == "bin") xlsb = true;
    var themes = {};
    var styles = {};

    if (!opts.bookSheets && !opts.bookProps) {
      strs = [];
      if (dir.sst) try {
        strs = parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts);
      } catch (e) {
        if (opts.WTF) throw e;
      }
      if (opts.cellStyles && dir.themes.length) themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//, ''), true) || "", dir.themes[0], opts);
      if (dir.style) styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
    }
    /*var externbooks = */


    dir.links.map(function (link) {
      try {
        var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);
        return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);
      } catch (e) {}
    });
    var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);
    var props = {},
        propdata = "";

    if (dir.coreprops.length) {
      propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
      if (propdata) props = parse_core_props(propdata);

      if (dir.extprops.length !== 0) {
        propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
        if (propdata) parse_ext_props(propdata, props, opts);
      }
    }

    var custprops = {};

    if (!opts.bookSheets || opts.bookProps) {
      if (dir.custprops.length !== 0) {
        propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
        if (propdata) custprops = parse_cust_props(propdata, opts);
      }
    }

    var out = {};

    if (opts.bookSheets || opts.bookProps) {
      if (wb.Sheets) sheets = wb.Sheets.map(function pluck(x) {
        return x.name;
      });else if (props.Worksheets && props.SheetNames.length > 0) sheets = props.SheetNames;

      if (opts.bookProps) {
        out.Props = props;
        out.Custprops = custprops;
      }

      if (opts.bookSheets && typeof sheets !== 'undefined') out.SheetNames = sheets;
      if (opts.bookSheets ? out.SheetNames : opts.bookProps) return out;
    }

    sheets = {};
    var deps = {};
    if (opts.bookDeps && dir.calcchain) deps = parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)), dir.calcchain, opts);
    var i = 0;
    var sheetRels = {};
    var path, relsPath;
    {
      var wbsheets = wb.Sheets;
      props.Worksheets = wbsheets.length;
      props.SheetNames = [];

      for (var j = 0; j != wbsheets.length; ++j) {
        props.SheetNames[j] = wbsheets[j].name;
      }
    }
    var wbext = xlsb ? "bin" : "xml";
    var wbrelsi = dir.workbooks[0].lastIndexOf("/");
    var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi + 1) + "_rels/" + dir.workbooks[0].slice(wbrelsi + 1) + ".rels").replace(/^\//, "");
    if (!safegetzipfile(zip, wbrelsfile)) wbrelsfile = 'xl/_rels/workbook.' + wbext + '.rels';
    var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile);
    if (wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
    /* Numbers iOS hack */

    var nmode = getzipdata(zip, "xl/worksheets/sheet.xml", true) ? 1 : 0;

    wsloop: for (i = 0; i != props.Worksheets; ++i) {
      var stype = "sheet";

      if (wbrels && wbrels[i]) {
        path = 'xl/' + wbrels[i][1].replace(/[\/]?xl\//, "");
        if (!safegetzipfile(zip, path)) path = wbrels[i][1];
        if (!safegetzipfile(zip, path)) path = wbrelsfile.replace(/_rels\/.*$/, "") + wbrels[i][1];
        stype = wbrels[i][2];
      } else {
        path = 'xl/worksheets/sheet' + (i + 1 - nmode) + "." + wbext;
        path = path.replace(/sheet0\./, "sheet.");
      }

      relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
      if (opts && opts.sheets != null) switch (typeof opts.sheets) {
        case "number":
          if (i != opts.sheets) continue wsloop;
          break;

        case "string":
          if (props.SheetNames[i].toLowerCase() != opts.sheets.toLowerCase()) continue wsloop;
          break;

        default:
          if (Array.isArray && Array.isArray(opts.sheets)) {
            var snjseen = false;

            for (var snj = 0; snj != opts.sheets.length; ++snj) {
              if (typeof opts.sheets[snj] == "number" && opts.sheets[snj] == i) snjseen = 1;
              if (typeof opts.sheets[snj] == "string" && opts.sheets[snj].toLowerCase() == props.SheetNames[i].toLowerCase()) snjseen = 1;
            }

            if (!snjseen) continue wsloop;
          }

      }
      safe_parse_sheet(zip, path, relsPath, props.SheetNames[i], i, sheetRels, sheets, stype, opts, wb, themes, styles);
    }

    out = {
      Directory: dir,
      Workbook: wb,
      Props: props,
      Custprops: custprops,
      Deps: deps,
      Sheets: sheets,
      SheetNames: props.SheetNames,
      Strings: strs,
      Styles: styles,
      Themes: themes,
      SSF: SSF.get_table()
    };

    if (opts && opts.bookFiles) {
      out.keys = entries;
      out.files = zip.files;
    }

    if (opts && opts.bookVBA) {
      if (dir.vba.length > 0) out.vbaraw = getzipdata(zip, strip_front_slash(dir.vba[0]), true);else if (dir.defaults && dir.defaults.bin === CT_VBA) out.vbaraw = getzipdata(zip, 'xl/vbaProject.bin', true);
    }

    return out;
  }
  /* [MS-OFFCRYPTO] 2.1.1 */


  function parse_xlsxcfb(cfb, _opts) {
    var opts = _opts || {};
    var f = 'Workbook',
        data = CFB.find(cfb, f);

    try {
      f = '/!DataSpaces/Version';
      data = CFB.find(cfb, f);
      if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
      /*var version = */

      parse_DataSpaceVersionInfo(data.content);
      /* 2.3.4.1 */

      f = '/!DataSpaces/DataSpaceMap';
      data = CFB.find(cfb, f);
      if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
      var dsm = parse_DataSpaceMap(data.content);
      if (dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage") throw new Error("ECMA-376 Encrypted file bad " + f);
      /* 2.3.4.2 */

      f = '/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace';
      data = CFB.find(cfb, f);
      if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
      var seds = parse_DataSpaceDefinition(data.content);
      if (seds.length != 1 || seds[0] != "StrongEncryptionTransform") throw new Error("ECMA-376 Encrypted file bad " + f);
      /* 2.3.4.3 */

      f = '/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary';
      data = CFB.find(cfb, f);
      if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
      /*var hdr = */

      parse_Primary(data.content);
    } catch (e) {}

    f = '/EncryptionInfo';
    data = CFB.find(cfb, f);
    if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    var einfo = parse_EncryptionInfo(data.content);
    /* 2.3.4.4 */

    f = '/EncryptedPackage';
    data = CFB.find(cfb, f);
    if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    /*global decrypt_agile */

    if (einfo[0] == 0x04 && typeof decrypt_agile !== 'undefined') return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
    /*global decrypt_std76 */

    if (einfo[0] == 0x02 && typeof decrypt_std76 !== 'undefined') return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
    throw new Error("File is password-protected");
  }

  function write_zip(wb, opts) {
    _shapeid = 1024;
    if (opts.bookType == "ods") return write_ods(wb, opts);

    if (wb && !wb.SSF) {
      wb.SSF = SSF.get_table();
    }

    if (wb && wb.SSF) {
      make_ssf(SSF);
      SSF.load_table(wb.SSF); // $FlowIgnore

      opts.revssf = evert_num(wb.SSF);
      opts.revssf[wb.SSF[65535]] = 0;
      opts.ssf = wb.SSF;
    }

    opts.rels = {};
    opts.wbrels = {};
    opts.Strings = [];
    opts.Strings.Count = 0;
    opts.Strings.Unique = 0;
    if (browser_has_Map) opts.revStrings = new Map();else {
      opts.revStrings = {};
      opts.revStrings.foo = [];
      delete opts.revStrings.foo;
    }
    var wbext = opts.bookType == "xlsb" ? "bin" : "xml";
    var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
    var ct = new_ct();
    fix_write_opts(opts = opts || {});
    var zip = zip_new();
    var f = "",
        rId = 0;
    opts.cellXfs = [];
    get_cell_style(opts.cellXfs, {}, {
      revssf: {
        "General": 0
      }
    });
    if (!wb.Props) wb.Props = {};
    f = "docProps/core.xml";
    zip_add_file(zip, f, write_core_props(wb.Props, opts));
    ct.coreprops.push(f);
    add_rels(opts.rels, 2, f, RELS.CORE_PROPS);
    f = "docProps/app.xml";

    if (wb.Props && wb.Props.SheetNames) {
      /* empty */
    } else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;else {
      var _sn = [];

      for (var _i = 0; _i < wb.SheetNames.length; ++_i) if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2) _sn.push(wb.SheetNames[_i]);

      wb.Props.SheetNames = _sn;
    }

    wb.Props.Worksheets = wb.Props.SheetNames.length;
    zip_add_file(zip, f, write_ext_props(wb.Props, opts));
    ct.extprops.push(f);
    add_rels(opts.rels, 3, f, RELS.EXT_PROPS);

    if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
      f = "docProps/custom.xml";
      zip_add_file(zip, f, write_cust_props(wb.Custprops, opts));
      ct.custprops.push(f);
      add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
    }

    for (rId = 1; rId <= wb.SheetNames.length; ++rId) {
      var wsrels = {
        '!id': {}
      };
      var ws = wb.Sheets[wb.SheetNames[rId - 1]];

      var _type = (ws || {})["!type"] || "sheet";

      switch (_type) {
        case "chart":
        /* falls through */

        default:
          f = "xl/worksheets/sheet" + rId + "." + wbext;
          zip_add_file(zip, f, write_ws(rId - 1, f, opts, wb, wsrels));
          ct.sheets.push(f);
          add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
      }

      if (ws) {
        var comments = ws['!comments'];
        var need_vml = false;

        if (comments && comments.length > 0) {
          var cf = "xl/comments" + rId + "." + wbext;
          zip_add_file(zip, cf, write_cmnt(comments, cf, opts));
          ct.comments.push(cf);
          add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
          need_vml = true;
        }

        if (ws['!legacy']) {
          if (need_vml) zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_comments_vml(rId, ws['!comments']));
        }

        delete ws['!comments'];
        delete ws['!legacy'];
      }

      if (wsrels['!id'].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));
    }

    if (opts.Strings != null && opts.Strings.length > 0) {
      f = "xl/sharedStrings." + wbext;
      zip_add_file(zip, f, write_sst(opts.Strings, f, opts));
      ct.strs.push(f);
      add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
    }

    f = "xl/workbook." + wbext;
    zip_add_file(zip, f, write_wb(wb, f, opts));
    ct.workbooks.push(f);
    add_rels(opts.rels, 1, f, RELS.WB);
    /* TODO: something more intelligent with themes */

    f = "xl/theme/theme1.xml";
    zip_add_file(zip, f, write_theme(wb.Themes, opts));
    ct.themes.push(f);
    add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
    /* TODO: something more intelligent with styles */

    f = "xl/styles." + wbext;
    zip_add_file(zip, f, write_sty(wb, f, opts));
    ct.styles.push(f);
    add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);

    if (wb.vbaraw && vbafmt) {
      f = "xl/vbaProject.bin";
      zip_add_file(zip, f, wb.vbaraw);
      ct.vba.push(f);
      add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
    }

    zip_add_file(zip, "[Content_Types].xml", write_ct(ct, opts));
    zip_add_file(zip, '_rels/.rels', write_rels(opts.rels));
    zip_add_file(zip, 'xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));
    delete opts.revssf;
    delete opts.ssf;
    return zip;
  }

  function firstbyte(f, o) {
    var x = "";

    switch ((o || {}).type || "base64") {
      case 'buffer':
        return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];

      case 'base64':
        x = Base64.decode(f.slice(0, 12));
        break;

      case 'binary':
        x = f;
        break;

      case 'array':
        return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];

      default:
        throw new Error("Unrecognized type " + (o && o.type || "undefined"));
    }

    return [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3), x.charCodeAt(4), x.charCodeAt(5), x.charCodeAt(6), x.charCodeAt(7)];
  }

  function read_cfb(cfb, opts) {
    if (CFB.find(cfb, "EncryptedPackage")) return parse_xlsxcfb(cfb, opts);
    return parse_xlscfb(cfb, opts);
  }

  function read_zip(data, opts) {
    var zip,
        d = data;
    var o = opts || {};
    if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
    zip = zip_read(d, o);
    return parse_zip(zip, o);
  }

  function read_plaintext(data, o) {
    var i = 0;

    main: while (i < data.length) switch (data.charCodeAt(i)) {
      case 0x0A:
      case 0x0D:
      case 0x20:
        ++i;
        break;

      case 0x3C:
        return parse_xlml(data.slice(i), o);

      default:
        break main;
    }

    return PRN.to_workbook(data, o);
  }

  function read_plaintext_raw(data, o) {
    var str = "",
        bytes = firstbyte(data, o);

    switch (o.type) {
      case 'base64':
        str = Base64.decode(data);
        break;

      case 'binary':
        str = data;
        break;

      case 'buffer':
        str = data.toString('binary');
        break;

      case 'array':
        str = cc2str(data);
        break;

      default:
        throw new Error("Unrecognized type " + o.type);
    }

    if (bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str);
    return read_plaintext(str, o);
  }

  function read_utf16(data, o) {
    var d = data;
    if (o.type == 'base64') d = Base64.decode(d);
    d = cptable.utils.decode(1200, d.slice(2), 'str');
    o.type = "binary";
    return read_plaintext(d, o);
  }

  function bstrify(data) {
    return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
  }

  function read_prn(data, d, o, str) {
    if (str) {
      o.type = "string";
      return PRN.to_workbook(data, o);
    }

    return PRN.to_workbook(d, o);
  }

  function readSync(data, opts) {
    reset_cp();
    if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) return readSync(new Uint8Array(data), opts);
    var d = data,
        n = [0, 0, 0, 0],
        str = false;
    var o = opts || {};

    if (o.cellStyles) {
      o.cellNF = true;
      o.sheetStubs = true;
    }

    _ssfopts = {};
    if (o.dateNF) _ssfopts.dateNF = o.dateNF;
    if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";

    if (o.type == "file") {
      o.type = has_buf ? "buffer" : "binary";
      d = read_binary(data);
    }

    if (o.type == "string") {
      str = true;
      o.type = "binary";
      o.codepage = 65001;
      d = bstrify(data);
    }

    if (o.type == 'array' && typeof Uint8Array !== 'undefined' && data instanceof Uint8Array && typeof ArrayBuffer !== 'undefined') {
      // $FlowIgnore
      var ab = new ArrayBuffer(3),
          vu = new Uint8Array(ab);
      vu.foo = "bar"; // $FlowIgnore

      if (!vu.foo) {
        o = dup(o);
        o.type = 'array';
        return readSync(ab2a(d), o);
      }
    }

    switch ((n = firstbyte(d, o))[0]) {
      case 0xD0:
        if (n[1] === 0xCF && n[2] === 0x11 && n[3] === 0xE0 && n[4] === 0xA1 && n[5] === 0xB1 && n[6] === 0x1A && n[7] === 0xE1) return read_cfb(CFB.read(d, o), o);
        break;

      case 0x09:
        if (n[1] <= 0x04) return parse_xlscfb(d, o);
        break;

      case 0x3C:
        return parse_xlml(d, o);

      case 0x49:
        if (n[1] === 0x44) return read_wb_ID(d, o);
        break;

      case 0x54:
        if (n[1] === 0x41 && n[2] === 0x42 && n[3] === 0x4C) return DIF.to_workbook(d, o);
        break;

      case 0x50:
        return n[1] === 0x4B && n[2] < 0x09 && n[3] < 0x09 ? read_zip(d, o) : read_prn(data, d, o, str);

      case 0xEF:
        return n[3] === 0x3C ? parse_xlml(d, o) : read_prn(data, d, o, str);

      case 0xFF:
        if (n[1] === 0xFE) {
          return read_utf16(d, o);
        }

        break;

      case 0x00:
        if (n[1] === 0x00 && n[2] >= 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);
        break;

      case 0x03:
      case 0x83:
      case 0x8B:
      case 0x8C:
        return DBF.to_workbook(d, o);

      case 0x7B:
        if (n[1] === 0x5C && n[2] === 0x72 && n[3] === 0x74) return RTF.to_workbook(d, o);
        break;

      case 0x0A:
      case 0x0D:
      case 0x20:
        return read_plaintext_raw(d, o);
    }

    if (DBF.versions.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o);
    return read_prn(data, d, o, str);
  }

  function readFileSync(filename, opts) {
    var o = opts || {};
    o.type = 'file';
    return readSync(filename, o);
  }

  function write_cfb_ctr(cfb, o) {
    switch (o.type) {
      case "base64":
      case "binary":
        break;

      case "buffer":
      case "array":
        o.type = "";
        break;

      case "file":
        return write_dl(o.file, CFB.write(cfb, {
          type: has_buf ? 'buffer' : ""
        }));

      case "string":
        throw new Error("'string' output type invalid for '" + o.bookType + "' files");

      default:
        throw new Error("Unrecognized type " + o.type);
    }

    return CFB.write(cfb, o);
  }

  function write_zip_type(wb, opts) {
    var o = opts || {};
    var z = write_zip(wb, o);
    var oopts = {};
    if (o.compression) oopts.compression = 'DEFLATE';
    if (o.password) oopts.type = has_buf ? "nodebuffer" : "string";else switch (o.type) {
      case "base64":
        oopts.type = "base64";
        break;

      case "binary":
        oopts.type = "string";
        break;

      case "string":
        throw new Error("'string' output type invalid for '" + o.bookType + "' files");

      case "buffer":
      case "file":
        oopts.type = has_buf ? "nodebuffer" : "string";
        break;

      default:
        throw new Error("Unrecognized type " + o.type);
    }
    var out = z.FullPaths ? CFB.write(z, {
      fileType: "zip",
      type: {
        "nodebuffer": "buffer",
        "string": "binary"
      }[oopts.type] || oopts.type
    }) : z.generate(oopts);
    /*jshint -W083 */

    if (o.password && typeof encrypt_agile !== 'undefined') return write_cfb_ctr(encrypt_agile(out, o.password), o); // eslint-disable-line no-undef

    /*jshint +W083 */

    if (o.type === "file") return write_dl(o.file, out);
    return o.type == "string" ? utf8read(out) : out;
  }

  function write_cfb_type(wb, opts) {
    var o = opts || {};
    var cfb = write_xlscfb(wb, o);
    return write_cfb_ctr(cfb, o);
  }

  function write_string_type(out, opts, bom) {
    if (!bom) bom = "";
    var o = bom + out;

    switch (opts.type) {
      case "base64":
        return Base64.encode(utf8write(o));

      case "binary":
        return utf8write(o);

      case "string":
        return out;

      case "file":
        return write_dl(opts.file, o, 'utf8');

      case "buffer":
        {
          if (has_buf) return Buffer_from(o, 'utf8');else return write_string_type(o, {
            type: 'binary'
          }).split("").map(function (c) {
            return c.charCodeAt(0);
          });
        }
    }

    throw new Error("Unrecognized type " + opts.type);
  }

  function write_stxt_type(out, opts) {
    switch (opts.type) {
      case "base64":
        return Base64.encode(out);

      case "binary":
        return out;

      case "string":
        return out;

      /* override in sheet_to_txt */

      case "file":
        return write_dl(opts.file, out, 'binary');

      case "buffer":
        {
          if (has_buf) return Buffer_from(out, 'binary');else return out.split("").map(function (c) {
            return c.charCodeAt(0);
          });
        }
    }

    throw new Error("Unrecognized type " + opts.type);
  }
  /* TODO: test consistency */


  function write_binary_type(out, opts) {
    switch (opts.type) {
      case "string":
      case "base64":
      case "binary":
        var bstr = ""; // $FlowIgnore

        for (var i = 0; i < out.length; ++i) bstr += String.fromCharCode(out[i]);

        return opts.type == 'base64' ? Base64.encode(bstr) : opts.type == 'string' ? utf8read(bstr) : bstr;

      case "file":
        return write_dl(opts.file, out);

      case "buffer":
        return out;

      default:
        throw new Error("Unrecognized type " + opts.type);
    }
  }

  function writeSync(wb, opts) {
    reset_cp();
    check_wb(wb);
    var o = opts || {};

    if (o.cellStyles) {
      o.cellNF = true;
      o.sheetStubs = true;
    }

    if (o.type == "array") {
      o.type = "binary";
      var out = writeSync(wb, o);
      o.type = "array";
      return s2ab(out);
    }

    switch (o.bookType || 'xlsb') {
      case 'xml':
      case 'xlml':
        return write_string_type(write_xlml(wb, o), o);

      case 'slk':
      case 'sylk':
        return write_string_type(write_slk_str(wb, o), o);

      case 'htm':
      case 'html':
        return write_string_type(write_htm_str(wb, o), o);

      case 'txt':
        return write_stxt_type(write_txt_str(wb, o), o);

      case 'csv':
        return write_string_type(write_csv_str(wb, o), o, "\ufeff");

      case 'dif':
        return write_string_type(write_dif_str(wb, o), o);

      case 'dbf':
        return write_binary_type(write_dbf_buf(wb, o), o);

      case 'prn':
        return write_string_type(write_prn_str(wb, o), o);

      case 'rtf':
        return write_string_type(write_rtf_str(wb, o), o);

      case 'eth':
        return write_string_type(write_eth_str(wb, o), o);

      case 'fods':
        return write_string_type(write_ods(wb, o), o);

      case 'biff2':
        if (!o.biff) o.biff = 2;

      /* falls through */

      case 'biff3':
        if (!o.biff) o.biff = 3;

      /* falls through */

      case 'biff4':
        if (!o.biff) o.biff = 4;
        return write_binary_type(write_biff_buf(wb, o), o);

      case 'biff5':
        if (!o.biff) o.biff = 5;

      /* falls through */

      case 'biff8':
      case 'xla':
      case 'xls':
        if (!o.biff) o.biff = 8;
        return write_cfb_type(wb, o);

      case 'xlsx':
      case 'xlsm':
      case 'xlam':
      case 'xlsb':
      case 'ods':
        return write_zip_type(wb, o);

      default:
        throw new Error("Unrecognized bookType |" + o.bookType + "|");
    }
  }

  function resolve_book_type(o) {
    if (o.bookType) return;
    var _BT = {
      "xls": "biff8",
      "htm": "html",
      "slk": "sylk",
      "socialcalc": "eth",
      "Sh33tJS": "WTF"
    };
    var ext = o.file.slice(o.file.lastIndexOf(".")).toLowerCase();
    if (ext.match(/^\.[a-z]+$/)) o.bookType = ext.slice(1);
    o.bookType = _BT[o.bookType] || o.bookType;
  }

  function writeFileSync(wb, filename, opts) {
    var o = opts || {};
    o.type = 'file';
    o.file = filename;
    resolve_book_type(o);
    return writeSync(wb, o);
  }

  function writeFileAsync(filename, wb, opts, cb) {
    var o = opts || {};
    o.type = 'file';
    o.file = filename;
    resolve_book_type(o);
    o.type = 'buffer';
    var _cb = cb;
    if (!(_cb instanceof Function)) _cb = opts;
    return _fs.writeFile(filename, writeSync(wb, o), _cb);
  }

  function make_json_row(sheet, r, R, cols, header, hdr, dense, o) {
    var rr = encode_row(R);
    var defval = o.defval,
        raw = o.raw || !Object.prototype.hasOwnProperty.call(o, "raw");
    var isempty = true;
    var row = header === 1 ? [] : {};

    if (header !== 1) {
      if (Object.defineProperty) try {
        Object.defineProperty(row, '__rowNum__', {
          value: R,
          enumerable: false
        });
      } catch (e) {
        row.__rowNum__ = R;
      } else row.__rowNum__ = R;
    }

    if (!dense || sheet[R]) for (var C = r.s.c; C <= r.e.c; ++C) {
      var val = dense ? sheet[R][C] : sheet[cols[C] + rr];

      if (val === undefined || val.t === undefined) {
        if (defval === undefined) continue;

        if (hdr[C] != null) {
          row[hdr[C]] = defval;
        }

        continue;
      }

      var v = val.v;

      switch (val.t) {
        case 'z':
          if (v == null) break;
          continue;

        case 'e':
          v = void 0;
          break;

        case 's':
        case 'd':
        case 'b':
        case 'n':
          break;

        default:
          throw new Error('unrecognized type ' + val.t);
      }

      if (hdr[C] != null) {
        if (v == null) {
          if (defval !== undefined) row[hdr[C]] = defval;else if (raw && v === null) row[hdr[C]] = null;else continue;
        } else {
          row[hdr[C]] = raw || o.rawNumbers && val.t == "n" ? v : format_cell(val, v, o);
        }

        if (v != null) isempty = false;
      }
    }
    return {
      row: row,
      isempty: isempty
    };
  }

  function sheet_to_json(sheet, opts) {
    if (sheet == null || sheet["!ref"] == null) return [];
    var val = {
      t: 'n',
      v: 0
    },
        header = 0,
        offset = 1,
        hdr = [],
        v = 0,
        vv = "";
    var r = {
      s: {
        r: 0,
        c: 0
      },
      e: {
        r: 0,
        c: 0
      }
    };
    var o = opts || {};
    var range = o.range != null ? o.range : sheet["!ref"];
    if (o.header === 1) header = 1;else if (o.header === "A") header = 2;else if (Array.isArray(o.header)) header = 3;else if (o.header == null) header = 0;

    switch (typeof range) {
      case 'string':
        r = safe_decode_range(range);
        break;

      case 'number':
        r = safe_decode_range(sheet["!ref"]);
        r.s.r = range;
        break;

      default:
        r = range;
    }

    if (header > 0) offset = 0;
    var rr = encode_row(r.s.r);
    var cols = [];
    var out = [];
    var outi = 0,
        counter = 0;
    var dense = Array.isArray(sheet);
    var R = r.s.r,
        C = 0,
        CC = 0;
    if (dense && !sheet[R]) sheet[R] = [];

    for (C = r.s.c; C <= r.e.c; ++C) {
      cols[C] = encode_col(C);
      val = dense ? sheet[R][C] : sheet[cols[C] + rr];

      switch (header) {
        case 1:
          hdr[C] = C - r.s.c;
          break;

        case 2:
          hdr[C] = cols[C];
          break;

        case 3:
          hdr[C] = o.header[C - r.s.c];
          break;

        default:
          if (val == null) val = {
            w: "__EMPTY",
            t: "s"
          };
          vv = v = format_cell(val, null, o);
          counter = 0;

          for (CC = 0; CC < hdr.length; ++CC) if (hdr[CC] == vv) vv = v + "_" + ++counter;

          hdr[C] = vv;
      }
    }

    for (R = r.s.r + offset; R <= r.e.r; ++R) {
      var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
      if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row.row;
    }

    out.length = outi;
    return out;
  }

  var qreg = /"/g;

  function make_csv_row(sheet, r, R, cols, fs, rs, FS, o) {
    var isempty = true;
    var row = [],
        txt = "",
        rr = encode_row(R);

    for (var C = r.s.c; C <= r.e.c; ++C) {
      if (!cols[C]) continue;
      var val = o.dense ? (sheet[R] || [])[C] : sheet[cols[C] + rr];
      if (val == null) txt = "";else if (val.v != null) {
        isempty = false;
        txt = '' + (o.rawNumbers && val.t == "n" ? val.v : format_cell(val, null, o));

        for (var i = 0, cc = 0; i !== txt.length; ++i) if ((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34 || o.forceQuotes) {
          txt = "\"" + txt.replace(qreg, '""') + "\"";
          break;
        }

        if (txt == "ID") txt = '"ID"';
      } else if (val.f != null && !val.F) {
        isempty = false;
        txt = '=' + val.f;
        if (txt.indexOf(",") >= 0) txt = '"' + txt.replace(qreg, '""') + '"';
      } else txt = "";
      /* NOTE: Excel CSV does not support array formulae */

      row.push(txt);
    }

    if (o.blankrows === false && isempty) return null;
    return row.join(FS);
  }

  function sheet_to_csv(sheet, opts) {
    var out = [];
    var o = opts == null ? {} : opts;
    if (sheet == null || sheet["!ref"] == null) return "";
    var r = safe_decode_range(sheet["!ref"]);
    var FS = o.FS !== undefined ? o.FS : ",",
        fs = FS.charCodeAt(0);
    var RS = o.RS !== undefined ? o.RS : "\n",
        rs = RS.charCodeAt(0);
    var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
    var row = "",
        cols = [];
    o.dense = Array.isArray(sheet);
    var colinfo = o.skipHidden && sheet["!cols"] || [];
    var rowinfo = o.skipHidden && sheet["!rows"] || [];

    for (var C = r.s.c; C <= r.e.c; ++C) if (!(colinfo[C] || {}).hidden) cols[C] = encode_col(C);

    for (var R = r.s.r; R <= r.e.r; ++R) {
      if ((rowinfo[R] || {}).hidden) continue;
      row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);

      if (row == null) {
        continue;
      }

      if (o.strip) row = row.replace(endregex, "");
      out.push(row + RS);
    }

    delete o.dense;
    return out.join("");
  }

  function sheet_to_txt(sheet, opts) {
    if (!opts) opts = {};
    opts.FS = "\t";
    opts.RS = "\n";
    var s = sheet_to_csv(sheet, opts);
    if (typeof cptable == 'undefined' || opts.type == 'string') return s;
    var o = cptable.utils.encode(1200, s, 'str');
    return String.fromCharCode(255) + String.fromCharCode(254) + o;
  }

  function sheet_to_formulae(sheet) {
    var y = "",
        x,
        val = "";
    if (sheet == null || sheet["!ref"] == null) return [];
    var r = safe_decode_range(sheet['!ref']),
        rr = "",
        cols = [],
        C;
    var cmds = [];
    var dense = Array.isArray(sheet);

    for (C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);

    for (var R = r.s.r; R <= r.e.r; ++R) {
      rr = encode_row(R);

      for (C = r.s.c; C <= r.e.c; ++C) {
        y = cols[C] + rr;
        x = dense ? (sheet[R] || [])[C] : sheet[y];
        val = "";
        if (x === undefined) continue;else if (x.F != null) {
          y = x.F;
          if (!x.f) continue;
          val = x.f;
          if (y.indexOf(":") == -1) y = y + ":" + y;
        }
        if (x.f != null) val = x.f;else if (x.t == 'z') continue;else if (x.t == 'n' && x.v != null) val = "" + x.v;else if (x.t == 'b') val = x.v ? "TRUE" : "FALSE";else if (x.w !== undefined) val = "'" + x.w;else if (x.v === undefined) continue;else if (x.t == 's') val = "'" + x.v;else val = "" + x.v;
        cmds[cmds.length] = y + "=" + val;
      }
    }

    return cmds;
  }

  function sheet_add_json(_ws, js, opts) {
    var o = opts || {};
    var offset = +!o.skipHeader;
    var ws = _ws || {};
    var _R = 0,
        _C = 0;

    if (ws && o.origin != null) {
      if (typeof o.origin == 'number') _R = o.origin;else {
        var _origin = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;

        _R = _origin.r;
        _C = _origin.c;
      }
    }

    var cell;
    var range = {
      s: {
        c: 0,
        r: 0
      },
      e: {
        c: _C,
        r: _R + js.length - 1 + offset
      }
    };

    if (ws['!ref']) {
      var _range = safe_decode_range(ws['!ref']);

      range.e.c = Math.max(range.e.c, _range.e.c);
      range.e.r = Math.max(range.e.r, _range.e.r);

      if (_R == -1) {
        _R = _range.e.r + 1;
        range.e.r = _R + js.length - 1 + offset;
      }
    } else {
      if (_R == -1) {
        _R = 0;
        range.e.r = js.length - 1 + offset;
      }
    }

    var hdr = o.header || [],
        C = 0;
    js.forEach(function (JS, R) {
      keys(JS).forEach(function (k) {
        if ((C = hdr.indexOf(k)) == -1) hdr[C = hdr.length] = k;
        var v = JS[k];
        var t = 'z';
        var z = "";
        var ref = encode_cell({
          c: _C + C,
          r: _R + R + offset
        });
        cell = utils.sheet_get_cell(ws, ref);

        if (v && typeof v === 'object' && !(v instanceof Date)) {
          ws[ref] = v;
        } else {
          if (typeof v == 'number') t = 'n';else if (typeof v == 'boolean') t = 'b';else if (typeof v == 'string') t = 's';else if (v instanceof Date) {
            t = 'd';

            if (!o.cellDates) {
              t = 'n';
              v = datenum(v);
            }

            z = o.dateNF || SSF._table[14];
          }
          if (!cell) ws[ref] = cell = {
            t: t,
            v: v
          };else {
            cell.t = t;
            cell.v = v;
            delete cell.w;
            delete cell.R;
            if (z) cell.z = z;
          }
          if (z) cell.z = z;
        }
      });
    });
    range.e.c = Math.max(range.e.c, _C + hdr.length - 1);

    var __R = encode_row(_R);

    if (offset) for (C = 0; C < hdr.length; ++C) ws[encode_col(C + _C) + __R] = {
      t: 's',
      v: hdr[C]
    };
    ws['!ref'] = encode_range(range);
    return ws;
  }

  function json_to_sheet(js, opts) {
    return sheet_add_json(null, js, opts);
  }

  var utils = {
    encode_col: encode_col,
    encode_row: encode_row,
    encode_cell: encode_cell,
    encode_range: encode_range,
    decode_col: decode_col,
    decode_row: decode_row,
    split_cell: split_cell,
    decode_cell: decode_cell,
    decode_range: decode_range,
    format_cell: format_cell,
    get_formulae: sheet_to_formulae,
    make_csv: sheet_to_csv,
    make_json: sheet_to_json,
    make_formulae: sheet_to_formulae,
    sheet_add_aoa: sheet_add_aoa,
    sheet_add_json: sheet_add_json,
    sheet_add_dom: sheet_add_dom,
    aoa_to_sheet: aoa_to_sheet,
    json_to_sheet: json_to_sheet,
    table_to_sheet: parse_dom_table,
    table_to_book: table_to_book,
    sheet_to_csv: sheet_to_csv,
    sheet_to_txt: sheet_to_txt,
    sheet_to_json: sheet_to_json,
    sheet_to_html: HTML_.from_sheet,
    sheet_to_formulae: sheet_to_formulae,
    sheet_to_row_object_array: sheet_to_json
  };

  (function (utils) {
    utils.consts = utils.consts || {};

    function add_consts(R
    /*Array<any>*/
    ) {
      R.forEach(function (a) {
        utils.consts[a[0]] = a[1];
      });
    }

    function get_default(x, y, z) {
      return x[y] != null ? x[y] : x[y] = z;
    }
    /* get cell, creating a stub if necessary */


    function ws_get_cell_stub(ws, R, C) {
      /* A1 cell address */
      if (typeof R == "string") {
        /* dense */
        if (Array.isArray(ws)) {
          var RC = decode_cell(R);
          if (!ws[RC.r]) ws[RC.r] = [];
          return ws[RC.r][RC.c] || (ws[RC.r][RC.c] = {
            t: 'z'
          });
        }

        return ws[R] || (ws[R] = {
          t: 'z'
        });
      }
      /* cell address object */


      if (typeof R != "number") return ws_get_cell_stub(ws, encode_cell(R));
      /* R and C are 0-based indices */

      return ws_get_cell_stub(ws, encode_cell({
        r: R,
        c: C || 0
      }));
    }

    utils.sheet_get_cell = ws_get_cell_stub;
    /* find sheet index for given name / validate index */

    function wb_sheet_idx(wb, sh) {
      if (typeof sh == "number") {
        if (sh >= 0 && wb.SheetNames.length > sh) return sh;
        throw new Error("Cannot find sheet # " + sh);
      } else if (typeof sh == "string") {
        var idx = wb.SheetNames.indexOf(sh);
        if (idx > -1) return idx;
        throw new Error("Cannot find sheet name |" + sh + "|");
      } else throw new Error("Cannot find sheet |" + sh + "|");
    }
    /* simple blank workbook object */


    utils.book_new = function () {
      return {
        SheetNames: [],
        Sheets: {}
      };
    };
    /* add a worksheet to the end of a given workbook */


    utils.book_append_sheet = function (wb, ws, name) {
      if (!name) for (var i = 1; i <= 0xFFFF; ++i, name = undefined) if (wb.SheetNames.indexOf(name = "Sheet" + i) == -1) break;
      if (!name || wb.SheetNames.length >= 0xFFFF) throw new Error("Too many worksheets");
      check_ws_name(name);
      if (wb.SheetNames.indexOf(name) >= 0) throw new Error("Worksheet with name |" + name + "| already exists!");
      wb.SheetNames.push(name);
      wb.Sheets[name] = ws;
    };
    /* set sheet visibility (visible/hidden/very hidden) */


    utils.book_set_sheet_visibility = function (wb, sh, vis) {
      get_default(wb, "Workbook", {});
      get_default(wb.Workbook, "Sheets", []);
      var idx = wb_sheet_idx(wb, sh); // $FlowIgnore

      get_default(wb.Workbook.Sheets, idx, {});

      switch (vis) {
        case 0:
        case 1:
        case 2:
          break;

        default:
          throw new Error("Bad sheet visibility setting " + vis);
      } // $FlowIgnore


      wb.Workbook.Sheets[idx].Hidden = vis;
    };

    add_consts([["SHEET_VISIBLE", 0], ["SHEET_HIDDEN", 1], ["SHEET_VERY_HIDDEN", 2]]);
    /* set number format */

    utils.cell_set_number_format = function (cell, fmt) {
      cell.z = fmt;
      return cell;
    };
    /* set cell hyperlink */


    utils.cell_set_hyperlink = function (cell, target, tooltip) {
      if (!target) {
        delete cell.l;
      } else {
        cell.l = {
          Target: target
        };
        if (tooltip) cell.l.Tooltip = tooltip;
      }

      return cell;
    };

    utils.cell_set_internal_link = function (cell, range, tooltip) {
      return utils.cell_set_hyperlink(cell, "#" + range, tooltip);
    };
    /* add to cell comments */


    utils.cell_add_comment = function (cell, text, author) {
      if (!cell.c) cell.c = [];
      cell.c.push({
        t: text,
        a: author || "SheetJS"
      });
    };
    /* set array formula and flush related cells */


    utils.sheet_set_array_formula = function (ws, range, formula) {
      var rng = typeof range != "string" ? range : safe_decode_range(range);
      var rngstr = typeof range == "string" ? range : encode_range(range);

      for (var R = rng.s.r; R <= rng.e.r; ++R) for (var C = rng.s.c; C <= rng.e.c; ++C) {
        var cell = ws_get_cell_stub(ws, R, C);
        cell.t = 'n';
        cell.F = rngstr;
        delete cell.v;
        if (R == rng.s.r && C == rng.s.c) cell.f = formula;
      }

      return ws;
    };

    return utils;
  })(utils);

  if (has_buf && typeof require != 'undefined') (function () {
    var Readable = require('stream').Readable;

    var write_csv_stream = function (sheet, opts) {
      var stream = Readable();
      var o = opts == null ? {} : opts;

      if (sheet == null || sheet["!ref"] == null) {
        stream.push(null);
        return stream;
      }

      var r = safe_decode_range(sheet["!ref"]);
      var FS = o.FS !== undefined ? o.FS : ",",
          fs = FS.charCodeAt(0);
      var RS = o.RS !== undefined ? o.RS : "\n",
          rs = RS.charCodeAt(0);
      var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
      var row = "",
          cols = [];
      o.dense = Array.isArray(sheet);
      var colinfo = o.skipHidden && sheet["!cols"] || [];
      var rowinfo = o.skipHidden && sheet["!rows"] || [];

      for (var C = r.s.c; C <= r.e.c; ++C) if (!(colinfo[C] || {}).hidden) cols[C] = encode_col(C);

      var R = r.s.r;
      var BOM = false;

      stream._read = function () {
        if (!BOM) {
          BOM = true;
          return stream.push("\uFEFF");
        }

        while (R <= r.e.r) {
          ++R;
          if ((rowinfo[R - 1] || {}).hidden) continue;
          row = make_csv_row(sheet, r, R - 1, cols, fs, rs, FS, o);

          if (row != null) {
            if (o.strip) row = row.replace(endregex, "");
            stream.push(row + RS);
            break;
          }
        }

        if (R > r.e.r) return stream.push(null);
      };

      return stream;
    };

    var write_html_stream = function (ws, opts) {
      var stream = Readable();
      var o = opts || {};
      var header = o.header != null ? o.header : HTML_.BEGIN;
      var footer = o.footer != null ? o.footer : HTML_.END;
      stream.push(header);
      var r = decode_range(ws['!ref']);
      o.dense = Array.isArray(ws);
      stream.push(HTML_._preamble(ws, r, o));
      var R = r.s.r;
      var end = false;

      stream._read = function () {
        if (R > r.e.r) {
          if (!end) {
            end = true;
            stream.push("</table>" + footer);
          }

          return stream.push(null);
        }

        while (R <= r.e.r) {
          stream.push(HTML_._row(ws, r, R, o));
          ++R;
          break;
        }
      };

      return stream;
    };

    var write_json_stream = function (sheet, opts) {
      var stream = Readable({
        objectMode: true
      });

      if (sheet == null || sheet["!ref"] == null) {
        stream.push(null);
        return stream;
      }

      var val = {
        t: 'n',
        v: 0
      },
          header = 0,
          offset = 1,
          hdr = [],
          v = 0,
          vv = "";
      var r = {
        s: {
          r: 0,
          c: 0
        },
        e: {
          r: 0,
          c: 0
        }
      };
      var o = opts || {};
      var range = o.range != null ? o.range : sheet["!ref"];
      if (o.header === 1) header = 1;else if (o.header === "A") header = 2;else if (Array.isArray(o.header)) header = 3;

      switch (typeof range) {
        case 'string':
          r = safe_decode_range(range);
          break;

        case 'number':
          r = safe_decode_range(sheet["!ref"]);
          r.s.r = range;
          break;

        default:
          r = range;
      }

      if (header > 0) offset = 0;
      var rr = encode_row(r.s.r);
      var cols = [];
      var counter = 0;
      var dense = Array.isArray(sheet);
      var R = r.s.r,
          C = 0,
          CC = 0;
      if (dense && !sheet[R]) sheet[R] = [];

      for (C = r.s.c; C <= r.e.c; ++C) {
        cols[C] = encode_col(C);
        val = dense ? sheet[R][C] : sheet[cols[C] + rr];

        switch (header) {
          case 1:
            hdr[C] = C - r.s.c;
            break;

          case 2:
            hdr[C] = cols[C];
            break;

          case 3:
            hdr[C] = o.header[C - r.s.c];
            break;

          default:
            if (val == null) val = {
              w: "__EMPTY",
              t: "s"
            };
            vv = v = format_cell(val, null, o);
            counter = 0;

            for (CC = 0; CC < hdr.length; ++CC) if (hdr[CC] == vv) vv = v + "_" + ++counter;

            hdr[C] = vv;
        }
      }

      R = r.s.r + offset;

      stream._read = function () {
        if (R > r.e.r) return stream.push(null);

        while (R <= r.e.r) {
          //if ((rowinfo[R-1]||{}).hidden) continue;
          var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
          ++R;

          if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) {
            stream.push(row.row);
            break;
          }
        }
      };

      return stream;
    };

    XLSX.stream = {
      to_json: write_json_stream,
      to_html: write_html_stream,
      to_csv: write_csv_stream
    };
  })();
  if (typeof parse_xlscfb !== "undefined") XLSX.parse_xlscfb = parse_xlscfb;
  XLSX.parse_zip = parse_zip;
  XLSX.read = readSync; //xlsread

  XLSX.readFile = readFileSync; //readFile

  XLSX.readFileSync = readFileSync;
  XLSX.write = writeSync;
  XLSX.writeFile = writeFileSync;
  XLSX.writeFileSync = writeFileSync;
  XLSX.writeFileAsync = writeFileAsync;
  XLSX.utils = utils;
  XLSX.SSF = SSF;
  if (typeof CFB !== "undefined") XLSX.CFB = CFB;
}
/*global define */


if (typeof exports !== 'undefined') make_xlsx_lib(exports);else if (typeof module !== 'undefined' && module.exports) make_xlsx_lib(module.exports);else if (typeof define === 'function' && define.amd) define(function () {
  if (!XLSX.version) make_xlsx_lib(XLSX);
  return XLSX;
});else make_xlsx_lib(XLSX);
/*exported XLS, ODS */

var XLS = XLSX,
    ODS = XLSX;
},{"./dist/cpexcel.js":"../../node_modules/xlsx/dist/cpexcel.js","fs":"../../node_modules/parcel-bundler/src/builtins/_empty.js","./jszip.js":"../../node_modules/xlsx/jszip.js","crypto":"../../node_modules/parcel-bundler/src/builtins/_empty.js","stream":"../../node_modules/parcel-bundler/src/builtins/_empty.js","buffer":"../../node_modules/parcel-bundler/src/builtins/_empty.js","process":"../../node_modules/parcel-bundler/src/builtins/_empty.js"}],"utils/default.json":[function(require,module,exports) {
module.exports = {
  "months": {
    "JAN": 0,
    "FEB": 1,
    "MAR": 2,
    "APR": 3,
    "MAY": 4,
    "JUN": 5,
    "JUL": 6,
    "AUG": 7,
    "SEP": 8,
    "OCT": 9,
    "NOV": 10,
    "DEC": 11
  }
};
},{}],"institute/dashboard.js":[function(require,module,exports) {
"use strict";

var _auto = _interopRequireDefault(require("chart.js/auto"));

var _xlsx = _interopRequireDefault(require("xlsx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultData = require('../utils/default.json');

if (document.location.pathname === '/institute/dashboard') {
  var pieChartCanvas = document.getElementById('summary');

  if (pieChartCanvas) {
    var pieChartContext = pieChartCanvas.getContext('2d');
    var pieChart = new _auto.default(pieChartContext, {
      type: 'pie',
      data: {
        labels: ['Paid', 'Due'],
        datasets: [{
          label: 'Total',
          data: [500, 300],
          backgroundColor: ['rgb(144,238,144)', 'rgb(255,0,0)'],
          hoverOffset: 4
        }]
      }
    });
  }

  var data = {
    labels: ['LKG', 'UKG', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'],
    datasets: [{
      label: 'Total Students',
      data: [50, 60, 70, 40, 50, 60, 70, 40, 50, 60, 70, 40],
      borderColor: 'skyblue',
      backgroundColor: 'skyblue'
    }, {
      label: 'Paid',
      data: [10, 20, 30, 20, 20, 20, 20, 20, 20, 20, 20, 20],
      borderColor: 'seagreen',
      backgroundColor: 'seagreen'
    }, {
      label: 'Due',
      data: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
      borderColor: 'red',
      backgroundColor: 'red'
    }]
  };
  var today = new Date();
  var month = Object.keys(defaultData.months)[today.getMonth()];
  var year = today.getUTCFullYear();
  var options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top'
      },
      title: {
        display: true,
        text: "Stats for ".concat(month + '-' + year)
      }
    }
  };
  var ctx = document.getElementById('insti-month-wise-chart').getContext('2d');
  var chart = new _auto.default(ctx, {
    type: 'bar',
    data: data,
    options: options
  });
  var exportXlsx = document.getElementById('exportXlsx');

  if (exportXlsx) {
    exportXlsx.onclick = function () {
      var wb = _xlsx.default.utils.book_new();

      var ws_name = 'SheetJS';
      var ws_data = [['S', 'h', 'e', 'e', 't', 'J', 'S'], [1, 2, 3, 4, 5]];

      var ws = _xlsx.default.utils.aoa_to_sheet(ws_data);

      _xlsx.default.utils.book_append_sheet(wb, ws, ws_name);

      _xlsx.default.writeFile(wb, 'out.xlsx');
    };
  }
}
},{"chart.js/auto":"../../node_modules/chart.js/auto/auto.esm.js","xlsx":"../../node_modules/xlsx/xlsx.js","../utils/default.json":"utils/default.json"}],"admin/instituteManagement.js":[function(require,module,exports) {
"use strict";

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var actionsDropdwonFunctionality = function actionsDropdwonFunctionality() {
  var actions = _toConsumableArray(document.getElementsByClassName('dropdown'));

  if (actions.length) {
    actions.forEach(function (kebabMenu) {
      kebabMenu.onclick = function () {
        if (this.children[1].style.display === 'none') {
          this.children[1].style.display = 'block';
        } else {
          this.children[1].style.display = 'none';
        }
      };
    });

    window.onclick = function (e) {
      if (e.target.parentNode.classList.contains('action-list-all-insti')) {} else if (!e.target.parentNode.classList.contains('dropdown-content')) {
        _toConsumableArray(document.getElementsByClassName('dropdown-content')).forEach(function (d) {
          d.style.display = 'none';
        });
      }
    };
  }
};

var searchInstibtn = document.getElementById('search-institutes');

if (searchInstibtn) {
  searchInstibtn.onclick = function () {
    document.getElementById('list-all-insti').style.display = 'none';
    document.getElementById('search-insti').style.display = '';
  };
}

var listAllInstitutes = document.getElementById('list-all-institutes');

if (listAllInstitutes) {
  listAllInstitutes.onclick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var res, html;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            document.getElementById('search-insti').style.display = 'none';
            document.getElementById('spinner').style.display = '';
            _context.next = 4;
            return (0, _axios.default)({
              method: 'GET',
              url: '/api/v1/institute/list',
              headers: {
                'Content-type': 'application/json; charset=UTF-8'
              }
            });

          case 4:
            res = _context.sent;

            if (res.data.status === 'success') {
              html = "<div>\n                        <p>".concat(res.data.data.length, " Institutes Available.</p>\n                        <table>\n                                <tr>\n                                    <th>Actions</th>\n                                    <th>Institute</th>\n                                    <th>Email</th>\n                                    <th>Phone</th>\n                                    <th>Address</th>\n                                </tr>");
              res.data.data.institutes.forEach(function (inst) {
                html += "<tr>\n                        <td>\n                            <div class=\"dropdown\">\n                                <div class=\"common-style student-card action-list-all-insti\" style=\"margin:0;padding:0;width:20px;height:40px;text-align:center;\">\n                                    <h6 style=\"margin:0;\">.</h6>\n                                    <h6 style=\"margin:0;\">.</h6>\n                                    <h6 style=\"margin:0;\">.</h6>\n                                </div>\n                                <div style=\"display:none;\" class=\"dropdown-content\">\n                                    <a href=\"#\">View</a>\n                                    <a href=\"#\">Edit</a>\n                                    <a href=\"#\">Delete</a>\n                                </div>\n                            </div>\n                        </td>\n                        <td>".concat(inst.name, "</td>\n                        <td>").concat(inst.email, "</td>\n                        <td>").concat(inst.phone.join(', '), "</td>\n                        <td>").concat(inst.address, ", ").concat(inst.addressDistrict, " ").concat(inst.addressPincode, ", ").concat(inst.addressState, "</td>\n                    </tr>");
              });
              html += "</table></div>";
              document.getElementById('spinner').style.display = 'none';
              document.getElementById('list-all-insti').innerHTML = html;
              document.getElementById('list-all-insti').style.display = '';
              actionsDropdwonFunctionality();
            }

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
}

var adminInstiSearch = document.getElementById('admin-insti-search');

if (adminInstiSearch) {
  adminInstiSearch.addEventListener('click', /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(e) {
      var id, name, district, res, html, i;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              e.preventDefault();
              id = document.getElementById('inst-id').value;
              name = document.getElementById('inst-name').value;
              district = document.getElementById('inst-dist').value;
              _context2.next = 6;
              return (0, _axios.default)({
                method: 'POST',
                url: '/api/v1/institute/search',
                data: {
                  id: id,
                  name: name,
                  district: district
                },
                headers: {
                  'Content-type': 'application/json; charset=UTF-8'
                }
              });

            case 6:
              res = _context2.sent;
              console.log(res); //modify below code for generating table

              html = "<div>\n                        <table>\n                                <tr>\n                                    <th>Actions</th>\n                                    <th>Institute</th>\n                                    <th>Email</th>\n                                    <th>Phone</th>\n                                    <th>Address</th>\n                                </tr>";

              for (i = 0; i < 2; i++) {
                html += "<tr>\n                        <td>\n                            <div class=\"dropdown\">\n                                <div class=\"common-style student-card action-list-all-insti\" style=\"margin:0;padding:0;width:20px;height:40px;text-align:center;\">\n                                    <h6 style=\"margin:0;\">.</h6>\n                                    <h6 style=\"margin:0;\">.</h6>\n                                    <h6 style=\"margin:0;\">.</h6>\n                                </div>\n                                <div style=\"display:none;\" class=\"dropdown-content\">\n                                    <a href=\"#\">View</a>\n                                    <a href=\"#\">Edit</a>\n                                    <a href=\"#\">Delete</a>\n                                </div>\n                            </div>\n                        </td>\n                        <td>ABC Institute </td>\n                        <td>abcinstite@gmail.com</td>\n                        <td>9876543210</td>\n                        <td>Lorem Ipsum, Doler Sit Amet, 8788, JH</td>\n                    </tr>";
              }

              html += "</table></div>";
              document.getElementById('adm-srch-inst-rslt').innerHTML = html;
              actionsDropdwonFunctionality();

            case 13:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }());
}
},{"axios":"../../node_modules/axios/index.js"}],"institute/feesManagement.js":[function(require,module,exports) {
"use strict";

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var addFees = document.getElementById('addFees');

if (addFees) {
  addFees.addEventListener('click', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {
      var name, desc, amount, payBy, applicableTo, res;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              e.preventDefault();
              name = document.getElementById('name').value;
              desc = document.getElementById('desc').value;
              amount = document.getElementById('amount').value;
              payBy = document.getElementById('payBy').value;
              applicableTo = [];

              _toConsumableArray(document.getElementsByName('applicableTo')).forEach(function (o) {
                if (o.checked) {
                  applicableTo.push(o.value);
                }
              });

              _context.next = 9;
              return (0, _axios.default)({
                method: 'POST',
                url: '/api/v1/institute/fees-management?add=true',
                data: {
                  name: name,
                  desc: desc,
                  amount: amount,
                  payBy: payBy,
                  applicableTo: applicableTo
                },
                headers: {
                  'Content-type': 'application/json; charset=UTF-8'
                }
              });

            case 9:
              res = _context.sent;

              if (res.data.status === 'success') {
                alert('Saved Succesfully!');
                location.assign('/institute/fees-management');
              } else {
                alert('Something went wrong !\n Try again after some time.');
              }

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
}
},{"axios":"../../node_modules/axios/index.js"}],"../../node_modules/jspdf/node_modules/fflate/esm/browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deflate = deflate;
exports.deflateSync = deflateSync;
exports.inflate = inflate;
exports.inflateSync = inflateSync;
exports.compress = exports.gzip = gzip;
exports.compressSync = exports.gzipSync = gzipSync;
exports.gunzip = gunzip;
exports.gunzipSync = gunzipSync;
exports.zlib = zlib;
exports.zlibSync = zlibSync;
exports.unzlib = unzlib;
exports.unzlibSync = unzlibSync;
exports.decompress = decompress;
exports.decompressSync = decompressSync;
exports.strToU8 = strToU8;
exports.strFromU8 = strFromU8;
exports.zip = zip;
exports.zipSync = zipSync;
exports.unzip = unzip;
exports.unzipSync = unzipSync;
exports.AsyncDecompress = exports.Decompress = exports.AsyncUnzlib = exports.Unzlib = exports.AsyncZlib = exports.Zlib = exports.AsyncGunzip = exports.Gunzip = exports.AsyncCompress = exports.AsyncGzip = exports.Compress = exports.Gzip = exports.AsyncInflate = exports.Inflate = exports.AsyncDeflate = exports.Deflate = void 0;
// DEFLATE is a complex format; to read this code, you should probably check the RFC first:
// https://tools.ietf.org/html/rfc1951
// You may also wish to take a look at the guide I made about this program:
// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad
// Much of the following code is similar to that of UZIP.js:
// https://github.com/photopea/UZIP.js
// Many optimizations have been made, so the bundle size is ultimately smaller but performance is similar.
// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint
// is better for memory in most engines (I *think*).
var ch2 = {};

var wk = function (c, id, msg, transfer, cb) {
  var u = ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([c], {
    type: 'text/javascript'
  })));
  var w = new Worker(u);

  w.onerror = function (e) {
    return cb(e.error, null);
  };

  w.onmessage = function (e) {
    return cb(null, e.data);
  };

  w.postMessage(msg, transfer);
  return w;
}; // aliases for shorter compressed code (most minifers don't do this)


var u8 = Uint8Array,
    u16 = Uint16Array,
    u32 = Uint32Array; // fixed length extra bits

var fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0,
/* unused */
0, 0,
/* impossible */
0]); // fixed distance extra bits
// see fleb note

var fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,
/* unused */
0, 0]); // code length index map

var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]); // get base, reverse index map from extra bits

var freb = function (eb, start) {
  var b = new u16(31);

  for (var i = 0; i < 31; ++i) {
    b[i] = start += 1 << eb[i - 1];
  } // numbers here are at max 18 bits


  var r = new u32(b[30]);

  for (var i = 1; i < 30; ++i) {
    for (var j = b[i]; j < b[i + 1]; ++j) {
      r[j] = j - b[i] << 5 | i;
    }
  }

  return [b, r];
};

var _a = freb(fleb, 2),
    fl = _a[0],
    revfl = _a[1]; // we can ignore the fact that the other numbers are wrong; they never happen anyway


fl[28] = 258, revfl[258] = 28;

var _b = freb(fdeb, 0),
    fd = _b[0],
    revfd = _b[1]; // map of value to reverse (assuming 16 bits)


var rev = new u16(32768);

for (var i = 0; i < 32768; ++i) {
  // reverse table algorithm from SO
  var x = (i & 0xAAAA) >>> 1 | (i & 0x5555) << 1;
  x = (x & 0xCCCC) >>> 2 | (x & 0x3333) << 2;
  x = (x & 0xF0F0) >>> 4 | (x & 0x0F0F) << 4;
  rev[i] = ((x & 0xFF00) >>> 8 | (x & 0x00FF) << 8) >>> 1;
} // create huffman tree from u8 "map": index -> code length for code index
// mb (max bits) must be at most 15
// TODO: optimize/split up?


var hMap = function (cd, mb, r) {
  var s = cd.length; // index

  var i = 0; // u16 "map": index -> # of codes with bit length = index

  var l = new u16(mb); // length of cd must be 288 (total # of codes)

  for (; i < s; ++i) ++l[cd[i] - 1]; // u16 "map": index -> minimum code for bit length = index


  var le = new u16(mb);

  for (i = 0; i < mb; ++i) {
    le[i] = le[i - 1] + l[i - 1] << 1;
  }

  var co;

  if (r) {
    // u16 "map": index -> number of actual bits, symbol for code
    co = new u16(1 << mb); // bits to remove for reverser

    var rvb = 15 - mb;

    for (i = 0; i < s; ++i) {
      // ignore 0 lengths
      if (cd[i]) {
        // num encoding both symbol and bits read
        var sv = i << 4 | cd[i]; // free bits

        var r_1 = mb - cd[i]; // start value

        var v = le[cd[i] - 1]++ << r_1; // m is end value

        for (var m = v | (1 << r_1) - 1; v <= m; ++v) {
          // every 16 bit value starting with the code yields the same result
          co[rev[v] >>> rvb] = sv;
        }
      }
    }
  } else {
    co = new u16(s);

    for (i = 0; i < s; ++i) co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];
  }

  return co;
}; // fixed length tree


var flt = new u8(288);

for (var i = 0; i < 144; ++i) flt[i] = 8;

for (var i = 144; i < 256; ++i) flt[i] = 9;

for (var i = 256; i < 280; ++i) flt[i] = 7;

for (var i = 280; i < 288; ++i) flt[i] = 8; // fixed distance tree


var fdt = new u8(32);

for (var i = 0; i < 32; ++i) fdt[i] = 5; // fixed length map


var flm = /*#__PURE__*/hMap(flt, 9, 0),
    flrm = /*#__PURE__*/hMap(flt, 9, 1); // fixed distance map

var fdm = /*#__PURE__*/hMap(fdt, 5, 0),
    fdrm = /*#__PURE__*/hMap(fdt, 5, 1); // find max of array

var max = function (a) {
  var m = a[0];

  for (var i = 1; i < a.length; ++i) {
    if (a[i] > m) m = a[i];
  }

  return m;
}; // read d, starting at bit p and mask with m


var bits = function (d, p, m) {
  var o = p / 8 >> 0;
  return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
}; // read d, starting at bit p continuing for at least 16 bits


var bits16 = function (d, p) {
  var o = p / 8 >> 0;
  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
}; // get end of byte


var shft = function (p) {
  return (p / 8 >> 0) + (p & 7 && 1);
}; // typed array slice - allows garbage collector to free original reference,
// while being more compatible than .slice


var slc = function (v, s, e) {
  if (s == null || s < 0) s = 0;
  if (e == null || e > v.length) e = v.length; // can't use .constructor in case user-supplied

  var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
  n.set(v.subarray(s, e));
  return n;
}; // expands raw DEFLATE data


var inflt = function (dat, buf, st) {
  // source length
  var sl = dat.length; // have to estimate size

  var noBuf = !buf || st; // no state

  var noSt = !st || st.i;
  if (!st) st = {}; // Assumes roughly 33% compression ratio average

  if (!buf) buf = new u8(sl * 3); // ensure buffer can fit at least l elements

  var cbuf = function (l) {
    var bl = buf.length; // need to increase size to fit

    if (l > bl) {
      // Double or set to necessary, whichever is greater
      var nbuf = new u8(Math.max(bl * 2, l));
      nbuf.set(buf);
      buf = nbuf;
    }
  }; //  last chunk         bitpos           bytes


  var final = st.f || 0,
      pos = st.p || 0,
      bt = st.b || 0,
      lm = st.l,
      dm = st.d,
      lbt = st.m,
      dbt = st.n; // total bits

  var tbts = sl * 8;

  do {
    if (!lm) {
      // BFINAL - this is only 1 when last chunk is next
      st.f = final = bits(dat, pos, 1); // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman

      var type = bits(dat, pos + 1, 3);
      pos += 3;

      if (!type) {
        // go to end of byte boundary
        var s = shft(pos) + 4,
            l = dat[s - 4] | dat[s - 3] << 8,
            t = s + l;

        if (t > sl) {
          if (noSt) throw 'unexpected EOF';
          break;
        } // ensure size


        if (noBuf) cbuf(bt + l); // Copy over uncompressed data

        buf.set(dat.subarray(s, t), bt); // Get new bitpos, update byte count

        st.b = bt += l, st.p = pos = t * 8;
        continue;
      } else if (type == 1) lm = flrm, dm = fdrm, lbt = 9, dbt = 5;else if (type == 2) {
        //  literal                            lengths
        var hLit = bits(dat, pos, 31) + 257,
            hcLen = bits(dat, pos + 10, 15) + 4;
        var tl = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14; // length+distance tree

        var ldt = new u8(tl); // code length tree

        var clt = new u8(19);

        for (var i = 0; i < hcLen; ++i) {
          // use index map to get real code
          clt[clim[i]] = bits(dat, pos + i * 3, 7);
        }

        pos += hcLen * 3; // code lengths bits

        var clb = max(clt),
            clbmsk = (1 << clb) - 1;
        if (!noSt && pos + tl * (clb + 7) > tbts) break; // code lengths map

        var clm = hMap(clt, clb, 1);

        for (var i = 0; i < tl;) {
          var r = clm[bits(dat, pos, clbmsk)]; // bits read

          pos += r & 15; // symbol

          var s = r >>> 4; // code length to copy

          if (s < 16) {
            ldt[i++] = s;
          } else {
            //  copy   count
            var c = 0,
                n = 0;
            if (s == 16) n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];else if (s == 17) n = 3 + bits(dat, pos, 7), pos += 3;else if (s == 18) n = 11 + bits(dat, pos, 127), pos += 7;

            while (n--) ldt[i++] = c;
          }
        } //    length tree                 distance tree


        var lt = ldt.subarray(0, hLit),
            dt = ldt.subarray(hLit); // max length bits

        lbt = max(lt); // max dist bits

        dbt = max(dt);
        lm = hMap(lt, lbt, 1);
        dm = hMap(dt, dbt, 1);
      } else throw 'invalid block type';

      if (pos > tbts) throw 'unexpected EOF';
    } // Make sure the buffer can hold this + the largest possible addition
    // Maximum chunk size (practically, theoretically infinite) is 2^17;


    if (noBuf) cbuf(bt + 131072);
    var lms = (1 << lbt) - 1,
        dms = (1 << dbt) - 1;
    var mxa = lbt + dbt + 18;

    while (noSt || pos + mxa < tbts) {
      // bits read, code
      var c = lm[bits16(dat, pos) & lms],
          sym = c >>> 4;
      pos += c & 15;
      if (pos > tbts) throw 'unexpected EOF';
      if (!c) throw 'invalid length/literal';
      if (sym < 256) buf[bt++] = sym;else if (sym == 256) {
        lm = null;
        break;
      } else {
        var add = sym - 254; // no extra bits needed if less

        if (sym > 264) {
          // index
          var i = sym - 257,
              b = fleb[i];
          add = bits(dat, pos, (1 << b) - 1) + fl[i];
          pos += b;
        } // dist


        var d = dm[bits16(dat, pos) & dms],
            dsym = d >>> 4;
        if (!d) throw 'invalid distance';
        pos += d & 15;
        var dt = fd[dsym];

        if (dsym > 3) {
          var b = fdeb[dsym];
          dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
        }

        if (pos > tbts) throw 'unexpected EOF';
        if (noBuf) cbuf(bt + 131072);
        var end = bt + add;

        for (; bt < end; bt += 4) {
          buf[bt] = buf[bt - dt];
          buf[bt + 1] = buf[bt + 1 - dt];
          buf[bt + 2] = buf[bt + 2 - dt];
          buf[bt + 3] = buf[bt + 3 - dt];
        }

        bt = end;
      }
    }

    st.l = lm, st.p = pos, st.b = bt;
    if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;
  } while (!final);

  return bt == buf.length ? buf : slc(buf, 0, bt);
}; // starting at p, write the minimum number of bits that can hold v to d


var wbits = function (d, p, v) {
  v <<= p & 7;
  var o = p / 8 >> 0;
  d[o] |= v;
  d[o + 1] |= v >>> 8;
}; // starting at p, write the minimum number of bits (>8) that can hold v to d


var wbits16 = function (d, p, v) {
  v <<= p & 7;
  var o = p / 8 >> 0;
  d[o] |= v;
  d[o + 1] |= v >>> 8;
  d[o + 2] |= v >>> 16;
}; // creates code lengths from a frequency table


var hTree = function (d, mb) {
  // Need extra info to make a tree
  var t = [];

  for (var i = 0; i < d.length; ++i) {
    if (d[i]) t.push({
      s: i,
      f: d[i]
    });
  }

  var s = t.length;
  var t2 = t.slice();
  if (!s) return [new u8(0), 0];

  if (s == 1) {
    var v = new u8(t[0].s + 1);
    v[t[0].s] = 1;
    return [v, 1];
  }

  t.sort(function (a, b) {
    return a.f - b.f;
  }); // after i2 reaches last ind, will be stopped
  // freq must be greater than largest possible number of symbols

  t.push({
    s: -1,
    f: 25001
  });
  var l = t[0],
      r = t[1],
      i0 = 0,
      i1 = 1,
      i2 = 2;
  t[0] = {
    s: -1,
    f: l.f + r.f,
    l: l,
    r: r
  }; // efficient algorithm from UZIP.js
  // i0 is lookbehind, i2 is lookahead - after processing two low-freq
  // symbols that combined have high freq, will start processing i2 (high-freq,
  // non-composite) symbols instead
  // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/

  while (i1 != s - 1) {
    l = t[t[i0].f < t[i2].f ? i0++ : i2++];
    r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];
    t[i1++] = {
      s: -1,
      f: l.f + r.f,
      l: l,
      r: r
    };
  }

  var maxSym = t2[0].s;

  for (var i = 1; i < s; ++i) {
    if (t2[i].s > maxSym) maxSym = t2[i].s;
  } // code lengths


  var tr = new u16(maxSym + 1); // max bits in tree

  var mbt = ln(t[i1 - 1], tr, 0);

  if (mbt > mb) {
    // more algorithms from UZIP.js
    // TODO: find out how this code works (debt)
    //  ind    debt
    var i = 0,
        dt = 0; //    left            cost

    var lft = mbt - mb,
        cst = 1 << lft;
    t2.sort(function (a, b) {
      return tr[b.s] - tr[a.s] || a.f - b.f;
    });

    for (; i < s; ++i) {
      var i2_1 = t2[i].s;

      if (tr[i2_1] > mb) {
        dt += cst - (1 << mbt - tr[i2_1]);
        tr[i2_1] = mb;
      } else break;
    }

    dt >>>= lft;

    while (dt > 0) {
      var i2_2 = t2[i].s;
      if (tr[i2_2] < mb) dt -= 1 << mb - tr[i2_2]++ - 1;else ++i;
    }

    for (; i >= 0 && dt; --i) {
      var i2_3 = t2[i].s;

      if (tr[i2_3] == mb) {
        --tr[i2_3];
        ++dt;
      }
    }

    mbt = mb;
  }

  return [new u8(tr), mbt];
}; // get the max length and assign length codes


var ln = function (n, l, d) {
  return n.s == -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;
}; // length codes generation


var lc = function (c) {
  var s = c.length; // Note that the semicolon was intentional

  while (s && !c[--s]);

  var cl = new u16(++s); //  ind      num         streak

  var cli = 0,
      cln = c[0],
      cls = 1;

  var w = function (v) {
    cl[cli++] = v;
  };

  for (var i = 1; i <= s; ++i) {
    if (c[i] == cln && i != s) ++cls;else {
      if (!cln && cls > 2) {
        for (; cls > 138; cls -= 138) w(32754);

        if (cls > 2) {
          w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);
          cls = 0;
        }
      } else if (cls > 3) {
        w(cln), --cls;

        for (; cls > 6; cls -= 6) w(8304);

        if (cls > 2) w(cls - 3 << 5 | 8208), cls = 0;
      }

      while (cls--) w(cln);

      cls = 1;
      cln = c[i];
    }
  }

  return [cl.subarray(0, cli), s];
}; // calculate the length of output from tree, code lengths


var clen = function (cf, cl) {
  var l = 0;

  for (var i = 0; i < cl.length; ++i) l += cf[i] * cl[i];

  return l;
}; // writes a fixed block
// returns the new bit pos


var wfblk = function (out, pos, dat) {
  // no need to write 00 as type: TypedArray defaults to 0
  var s = dat.length;
  var o = shft(pos + 2);
  out[o] = s & 255;
  out[o + 1] = s >>> 8;
  out[o + 2] = out[o] ^ 255;
  out[o + 3] = out[o + 1] ^ 255;

  for (var i = 0; i < s; ++i) out[o + i + 4] = dat[i];

  return (o + 4 + s) * 8;
}; // writes a block


var wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {
  wbits(out, p++, final);
  ++lf[256];

  var _a = hTree(lf, 15),
      dlt = _a[0],
      mlb = _a[1];

  var _b = hTree(df, 15),
      ddt = _b[0],
      mdb = _b[1];

  var _c = lc(dlt),
      lclt = _c[0],
      nlc = _c[1];

  var _d = lc(ddt),
      lcdt = _d[0],
      ndc = _d[1];

  var lcfreq = new u16(19);

  for (var i = 0; i < lclt.length; ++i) lcfreq[lclt[i] & 31]++;

  for (var i = 0; i < lcdt.length; ++i) lcfreq[lcdt[i] & 31]++;

  var _e = hTree(lcfreq, 7),
      lct = _e[0],
      mlcb = _e[1];

  var nlcc = 19;

  for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc);

  var flen = bl + 5 << 3;
  var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
  var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);
  if (flen <= ftlen && flen <= dtlen) return wfblk(out, p, dat.subarray(bs, bs + bl));
  var lm, ll, dm, dl;
  wbits(out, p, 1 + (dtlen < ftlen)), p += 2;

  if (dtlen < ftlen) {
    lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
    var llm = hMap(lct, mlcb, 0);
    wbits(out, p, nlc - 257);
    wbits(out, p + 5, ndc - 1);
    wbits(out, p + 10, nlcc - 4);
    p += 14;

    for (var i = 0; i < nlcc; ++i) wbits(out, p + 3 * i, lct[clim[i]]);

    p += 3 * nlcc;
    var lcts = [lclt, lcdt];

    for (var it = 0; it < 2; ++it) {
      var clct = lcts[it];

      for (var i = 0; i < clct.length; ++i) {
        var len = clct[i] & 31;
        wbits(out, p, llm[len]), p += lct[len];
        if (len > 15) wbits(out, p, clct[i] >>> 5 & 127), p += clct[i] >>> 12;
      }
    }
  } else {
    lm = flm, ll = flt, dm = fdm, dl = fdt;
  }

  for (var i = 0; i < li; ++i) {
    if (syms[i] > 255) {
      var len = syms[i] >>> 18 & 31;
      wbits16(out, p, lm[len + 257]), p += ll[len + 257];
      if (len > 7) wbits(out, p, syms[i] >>> 23 & 31), p += fleb[len];
      var dst = syms[i] & 31;
      wbits16(out, p, dm[dst]), p += dl[dst];
      if (dst > 3) wbits16(out, p, syms[i] >>> 5 & 8191), p += fdeb[dst];
    } else {
      wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];
    }
  }

  wbits16(out, p, lm[256]);
  return p + ll[256];
}; // deflate options (nice << 13) | chain


var deo = /*#__PURE__*/new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]); // empty

var et = /*#__PURE__*/new u8(0); // compresses data into a raw DEFLATE buffer

var dflt = function (dat, lvl, plvl, pre, post, lst) {
  var s = dat.length;
  var o = new u8(pre + s + 5 * (1 + Math.floor(s / 7000)) + post); // writing to this writes to the output buffer

  var w = o.subarray(pre, o.length - post);
  var pos = 0;

  if (!lvl || s < 8) {
    for (var i = 0; i <= s; i += 65535) {
      // end
      var e = i + 65535;

      if (e < s) {
        // write full block
        pos = wfblk(w, pos, dat.subarray(i, e));
      } else {
        // write final block
        w[i] = lst;
        pos = wfblk(w, pos, dat.subarray(i, s));
      }
    }
  } else {
    var opt = deo[lvl - 1];
    var n = opt >>> 13,
        c = opt & 8191;
    var msk_1 = (1 << plvl) - 1; //    prev 2-byte val map    curr 2-byte val map

    var prev = new u16(32768),
        head = new u16(msk_1 + 1);
    var bs1_1 = Math.ceil(plvl / 3),
        bs2_1 = 2 * bs1_1;

    var hsh = function (i) {
      return (dat[i] ^ dat[i + 1] << bs1_1 ^ dat[i + 2] << bs2_1) & msk_1;
    }; // 24576 is an arbitrary number of maximum symbols per block
    // 424 buffer for last block


    var syms = new u32(25000); // length/literal freq   distance freq

    var lf = new u16(288),
        df = new u16(32); //  l/lcnt  exbits  index  l/lind  waitdx  bitpos

    var lc_1 = 0,
        eb = 0,
        i = 0,
        li = 0,
        wi = 0,
        bs = 0;

    for (; i < s; ++i) {
      // hash value
      var hv = hsh(i); // index mod 32768

      var imod = i & 32767; // previous index with this value

      var pimod = head[hv];
      prev[imod] = pimod;
      head[hv] = imod; // We always should modify head and prev, but only add symbols if
      // this data is not yet processed ("wait" for wait index)

      if (wi <= i) {
        // bytes remaining
        var rem = s - i;

        if ((lc_1 > 7000 || li > 24576) && rem > 423) {
          pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);
          li = lc_1 = eb = 0, bs = i;

          for (var j = 0; j < 286; ++j) lf[j] = 0;

          for (var j = 0; j < 30; ++j) df[j] = 0;
        } //  len    dist   chain


        var l = 2,
            d = 0,
            ch_1 = c,
            dif = imod - pimod & 32767;

        if (rem > 2 && hv == hsh(i - dif)) {
          var maxn = Math.min(n, rem) - 1;
          var maxd = Math.min(32767, i); // max possible length
          // not capped at dif because decompressors implement "rolling" index population

          var ml = Math.min(258, rem);

          while (dif <= maxd && --ch_1 && imod != pimod) {
            if (dat[i + l] == dat[i + l - dif]) {
              var nl = 0;

              for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl);

              if (nl > l) {
                l = nl, d = dif; // break out early when we reach "nice" (we are satisfied enough)

                if (nl > maxn) break; // now, find the rarest 2-byte sequence within this
                // length of literals and search for that instead.
                // Much faster than just using the start

                var mmd = Math.min(dif, nl - 2);
                var md = 0;

                for (var j = 0; j < mmd; ++j) {
                  var ti = i - dif + j + 32768 & 32767;
                  var pti = prev[ti];
                  var cd = ti - pti + 32768 & 32767;
                  if (cd > md) md = cd, pimod = ti;
                }
              }
            } // check the previous match


            imod = pimod, pimod = prev[imod];
            dif += imod - pimod + 32768 & 32767;
          }
        } // d will be nonzero only when a match was found


        if (d) {
          // store both dist and len data in one Uint32
          // Make sure this is recognized as a len/dist with 28th bit (2^28)
          syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];
          var lin = revfl[l] & 31,
              din = revfd[d] & 31;
          eb += fleb[lin] + fdeb[din];
          ++lf[257 + lin];
          ++df[din];
          wi = i + l;
          ++lc_1;
        } else {
          syms[li++] = dat[i];
          ++lf[dat[i]];
        }
      }
    }

    pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos); // this is the easiest way to avoid needing to maintain state

    if (!lst) pos = wfblk(w, pos, et);
  }

  return slc(o, 0, pre + shft(pos) + post);
}; // CRC32 table


var crct = /*#__PURE__*/function () {
  var t = new u32(256);

  for (var i = 0; i < 256; ++i) {
    var c = i,
        k = 9;

    while (--k) c = (c & 1 && 0xEDB88320) ^ c >>> 1;

    t[i] = c;
  }

  return t;
}(); // CRC32


var crc = function () {
  var c = 0xFFFFFFFF;
  return {
    p: function (d) {
      // closures have awful performance
      var cr = c;

      for (var i = 0; i < d.length; ++i) cr = crct[cr & 255 ^ d[i]] ^ cr >>> 8;

      c = cr;
    },
    d: function () {
      return c ^ 0xFFFFFFFF;
    }
  };
}; // Alder32


var adler = function () {
  var a = 1,
      b = 0;
  return {
    p: function (d) {
      // closures have awful performance
      var n = a,
          m = b;
      var l = d.length;

      for (var i = 0; i != l;) {
        var e = Math.min(i + 5552, l);

        for (; i < e; ++i) n += d[i], m += n;

        n %= 65521, m %= 65521;
      }

      a = n, b = m;
    },
    d: function () {
      return (a >>> 8 << 16 | (b & 255) << 8 | b >>> 8) + ((a & 255) << 23) * 2;
    }
  };
};

; // deflate with opts

var dopt = function (dat, opt, pre, post, st) {
  return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 12 + opt.mem, pre, post, !st);
}; // Walmart object spread


var mrg = function (a, b) {
  var o = {};

  for (var k in a) o[k] = a[k];

  for (var k in b) o[k] = b[k];

  return o;
}; // worker clone
// This is possibly the craziest part of the entire codebase, despite how simple it may seem.
// The only parameter to this function is a closure that returns an array of variables outside of the function scope.
// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.
// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).
// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.
// This took me three weeks to figure out how to do.


var wcln = function (fn, fnStr, td) {
  var dt = fn();
  var st = fn.toString();
  var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/ /g, '').split(',');

  for (var i = 0; i < dt.length; ++i) {
    var v = dt[i],
        k = ks[i];

    if (typeof v == 'function') {
      fnStr += ';' + k + '=';
      var st_1 = v.toString();

      if (v.prototype) {
        // for global objects
        if (st_1.indexOf('[native code]') != -1) {
          var spInd = st_1.indexOf(' ', 8) + 1;
          fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));
        } else {
          fnStr += st_1;

          for (var t in v.prototype) fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();
        }
      } else fnStr += st_1;
    } else td[k] = v;
  }

  return [fnStr, td];
};

var ch = []; // clone bufs

var cbfs = function (v) {
  var tl = [];

  for (var k in v) {
    if (v[k] instanceof u8 || v[k] instanceof u16 || v[k] instanceof u32) tl.push((v[k] = new v[k].constructor(v[k])).buffer);
  }

  return tl;
}; // use a worker to execute code


var wrkr = function (fns, init, id, cb) {
  var _a;

  if (!ch[id]) {
    var fnStr = '',
        td_1 = {},
        m = fns.length - 1;

    for (var i = 0; i < m; ++i) _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];

    ch[id] = wcln(fns[m], fnStr, td_1);
  }

  var td = mrg({}, ch[id][1]);
  return wk(ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);
}; // base async inflate fn


var bInflt = function () {
  return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, hMap, max, bits, bits16, shft, slc, inflt, inflateSync, pbf, gu8];
};

var bDflt = function () {
  return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf];
}; // gzip extra


var gze = function () {
  return [gzh, gzhl, wbytes, crc, crct];
}; // gunzip extra


var guze = function () {
  return [gzs, gzl];
}; // zlib extra


var zle = function () {
  return [zlh, wbytes, adler];
}; // unzlib extra


var zule = function () {
  return [zlv];
}; // post buf


var pbf = function (msg) {
  return postMessage(msg, [msg.buffer]);
}; // get u8


var gu8 = function (o) {
  return o && o.size && new u8(o.size);
}; // async helper


var cbify = function (dat, opts, fns, init, id, cb) {
  var w = wrkr(fns, init, id, function (err, dat) {
    w.terminate();
    cb(err, dat);
  });
  if (!opts.consume) dat = new u8(dat);
  w.postMessage([dat, opts], [dat.buffer]);
  return function () {
    w.terminate();
  };
}; // auto stream


var astrm = function (strm) {
  strm.ondata = function (dat, final) {
    return postMessage([dat, final], [dat.buffer]);
  };

  return function (ev) {
    return strm.push(ev.data[0], ev.data[1]);
  };
}; // async stream attach


var astrmify = function (fns, strm, opts, init, id) {
  var t;
  var w = wrkr(fns, init, id, function (err, dat) {
    if (err) w.terminate(), strm.ondata.call(strm, err);else {
      if (dat[1]) w.terminate();
      strm.ondata.call(strm, err, dat[0], dat[1]);
    }
  });
  w.postMessage(opts);

  strm.push = function (d, f) {
    if (t) throw 'stream finished';
    if (!strm.ondata) throw 'no stream handler';
    w.postMessage([d, t = f], [d.buffer]);
  };

  strm.terminate = function () {
    w.terminate();
  };
}; // read 2 bytes


var b2 = function (d, b) {
  return d[b] | d[b + 1] << 8;
}; // read 4 bytes


var b4 = function (d, b) {
  return (d[b] | d[b + 1] << 8 | d[b + 2] << 16) + (d[b + 3] << 23) * 2;
}; // write bytes


var wbytes = function (d, b, v) {
  for (; v; ++b) d[b] = v, v >>>= 8;
}; // gzip header


var gzh = function (c, o) {
  var fn = o.filename;
  c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix

  if (o.mtime != 0) wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));

  if (fn) {
    c[3] = 8;

    for (var i = 0; i <= fn.length; ++i) c[i + 10] = fn.charCodeAt(i);
  }
}; // gzip footer: -8 to -4 = CRC, -4 to -0 is length
// gzip start


var gzs = function (d) {
  if (d[0] != 31 || d[1] != 139 || d[2] != 8) throw 'invalid gzip data';
  var flg = d[3];
  var st = 10;
  if (flg & 4) st += d[10] | (d[11] << 8) + 2;

  for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++]);

  return st + (flg & 2);
}; // gzip length


var gzl = function (d) {
  var l = d.length;
  return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) + 2 * (d[l - 1] << 23);
}; // gzip header length


var gzhl = function (o) {
  return 10 + (o.filename && o.filename.length + 1 || 0);
}; // zlib header


var zlh = function (c, o) {
  var lv = o.level,
      fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;
  c[0] = 120, c[1] = fl << 6 | (fl ? 32 - 2 * fl : 1);
}; // zlib valid


var zlv = function (d) {
  if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31) throw 'invalid zlib data';
  if (d[1] & 32) throw 'invalid zlib data: preset dictionaries not supported';
};

function AsyncCmpStrm(opts, cb) {
  if (!cb && typeof opts == 'function') cb = opts, opts = {};
  this.ondata = cb;
  return opts;
} // zlib footer: -4 to -0 is Adler32

/**
 * Streaming DEFLATE compression
 */


var Deflate = /*#__PURE__*/function () {
  function Deflate(opts, cb) {
    if (!cb && typeof opts == 'function') cb = opts, opts = {};
    this.ondata = cb;
    this.o = opts || {};
  }

  Deflate.prototype.p = function (c, f) {
    this.ondata(dopt(c, this.o, 0, 0, !f), f);
  };
  /**
   * Pushes a chunk to be deflated
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */


  Deflate.prototype.push = function (chunk, final) {
    if (this.d) throw 'stream finished';
    if (!this.ondata) throw 'no stream handler';
    this.d = final;
    this.p(chunk, final || false);
  };

  return Deflate;
}();

exports.Deflate = Deflate;

/**
 * Asynchronous streaming DEFLATE compression
 */
var AsyncDeflate = /*#__PURE__*/function () {
  function AsyncDeflate(opts, cb) {
    astrmify([bDflt, function () {
      return [astrm, Deflate];
    }], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {
      var strm = new Deflate(ev.data);
      onmessage = astrm(strm);
    }, 6);
  }

  return AsyncDeflate;
}();

exports.AsyncDeflate = AsyncDeflate;

function deflate(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return cbify(data, opts, [bDflt], function (ev) {
    return pbf(deflateSync(ev.data[0], ev.data[1]));
  }, 0, cb);
}
/**
 * Compresses data with DEFLATE without any wrapper
 * @param data The data to compress
 * @param opts The compression options
 * @returns The deflated version of the data
 */


function deflateSync(data, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return dopt(data, opts, 0, 0);
}
/**
 * Streaming DEFLATE decompression
 */


var Inflate = /*#__PURE__*/function () {
  /**
   * Creates an inflation stream
   * @param cb The callback to call whenever data is inflated
   */
  function Inflate(cb) {
    this.s = {};
    this.p = new u8(0);
    this.ondata = cb;
  }

  Inflate.prototype.e = function (c) {
    if (this.d) throw 'stream finished';
    if (!this.ondata) throw 'no stream handler';
    var l = this.p.length;
    var n = new u8(l + c.length);
    n.set(this.p), n.set(c, l), this.p = n;
  };

  Inflate.prototype.c = function (final) {
    this.d = this.s.i = final || false;
    var bts = this.s.b;
    var dt = inflt(this.p, this.o, this.s);
    this.ondata(slc(dt, bts, this.s.b), this.d);
    this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
    this.p = slc(this.p, this.s.p / 8 >> 0), this.s.p &= 7;
  };
  /**
   * Pushes a chunk to be inflated
   * @param chunk The chunk to push
   * @param final Whether this is the final chunk
   */


  Inflate.prototype.push = function (chunk, final) {
    this.e(chunk), this.c(final);
  };

  return Inflate;
}();

exports.Inflate = Inflate;

/**
 * Asynchronous streaming DEFLATE decompression
 */
var AsyncInflate = /*#__PURE__*/function () {
  /**
   * Creates an asynchronous inflation stream
   * @param cb The callback to call whenever data is deflated
   */
  function AsyncInflate(cb) {
    this.ondata = cb;
    astrmify([bInflt, function () {
      return [astrm, Inflate];
    }], this, 0, function () {
      var strm = new Inflate();
      onmessage = astrm(strm);
    }, 7);
  }

  return AsyncInflate;
}();

exports.AsyncInflate = AsyncInflate;

function inflate(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return cbify(data, opts, [bInflt], function (ev) {
    return pbf(inflateSync(ev.data[0], gu8(ev.data[1])));
  }, 1, cb);
}
/**
 * Expands DEFLATE data with no wrapper
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */


function inflateSync(data, out) {
  return inflt(data, out);
} // before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.

/**
 * Streaming GZIP compression
 */


var Gzip = /*#__PURE__*/function () {
  function Gzip(opts, cb) {
    this.c = crc();
    this.l = 0;
    this.v = 1;
    Deflate.call(this, opts, cb);
  }
  /**
   * Pushes a chunk to be GZIPped
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */


  Gzip.prototype.push = function (chunk, final) {
    Deflate.prototype.push.call(this, chunk, final);
  };

  Gzip.prototype.p = function (c, f) {
    this.c.p(c);
    this.l += c.length;
    var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);
    if (this.v) gzh(raw, this.o), this.v = 0;
    if (f) wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);
    this.ondata(raw, f);
  };

  return Gzip;
}();

exports.Compress = exports.Gzip = Gzip;

/**
 * Asynchronous streaming GZIP compression
 */
var AsyncGzip = /*#__PURE__*/function () {
  function AsyncGzip(opts, cb) {
    astrmify([bDflt, gze, function () {
      return [astrm, Deflate, Gzip];
    }], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {
      var strm = new Gzip(ev.data);
      onmessage = astrm(strm);
    }, 8);
  }

  return AsyncGzip;
}();

exports.AsyncCompress = exports.AsyncGzip = AsyncGzip;

function gzip(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return cbify(data, opts, [bDflt, gze, function () {
    return [gzipSync];
  }], function (ev) {
    return pbf(gzipSync(ev.data[0], ev.data[1]));
  }, 2, cb);
}
/**
 * Compresses data with GZIP
 * @param data The data to compress
 * @param opts The compression options
 * @returns The gzipped version of the data
 */


function gzipSync(data, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var c = crc(),
      l = data.length;
  c.p(data);
  var d = dopt(data, opts, gzhl(opts), 8),
      s = d.length;
  return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;
}
/**
 * Streaming GZIP decompression
 */


var Gunzip = /*#__PURE__*/function () {
  /**
   * Creates a GUNZIP stream
   * @param cb The callback to call whenever data is inflated
   */
  function Gunzip(cb) {
    this.v = 1;
    Inflate.call(this, cb);
  }
  /**
   * Pushes a chunk to be GUNZIPped
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */


  Gunzip.prototype.push = function (chunk, final) {
    Inflate.prototype.e.call(this, chunk);

    if (this.v) {
      var s = gzs(this.p);
      if (s >= this.p.length && !final) return;
      this.p = this.p.subarray(s), this.v = 0;
    }

    if (final) {
      if (this.p.length < 8) throw 'invalid gzip stream';
      this.p = this.p.subarray(0, -8);
    } // necessary to prevent TS from using the closure value
    // This allows for workerization to function correctly


    Inflate.prototype.c.call(this, final);
  };

  return Gunzip;
}();

exports.Gunzip = Gunzip;

/**
 * Asynchronous streaming GZIP decompression
 */
var AsyncGunzip = /*#__PURE__*/function () {
  /**
   * Creates an asynchronous GUNZIP stream
   * @param cb The callback to call whenever data is deflated
   */
  function AsyncGunzip(cb) {
    this.ondata = cb;
    astrmify([bInflt, guze, function () {
      return [astrm, Inflate, Gunzip];
    }], this, 0, function () {
      var strm = new Gunzip();
      onmessage = astrm(strm);
    }, 9);
  }

  return AsyncGunzip;
}();

exports.AsyncGunzip = AsyncGunzip;

function gunzip(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return cbify(data, opts, [bInflt, guze, function () {
    return [gunzipSync];
  }], function (ev) {
    return pbf(gunzipSync(ev.data[0]));
  }, 3, cb);
}
/**
 * Expands GZIP data
 * @param data The data to decompress
 * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.
 * @returns The decompressed version of the data
 */


function gunzipSync(data, out) {
  return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));
}
/**
 * Streaming Zlib compression
 */


var Zlib = /*#__PURE__*/function () {
  function Zlib(opts, cb) {
    this.c = adler();
    this.v = 1;
    Deflate.call(this, opts, cb);
  }
  /**
   * Pushes a chunk to be zlibbed
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */


  Zlib.prototype.push = function (chunk, final) {
    Deflate.prototype.push.call(this, chunk, final);
  };

  Zlib.prototype.p = function (c, f) {
    this.c.p(c);
    var raw = dopt(c, this.o, this.v && 2, f && 4, !f);
    if (this.v) zlh(raw, this.o), this.v = 0;
    if (f) wbytes(raw, raw.length - 4, this.c.d());
    this.ondata(raw, f);
  };

  return Zlib;
}();

exports.Zlib = Zlib;

/**
 * Asynchronous streaming Zlib compression
 */
var AsyncZlib = /*#__PURE__*/function () {
  function AsyncZlib(opts, cb) {
    astrmify([bDflt, zle, function () {
      return [astrm, Deflate, Zlib];
    }], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {
      var strm = new Zlib(ev.data);
      onmessage = astrm(strm);
    }, 10);
  }

  return AsyncZlib;
}();

exports.AsyncZlib = AsyncZlib;

function zlib(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return cbify(data, opts, [bDflt, zle, function () {
    return [zlibSync];
  }], function (ev) {
    return pbf(zlibSync(ev.data[0], ev.data[1]));
  }, 4, cb);
}
/**
 * Compress data with Zlib
 * @param data The data to compress
 * @param opts The compression options
 * @returns The zlib-compressed version of the data
 */


function zlibSync(data, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var a = adler();
  a.p(data);
  var d = dopt(data, opts, 2, 4);
  return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;
}
/**
 * Streaming Zlib decompression
 */


var Unzlib = /*#__PURE__*/function () {
  /**
   * Creates a Zlib decompression stream
   * @param cb The callback to call whenever data is inflated
   */
  function Unzlib(cb) {
    this.v = 1;
    Inflate.call(this, cb);
  }
  /**
   * Pushes a chunk to be unzlibbed
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */


  Unzlib.prototype.push = function (chunk, final) {
    Inflate.prototype.e.call(this, chunk);

    if (this.v) {
      if (this.p.length < 2 && !final) return;
      this.p = this.p.subarray(2), this.v = 0;
    }

    if (final) {
      if (this.p.length < 4) throw 'invalid zlib stream';
      this.p = this.p.subarray(0, -4);
    } // necessary to prevent TS from using the closure value
    // This allows for workerization to function correctly


    Inflate.prototype.c.call(this, final);
  };

  return Unzlib;
}();

exports.Unzlib = Unzlib;

/**
 * Asynchronous streaming Zlib decompression
 */
var AsyncUnzlib = /*#__PURE__*/function () {
  /**
   * Creates an asynchronous Zlib decompression stream
   * @param cb The callback to call whenever data is deflated
   */
  function AsyncUnzlib(cb) {
    this.ondata = cb;
    astrmify([bInflt, zule, function () {
      return [astrm, Inflate, Unzlib];
    }], this, 0, function () {
      var strm = new Unzlib();
      onmessage = astrm(strm);
    }, 11);
  }

  return AsyncUnzlib;
}();

exports.AsyncUnzlib = AsyncUnzlib;

function unzlib(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return cbify(data, opts, [bInflt, zule, function () {
    return [unzlibSync];
  }], function (ev) {
    return pbf(unzlibSync(ev.data[0], gu8(ev.data[1])));
  }, 5, cb);
}
/**
 * Expands Zlib data
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */


function unzlibSync(data, out) {
  return inflt((zlv(data), data.subarray(2, -4)), out);
} // Default algorithm for compression (used because having a known output size allows faster decompression)


/**
 * Streaming GZIP, Zlib, or raw DEFLATE decompression
 */
var Decompress = /*#__PURE__*/function () {
  /**
   * Creates a decompression stream
   * @param cb The callback to call whenever data is decompressed
   */
  function Decompress(cb) {
    this.G = Gunzip;
    this.I = Inflate;
    this.Z = Unzlib;
    this.ondata = cb;
  }
  /**
   * Pushes a chunk to be decompressed
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */


  Decompress.prototype.push = function (chunk, final) {
    if (!this.ondata) throw 'no stream handler';

    if (!this.s) {
      if (this.p && this.p.length) {
        var n = new u8(this.p.length + chunk.length);
        n.set(this.p), n.set(chunk, this.p.length);
      } else this.p = chunk;

      if (this.p.length > 2) {
        var _this_1 = this;

        var cb = function () {
          _this_1.ondata.apply(_this_1, arguments);
        };

        this.s = this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8 ? new this.G(cb) : (this.p[0] & 15) != 8 || this.p[0] >> 4 > 7 || (this.p[0] << 8 | this.p[1]) % 31 ? new this.I(cb) : new this.Z(cb);
        this.s.push(this.p, final);
        this.p = null;
      }
    } else this.s.push(chunk, final);
  };

  return Decompress;
}();

exports.Decompress = Decompress;

/**
 * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression
 */
var AsyncDecompress = /*#__PURE__*/function () {
  /**
  * Creates an asynchronous decompression stream
  * @param cb The callback to call whenever data is decompressed
  */
  function AsyncDecompress(cb) {
    this.G = AsyncGunzip;
    this.I = AsyncInflate;
    this.Z = AsyncUnzlib;
    this.ondata = cb;
  }
  /**
   * Pushes a chunk to be decompressed
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */


  AsyncDecompress.prototype.push = function (chunk, final) {
    Decompress.prototype.push.call(this, chunk, final);
  };

  return AsyncDecompress;
}();

exports.AsyncDecompress = AsyncDecompress;

function decompress(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return data[0] == 31 && data[1] == 139 && data[2] == 8 ? gunzip(data, opts, cb) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? inflate(data, opts, cb) : unzlib(data, opts, cb);
}
/**
 * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */


function decompressSync(data, out) {
  return data[0] == 31 && data[1] == 139 && data[2] == 8 ? gunzipSync(data, out) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? inflateSync(data, out) : unzlibSync(data, out);
} // flatten a directory structure


var fltn = function (d, p, t, o) {
  for (var k in d) {
    var val = d[k],
        n = p + k;
    if (val instanceof u8) t[n] = [val, o];else if (Array.isArray(val)) t[n] = [val[0], mrg(o, val[1])];else fltn(val, n + '/', t, o);
  }
};
/**
 * Converts a string into a Uint8Array for use with compression/decompression methods
 * @param str The string to encode
 * @param latin1 Whether or not to interpret the data as Latin-1. This should
 *               not need to be true unless decoding a binary string.
 * @returns The string encoded in UTF-8/Latin-1 binary
 */


function strToU8(str, latin1) {
  var l = str.length;
  if (!latin1 && typeof TextEncoder != 'undefined') return new TextEncoder().encode(str);
  var ar = new u8(str.length + (str.length >>> 1));
  var ai = 0;

  var w = function (v) {
    ar[ai++] = v;
  };

  for (var i = 0; i < l; ++i) {
    if (ai + 5 > ar.length) {
      var n = new u8(ai + 8 + (l - i << 1));
      n.set(ar);
      ar = n;
    }

    var c = str.charCodeAt(i);
    if (c < 128 || latin1) w(c);else if (c < 2048) w(192 | c >>> 6), w(128 | c & 63);else if (c > 55295 && c < 57344) c = 65536 + (c & 1023 << 10) | str.charCodeAt(++i) & 1023, w(240 | c >>> 18), w(128 | c >>> 12 & 63), w(128 | c >>> 6 & 63), w(128 | c & 63);else w(224 | c >>> 12), w(128 | c >>> 6 & 63), w(128 | c & 63);
  }

  return slc(ar, 0, ai);
}
/**
 * Converts a Uint8Array to a string
 * @param dat The data to decode to string
 * @param latin1 Whether or not to interpret the data as Latin-1. This should
 *               not need to be true unless encoding to binary string.
 * @returns The original UTF-8/Latin-1 string
 */


function strFromU8(dat, latin1) {
  var r = '';
  if (!latin1 && typeof TextDecoder != 'undefined') return new TextDecoder().decode(dat);

  for (var i = 0; i < dat.length;) {
    var c = dat[i++];
    if (c < 128 || latin1) r += String.fromCharCode(c);else if (c < 224) r += String.fromCharCode((c & 31) << 6 | dat[i++] & 63);else if (c < 240) r += String.fromCharCode((c & 15) << 12 | (dat[i++] & 63) << 6 | dat[i++] & 63);else c = ((c & 15) << 18 | (dat[i++] & 63) << 12 | (dat[i++] & 63) << 6 | dat[i++] & 63) - 65536, r += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);
  }

  return r;
}

; // skip local zip header

var slzh = function (d, b) {
  return b + 30 + b2(d, b + 26) + b2(d, b + 28);
}; // read zip header


var zh = function (d, b, z) {
  var fnl = b2(d, b + 28),
      fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)),
      es = b + 46 + fnl;

  var _a = z ? z64e(d, es) : [b4(d, b + 20), b4(d, b + 24), b4(d, b + 42)],
      sc = _a[0],
      su = _a[1],
      off = _a[2];

  return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];
}; // read zip64 extra field


var z64e = function (d, b) {
  for (; b2(d, b) != 1; b += 4 + b2(d, b + 2));

  return [b4(d, b + 12), b4(d, b + 4), b4(d, b + 20)];
}; // write zip header


var wzh = function (d, b, c, cmp, su, fn, u, o, ce, t) {
  var fl = fn.length,
      l = cmp.length;
  wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;
  if (ce != null) d[b] = 20, b += 2;
  d[b] = 20, b += 2; // spec compliance? what's that?

  d[b++] = t == 8 && (o.level == 1 ? 6 : o.level < 6 ? 4 : o.level == 9 ? 2 : 0), d[b++] = u && 8;
  d[b] = t, b += 2;
  var dt = new Date(o.mtime || Date.now()),
      y = dt.getFullYear() - 1980;
  if (y < 0 || y > 119) throw 'date not in range 1980-2099';
  wbytes(d, b, (y << 24) * 2 | dt.getMonth() + 1 << 21 | dt.getDate() << 16 | dt.getHours() << 11 | dt.getMinutes() << 5 | dt.getSeconds() >>> 1);
  b += 4;
  wbytes(d, b, c);
  wbytes(d, b + 4, l);
  wbytes(d, b + 8, su);
  wbytes(d, b + 12, fl), b += 16; // skip extra field, comment

  if (ce != null) wbytes(d, b += 10, ce), b += 4;
  d.set(fn, b);
  b += fl;
  if (ce == null) d.set(cmp, b);
}; // write zip footer (end of central directory)


var wzf = function (o, b, c, d, e) {
  wbytes(o, b, 0x6054B50); // skip disk

  wbytes(o, b + 8, c);
  wbytes(o, b + 10, c);
  wbytes(o, b + 12, d);
  wbytes(o, b + 16, e);
};

function zip(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  var r = {};
  fltn(data, '', r, opts);
  var k = Object.keys(r);
  var lft = k.length,
      o = 0,
      tot = 0;
  var slft = lft,
      files = new Array(lft);
  var term = [];

  var tAll = function () {
    for (var i = 0; i < term.length; ++i) term[i]();
  };

  var cbf = function () {
    var out = new u8(tot + 22),
        oe = o,
        cdl = tot - o;
    tot = 0;

    for (var i = 0; i < slft; ++i) {
      var f = files[i];

      try {
        wzh(out, tot, f.c, f.d, f.m, f.n, f.u, f.p, null, f.t);
        wzh(out, o, f.c, f.d, f.m, f.n, f.u, f.p, tot, f.t), o += 46 + f.n.length, tot += 30 + f.n.length + f.d.length;
      } catch (e) {
        return cb(e, null);
      }
    }

    wzf(out, o, files.length, cdl, oe);
    cb(null, out);
  };

  if (!lft) cbf();

  var _loop_1 = function (i) {
    var fn = k[i];
    var _a = r[fn],
        file = _a[0],
        p = _a[1];
    var c = crc(),
        m = file.length;
    c.p(file);
    var n = strToU8(fn),
        s = n.length;
    var t = p.level == 0 ? 0 : 8;

    var cbl = function (e, d) {
      if (e) {
        tAll();
        cb(e, null);
      } else {
        var l = d.length;
        files[i] = {
          t: t,
          d: d,
          m: m,
          c: c.d(),
          u: fn.length != l,
          n: n,
          p: p
        };
        o += 30 + s + l;
        tot += 76 + 2 * s + l;
        if (! --lft) cbf();
      }
    };

    if (n.length > 65535) cbl('filename too long', null);
    if (!t) cbl(null, file);else if (m < 160000) {
      try {
        cbl(null, deflateSync(file, p));
      } catch (e) {
        cbl(e, null);
      }
    } else term.push(deflate(file, p, cbl));
  }; // Cannot use lft because it can decrease


  for (var i = 0; i < slft; ++i) {
    _loop_1(i);
  }

  return tAll;
}
/**
 * Synchronously creates a ZIP file. Prefer using `zip` for better performance
 * with more than one file.
 * @param data The directory structure for the ZIP archive
 * @param opts The main options, merged with per-file options
 * @returns The generated ZIP archive
 */


function zipSync(data, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var r = {};
  var files = [];
  fltn(data, '', r, opts);
  var o = 0;
  var tot = 0;

  for (var fn in r) {
    var _a = r[fn],
        file = _a[0],
        p = _a[1];
    var t = p.level == 0 ? 0 : 8;
    var n = strToU8(fn),
        s = n.length;
    if (n.length > 65535) throw 'filename too long';
    var d = t ? deflateSync(file, p) : file,
        l = d.length;
    var c = crc();
    c.p(file);
    files.push({
      t: t,
      d: d,
      m: file.length,
      c: c.d(),
      u: fn.length != s,
      n: n,
      o: o,
      p: p
    });
    o += 30 + s + l;
    tot += 76 + 2 * s + l;
  }

  var out = new u8(tot + 22),
      oe = o,
      cdl = tot - o;

  for (var i = 0; i < files.length; ++i) {
    var f = files[i];
    wzh(out, f.o, f.c, f.d, f.m, f.n, f.u, f.p, null, f.t);
    wzh(out, o, f.c, f.d, f.m, f.n, f.u, f.p, f.o, f.t), o += 46 + f.n.length;
  }

  wzf(out, o, files.length, cdl, oe);
  return out;
}
/**
 * Asynchronously decompresses a ZIP archive
 * @param data The raw compressed ZIP file
 * @param cb The callback to call with the decompressed files
 * @returns A function that can be used to immediately terminate the unzipping
 */


function unzip(data, cb) {
  if (typeof cb != 'function') throw 'no callback';
  var term = [];

  var tAll = function () {
    for (var i = 0; i < term.length; ++i) term[i]();
  };

  var files = {};
  var e = data.length - 22;

  for (; b4(data, e) != 0x6054B50; --e) {
    if (!e || data.length - e > 65558) {
      cb('invalid zip file', null);
      return;
    }
  }

  ;
  var lft = b2(data, e + 8);
  if (!lft) cb(null, {});
  var c = lft;
  var o = b4(data, e + 16);
  var z = o == 4294967295;

  if (z) {
    e = b4(data, e - 12);
    if (b4(data, e) != 0x6064B50) throw 'invalid zip file';
    c = lft = b4(data, e + 32);
    o = b4(data, e + 48);
  }

  var _loop_2 = function (i) {
    var _a = zh(data, o, z),
        c_1 = _a[0],
        sc = _a[1],
        su = _a[2],
        fn = _a[3],
        no = _a[4],
        off = _a[5],
        b = slzh(data, off);

    o = no;

    var cbl = function (e, d) {
      if (e) {
        tAll();
        cb(e, null);
      } else {
        files[fn] = d;
        if (! --lft) cb(null, files);
      }
    };

    if (!c_1) cbl(null, slc(data, b, b + sc));else if (c_1 == 8) {
      var infl = data.subarray(b, b + sc);

      if (sc < 320000) {
        try {
          cbl(null, inflateSync(infl, new u8(su)));
        } catch (e) {
          cbl(e, null);
        }
      } else term.push(inflate(infl, {
        size: su
      }, cbl));
    } else cbl('unknown compression type ' + c_1, null);
  };

  for (var i = 0; i < c; ++i) {
    _loop_2(i);
  }

  return tAll;
}
/**
 * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better
 * performance with more than one file.
 * @param data The raw compressed ZIP file
 * @returns The decompressed files
 */


function unzipSync(data) {
  var files = {};
  var e = data.length - 22;

  for (; b4(data, e) != 0x6054B50; --e) {
    if (!e || data.length - e > 65558) throw 'invalid zip file';
  }

  ;
  var c = b2(data, e + 8);
  if (!c) return {};
  var o = b4(data, e + 16);
  var z = o == 4294967295;

  if (z) {
    e = b4(data, e - 12);
    if (b4(data, e) != 0x6064B50) throw 'invalid zip file';
    c = b4(data, e + 32);
    o = b4(data, e + 48);
  }

  for (var i = 0; i < c; ++i) {
    var _a = zh(data, o, z),
        c_2 = _a[0],
        sc = _a[1],
        su = _a[2],
        fn = _a[3],
        no = _a[4],
        off = _a[5],
        b = slzh(data, off);

    o = no;
    if (!c_2) files[fn] = slc(data, b, b + sc);else if (c_2 == 8) files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));else throw 'unknown compression type ' + c_2;
  }

  return files;
}
},{}],"../../node_modules/parcel-bundler/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)?\/[^/]+(?:\?.*)?$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"../../node_modules/parcel-bundler/src/builtins/bundle-loader.js":[function(require,module,exports) {
var getBundleURL = require('./bundle-url').getBundleURL;

function loadBundlesLazy(bundles) {
  if (!Array.isArray(bundles)) {
    bundles = [bundles];
  }

  var id = bundles[bundles.length - 1];

  try {
    return Promise.resolve(require(id));
  } catch (err) {
    if (err.code === 'MODULE_NOT_FOUND') {
      return new LazyPromise(function (resolve, reject) {
        loadBundles(bundles.slice(0, -1)).then(function () {
          return require(id);
        }).then(resolve, reject);
      });
    }

    throw err;
  }
}

function loadBundles(bundles) {
  return Promise.all(bundles.map(loadBundle));
}

var bundleLoaders = {};

function registerBundleLoader(type, loader) {
  bundleLoaders[type] = loader;
}

module.exports = exports = loadBundlesLazy;
exports.load = loadBundles;
exports.register = registerBundleLoader;
var bundles = {};

function loadBundle(bundle) {
  var id;

  if (Array.isArray(bundle)) {
    id = bundle[1];
    bundle = bundle[0];
  }

  if (bundles[bundle]) {
    return bundles[bundle];
  }

  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();
  var bundleLoader = bundleLoaders[type];

  if (bundleLoader) {
    return bundles[bundle] = bundleLoader(getBundleURL() + bundle).then(function (resolved) {
      if (resolved) {
        module.bundle.register(id, resolved);
      }

      return resolved;
    }).catch(function (e) {
      delete bundles[bundle];
      throw e;
    });
  }
}

function LazyPromise(executor) {
  this.executor = executor;
  this.promise = null;
}

LazyPromise.prototype.then = function (onSuccess, onError) {
  if (this.promise === null) this.promise = new Promise(this.executor);
  return this.promise.then(onSuccess, onError);
};

LazyPromise.prototype.catch = function (onError) {
  if (this.promise === null) this.promise = new Promise(this.executor);
  return this.promise.catch(onError);
};
},{"./bundle-url":"../../node_modules/parcel-bundler/src/builtins/bundle-url.js"}],"../../node_modules/jspdf/dist/jspdf.es.min.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GState = I;
exports.ShadingPattern = C;
exports.TilingPattern = j;
exports.jsPDF = O;
exports.AcroFormTextField = exports.AcroFormRadioButton = exports.AcroFormPushButton = exports.AcroFormPasswordField = exports.AcroFormListBox = exports.AcroFormEditBox = exports.AcroFormComboBox = exports.AcroFormChoiceField = exports.AcroFormCheckBox = exports.AcroFormButton = exports.AcroFormAppearance = exports.AcroForm = exports.default = void 0;

var _fflate = require("fflate");

/** @license
 *
 * jsPDF - PDF Document creation from JavaScript
 * Version 2.3.1 Built on 2021-03-08T15:44:11.674Z
 *                      CommitID 00000000
 *
 * Copyright (c) 2010-2020 James Hall <james@parall.ax>, https://github.com/MrRio/jsPDF
 *               2015-2020 yWorks GmbH, http://www.yworks.com
 *               2015-2020 Lukas HollÃ¤nder <lukas.hollaender@yworks.com>, https://github.com/HackbrettXXX
 *               2016-2018 Aras Abbasi <aras.abbasi@gmail.com>
 *               2010 Aaron Spike, https://github.com/acspike
 *               2012 Willow Systems Corporation, willow-systems.com
 *               2012 Pablo Hess, https://github.com/pablohess
 *               2012 Florian Jenett, https://github.com/fjenett
 *               2013 Warren Weckesser, https://github.com/warrenweckesser
 *               2013 Youssef Beddad, https://github.com/lifof
 *               2013 Lee Driscoll, https://github.com/lsdriscoll
 *               2013 Stefan Slonevskiy, https://github.com/stefslon
 *               2013 Jeremy Morel, https://github.com/jmorel
 *               2013 Christoph Hartmann, https://github.com/chris-rock
 *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
 *               2014 James Makes, https://github.com/dollaruw
 *               2014 Diego Casorran, https://github.com/diegocr
 *               2014 Steven Spungin, https://github.com/Flamenco
 *               2014 Kenneth Glassey, https://github.com/Gavvers
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Contributor(s):
 *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,
 *    kim3er, mfo, alnorth, Flamenco
 */
var r = function () {
  return "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this;
}();

function n() {
  r.console && "function" == typeof r.console.log && r.console.log.apply(r.console, arguments);
}

var i = {
  log: n,
  warn: function (t) {
    r.console && ("function" == typeof r.console.warn ? r.console.warn.apply(r.console, arguments) : n.call(null, arguments));
  },
  error: function (t) {
    r.console && ("function" == typeof r.console.error ? r.console.error.apply(r.console, arguments) : n(t));
  }
};
/**
 * @license
 * FileSaver.js
 * A saveAs() FileSaver implementation.
 *
 * By Eli Grey, http://eligrey.com
 *
 * License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)
 * source  : http://purl.eligrey.com/github/FileSaver.js
 */

function a(t, e, r) {
  var n = new XMLHttpRequest();
  n.open("GET", t), n.responseType = "blob", n.onload = function () {
    l(n.response, e, r);
  }, n.onerror = function () {
    i.error("could not download file");
  }, n.send();
}

function o(t) {
  var e = new XMLHttpRequest();
  e.open("HEAD", t, !1);

  try {
    e.send();
  } catch (t) {}

  return e.status >= 200 && e.status <= 299;
}

function s(t) {
  try {
    t.dispatchEvent(new MouseEvent("click"));
  } catch (r) {
    var e = document.createEvent("MouseEvents");
    e.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), t.dispatchEvent(e);
  }
}

var u,
    c,
    l = r.saveAs || ("object" != typeof window || window !== r ? function () {} : "undefined" != typeof HTMLAnchorElement && "download" in HTMLAnchorElement.prototype ? function (t, e, n) {
  var i = r.URL || r.webkitURL,
      u = document.createElement("a");
  e = e || t.name || "download", u.download = e, u.rel = "noopener", "string" == typeof t ? (u.href = t, u.origin !== location.origin ? o(u.href) ? a(t, e, n) : s(u, u.target = "_blank") : s(u)) : (u.href = i.createObjectURL(t), setTimeout(function () {
    i.revokeObjectURL(u.href);
  }, 4e4), setTimeout(function () {
    s(u);
  }, 0));
} : "msSaveOrOpenBlob" in navigator ? function (t, e, r) {
  if (e = e || t.name || "download", "string" == typeof t) {
    if (o(t)) a(t, e, r);else {
      var n = document.createElement("a");
      n.href = t, n.target = "_blank", setTimeout(function () {
        s(n);
      });
    }
  } else navigator.msSaveOrOpenBlob(function (t, e) {
    return void 0 === e ? e = {
      autoBom: !1
    } : "object" != typeof e && (i.warn("Deprecated: Expected third argument to be a object"), e = {
      autoBom: !e
    }), e.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type) ? new Blob([String.fromCharCode(65279), t], {
      type: t.type
    }) : t;
  }(t, r), e);
} : function (t, e, n, i) {
  if ((i = i || open("", "_blank")) && (i.document.title = i.document.body.innerText = "downloading..."), "string" == typeof t) return a(t, e, n);
  var o = "application/octet-stream" === t.type,
      s = /constructor/i.test(r.HTMLElement) || r.safari,
      u = /CriOS\/[\d]+/.test(navigator.userAgent);

  if ((u || o && s) && "object" == typeof FileReader) {
    var c = new FileReader();
    c.onloadend = function () {
      var t = c.result;
      t = u ? t : t.replace(/^data:[^;]*;/, "data:attachment/file;"), i ? i.location.href = t : location = t, i = null;
    }, c.readAsDataURL(t);
  } else {
    var l = r.URL || r.webkitURL,
        h = l.createObjectURL(t);
    i ? i.location = h : location.href = h, i = null, setTimeout(function () {
      l.revokeObjectURL(h);
    }, 4e4);
  }
});
/**
 * A class to parse color values
 * @author Stoyan Stefanov <sstoo@gmail.com>
 * {@link   http://www.phpied.com/rgb-color-parser-in-javascript/}
 * @license Use it if you like it
 */

function h(t) {
  var e;
  t = t || "", this.ok = !1, "#" == t.charAt(0) && (t = t.substr(1, 6));
  t = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "00ffff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000000",
    blanchedalmond: "ffebcd",
    blue: "0000ff",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "00ffff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dodgerblue: "1e90ff",
    feldspar: "d19275",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "ff00ff",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgrey: "d3d3d3",
    lightgreen: "90ee90",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslateblue: "8470ff",
    lightslategray: "778899",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "00ff00",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "ff00ff",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370d8",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "d87093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    red: "ff0000",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    violetred: "d02090",
    wheat: "f5deb3",
    white: "ffffff",
    whitesmoke: "f5f5f5",
    yellow: "ffff00",
    yellowgreen: "9acd32"
  }[t = (t = t.replace(/ /g, "")).toLowerCase()] || t;

  for (var r = [{
    re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
    example: ["rgb(123, 234, 45)", "rgb(255,234,245)"],
    process: function (t) {
      return [parseInt(t[1]), parseInt(t[2]), parseInt(t[3])];
    }
  }, {
    re: /^(\w{2})(\w{2})(\w{2})$/,
    example: ["#00ff00", "336699"],
    process: function (t) {
      return [parseInt(t[1], 16), parseInt(t[2], 16), parseInt(t[3], 16)];
    }
  }, {
    re: /^(\w{1})(\w{1})(\w{1})$/,
    example: ["#fb0", "f0f"],
    process: function (t) {
      return [parseInt(t[1] + t[1], 16), parseInt(t[2] + t[2], 16), parseInt(t[3] + t[3], 16)];
    }
  }], n = 0; n < r.length; n++) {
    var i = r[n].re,
        a = r[n].process,
        o = i.exec(t);
    o && (e = a(o), this.r = e[0], this.g = e[1], this.b = e[2], this.ok = !0);
  }

  this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r, this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g, this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b, this.toRGB = function () {
    return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
  }, this.toHex = function () {
    var t = this.r.toString(16),
        e = this.g.toString(16),
        r = this.b.toString(16);
    return 1 == t.length && (t = "0" + t), 1 == e.length && (e = "0" + e), 1 == r.length && (r = "0" + r), "#" + t + e + r;
  };
}
/**
 * @license
 * Joseph Myers does not specify a particular license for his work.
 *
 * Author: Joseph Myers
 * Accessed from: http://www.myersdaily.org/joseph/javascript/md5.js
 *
 * Modified by: Owen Leong
 */


function f(t, e) {
  var r = t[0],
      n = t[1],
      i = t[2],
      a = t[3];
  r = p(r, n, i, a, e[0], 7, -680876936), a = p(a, r, n, i, e[1], 12, -389564586), i = p(i, a, r, n, e[2], 17, 606105819), n = p(n, i, a, r, e[3], 22, -1044525330), r = p(r, n, i, a, e[4], 7, -176418897), a = p(a, r, n, i, e[5], 12, 1200080426), i = p(i, a, r, n, e[6], 17, -1473231341), n = p(n, i, a, r, e[7], 22, -45705983), r = p(r, n, i, a, e[8], 7, 1770035416), a = p(a, r, n, i, e[9], 12, -1958414417), i = p(i, a, r, n, e[10], 17, -42063), n = p(n, i, a, r, e[11], 22, -1990404162), r = p(r, n, i, a, e[12], 7, 1804603682), a = p(a, r, n, i, e[13], 12, -40341101), i = p(i, a, r, n, e[14], 17, -1502002290), r = g(r, n = p(n, i, a, r, e[15], 22, 1236535329), i, a, e[1], 5, -165796510), a = g(a, r, n, i, e[6], 9, -1069501632), i = g(i, a, r, n, e[11], 14, 643717713), n = g(n, i, a, r, e[0], 20, -373897302), r = g(r, n, i, a, e[5], 5, -701558691), a = g(a, r, n, i, e[10], 9, 38016083), i = g(i, a, r, n, e[15], 14, -660478335), n = g(n, i, a, r, e[4], 20, -405537848), r = g(r, n, i, a, e[9], 5, 568446438), a = g(a, r, n, i, e[14], 9, -1019803690), i = g(i, a, r, n, e[3], 14, -187363961), n = g(n, i, a, r, e[8], 20, 1163531501), r = g(r, n, i, a, e[13], 5, -1444681467), a = g(a, r, n, i, e[2], 9, -51403784), i = g(i, a, r, n, e[7], 14, 1735328473), r = m(r, n = g(n, i, a, r, e[12], 20, -1926607734), i, a, e[5], 4, -378558), a = m(a, r, n, i, e[8], 11, -2022574463), i = m(i, a, r, n, e[11], 16, 1839030562), n = m(n, i, a, r, e[14], 23, -35309556), r = m(r, n, i, a, e[1], 4, -1530992060), a = m(a, r, n, i, e[4], 11, 1272893353), i = m(i, a, r, n, e[7], 16, -155497632), n = m(n, i, a, r, e[10], 23, -1094730640), r = m(r, n, i, a, e[13], 4, 681279174), a = m(a, r, n, i, e[0], 11, -358537222), i = m(i, a, r, n, e[3], 16, -722521979), n = m(n, i, a, r, e[6], 23, 76029189), r = m(r, n, i, a, e[9], 4, -640364487), a = m(a, r, n, i, e[12], 11, -421815835), i = m(i, a, r, n, e[15], 16, 530742520), r = v(r, n = m(n, i, a, r, e[2], 23, -995338651), i, a, e[0], 6, -198630844), a = v(a, r, n, i, e[7], 10, 1126891415), i = v(i, a, r, n, e[14], 15, -1416354905), n = v(n, i, a, r, e[5], 21, -57434055), r = v(r, n, i, a, e[12], 6, 1700485571), a = v(a, r, n, i, e[3], 10, -1894986606), i = v(i, a, r, n, e[10], 15, -1051523), n = v(n, i, a, r, e[1], 21, -2054922799), r = v(r, n, i, a, e[8], 6, 1873313359), a = v(a, r, n, i, e[15], 10, -30611744), i = v(i, a, r, n, e[6], 15, -1560198380), n = v(n, i, a, r, e[13], 21, 1309151649), r = v(r, n, i, a, e[4], 6, -145523070), a = v(a, r, n, i, e[11], 10, -1120210379), i = v(i, a, r, n, e[2], 15, 718787259), n = v(n, i, a, r, e[9], 21, -343485551), t[0] = x(r, t[0]), t[1] = x(n, t[1]), t[2] = x(i, t[2]), t[3] = x(a, t[3]);
}

function d(t, e, r, n, i, a) {
  return e = x(x(e, t), x(n, a)), x(e << i | e >>> 32 - i, r);
}

function p(t, e, r, n, i, a, o) {
  return d(e & r | ~e & n, t, e, i, a, o);
}

function g(t, e, r, n, i, a, o) {
  return d(e & n | r & ~n, t, e, i, a, o);
}

function m(t, e, r, n, i, a, o) {
  return d(e ^ r ^ n, t, e, i, a, o);
}

function v(t, e, r, n, i, a, o) {
  return d(r ^ (e | ~n), t, e, i, a, o);
}

function b(t) {
  var e,
      r = t.length,
      n = [1732584193, -271733879, -1732584194, 271733878];

  for (e = 64; e <= t.length; e += 64) f(n, y(t.substring(e - 64, e)));

  t = t.substring(e - 64);
  var i = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

  for (e = 0; e < t.length; e++) i[e >> 2] |= t.charCodeAt(e) << (e % 4 << 3);

  if (i[e >> 2] |= 128 << (e % 4 << 3), e > 55) for (f(n, i), e = 0; e < 16; e++) i[e] = 0;
  return i[14] = 8 * r, f(n, i), n;
}

function y(t) {
  var e,
      r = [];

  for (e = 0; e < 64; e += 4) r[e >> 2] = t.charCodeAt(e) + (t.charCodeAt(e + 1) << 8) + (t.charCodeAt(e + 2) << 16) + (t.charCodeAt(e + 3) << 24);

  return r;
}

u = r.atob.bind(r), c = r.btoa.bind(r);
var w = "0123456789abcdef".split("");

function N(t) {
  for (var e = "", r = 0; r < 4; r++) e += w[t >> 8 * r + 4 & 15] + w[t >> 8 * r & 15];

  return e;
}

function L(t) {
  return String.fromCharCode((255 & t) >> 0, (65280 & t) >> 8, (16711680 & t) >> 16, (4278190080 & t) >> 24);
}

function A(t) {
  return b(t).map(L).join("");
}

function x(t, e) {
  return t + e & 4294967295;
}

if ("5d41402abc4b2a76b9719d911017c592" != function (t) {
  for (var e = 0; e < t.length; e++) t[e] = N(t[e]);

  return t.join("");
}(b("hello"))) {
  function x(t, e) {
    var r = (65535 & t) + (65535 & e);
    return (t >> 16) + (e >> 16) + (r >> 16) << 16 | 65535 & r;
  }
}
/**
 * @license
 * FPDF is released under a permissive license: there is no usage restriction.
 * You may embed it freely in your application (commercial or not), with or
 * without modifications.
 *
 * Reference: http://www.fpdf.org/en/script/script37.php
 */


function S(t, e) {
  var r, n, i, a;

  if (t !== r) {
    for (var o = (i = t, a = 1 + (256 / t.length >> 0), new Array(a + 1).join(i)), s = [], u = 0; u < 256; u++) s[u] = u;

    var c = 0;

    for (u = 0; u < 256; u++) {
      var l = s[u];
      c = (c + l + o.charCodeAt(u)) % 256, s[u] = s[c], s[c] = l;
    }

    r = t, n = s;
  } else s = n;

  var h = e.length,
      f = 0,
      d = 0,
      p = "";

  for (u = 0; u < h; u++) d = (d + (l = s[f = (f + 1) % 256])) % 256, s[f] = s[d], s[d] = l, o = s[(s[f] + s[d]) % 256], p += String.fromCharCode(e.charCodeAt(u) ^ o);

  return p;
}
/**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 * Author: Owen Leong (@owenl131)
 * Date: 15 Oct 2020
 * References:
 * https://www.cs.cmu.edu/~dst/Adobe/Gallery/anon21jul01-pdf-encryption.txt
 * https://github.com/foliojs/pdfkit/blob/master/lib/security.js
 * http://www.fpdf.org/en/script/script37.php
 */


var _ = {
  print: 4,
  modify: 8,
  copy: 16,
  "annot-forms": 32
};

function P(t, e, r, n) {
  this.v = 1, this.r = 2;
  let i = 192;
  t.forEach(function (t) {
    if (void 0 !== _.perm) throw new Error("Invalid permission: " + t);
    i += _[t];
  }), this.padding = "(Â¿N^NuÂAd\0NVÃ¿Ãº\b..\0Â¶Ãh>Â/\fÂ©Ã¾dSiz";
  let a = (e + this.padding).substr(0, 32),
      o = (r + this.padding).substr(0, 32);
  this.O = this.processOwnerPassword(a, o), this.P = -(1 + (255 ^ i)), this.encryptionKey = A(a + this.O + this.lsbFirstWord(this.P) + this.hexToBytes(n)).substr(0, 5), this.U = S(this.encryptionKey, this.padding);
}

function k(t) {
  if ("object" != typeof t) throw new Error("Invalid Context passed to initialize PubSub (jsPDF-module)");
  var e = {};
  this.subscribe = function (t, r, n) {
    if (n = n || !1, "string" != typeof t || "function" != typeof r || "boolean" != typeof n) throw new Error("Invalid arguments passed to PubSub.subscribe (jsPDF-module)");
    e.hasOwnProperty(t) || (e[t] = {});
    var i = Math.random().toString(35);
    return e[t][i] = [r, !!n], i;
  }, this.unsubscribe = function (t) {
    for (var r in e) if (e[r][t]) return delete e[r][t], 0 === Object.keys(e[r]).length && delete e[r], !0;

    return !1;
  }, this.publish = function (n) {
    if (e.hasOwnProperty(n)) {
      var a = Array.prototype.slice.call(arguments, 1),
          o = [];

      for (var s in e[n]) {
        var u = e[n][s];

        try {
          u[0].apply(t, a);
        } catch (t) {
          r.console && i.error("jsPDF PubSub Error", t.message, t);
        }

        u[1] && o.push(s);
      }

      o.length && o.forEach(this.unsubscribe);
    }
  }, this.getTopics = function () {
    return e;
  };
}

function I(t) {
  if (!(this instanceof I)) return new I(t);
  var e = "opacity,stroke-opacity".split(",");

  for (var r in t) t.hasOwnProperty(r) && e.indexOf(r) >= 0 && (this[r] = t[r]);

  this.id = "", this.objectNumber = -1;
}

function F(t, e) {
  this.gState = t, this.matrix = e, this.id = "", this.objectNumber = -1;
}

function C(t, e, r, n, i) {
  if (!(this instanceof C)) return new C(t, e, r, n, i);
  this.type = "axial" === t ? 2 : 3, this.coords = e, this.colors = r, F.call(this, n, i);
}

function j(t, e, r, n, i) {
  if (!(this instanceof j)) return new j(t, e, r, n, i);
  this.boundingBox = t, this.xStep = e, this.yStep = r, this.stream = "", this.cloneIndex = 0, F.call(this, n, i);
}

function O(t) {
  var e,
      n = "string" == typeof arguments[0] ? arguments[0] : "p",
      a = arguments[1],
      o = arguments[2],
      s = arguments[3],
      u = [],
      f = 1,
      d = 16,
      p = "S",
      g = null;
  "object" == typeof (t = t || {}) && (n = t.orientation, a = t.unit || a, o = t.format || o, s = t.compress || t.compressPdf || s, null !== (g = t.encryption || null) && (g.userPassword = g.userPassword || "", g.ownerPassword = g.ownerPassword || "", g.userPermissions = g.userPermissions || []), f = "number" == typeof t.userUnit ? Math.abs(t.userUnit) : 1, void 0 !== t.precision && (e = t.precision), void 0 !== t.floatPrecision && (d = t.floatPrecision), p = t.defaultPathOperation || "S"), u = t.filters || (!0 === s ? ["FlateEncode"] : u), a = a || "mm", n = ("" + (n || "P")).toLowerCase();
  var m = t.putOnlyUsedFonts || !1,
      v = {},
      b = {
    internal: {},
    __private__: {}
  };
  b.__private__.PubSub = k;

  var y = "1.3",
      w = b.__private__.getPdfVersion = function () {
    return y;
  };

  b.__private__.setPdfVersion = function (t) {
    y = t;
  };

  var N = {
    a0: [2383.94, 3370.39],
    a1: [1683.78, 2383.94],
    a2: [1190.55, 1683.78],
    a3: [841.89, 1190.55],
    a4: [595.28, 841.89],
    a5: [419.53, 595.28],
    a6: [297.64, 419.53],
    a7: [209.76, 297.64],
    a8: [147.4, 209.76],
    a9: [104.88, 147.4],
    a10: [73.7, 104.88],
    b0: [2834.65, 4008.19],
    b1: [2004.09, 2834.65],
    b2: [1417.32, 2004.09],
    b3: [1000.63, 1417.32],
    b4: [708.66, 1000.63],
    b5: [498.9, 708.66],
    b6: [354.33, 498.9],
    b7: [249.45, 354.33],
    b8: [175.75, 249.45],
    b9: [124.72, 175.75],
    b10: [87.87, 124.72],
    c0: [2599.37, 3676.54],
    c1: [1836.85, 2599.37],
    c2: [1298.27, 1836.85],
    c3: [918.43, 1298.27],
    c4: [649.13, 918.43],
    c5: [459.21, 649.13],
    c6: [323.15, 459.21],
    c7: [229.61, 323.15],
    c8: [161.57, 229.61],
    c9: [113.39, 161.57],
    c10: [79.37, 113.39],
    dl: [311.81, 623.62],
    letter: [612, 792],
    "government-letter": [576, 756],
    legal: [612, 1008],
    "junior-legal": [576, 360],
    ledger: [1224, 792],
    tabloid: [792, 1224],
    "credit-card": [153, 243]
  };

  b.__private__.getPageFormats = function () {
    return N;
  };

  var L = b.__private__.getPageFormat = function (t) {
    return N[t];
  };

  o = o || "a4";
  var A = {
    COMPAT: "compat",
    ADVANCED: "advanced"
  },
      x = A.COMPAT;

  function S() {
    this.saveGraphicsState(), ct(new Ht(xt, 0, 0, -xt, 0, Er() * xt).toString() + " cm"), this.setFontSize(this.getFontSize() / xt), p = "n", x = A.ADVANCED;
  }

  function _() {
    this.restoreGraphicsState(), p = "S", x = A.COMPAT;
  }

  var F = function (t, e) {
    if ("bold" == t && "normal" == e || "bold" == t && 400 == e || "normal" == t && "italic" == e || "bold" == t && "italic" == e) throw new Error("Invalid Combination of fontweight and fontstyle");
    return e && t !== e && (t = 400 == e ? "italic" == t ? "italic" : "normal" : 700 == e && "italic" !== t ? "bold" : t + "" + e), t;
  };

  b.advancedAPI = function (t) {
    var e = x === A.COMPAT;
    return e && S.call(this), "function" != typeof t || (t(this), e && _.call(this)), this;
  }, b.compatAPI = function (t) {
    var e = x === A.ADVANCED;
    return e && _.call(this), "function" != typeof t || (t(this), e && S.call(this)), this;
  }, b.isAdvancedAPI = function () {
    return x === A.ADVANCED;
  };

  var B,
      M = function (t) {
    if (x !== A.ADVANCED) throw new Error(t + " is only available in 'advanced' API mode. You need to call advancedAPI() first.");
  },
      E = b.roundToPrecision = b.__private__.roundToPrecision = function (t, r) {
    var n = e || r;
    if (isNaN(t) || isNaN(n)) throw new Error("Invalid argument passed to jsPDF.roundToPrecision");
    return t.toFixed(n).replace(/0+$/, "");
  };

  B = b.hpf = b.__private__.hpf = "number" == typeof d ? function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
    return E(t, d);
  } : "smart" === d ? function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
    return E(t, t > -1 && t < 1 ? 16 : 5);
  } : function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
    return E(t, 16);
  };

  var q = b.f2 = b.__private__.f2 = function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f2");
    return E(t, 2);
  },
      R = b.__private__.f3 = function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f3");
    return E(t, 3);
  },
      T = b.scale = b.__private__.scale = function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.scale");
    return x === A.COMPAT ? t * xt : x === A.ADVANCED ? t : void 0;
  },
      D = function (t) {
    return x === A.COMPAT ? Er() - t : x === A.ADVANCED ? t : void 0;
  },
      U = function (t) {
    return T(D(t));
  };

  b.__private__.setPrecision = b.setPrecision = function (t) {
    "number" == typeof parseInt(t, 10) && (e = parseInt(t, 10));
  };

  var z,
      H = "00000000000000000000000000000000",
      V = b.__private__.getFileId = function () {
    return H;
  },
      W = b.__private__.setFileId = function (t) {
    return H = void 0 !== t && /^[a-fA-F0-9]{32}$/.test(t) ? t.toUpperCase() : H.split("").map(function () {
      return "ABCDEF0123456789".charAt(Math.floor(16 * Math.random()));
    }).join(""), null !== g && (We = new P(g.userPermissions, g.userPassword, g.ownerPassword, H)), H;
  };

  b.setFileId = function (t) {
    return W(t), this;
  }, b.getFileId = function () {
    return V();
  };

  var G = b.__private__.convertDateToPDFDate = function (t) {
    var e = t.getTimezoneOffset(),
        r = e < 0 ? "+" : "-",
        n = Math.floor(Math.abs(e / 60)),
        i = Math.abs(e % 60),
        a = [r, Z(n), "'", Z(i), "'"].join("");
    return ["D:", t.getFullYear(), Z(t.getMonth() + 1), Z(t.getDate()), Z(t.getHours()), Z(t.getMinutes()), Z(t.getSeconds()), a].join("");
  },
      Y = b.__private__.convertPDFDateToDate = function (t) {
    var e = parseInt(t.substr(2, 4), 10),
        r = parseInt(t.substr(6, 2), 10) - 1,
        n = parseInt(t.substr(8, 2), 10),
        i = parseInt(t.substr(10, 2), 10),
        a = parseInt(t.substr(12, 2), 10),
        o = parseInt(t.substr(14, 2), 10);
    return new Date(e, r, n, i, a, o, 0);
  },
      J = b.__private__.setCreationDate = function (t) {
    var e;
    if (void 0 === t && (t = new Date()), t instanceof Date) e = G(t);else {
      if (!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/.test(t)) throw new Error("Invalid argument passed to jsPDF.setCreationDate");
      e = t;
    }
    return z = e;
  },
      X = b.__private__.getCreationDate = function (t) {
    var e = z;
    return "jsDate" === t && (e = Y(z)), e;
  };

  b.setCreationDate = function (t) {
    return J(t), this;
  }, b.getCreationDate = function (t) {
    return X(t);
  };

  var K,
      Z = b.__private__.padd2 = function (t) {
    return ("0" + parseInt(t)).slice(-2);
  },
      $ = b.__private__.padd2Hex = function (t) {
    return ("00" + (t = t.toString())).substr(t.length);
  },
      Q = 0,
      tt = [],
      et = [],
      rt = 0,
      nt = [],
      it = [],
      at = !1,
      ot = et,
      st = function () {
    Q = 0, rt = 0, et = [], tt = [], nt = [], Zt = Jt(), $t = Jt();
  };

  b.__private__.setCustomOutputDestination = function (t) {
    at = !0, ot = t;
  };

  var ut = function (t) {
    at || (ot = t);
  };

  b.__private__.resetCustomOutputDestination = function () {
    at = !1, ot = et;
  };

  var ct = b.__private__.out = function (t) {
    return t = t.toString(), rt += t.length + 1, ot.push(t), ot;
  },
      lt = b.__private__.write = function (t) {
    return ct(1 === arguments.length ? t.toString() : Array.prototype.join.call(arguments, " "));
  },
      ht = b.__private__.getArrayBuffer = function (t) {
    for (var e = t.length, r = new ArrayBuffer(e), n = new Uint8Array(r); e--;) n[e] = t.charCodeAt(e);

    return r;
  },
      ft = [["Helvetica", "helvetica", "normal", "WinAnsiEncoding"], ["Helvetica-Bold", "helvetica", "bold", "WinAnsiEncoding"], ["Helvetica-Oblique", "helvetica", "italic", "WinAnsiEncoding"], ["Helvetica-BoldOblique", "helvetica", "bolditalic", "WinAnsiEncoding"], ["Courier", "courier", "normal", "WinAnsiEncoding"], ["Courier-Bold", "courier", "bold", "WinAnsiEncoding"], ["Courier-Oblique", "courier", "italic", "WinAnsiEncoding"], ["Courier-BoldOblique", "courier", "bolditalic", "WinAnsiEncoding"], ["Times-Roman", "times", "normal", "WinAnsiEncoding"], ["Times-Bold", "times", "bold", "WinAnsiEncoding"], ["Times-Italic", "times", "italic", "WinAnsiEncoding"], ["Times-BoldItalic", "times", "bolditalic", "WinAnsiEncoding"], ["ZapfDingbats", "zapfdingbats", "normal", null], ["Symbol", "symbol", "normal", null]];

  b.__private__.getStandardFonts = function () {
    return ft;
  };

  var dt = t.fontSize || 16;

  b.__private__.setFontSize = b.setFontSize = function (t) {
    return dt = x === A.ADVANCED ? t / xt : t, this;
  };

  var pt,
      gt = b.__private__.getFontSize = b.getFontSize = function () {
    return x === A.COMPAT ? dt : dt * xt;
  },
      mt = t.R2L || !1;

  b.__private__.setR2L = b.setR2L = function (t) {
    return mt = t, this;
  }, b.__private__.getR2L = b.getR2L = function () {
    return mt;
  };

  var vt,
      bt = b.__private__.setZoomMode = function (t) {
    var e = [void 0, null, "fullwidth", "fullheight", "fullpage", "original"];
    if (/^\d*\.?\d*%$/.test(t)) pt = t;else if (isNaN(t)) {
      if (-1 === e.indexOf(t)) throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "' + t + '" is not recognized.');
      pt = t;
    } else pt = parseInt(t, 10);
  };

  b.__private__.getZoomMode = function () {
    return pt;
  };

  var yt,
      wt = b.__private__.setPageMode = function (t) {
    if (-1 == [void 0, null, "UseNone", "UseOutlines", "UseThumbs", "FullScreen"].indexOf(t)) throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "' + t + '" is not recognized.');
    vt = t;
  };

  b.__private__.getPageMode = function () {
    return vt;
  };

  var Nt = b.__private__.setLayoutMode = function (t) {
    if (-1 == [void 0, null, "continuous", "single", "twoleft", "tworight", "two"].indexOf(t)) throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "' + t + '" is not recognized.');
    yt = t;
  };

  b.__private__.getLayoutMode = function () {
    return yt;
  }, b.__private__.setDisplayMode = b.setDisplayMode = function (t, e, r) {
    return bt(t), Nt(e), wt(r), this;
  };
  var Lt = {
    title: "",
    subject: "",
    author: "",
    keywords: "",
    creator: ""
  };
  b.__private__.getDocumentProperty = function (t) {
    if (-1 === Object.keys(Lt).indexOf(t)) throw new Error("Invalid argument passed to jsPDF.getDocumentProperty");
    return Lt[t];
  }, b.__private__.getDocumentProperties = function () {
    return Lt;
  }, b.__private__.setDocumentProperties = b.setProperties = b.setDocumentProperties = function (t) {
    for (var e in Lt) Lt.hasOwnProperty(e) && t[e] && (Lt[e] = t[e]);

    return this;
  }, b.__private__.setDocumentProperty = function (t, e) {
    if (-1 === Object.keys(Lt).indexOf(t)) throw new Error("Invalid arguments passed to jsPDF.setDocumentProperty");
    return Lt[t] = e;
  };

  var At,
      xt,
      St,
      _t,
      Pt,
      kt = {},
      It = {},
      Ft = [],
      Ct = {},
      jt = {},
      Ot = {},
      Bt = {},
      Mt = null,
      Et = 0,
      qt = [],
      Rt = new k(b),
      Tt = t.hotfixes || [],
      Dt = {},
      Ut = {},
      zt = [],
      Ht = function (t, e, r, n, i, a) {
    if (!(this instanceof Ht)) return new Ht(t, e, r, n, i, a);
    isNaN(t) && (t = 1), isNaN(e) && (e = 0), isNaN(r) && (r = 0), isNaN(n) && (n = 1), isNaN(i) && (i = 0), isNaN(a) && (a = 0), this._matrix = [t, e, r, n, i, a];
  };

  Object.defineProperty(Ht.prototype, "sx", {
    get: function () {
      return this._matrix[0];
    },
    set: function (t) {
      this._matrix[0] = t;
    }
  }), Object.defineProperty(Ht.prototype, "shy", {
    get: function () {
      return this._matrix[1];
    },
    set: function (t) {
      this._matrix[1] = t;
    }
  }), Object.defineProperty(Ht.prototype, "shx", {
    get: function () {
      return this._matrix[2];
    },
    set: function (t) {
      this._matrix[2] = t;
    }
  }), Object.defineProperty(Ht.prototype, "sy", {
    get: function () {
      return this._matrix[3];
    },
    set: function (t) {
      this._matrix[3] = t;
    }
  }), Object.defineProperty(Ht.prototype, "tx", {
    get: function () {
      return this._matrix[4];
    },
    set: function (t) {
      this._matrix[4] = t;
    }
  }), Object.defineProperty(Ht.prototype, "ty", {
    get: function () {
      return this._matrix[5];
    },
    set: function (t) {
      this._matrix[5] = t;
    }
  }), Object.defineProperty(Ht.prototype, "a", {
    get: function () {
      return this._matrix[0];
    },
    set: function (t) {
      this._matrix[0] = t;
    }
  }), Object.defineProperty(Ht.prototype, "b", {
    get: function () {
      return this._matrix[1];
    },
    set: function (t) {
      this._matrix[1] = t;
    }
  }), Object.defineProperty(Ht.prototype, "c", {
    get: function () {
      return this._matrix[2];
    },
    set: function (t) {
      this._matrix[2] = t;
    }
  }), Object.defineProperty(Ht.prototype, "d", {
    get: function () {
      return this._matrix[3];
    },
    set: function (t) {
      this._matrix[3] = t;
    }
  }), Object.defineProperty(Ht.prototype, "e", {
    get: function () {
      return this._matrix[4];
    },
    set: function (t) {
      this._matrix[4] = t;
    }
  }), Object.defineProperty(Ht.prototype, "f", {
    get: function () {
      return this._matrix[5];
    },
    set: function (t) {
      this._matrix[5] = t;
    }
  }), Object.defineProperty(Ht.prototype, "rotation", {
    get: function () {
      return Math.atan2(this.shx, this.sx);
    }
  }), Object.defineProperty(Ht.prototype, "scaleX", {
    get: function () {
      return this.decompose().scale.sx;
    }
  }), Object.defineProperty(Ht.prototype, "scaleY", {
    get: function () {
      return this.decompose().scale.sy;
    }
  }), Object.defineProperty(Ht.prototype, "isIdentity", {
    get: function () {
      return 1 === this.sx && 0 === this.shy && 0 === this.shx && 1 === this.sy && 0 === this.tx && 0 === this.ty;
    }
  }), Ht.prototype.join = function (t) {
    return [this.sx, this.shy, this.shx, this.sy, this.tx, this.ty].map(B).join(t);
  }, Ht.prototype.multiply = function (t) {
    var e = t.sx * this.sx + t.shy * this.shx,
        r = t.sx * this.shy + t.shy * this.sy,
        n = t.shx * this.sx + t.sy * this.shx,
        i = t.shx * this.shy + t.sy * this.sy,
        a = t.tx * this.sx + t.ty * this.shx + this.tx,
        o = t.tx * this.shy + t.ty * this.sy + this.ty;
    return new Ht(e, r, n, i, a, o);
  }, Ht.prototype.decompose = function () {
    var t = this.sx,
        e = this.shy,
        r = this.shx,
        n = this.sy,
        i = this.tx,
        a = this.ty,
        o = Math.sqrt(t * t + e * e),
        s = (t /= o) * r + (e /= o) * n;
    r -= t * s, n -= e * s;
    var u = Math.sqrt(r * r + n * n);
    return s /= u, t * (n /= u) < e * (r /= u) && (t = -t, e = -e, s = -s, o = -o), {
      scale: new Ht(o, 0, 0, u, 0, 0),
      translate: new Ht(1, 0, 0, 1, i, a),
      rotate: new Ht(t, e, -e, t, 0, 0),
      skew: new Ht(1, 0, s, 1, 0, 0)
    };
  }, Ht.prototype.toString = function (t) {
    return this.join(" ");
  }, Ht.prototype.inversed = function () {
    var t = this.sx,
        e = this.shy,
        r = this.shx,
        n = this.sy,
        i = this.tx,
        a = this.ty,
        o = 1 / (t * n - e * r),
        s = n * o,
        u = -e * o,
        c = -r * o,
        l = t * o;
    return new Ht(s, u, c, l, -s * i - c * a, -u * i - l * a);
  }, Ht.prototype.applyToPoint = function (t) {
    var e = t.x * this.sx + t.y * this.shx + this.tx,
        r = t.x * this.shy + t.y * this.sy + this.ty;
    return new kr(e, r);
  }, Ht.prototype.applyToRectangle = function (t) {
    var e = this.applyToPoint(t),
        r = this.applyToPoint(new kr(t.x + t.w, t.y + t.h));
    return new Ir(e.x, e.y, r.x - e.x, r.y - e.y);
  }, Ht.prototype.clone = function () {
    var t = this.sx,
        e = this.shy,
        r = this.shx,
        n = this.sy,
        i = this.tx,
        a = this.ty;
    return new Ht(t, e, r, n, i, a);
  }, b.Matrix = Ht;

  var Vt = b.matrixMult = function (t, e) {
    return e.multiply(t);
  },
      Wt = new Ht(1, 0, 0, 1, 0, 0);

  b.unitMatrix = b.identityMatrix = Wt;

  var Gt = function (t, e) {
    if (!jt[t]) {
      var r = (e instanceof C ? "Sh" : "P") + (Object.keys(Ct).length + 1).toString(10);
      e.id = r, jt[t] = r, Ct[r] = e, Rt.publish("addPattern", e);
    }
  };

  b.ShadingPattern = C, b.TilingPattern = j, b.addShadingPattern = function (t, e) {
    return M("addShadingPattern()"), Gt(t, e), this;
  }, b.beginTilingPattern = function (t) {
    M("beginTilingPattern()"), Cr(t.boundingBox[0], t.boundingBox[1], t.boundingBox[2] - t.boundingBox[0], t.boundingBox[3] - t.boundingBox[1], t.matrix);
  }, b.endTilingPattern = function (t, e) {
    M("endTilingPattern()"), e.stream = it[K].join("\n"), Gt(t, e), Rt.publish("endTilingPattern", e), zt.pop().restore();
  };

  var Yt = b.__private__.newObject = function () {
    var t = Jt();
    return Xt(t, !0), t;
  },
      Jt = b.__private__.newObjectDeferred = function () {
    return Q++, tt[Q] = function () {
      return rt;
    }, Q;
  },
      Xt = function (t, e) {
    return e = "boolean" == typeof e && e, tt[t] = rt, e && ct(t + " 0 obj"), t;
  },
      Kt = b.__private__.newAdditionalObject = function () {
    var t = {
      objId: Jt(),
      content: ""
    };
    return nt.push(t), t;
  },
      Zt = Jt(),
      $t = Jt(),
      Qt = b.__private__.decodeColorString = function (t) {
    var e = t.split(" ");

    if (2 !== e.length || "g" !== e[1] && "G" !== e[1]) {
      if (5 === e.length && ("k" === e[4] || "K" === e[4])) {
        e = [(1 - e[0]) * (1 - e[3]), (1 - e[1]) * (1 - e[3]), (1 - e[2]) * (1 - e[3]), "r"];
      }
    } else {
      var r = parseFloat(e[0]);
      e = [r, r, r, "r"];
    }

    for (var n = "#", i = 0; i < 3; i++) n += ("0" + Math.floor(255 * parseFloat(e[i])).toString(16)).slice(-2);

    return n;
  },
      te = b.__private__.encodeColorString = function (t) {
    var e;
    "string" == typeof t && (t = {
      ch1: t
    });
    var r = t.ch1,
        n = t.ch2,
        i = t.ch3,
        a = t.ch4,
        o = "draw" === t.pdfColorType ? ["G", "RG", "K"] : ["g", "rg", "k"];

    if ("string" == typeof r && "#" !== r.charAt(0)) {
      var s = new h(r);
      if (s.ok) r = s.toHex();else if (!/^\d*\.?\d*$/.test(r)) throw new Error('Invalid color "' + r + '" passed to jsPDF.encodeColorString.');
    }

    if ("string" == typeof r && /^#[0-9A-Fa-f]{3}$/.test(r) && (r = "#" + r[1] + r[1] + r[2] + r[2] + r[3] + r[3]), "string" == typeof r && /^#[0-9A-Fa-f]{6}$/.test(r)) {
      var u = parseInt(r.substr(1), 16);
      r = u >> 16 & 255, n = u >> 8 & 255, i = 255 & u;
    }

    if (void 0 === n || void 0 === a && r === n && n === i) {
      if ("string" == typeof r) e = r + " " + o[0];else switch (t.precision) {
        case 2:
          e = q(r / 255) + " " + o[0];
          break;

        case 3:
        default:
          e = R(r / 255) + " " + o[0];
      }
    } else if (void 0 === a || "object" == typeof a) {
      if (a && !isNaN(a.a) && 0 === a.a) return e = ["1.", "1.", "1.", o[1]].join(" ");
      if ("string" == typeof r) e = [r, n, i, o[1]].join(" ");else switch (t.precision) {
        case 2:
          e = [q(r / 255), q(n / 255), q(i / 255), o[1]].join(" ");
          break;

        default:
        case 3:
          e = [R(r / 255), R(n / 255), R(i / 255), o[1]].join(" ");
      }
    } else if ("string" == typeof r) e = [r, n, i, a, o[2]].join(" ");else switch (t.precision) {
      case 2:
        e = [q(r), q(n), q(i), q(a), o[2]].join(" ");
        break;

      case 3:
      default:
        e = [R(r), R(n), R(i), R(a), o[2]].join(" ");
    }
    return e;
  },
      ee = b.__private__.getFilters = function () {
    return u;
  },
      re = b.__private__.putStream = function (t) {
    var e = (t = t || {}).data || "",
        r = t.filters || ee(),
        n = t.alreadyAppliedFilters || [],
        i = t.addLength1 || !1,
        a = e.length,
        o = t.objectId,
        s = function (t) {
      return t;
    };

    if (null !== g && void 0 === o) throw new Error("ObjectId must be passed to putStream for file encryption");
    null !== g && (s = We.encryptor(o, 0));
    var u = {};
    !0 === r && (r = ["FlateEncode"]);
    var c = t.additionalKeyValues || [],
        l = (u = void 0 !== O.API.processDataByFilters ? O.API.processDataByFilters(e, r) : {
      data: e,
      reverseChain: []
    }).reverseChain + (Array.isArray(n) ? n.join(" ") : n.toString());
    if (0 !== u.data.length && (c.push({
      key: "Length",
      value: u.data.length
    }), !0 === i && c.push({
      key: "Length1",
      value: a
    })), 0 != l.length) if (l.split("/").length - 1 == 1) c.push({
      key: "Filter",
      value: l
    });else {
      c.push({
        key: "Filter",
        value: "[" + l + "]"
      });

      for (var h = 0; h < c.length; h += 1) if ("DecodeParms" === c[h].key) {
        for (var f = [], d = 0; d < u.reverseChain.split("/").length - 1; d += 1) f.push("null");

        f.push(c[h].value), c[h].value = "[" + f.join(" ") + "]";
      }
    }
    ct("<<");

    for (var p = 0; p < c.length; p++) ct("/" + c[p].key + " " + c[p].value);

    ct(">>"), 0 !== u.data.length && (ct("stream"), ct(s(u.data)), ct("endstream"));
  },
      ne = b.__private__.putPage = function (t) {
    var e = t.number,
        r = t.data,
        n = t.objId,
        i = t.contentsObjId;
    Xt(n, !0), ct("<</Type /Page"), ct("/Parent " + t.rootDictionaryObjId + " 0 R"), ct("/Resources " + t.resourceDictionaryObjId + " 0 R"), ct("/MediaBox [" + parseFloat(B(t.mediaBox.bottomLeftX)) + " " + parseFloat(B(t.mediaBox.bottomLeftY)) + " " + B(t.mediaBox.topRightX) + " " + B(t.mediaBox.topRightY) + "]"), null !== t.cropBox && ct("/CropBox [" + B(t.cropBox.bottomLeftX) + " " + B(t.cropBox.bottomLeftY) + " " + B(t.cropBox.topRightX) + " " + B(t.cropBox.topRightY) + "]"), null !== t.bleedBox && ct("/BleedBox [" + B(t.bleedBox.bottomLeftX) + " " + B(t.bleedBox.bottomLeftY) + " " + B(t.bleedBox.topRightX) + " " + B(t.bleedBox.topRightY) + "]"), null !== t.trimBox && ct("/TrimBox [" + B(t.trimBox.bottomLeftX) + " " + B(t.trimBox.bottomLeftY) + " " + B(t.trimBox.topRightX) + " " + B(t.trimBox.topRightY) + "]"), null !== t.artBox && ct("/ArtBox [" + B(t.artBox.bottomLeftX) + " " + B(t.artBox.bottomLeftY) + " " + B(t.artBox.topRightX) + " " + B(t.artBox.topRightY) + "]"), "number" == typeof t.userUnit && 1 !== t.userUnit && ct("/UserUnit " + t.userUnit), Rt.publish("putPage", {
      objId: n,
      pageContext: qt[e],
      pageNumber: e,
      page: r
    }), ct("/Contents " + i + " 0 R"), ct(">>"), ct("endobj");
    var a = r.join("\n");
    return x === A.ADVANCED && (a += "\nQ"), Xt(i, !0), re({
      data: a,
      filters: ee(),
      objectId: i
    }), ct("endobj"), n;
  },
      ie = b.__private__.putPages = function () {
    var t,
        e,
        r = [];

    for (t = 1; t <= Et; t++) qt[t].objId = Jt(), qt[t].contentsObjId = Jt();

    for (t = 1; t <= Et; t++) r.push(ne({
      number: t,
      data: it[t],
      objId: qt[t].objId,
      contentsObjId: qt[t].contentsObjId,
      mediaBox: qt[t].mediaBox,
      cropBox: qt[t].cropBox,
      bleedBox: qt[t].bleedBox,
      trimBox: qt[t].trimBox,
      artBox: qt[t].artBox,
      userUnit: qt[t].userUnit,
      rootDictionaryObjId: Zt,
      resourceDictionaryObjId: $t
    }));

    Xt(Zt, !0), ct("<</Type /Pages");
    var n = "/Kids [";

    for (e = 0; e < Et; e++) n += r[e] + " 0 R ";

    ct(n + "]"), ct("/Count " + Et), ct(">>"), ct("endobj"), Rt.publish("postPutPages");
  },
      ae = function (t) {
    var e = function (t, e) {
      return -1 !== t.indexOf(" ") ? "(" + Ie(t, e) + ")" : Ie(t, e);
    };

    Rt.publish("putFont", {
      font: t,
      out: ct,
      newObject: Yt,
      putStream: re,
      pdfEscapeWithNeededParanthesis: e
    }), !0 !== t.isAlreadyPutted && (t.objectNumber = Yt(), ct("<<"), ct("/Type /Font"), ct("/BaseFont /" + e(t.postScriptName)), ct("/Subtype /Type1"), "string" == typeof t.encoding && ct("/Encoding /" + t.encoding), ct("/FirstChar 32"), ct("/LastChar 255"), ct(">>"), ct("endobj"));
  },
      oe = function () {
    for (var t in kt) kt.hasOwnProperty(t) && (!1 === m || !0 === m && v.hasOwnProperty(t)) && ae(kt[t]);
  },
      se = function (t) {
    t.objectNumber = Yt();
    var e = [];
    e.push({
      key: "Type",
      value: "/XObject"
    }), e.push({
      key: "Subtype",
      value: "/Form"
    }), e.push({
      key: "BBox",
      value: "[" + [B(t.x), B(t.y), B(t.x + t.width), B(t.y + t.height)].join(" ") + "]"
    }), e.push({
      key: "Matrix",
      value: "[" + t.matrix.toString() + "]"
    });
    var r = t.pages[1].join("\n");
    re({
      data: r,
      additionalKeyValues: e,
      objectId: t.objectNumber
    }), ct("endobj");
  },
      ue = function () {
    for (var t in Dt) Dt.hasOwnProperty(t) && se(Dt[t]);
  },
      ce = function (t, e) {
    var r,
        n = [],
        i = 1 / (e - 1);

    for (r = 0; r < 1; r += i) n.push(r);

    if (n.push(1), 0 != t[0].offset) {
      var a = {
        offset: 0,
        color: t[0].color
      };
      t.unshift(a);
    }

    if (1 != t[t.length - 1].offset) {
      var o = {
        offset: 1,
        color: t[t.length - 1].color
      };
      t.push(o);
    }

    for (var s = "", u = 0, c = 0; c < n.length; c++) {
      for (r = n[c]; r > t[u + 1].offset;) u++;

      var l = t[u].offset,
          h = (r - l) / (t[u + 1].offset - l),
          f = t[u].color,
          d = t[u + 1].color;
      s += $(Math.round((1 - h) * f[0] + h * d[0]).toString(16)) + $(Math.round((1 - h) * f[1] + h * d[1]).toString(16)) + $(Math.round((1 - h) * f[2] + h * d[2]).toString(16));
    }

    return s.trim();
  },
      le = function (t, e) {
    e || (e = 21);
    var r = Yt(),
        n = ce(t.colors, e),
        i = [];
    i.push({
      key: "FunctionType",
      value: "0"
    }), i.push({
      key: "Domain",
      value: "[0.0 1.0]"
    }), i.push({
      key: "Size",
      value: "[" + e + "]"
    }), i.push({
      key: "BitsPerSample",
      value: "8"
    }), i.push({
      key: "Range",
      value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
    }), i.push({
      key: "Decode",
      value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
    }), re({
      data: n,
      additionalKeyValues: i,
      alreadyAppliedFilters: ["/ASCIIHexDecode"],
      objectId: r
    }), ct("endobj"), t.objectNumber = Yt(), ct("<< /ShadingType " + t.type), ct("/ColorSpace /DeviceRGB");
    var a = "/Coords [" + B(parseFloat(t.coords[0])) + " " + B(parseFloat(t.coords[1])) + " ";
    2 === t.type ? a += B(parseFloat(t.coords[2])) + " " + B(parseFloat(t.coords[3])) : a += B(parseFloat(t.coords[2])) + " " + B(parseFloat(t.coords[3])) + " " + B(parseFloat(t.coords[4])) + " " + B(parseFloat(t.coords[5])), ct(a += "]"), t.matrix && ct("/Matrix [" + t.matrix.toString() + "]"), ct("/Function " + r + " 0 R"), ct("/Extend [true true]"), ct(">>"), ct("endobj");
  },
      he = function (t, e) {
    var r = Jt(),
        n = Yt();
    e.push({
      resourcesOid: r,
      objectOid: n
    }), t.objectNumber = n;
    var i = [];
    i.push({
      key: "Type",
      value: "/Pattern"
    }), i.push({
      key: "PatternType",
      value: "1"
    }), i.push({
      key: "PaintType",
      value: "1"
    }), i.push({
      key: "TilingType",
      value: "1"
    }), i.push({
      key: "BBox",
      value: "[" + t.boundingBox.map(B).join(" ") + "]"
    }), i.push({
      key: "XStep",
      value: B(t.xStep)
    }), i.push({
      key: "YStep",
      value: B(t.yStep)
    }), i.push({
      key: "Resources",
      value: r + " 0 R"
    }), t.matrix && i.push({
      key: "Matrix",
      value: "[" + t.matrix.toString() + "]"
    }), re({
      data: t.stream,
      additionalKeyValues: i,
      objectId: t.objectNumber
    }), ct("endobj");
  },
      fe = function (t) {
    var e;

    for (e in Ct) Ct.hasOwnProperty(e) && (Ct[e] instanceof C ? le(Ct[e]) : Ct[e] instanceof j && he(Ct[e], t));
  },
      de = function (t) {
    for (var e in t.objectNumber = Yt(), ct("<<"), t) switch (e) {
      case "opacity":
        ct("/ca " + q(t[e]));
        break;

      case "stroke-opacity":
        ct("/CA " + q(t[e]));
    }

    ct(">>"), ct("endobj");
  },
      pe = function () {
    var t;

    for (t in Ot) Ot.hasOwnProperty(t) && de(Ot[t]);
  },
      ge = function () {
    for (var t in ct("/XObject <<"), Dt) Dt.hasOwnProperty(t) && Dt[t].objectNumber >= 0 && ct("/" + t + " " + Dt[t].objectNumber + " 0 R");

    Rt.publish("putXobjectDict"), ct(">>");
  },
      me = function () {
    We.oid = Yt(), ct("<<"), ct("/Filter /Standard"), ct("/V " + We.v), ct("/R " + We.r), ct("/U <" + We.toHexString(We.U) + ">"), ct("/O <" + We.toHexString(We.O) + ">"), ct("/P " + We.P), ct(">>"), ct("endobj");
  },
      ve = function () {
    for (var t in ct("/Font <<"), kt) kt.hasOwnProperty(t) && (!1 === m || !0 === m && v.hasOwnProperty(t)) && ct("/" + t + " " + kt[t].objectNumber + " 0 R");

    ct(">>");
  },
      be = function () {
    if (Object.keys(Ct).length > 0) {
      for (var t in ct("/Shading <<"), Ct) Ct.hasOwnProperty(t) && Ct[t] instanceof C && Ct[t].objectNumber >= 0 && ct("/" + t + " " + Ct[t].objectNumber + " 0 R");

      Rt.publish("putShadingPatternDict"), ct(">>");
    }
  },
      ye = function (t) {
    if (Object.keys(Ct).length > 0) {
      for (var e in ct("/Pattern <<"), Ct) Ct.hasOwnProperty(e) && Ct[e] instanceof b.TilingPattern && Ct[e].objectNumber >= 0 && Ct[e].objectNumber < t && ct("/" + e + " " + Ct[e].objectNumber + " 0 R");

      Rt.publish("putTilingPatternDict"), ct(">>");
    }
  },
      we = function () {
    if (Object.keys(Ot).length > 0) {
      var t;

      for (t in ct("/ExtGState <<"), Ot) Ot.hasOwnProperty(t) && Ot[t].objectNumber >= 0 && ct("/" + t + " " + Ot[t].objectNumber + " 0 R");

      Rt.publish("putGStateDict"), ct(">>");
    }
  },
      Ne = function (t) {
    Xt(t.resourcesOid, !0), ct("<<"), ct("/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]"), ve(), be(), ye(t.objectOid), we(), ge(), ct(">>"), ct("endobj");
  },
      Le = function () {
    var t = [];
    oe(), pe(), ue(), fe(t), Rt.publish("putResources"), t.forEach(Ne), Ne({
      resourcesOid: $t,
      objectOid: Number.MAX_SAFE_INTEGER
    }), Rt.publish("postPutResources");
  },
      Ae = function () {
    Rt.publish("putAdditionalObjects");

    for (var t = 0; t < nt.length; t++) {
      var e = nt[t];
      Xt(e.objId, !0), ct(e.content), ct("endobj");
    }

    Rt.publish("postPutAdditionalObjects");
  },
      xe = function (t) {
    It[t.fontName] = It[t.fontName] || {}, It[t.fontName][t.fontStyle] = t.id;
  },
      Se = function (t, e, r, n, i) {
    var a = {
      id: "F" + (Object.keys(kt).length + 1).toString(10),
      postScriptName: t,
      fontName: e,
      fontStyle: r,
      encoding: n,
      isStandardFont: i || !1,
      metadata: {}
    };
    return Rt.publish("addFont", {
      font: a,
      instance: this
    }), kt[a.id] = a, xe(a), a.id;
  },
      _e = function (t) {
    for (var e = 0, r = ft.length; e < r; e++) {
      var n = Se.call(this, t[e][0], t[e][1], t[e][2], ft[e][3], !0);
      !1 === m && (v[n] = !0);
      var i = t[e][0].split("-");
      xe({
        id: n,
        fontName: i[0],
        fontStyle: i[1] || ""
      });
    }

    Rt.publish("addFonts", {
      fonts: kt,
      dictionary: It
    });
  },
      Pe = function (t) {
    return t.foo = function () {
      try {
        return t.apply(this, arguments);
      } catch (t) {
        var e = t.stack || "";
        ~e.indexOf(" at ") && (e = e.split(" at ")[1]);
        var n = "Error in function " + e.split("\n")[0].split("<")[0] + ": " + t.message;
        if (!r.console) throw new Error(n);
        r.console.error(n, t), r.alert && alert(n);
      }
    }, t.foo.bar = t, t.foo;
  },
      ke = function (t, e) {
    var r, n, i, a, o, s, u, c, l;

    if (i = (e = e || {}).sourceEncoding || "Unicode", o = e.outputEncoding, (e.autoencode || o) && kt[At].metadata && kt[At].metadata[i] && kt[At].metadata[i].encoding && (a = kt[At].metadata[i].encoding, !o && kt[At].encoding && (o = kt[At].encoding), !o && a.codePages && (o = a.codePages[0]), "string" == typeof o && (o = a[o]), o)) {
      for (u = !1, s = [], r = 0, n = t.length; r < n; r++) (c = o[t.charCodeAt(r)]) ? s.push(String.fromCharCode(c)) : s.push(t[r]), s[r].charCodeAt(0) >> 8 && (u = !0);

      t = s.join("");
    }

    for (r = t.length; void 0 === u && 0 !== r;) t.charCodeAt(r - 1) >> 8 && (u = !0), r--;

    if (!u) return t;

    for (s = e.noBOM ? [] : [254, 255], r = 0, n = t.length; r < n; r++) {
      if ((l = (c = t.charCodeAt(r)) >> 8) >> 8) throw new Error("Character at position " + r + " of string '" + t + "' exceeds 16bits. Cannot be encoded into UCS-2 BE");
      s.push(l), s.push(c - (l << 8));
    }

    return String.fromCharCode.apply(void 0, s);
  },
      Ie = b.__private__.pdfEscape = b.pdfEscape = function (t, e) {
    return ke(t, e).replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
  },
      Fe = b.__private__.beginPage = function (t) {
    it[++Et] = [], qt[Et] = {
      objId: 0,
      contentsObjId: 0,
      userUnit: Number(f),
      artBox: null,
      bleedBox: null,
      cropBox: null,
      trimBox: null,
      mediaBox: {
        bottomLeftX: 0,
        bottomLeftY: 0,
        topRightX: Number(t[0]),
        topRightY: Number(t[1])
      }
    }, Oe(Et), ut(it[K]);
  },
      Ce = function (t, e) {
    var r, a, s;

    switch (n = e || n, "string" == typeof t && (r = L(t.toLowerCase()), Array.isArray(r) && (a = r[0], s = r[1])), Array.isArray(t) && (a = t[0] * xt, s = t[1] * xt), isNaN(a) && (a = o[0], s = o[1]), (a > 14400 || s > 14400) && (i.warn("A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400"), a = Math.min(14400, a), s = Math.min(14400, s)), o = [a, s], n.substr(0, 1)) {
      case "l":
        s > a && (o = [s, a]);
        break;

      case "p":
        a > s && (o = [s, a]);
    }

    Fe(o), hr(lr), ct(yr), 0 !== Sr && ct(Sr + " J"), 0 !== _r && ct(_r + " j"), Rt.publish("addPage", {
      pageNumber: Et
    });
  },
      je = function (t) {
    t > 0 && t <= Et && (it.splice(t, 1), qt.splice(t, 1), Et--, K > Et && (K = Et), this.setPage(K));
  },
      Oe = function (t) {
    t > 0 && t <= Et && (K = t);
  },
      Be = b.__private__.getNumberOfPages = b.getNumberOfPages = function () {
    return it.length - 1;
  },
      Me = function (t, e, r) {
    var n,
        a = void 0;
    return r = r || {}, t = void 0 !== t ? t : kt[At].fontName, e = void 0 !== e ? e : kt[At].fontStyle, n = t.toLowerCase(), void 0 !== It[n] && void 0 !== It[n][e] ? a = It[n][e] : void 0 !== It[t] && void 0 !== It[t][e] ? a = It[t][e] : !1 === r.disableWarning && i.warn("Unable to look up font label for font '" + t + "', '" + e + "'. Refer to getFontList() for available fonts."), a || r.noFallback || null == (a = It.times[e]) && (a = It.times.normal), a;
  },
      Ee = b.__private__.putInfo = function () {
    var t = Yt(),
        e = function (t) {
      return t;
    };

    for (var r in null !== g && (e = We.encryptor(t, 0)), ct("<<"), ct("/Producer (" + Ie(e("jsPDF " + O.version)) + ")"), Lt) Lt.hasOwnProperty(r) && Lt[r] && ct("/" + r.substr(0, 1).toUpperCase() + r.substr(1) + " (" + Ie(e(Lt[r])) + ")");

    ct("/CreationDate (" + Ie(e(z)) + ")"), ct(">>"), ct("endobj");
  },
      qe = b.__private__.putCatalog = function (t) {
    var e = (t = t || {}).rootDictionaryObjId || Zt;

    switch (Yt(), ct("<<"), ct("/Type /Catalog"), ct("/Pages " + e + " 0 R"), pt || (pt = "fullwidth"), pt) {
      case "fullwidth":
        ct("/OpenAction [3 0 R /FitH null]");
        break;

      case "fullheight":
        ct("/OpenAction [3 0 R /FitV null]");
        break;

      case "fullpage":
        ct("/OpenAction [3 0 R /Fit]");
        break;

      case "original":
        ct("/OpenAction [3 0 R /XYZ null null 1]");
        break;

      default:
        var r = "" + pt;
        "%" === r.substr(r.length - 1) && (pt = parseInt(pt) / 100), "number" == typeof pt && ct("/OpenAction [3 0 R /XYZ null null " + q(pt) + "]");
    }

    switch (yt || (yt = "continuous"), yt) {
      case "continuous":
        ct("/PageLayout /OneColumn");
        break;

      case "single":
        ct("/PageLayout /SinglePage");
        break;

      case "two":
      case "twoleft":
        ct("/PageLayout /TwoColumnLeft");
        break;

      case "tworight":
        ct("/PageLayout /TwoColumnRight");
    }

    vt && ct("/PageMode /" + vt), Rt.publish("putCatalog"), ct(">>"), ct("endobj");
  },
      Re = b.__private__.putTrailer = function () {
    ct("trailer"), ct("<<"), ct("/Size " + (Q + 1)), ct("/Root " + Q + " 0 R"), ct("/Info " + (Q - 1) + " 0 R"), null !== g && ct("/Encrypt " + We.oid + " 0 R"), ct("/ID [ <" + H + "> <" + H + "> ]"), ct(">>");
  },
      Te = b.__private__.putHeader = function () {
    ct("%PDF-" + y), ct("%ÂºÃÂ¬Ã ");
  },
      De = b.__private__.putXRef = function () {
    var t = "0000000000";
    ct("xref"), ct("0 " + (Q + 1)), ct("0000000000 65535 f ");

    for (var e = 1; e <= Q; e++) {
      "function" == typeof tt[e] ? ct((t + tt[e]()).slice(-10) + " 00000 n ") : void 0 !== tt[e] ? ct((t + tt[e]).slice(-10) + " 00000 n ") : ct("0000000000 00000 n ");
    }
  },
      Ue = b.__private__.buildDocument = function () {
    st(), ut(et), Rt.publish("buildDocument"), Te(), ie(), Ae(), Le(), null !== g && me(), Ee(), qe();
    var t = rt;
    return De(), Re(), ct("startxref"), ct("" + t), ct("%%EOF"), ut(it[K]), et.join("\n");
  },
      ze = b.__private__.getBlob = function (t) {
    return new Blob([ht(t)], {
      type: "application/pdf"
    });
  },
      He = b.output = b.__private__.output = Pe(function (t, e) {
    switch ("string" == typeof (e = e || {}) ? e = {
      filename: e
    } : e.filename = e.filename || "generated.pdf", t) {
      case void 0:
        return Ue();

      case "save":
        b.save(e.filename);
        break;

      case "arraybuffer":
        return ht(Ue());

      case "blob":
        return ze(Ue());

      case "bloburi":
      case "bloburl":
        if (void 0 !== r.URL && "function" == typeof r.URL.createObjectURL) return r.URL && r.URL.createObjectURL(ze(Ue())) || void 0;
        i.warn("bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.");
        break;

      case "datauristring":
      case "dataurlstring":
        var n = "",
            a = Ue();

        try {
          n = c(a);
        } catch (t) {
          n = c(unescape(encodeURIComponent(a)));
        }

        return "data:application/pdf;filename=" + e.filename + ";base64," + n;

      case "pdfobjectnewwindow":
        if ("[object Window]" === Object.prototype.toString.call(r)) {
          var o = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src="' + (e.pdfObjectUrl || "https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js") + '"><\/script><script >PDFObject.embed("' + this.output("dataurlstring") + '", ' + JSON.stringify(e) + ");<\/script></body></html>",
              s = r.open();
          return null !== s && s.document.write(o), s;
        }

        throw new Error("The option pdfobjectnewwindow just works in a browser-environment.");

      case "pdfjsnewwindow":
        if ("[object Window]" === Object.prototype.toString.call(r)) {
          var u = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe id="pdfViewer" src="' + (e.pdfJsUrl || "examples/PDF.js/web/viewer.html") + "?file=&downloadName=" + e.filename + '" width="500px" height="400px" /></body></html>',
              l = r.open();

          if (null !== l) {
            l.document.write(u);
            var h = this;

            l.document.documentElement.querySelector("#pdfViewer").onload = function () {
              l.document.title = e.filename, l.document.documentElement.querySelector("#pdfViewer").contentWindow.PDFViewerApplication.open(h.output("bloburl"));
            };
          }

          return l;
        }

        throw new Error("The option pdfjsnewwindow just works in a browser-environment.");

      case "dataurlnewwindow":
        if ("[object Window]" !== Object.prototype.toString.call(r)) throw new Error("The option dataurlnewwindow just works in a browser-environment.");
        var f = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src="' + this.output("datauristring", e) + '"></iframe></body></html>',
            d = r.open();
        if (null !== d && (d.document.write(f), d.document.title = e.filename), d || "undefined" == typeof safari) return d;
        break;

      case "datauri":
      case "dataurl":
        return r.document.location.href = this.output("datauristring", e);

      default:
        return null;
    }
  }),
      Ve = function (t) {
    return !0 === Array.isArray(Tt) && Tt.indexOf(t) > -1;
  };

  switch (a) {
    case "pt":
      xt = 1;
      break;

    case "mm":
      xt = 72 / 25.4;
      break;

    case "cm":
      xt = 72 / 2.54;
      break;

    case "in":
      xt = 72;
      break;

    case "px":
      xt = 1 == Ve("px_scaling") ? .75 : 96 / 72;
      break;

    case "pc":
    case "em":
      xt = 12;
      break;

    case "ex":
      xt = 6;
      break;

    default:
      throw new Error("Invalid unit: " + a);
  }

  var We = null;
  J(), W();

  var Ge = function (t) {
    return null !== g ? We.encryptor(t, 0) : function (t) {
      return t;
    };
  },
      Ye = b.__private__.getPageInfo = b.getPageInfo = function (t) {
    if (isNaN(t) || t % 1 != 0) throw new Error("Invalid argument passed to jsPDF.getPageInfo");
    return {
      objId: qt[t].objId,
      pageNumber: t,
      pageContext: qt[t]
    };
  },
      Je = b.__private__.getPageInfoByObjId = function (t) {
    if (isNaN(t) || t % 1 != 0) throw new Error("Invalid argument passed to jsPDF.getPageInfoByObjId");

    for (var e in qt) if (qt[e].objId === t) break;

    return Ye(e);
  },
      Xe = b.__private__.getCurrentPageInfo = b.getCurrentPageInfo = function () {
    return {
      objId: qt[K].objId,
      pageNumber: K,
      pageContext: qt[K]
    };
  };

  b.addPage = function () {
    return Ce.apply(this, arguments), this;
  }, b.setPage = function () {
    return Oe.apply(this, arguments), ut.call(this, it[K]), this;
  }, b.insertPage = function (t) {
    return this.addPage(), this.movePage(K, t), this;
  }, b.movePage = function (t, e) {
    var r, n;

    if (t > e) {
      r = it[t], n = qt[t];

      for (var i = t; i > e; i--) it[i] = it[i - 1], qt[i] = qt[i - 1];

      it[e] = r, qt[e] = n, this.setPage(e);
    } else if (t < e) {
      r = it[t], n = qt[t];

      for (var a = t; a < e; a++) it[a] = it[a + 1], qt[a] = qt[a + 1];

      it[e] = r, qt[e] = n, this.setPage(e);
    }

    return this;
  }, b.deletePage = function () {
    return je.apply(this, arguments), this;
  }, b.__private__.text = b.text = function (t, e, r, n, i) {
    var a,
        o,
        s,
        u,
        c,
        l,
        h,
        f,
        d = (n = n || {}).scope || this;

    if ("number" == typeof t && "number" == typeof e && ("string" == typeof r || Array.isArray(r))) {
      var p = r;
      r = e, e = t, t = p;
    }

    if (arguments[3] instanceof Ht == !1 ? (s = arguments[4], u = arguments[5], "object" == typeof (h = arguments[3]) && null !== h || ("string" == typeof s && (u = s, s = null), "string" == typeof h && (u = h, h = null), "number" == typeof h && (s = h, h = null), n = {
      flags: h,
      angle: s,
      align: u
    })) : (M("The transform parameter of text() with a Matrix value"), f = i), isNaN(e) || isNaN(r) || null == t) throw new Error("Invalid arguments passed to jsPDF.text");
    if (0 === t.length) return d;
    var g = "",
        m = !1,
        b = "number" == typeof n.lineHeightFactor ? n.lineHeightFactor : cr,
        y = d.internal.scaleFactor;

    function w(t) {
      return t = t.split("\t").join(Array(n.TabLen || 9).join(" ")), Ie(t, h);
    }

    function N(t) {
      for (var e, r = t.concat(), n = [], i = r.length; i--;) "string" == typeof (e = r.shift()) ? n.push(e) : Array.isArray(t) && (1 === e.length || void 0 === e[1] && void 0 === e[2]) ? n.push(e[0]) : n.push([e[0], e[1], e[2]]);

      return n;
    }

    function L(t, e) {
      var r;
      if ("string" == typeof t) r = e(t)[0];else if (Array.isArray(t)) {
        for (var n, i, a = t.concat(), o = [], s = a.length; s--;) "string" == typeof (n = a.shift()) ? o.push(e(n)[0]) : Array.isArray(n) && "string" == typeof n[0] && (i = e(n[0], n[1], n[2]), o.push([i[0], i[1], i[2]]));

        r = o;
      }
      return r;
    }

    var S = !1,
        _ = !0;

    if ("string" == typeof t) S = !0;else if (Array.isArray(t)) {
      var P = t.concat();
      o = [];

      for (var k, I = P.length; I--;) ("string" != typeof (k = P.shift()) || Array.isArray(k) && "string" != typeof k[0]) && (_ = !1);

      S = _;
    }
    if (!1 === S) throw new Error('Type of text must be string or Array. "' + t + '" is not recognized.');
    "string" == typeof t && (t = t.match(/[\r?\n]/) ? t.split(/\r\n|\r|\n/g) : [t]);
    var F = dt / d.internal.scaleFactor,
        C = F * (cr - 1);

    switch (n.baseline) {
      case "bottom":
        r -= C;
        break;

      case "top":
        r += F - C;
        break;

      case "hanging":
        r += F - 2 * C;
        break;

      case "middle":
        r += F / 2 - C;
    }

    if ((l = n.maxWidth || 0) > 0 && ("string" == typeof t ? t = d.splitTextToSize(t, l) : "[object Array]" === Object.prototype.toString.call(t) && (t = t.reduce(function (t, e) {
      return t.concat(d.splitTextToSize(e, l));
    }, []))), a = {
      text: t,
      x: e,
      y: r,
      options: n,
      mutex: {
        pdfEscape: Ie,
        activeFontKey: At,
        fonts: kt,
        activeFontSize: dt
      }
    }, Rt.publish("preProcessText", a), t = a.text, s = (n = a.options).angle, f instanceof Ht == !1 && s && "number" == typeof s) {
      s *= Math.PI / 180, 0 === n.rotationDirection && (s = -s), x === A.ADVANCED && (s = -s);
      var j = Math.cos(s),
          O = Math.sin(s);
      f = new Ht(j, O, -O, j, 0, 0);
    } else s && s instanceof Ht && (f = s);

    x !== A.ADVANCED || f || (f = Wt), void 0 !== (c = n.charSpace || Ar) && (g += B(T(c)) + " Tc\n", this.setCharSpace(this.getCharSpace() || 0));
    n.lang;
    var E = -1,
        q = void 0 !== n.renderingMode ? n.renderingMode : n.stroke,
        R = d.internal.getCurrentPageInfo().pageContext;

    switch (q) {
      case 0:
      case !1:
      case "fill":
        E = 0;
        break;

      case 1:
      case !0:
      case "stroke":
        E = 1;
        break;

      case 2:
      case "fillThenStroke":
        E = 2;
        break;

      case 3:
      case "invisible":
        E = 3;
        break;

      case 4:
      case "fillAndAddForClipping":
        E = 4;
        break;

      case 5:
      case "strokeAndAddPathForClipping":
        E = 5;
        break;

      case 6:
      case "fillThenStrokeAndAddToPathForClipping":
        E = 6;
        break;

      case 7:
      case "addToPathForClipping":
        E = 7;
    }

    var D = void 0 !== R.usedRenderingMode ? R.usedRenderingMode : -1;
    -1 !== E ? g += E + " Tr\n" : -1 !== D && (g += "0 Tr\n"), -1 !== E && (R.usedRenderingMode = E), u = n.align || "left";
    var U,
        z = dt * b,
        H = d.internal.pageSize.getWidth(),
        V = kt[At];
    c = n.charSpace || Ar, l = n.maxWidth || 0, h = Object.assign({
      autoencode: !0,
      noBOM: !0
    }, n.flags);
    var W = [];

    if ("[object Array]" === Object.prototype.toString.call(t)) {
      var G;
      o = N(t), "left" !== u && (U = o.map(function (t) {
        return d.getStringUnitWidth(t, {
          font: V,
          charSpace: c,
          fontSize: dt,
          doKerning: !1
        }) * dt / y;
      }));
      var Y,
          J = 0;

      if ("right" === u) {
        e -= U[0], t = [], I = o.length;

        for (var X = 0; X < I; X++) 0 === X ? (Y = gr(e), G = mr(r)) : (Y = T(J - U[X]), G = -z), t.push([o[X], Y, G]), J = U[X];
      } else if ("center" === u) {
        e -= U[0] / 2, t = [], I = o.length;

        for (var K = 0; K < I; K++) 0 === K ? (Y = gr(e), G = mr(r)) : (Y = T((J - U[K]) / 2), G = -z), t.push([o[K], Y, G]), J = U[K];
      } else if ("left" === u) {
        t = [], I = o.length;

        for (var Z = 0; Z < I; Z++) t.push(o[Z]);
      } else {
        if ("justify" !== u) throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');
        t = [], I = o.length, l = 0 !== l ? l : H;

        for (var $ = 0; $ < I; $++) G = 0 === $ ? mr(r) : -z, Y = 0 === $ ? gr(e) : 0, $ < I - 1 && W.push(B(T((l - U[$]) / (o[$].split(" ").length - 1)))), t.push([o[$], Y, G]);
      }
    }

    var Q = "boolean" == typeof n.R2L ? n.R2L : mt;
    !0 === Q && (t = L(t, function (t, e, r) {
      return [t.split("").reverse().join(""), e, r];
    })), a = {
      text: t,
      x: e,
      y: r,
      options: n,
      mutex: {
        pdfEscape: Ie,
        activeFontKey: At,
        fonts: kt,
        activeFontSize: dt
      }
    }, Rt.publish("postProcessText", a), t = a.text, m = a.mutex.isHex || !1;
    var tt = kt[At].encoding;
    "WinAnsiEncoding" !== tt && "StandardEncoding" !== tt || (t = L(t, function (t, e, r) {
      return [w(t), e, r];
    })), o = N(t), t = [];

    for (var et, rt, nt, it = 0, at = 1, ot = Array.isArray(o[0]) ? at : it, st = "", ut = function (t, e, r) {
      var i = "";
      return r instanceof Ht ? (r = "number" == typeof n.angle ? Vt(r, new Ht(1, 0, 0, 1, t, e)) : Vt(new Ht(1, 0, 0, 1, t, e), r), x === A.ADVANCED && (r = Vt(new Ht(1, 0, 0, -1, 0, 0), r)), i = r.join(" ") + " Tm\n") : i = B(t) + " " + B(e) + " Td\n", i;
    }, lt = 0; lt < o.length; lt++) {
      switch (st = "", ot) {
        case at:
          nt = (m ? "<" : "(") + o[lt][0] + (m ? ">" : ")"), et = parseFloat(o[lt][1]), rt = parseFloat(o[lt][2]);
          break;

        case it:
          nt = (m ? "<" : "(") + o[lt] + (m ? ">" : ")"), et = gr(e), rt = mr(r);
      }

      void 0 !== W && void 0 !== W[lt] && (st = W[lt] + " Tw\n"), 0 === lt ? t.push(st + ut(et, rt, f) + nt) : ot === it ? t.push(st + nt) : ot === at && t.push(st + ut(et, rt, f) + nt);
    }

    t = ot === it ? t.join(" Tj\nT* ") : t.join(" Tj\n"), t += " Tj\n";
    var ht = "BT\n/";
    return ht += At + " " + dt + " Tf\n", ht += B(dt * b) + " TL\n", ht += Nr + "\n", ht += g, ht += t, ct(ht += "ET"), v[At] = !0, d;
  };

  var Ke = b.__private__.clip = b.clip = function (t) {
    return ct("evenodd" === t ? "W*" : "W"), this;
  };

  b.clipEvenOdd = function () {
    return Ke("evenodd");
  }, b.__private__.discardPath = b.discardPath = function () {
    return ct("n"), this;
  };

  var Ze = b.__private__.isValidStyle = function (t) {
    var e = !1;
    return -1 !== [void 0, null, "S", "D", "F", "DF", "FD", "f", "f*", "B", "B*", "n"].indexOf(t) && (e = !0), e;
  };

  b.__private__.setDefaultPathOperation = b.setDefaultPathOperation = function (t) {
    return Ze(t) && (p = t), this;
  };

  var $e = b.__private__.getStyle = b.getStyle = function (t) {
    var e = p;

    switch (t) {
      case "D":
      case "S":
        e = "S";
        break;

      case "F":
        e = "f";
        break;

      case "FD":
      case "DF":
        e = "B";
        break;

      case "f":
      case "f*":
      case "B":
      case "B*":
        e = t;
    }

    return e;
  },
      Qe = b.close = function () {
    return ct("h"), this;
  };

  b.stroke = function () {
    return ct("S"), this;
  }, b.fill = function (t) {
    return tr("f", t), this;
  }, b.fillEvenOdd = function (t) {
    return tr("f*", t), this;
  }, b.fillStroke = function (t) {
    return tr("B", t), this;
  }, b.fillStrokeEvenOdd = function (t) {
    return tr("B*", t), this;
  };

  var tr = function (t, e) {
    "object" == typeof e ? nr(e, t) : ct(t);
  },
      er = function (t) {
    null === t || x === A.ADVANCED && void 0 === t || (t = $e(t), ct(t));
  };

  function rr(t, e, r, n, i) {
    var a = new j(e || this.boundingBox, r || this.xStep, n || this.yStep, this.gState, i || this.matrix);
    a.stream = this.stream;
    var o = t + "$$" + this.cloneIndex++ + "$$";
    return Gt(o, a), a;
  }

  var nr = function (t, e) {
    var r = jt[t.key],
        n = Ct[r];
    if (n instanceof C) ct("q"), ct(ir(e)), n.gState && b.setGState(n.gState), ct(t.matrix.toString() + " cm"), ct("/" + r + " sh"), ct("Q");else if (n instanceof j) {
      var i = new Ht(1, 0, 0, -1, 0, Er());
      t.matrix && (i = i.multiply(t.matrix || Wt), r = rr.call(n, t.key, t.boundingBox, t.xStep, t.yStep, i).id), ct("q"), ct("/Pattern cs"), ct("/" + r + " scn"), n.gState && b.setGState(n.gState), ct(e), ct("Q");
    }
  },
      ir = function (t) {
    switch (t) {
      case "f":
      case "F":
        return "W n";

      case "f*":
        return "W* n";

      case "B":
        return "W S";

      case "B*":
        return "W* S";

      case "S":
        return "W S";

      case "n":
        return "W n";
    }
  },
      ar = b.moveTo = function (t, e) {
    return ct(B(T(t)) + " " + B(U(e)) + " m"), this;
  },
      or = b.lineTo = function (t, e) {
    return ct(B(T(t)) + " " + B(U(e)) + " l"), this;
  },
      sr = b.curveTo = function (t, e, r, n, i, a) {
    return ct([B(T(t)), B(U(e)), B(T(r)), B(U(n)), B(T(i)), B(U(a)), "c"].join(" ")), this;
  };

  b.__private__.line = b.line = function (t, e, r, n, i) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Ze(i)) throw new Error("Invalid arguments passed to jsPDF.line");
    return x === A.COMPAT ? this.lines([[r - t, n - e]], t, e, [1, 1], i || "S") : this.lines([[r - t, n - e]], t, e, [1, 1]).stroke();
  }, b.__private__.lines = b.lines = function (t, e, r, n, i, a) {
    var o, s, u, c, l, h, f, d, p, g, m, v;
    if ("number" == typeof t && (v = r, r = e, e = t, t = v), n = n || [1, 1], a = a || !1, isNaN(e) || isNaN(r) || !Array.isArray(t) || !Array.isArray(n) || !Ze(i) || "boolean" != typeof a) throw new Error("Invalid arguments passed to jsPDF.lines");

    for (ar(e, r), o = n[0], s = n[1], c = t.length, g = e, m = r, u = 0; u < c; u++) 2 === (l = t[u]).length ? (g = l[0] * o + g, m = l[1] * s + m, or(g, m)) : (h = l[0] * o + g, f = l[1] * s + m, d = l[2] * o + g, p = l[3] * s + m, g = l[4] * o + g, m = l[5] * s + m, sr(h, f, d, p, g, m));

    return a && Qe(), er(i), this;
  }, b.path = function (t) {
    for (var e = 0; e < t.length; e++) {
      var r = t[e],
          n = r.c;

      switch (r.op) {
        case "m":
          ar(n[0], n[1]);
          break;

        case "l":
          or(n[0], n[1]);
          break;

        case "c":
          sr.apply(this, n);
          break;

        case "h":
          Qe();
      }
    }

    return this;
  }, b.__private__.rect = b.rect = function (t, e, r, n, i) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Ze(i)) throw new Error("Invalid arguments passed to jsPDF.rect");
    return x === A.COMPAT && (n = -n), ct([B(T(t)), B(U(e)), B(T(r)), B(T(n)), "re"].join(" ")), er(i), this;
  }, b.__private__.triangle = b.triangle = function (t, e, r, n, i, a, o) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i) || isNaN(a) || !Ze(o)) throw new Error("Invalid arguments passed to jsPDF.triangle");
    return this.lines([[r - t, n - e], [i - r, a - n], [t - i, e - a]], t, e, [1, 1], o, !0), this;
  }, b.__private__.roundedRect = b.roundedRect = function (t, e, r, n, i, a, o) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i) || isNaN(a) || !Ze(o)) throw new Error("Invalid arguments passed to jsPDF.roundedRect");
    var s = 4 / 3 * (Math.SQRT2 - 1);
    return i = Math.min(i, .5 * r), a = Math.min(a, .5 * n), this.lines([[r - 2 * i, 0], [i * s, 0, i, a - a * s, i, a], [0, n - 2 * a], [0, a * s, -i * s, a, -i, a], [2 * i - r, 0], [-i * s, 0, -i, -a * s, -i, -a], [0, 2 * a - n], [0, -a * s, i * s, -a, i, -a]], t + i, e, [1, 1], o, !0), this;
  }, b.__private__.ellipse = b.ellipse = function (t, e, r, n, i) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Ze(i)) throw new Error("Invalid arguments passed to jsPDF.ellipse");
    var a = 4 / 3 * (Math.SQRT2 - 1) * r,
        o = 4 / 3 * (Math.SQRT2 - 1) * n;
    return ar(t + r, e), sr(t + r, e - o, t + a, e - n, t, e - n), sr(t - a, e - n, t - r, e - o, t - r, e), sr(t - r, e + o, t - a, e + n, t, e + n), sr(t + a, e + n, t + r, e + o, t + r, e), er(i), this;
  }, b.__private__.circle = b.circle = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || !Ze(n)) throw new Error("Invalid arguments passed to jsPDF.circle");
    return this.ellipse(t, e, r, r, n);
  }, b.setFont = function (t, e, r) {
    return r && (e = F(e, r)), At = Me(t, e, {
      disableWarning: !1
    }), this;
  };

  var ur = b.__private__.getFont = b.getFont = function () {
    return kt[Me.apply(b, arguments)];
  };

  b.__private__.getFontList = b.getFontList = function () {
    var t,
        e,
        r = {};

    for (t in It) if (It.hasOwnProperty(t)) for (e in r[t] = [], It[t]) It[t].hasOwnProperty(e) && r[t].push(e);

    return r;
  }, b.addFont = function (t, e, r, n, i) {
    var a = ["StandardEncoding", "MacRomanEncoding", "Identity-H", "WinAnsiEncoding"];
    return arguments[3] && -1 !== a.indexOf(arguments[3]) ? i = arguments[3] : arguments[3] && -1 == a.indexOf(arguments[3]) && (r = F(r, n)), i = i || "Identity-H", Se.call(this, t, e, r, i);
  };

  var cr,
      lr = t.lineWidth || .200025,
      hr = b.__private__.setLineWidth = b.setLineWidth = function (t) {
    return ct(B(T(t)) + " w"), this;
  };

  b.__private__.setLineDash = O.API.setLineDash = O.API.setLineDashPattern = function (t, e) {
    if (t = t || [], e = e || 0, isNaN(e) || !Array.isArray(t)) throw new Error("Invalid arguments passed to jsPDF.setLineDash");
    return t = t.map(function (t) {
      return B(T(t));
    }).join(" "), e = B(T(e)), ct("[" + t + "] " + e + " d"), this;
  };

  var fr = b.__private__.getLineHeight = b.getLineHeight = function () {
    return dt * cr;
  };

  b.__private__.getLineHeight = b.getLineHeight = function () {
    return dt * cr;
  };

  var dr = b.__private__.setLineHeightFactor = b.setLineHeightFactor = function (t) {
    return "number" == typeof (t = t || 1.15) && (cr = t), this;
  },
      pr = b.__private__.getLineHeightFactor = b.getLineHeightFactor = function () {
    return cr;
  };

  dr(t.lineHeight);

  var gr = b.__private__.getHorizontalCoordinate = function (t) {
    return T(t);
  },
      mr = b.__private__.getVerticalCoordinate = function (t) {
    return x === A.ADVANCED ? t : qt[K].mediaBox.topRightY - qt[K].mediaBox.bottomLeftY - T(t);
  },
      vr = b.__private__.getHorizontalCoordinateString = b.getHorizontalCoordinateString = function (t) {
    return B(gr(t));
  },
      br = b.__private__.getVerticalCoordinateString = b.getVerticalCoordinateString = function (t) {
    return B(mr(t));
  },
      yr = t.strokeColor || "0 G";

  b.__private__.getStrokeColor = b.getDrawColor = function () {
    return Qt(yr);
  }, b.__private__.setStrokeColor = b.setDrawColor = function (t, e, r, n) {
    return yr = te({
      ch1: t,
      ch2: e,
      ch3: r,
      ch4: n,
      pdfColorType: "draw",
      precision: 2
    }), ct(yr), this;
  };
  var wr = t.fillColor || "0 g";
  b.__private__.getFillColor = b.getFillColor = function () {
    return Qt(wr);
  }, b.__private__.setFillColor = b.setFillColor = function (t, e, r, n) {
    return wr = te({
      ch1: t,
      ch2: e,
      ch3: r,
      ch4: n,
      pdfColorType: "fill",
      precision: 2
    }), ct(wr), this;
  };

  var Nr = t.textColor || "0 g",
      Lr = b.__private__.getTextColor = b.getTextColor = function () {
    return Qt(Nr);
  };

  b.__private__.setTextColor = b.setTextColor = function (t, e, r, n) {
    return Nr = te({
      ch1: t,
      ch2: e,
      ch3: r,
      ch4: n,
      pdfColorType: "text",
      precision: 3
    }), this;
  };

  var Ar = t.charSpace,
      xr = b.__private__.getCharSpace = b.getCharSpace = function () {
    return parseFloat(Ar || 0);
  };

  b.__private__.setCharSpace = b.setCharSpace = function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.setCharSpace");
    return Ar = t, this;
  };

  var Sr = 0;
  b.CapJoinStyles = {
    0: 0,
    butt: 0,
    but: 0,
    miter: 0,
    1: 1,
    round: 1,
    rounded: 1,
    circle: 1,
    2: 2,
    projecting: 2,
    project: 2,
    square: 2,
    bevel: 2
  }, b.__private__.setLineCap = b.setLineCap = function (t) {
    var e = b.CapJoinStyles[t];
    if (void 0 === e) throw new Error("Line cap style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
    return Sr = e, ct(e + " J"), this;
  };
  var _r = 0;
  b.__private__.setLineJoin = b.setLineJoin = function (t) {
    var e = b.CapJoinStyles[t];
    if (void 0 === e) throw new Error("Line join style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
    return _r = e, ct(e + " j"), this;
  }, b.__private__.setLineMiterLimit = b.__private__.setMiterLimit = b.setLineMiterLimit = b.setMiterLimit = function (t) {
    if (t = t || 0, isNaN(t)) throw new Error("Invalid argument passed to jsPDF.setLineMiterLimit");
    return ct(B(T(t)) + " M"), this;
  }, b.GState = I, b.setGState = function (t) {
    (t = "string" == typeof t ? Ot[Bt[t]] : Pr(null, t)).equals(Mt) || (ct("/" + t.id + " gs"), Mt = t);
  };

  var Pr = function (t, e) {
    if (!t || !Bt[t]) {
      var r = !1;

      for (var n in Ot) if (Ot.hasOwnProperty(n) && Ot[n].equals(e)) {
        r = !0;
        break;
      }

      if (r) e = Ot[n];else {
        var i = "GS" + (Object.keys(Ot).length + 1).toString(10);
        Ot[i] = e, e.id = i;
      }
      return t && (Bt[t] = e.id), Rt.publish("addGState", e), e;
    }
  };

  b.addGState = function (t, e) {
    return Pr(t, e), this;
  }, b.saveGraphicsState = function () {
    return ct("q"), Ft.push({
      key: At,
      size: dt,
      color: Nr
    }), this;
  }, b.restoreGraphicsState = function () {
    ct("Q");
    var t = Ft.pop();
    return At = t.key, dt = t.size, Nr = t.color, Mt = null, this;
  }, b.setCurrentTransformationMatrix = function (t) {
    return ct(t.toString() + " cm"), this;
  }, b.comment = function (t) {
    return ct("#" + t), this;
  };

  var kr = function (t, e) {
    var r = t || 0;
    Object.defineProperty(this, "x", {
      enumerable: !0,
      get: function () {
        return r;
      },
      set: function (t) {
        isNaN(t) || (r = parseFloat(t));
      }
    });
    var n = e || 0;
    Object.defineProperty(this, "y", {
      enumerable: !0,
      get: function () {
        return n;
      },
      set: function (t) {
        isNaN(t) || (n = parseFloat(t));
      }
    });
    var i = "pt";
    return Object.defineProperty(this, "type", {
      enumerable: !0,
      get: function () {
        return i;
      },
      set: function (t) {
        i = t.toString();
      }
    }), this;
  },
      Ir = function (t, e, r, n) {
    kr.call(this, t, e), this.type = "rect";
    var i = r || 0;
    Object.defineProperty(this, "w", {
      enumerable: !0,
      get: function () {
        return i;
      },
      set: function (t) {
        isNaN(t) || (i = parseFloat(t));
      }
    });
    var a = n || 0;
    return Object.defineProperty(this, "h", {
      enumerable: !0,
      get: function () {
        return a;
      },
      set: function (t) {
        isNaN(t) || (a = parseFloat(t));
      }
    }), this;
  },
      Fr = function () {
    this.page = Et, this.currentPage = K, this.pages = it.slice(0), this.pagesContext = qt.slice(0), this.x = St, this.y = _t, this.matrix = Pt, this.width = Br(K), this.height = Er(K), this.outputDestination = ot, this.id = "", this.objectNumber = -1;
  };

  Fr.prototype.restore = function () {
    Et = this.page, K = this.currentPage, qt = this.pagesContext, it = this.pages, St = this.x, _t = this.y, Pt = this.matrix, Mr(K, this.width), qr(K, this.height), ot = this.outputDestination;
  };

  var Cr = function (t, e, r, n, i) {
    zt.push(new Fr()), Et = K = 0, it = [], St = t, _t = e, Pt = i, Fe([r, n]);
  },
      jr = function (t) {
    if (!Ut[t]) {
      var e = new Fr(),
          r = "Xo" + (Object.keys(Dt).length + 1).toString(10);
      e.id = r, Ut[t] = r, Dt[r] = e, Rt.publish("addFormObject", e), zt.pop().restore();
    }
  };

  for (var Or in b.beginFormObject = function (t, e, r, n, i) {
    return Cr(t, e, r, n, i), this;
  }, b.endFormObject = function (t) {
    return jr(t), this;
  }, b.doFormObject = function (t, e) {
    var r = Dt[Ut[t]];
    return ct("q"), ct(e.toString() + " cm"), ct("/" + r.id + " Do"), ct("Q"), this;
  }, b.getFormObject = function (t) {
    var e = Dt[Ut[t]];
    return {
      x: e.x,
      y: e.y,
      width: e.width,
      height: e.height,
      matrix: e.matrix
    };
  }, b.save = function (t, e) {
    return t = t || "generated.pdf", (e = e || {}).returnPromise = e.returnPromise || !1, !1 === e.returnPromise ? (l(ze(Ue()), t), "function" == typeof l.unload && r.setTimeout && setTimeout(l.unload, 911), this) : new Promise(function (e, n) {
      try {
        var i = l(ze(Ue()), t);
        "function" == typeof l.unload && r.setTimeout && setTimeout(l.unload, 911), e(i);
      } catch (t) {
        n(t.message);
      }
    });
  }, O.API) O.API.hasOwnProperty(Or) && ("events" === Or && O.API.events.length ? function (t, e) {
    var r, n, i;

    for (i = e.length - 1; -1 !== i; i--) r = e[i][0], n = e[i][1], t.subscribe.apply(t, [r].concat("function" == typeof n ? [n] : n));
  }(Rt, O.API.events) : b[Or] = O.API[Or]);

  var Br = b.getPageWidth = function (t) {
    return (qt[t = t || K].mediaBox.topRightX - qt[t].mediaBox.bottomLeftX) / xt;
  },
      Mr = b.setPageWidth = function (t, e) {
    qt[t].mediaBox.topRightX = e * xt + qt[t].mediaBox.bottomLeftX;
  },
      Er = b.getPageHeight = function (t) {
    return (qt[t = t || K].mediaBox.topRightY - qt[t].mediaBox.bottomLeftY) / xt;
  },
      qr = b.setPageHeight = function (t, e) {
    qt[t].mediaBox.topRightY = e * xt + qt[t].mediaBox.bottomLeftY;
  };

  return b.internal = {
    pdfEscape: Ie,
    getStyle: $e,
    getFont: ur,
    getFontSize: gt,
    getCharSpace: xr,
    getTextColor: Lr,
    getLineHeight: fr,
    getLineHeightFactor: pr,
    write: lt,
    getHorizontalCoordinate: gr,
    getVerticalCoordinate: mr,
    getCoordinateString: vr,
    getVerticalCoordinateString: br,
    collections: {},
    newObject: Yt,
    newAdditionalObject: Kt,
    newObjectDeferred: Jt,
    newObjectDeferredBegin: Xt,
    getFilters: ee,
    putStream: re,
    events: Rt,
    scaleFactor: xt,
    pageSize: {
      getWidth: function () {
        return Br(K);
      },
      setWidth: function (t) {
        Mr(K, t);
      },
      getHeight: function () {
        return Er(K);
      },
      setHeight: function (t) {
        qr(K, t);
      }
    },
    encryptionOptions: g,
    encryption: We,
    getEncryptor: Ge,
    output: He,
    getNumberOfPages: Be,
    pages: it,
    out: ct,
    f2: q,
    f3: R,
    getPageInfo: Ye,
    getPageInfoByObjId: Je,
    getCurrentPageInfo: Xe,
    getPDFVersion: w,
    Point: kr,
    Rectangle: Ir,
    Matrix: Ht,
    hasHotfix: Ve
  }, Object.defineProperty(b.internal.pageSize, "width", {
    get: function () {
      return Br(K);
    },
    set: function (t) {
      Mr(K, t);
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(b.internal.pageSize, "height", {
    get: function () {
      return Er(K);
    },
    set: function (t) {
      qr(K, t);
    },
    enumerable: !0,
    configurable: !0
  }), _e.call(b, ft), At = "F1", Ce(o, n), Rt.publish("initialized"), b;
}

P.prototype.lsbFirstWord = function (t) {
  return String.fromCharCode(t >> 0 & 255, t >> 8 & 255, t >> 16 & 255, t >> 24 & 255);
}, P.prototype.toHexString = function (t) {
  return t.split("").map(function (t) {
    return ("0" + (255 & t.charCodeAt(0)).toString(16)).slice(-2);
  }).join("");
}, P.prototype.hexToBytes = function (t) {
  for (var e = [], r = 0; r < t.length; r += 2) e.push(String.fromCharCode(parseInt(t.substr(r, 2), 16)));

  return e.join("");
}, P.prototype.processOwnerPassword = function (t, e) {
  return S(A(e).substr(0, 5), t);
}, P.prototype.encryptor = function (t, e) {
  let r = A(this.encryptionKey + String.fromCharCode(255 & t, t >> 8 & 255, t >> 16 & 255, 255 & e, e >> 8 & 255)).substr(0, 10);
  return function (t) {
    return S(r, t);
  };
}, I.prototype.equals = function (t) {
  var e,
      r = "id,objectNumber,equals";
  if (!t || typeof t != typeof this) return !1;
  var n = 0;

  for (e in this) if (!(r.indexOf(e) >= 0)) {
    if (this.hasOwnProperty(e) && !t.hasOwnProperty(e)) return !1;
    if (this[e] !== t[e]) return !1;
    n++;
  }

  for (e in t) t.hasOwnProperty(e) && r.indexOf(e) < 0 && n--;

  return 0 === n;
}, O.API = {
  events: []
}, O.version = "2.3.1";

var B = O.API,
    M = 1,
    E = function (t) {
  return t.replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
},
    q = function (t) {
  return t.replace(/\\\\/g, "\\").replace(/\\\(/g, "(").replace(/\\\)/g, ")");
},
    R = function (t) {
  return t.toFixed(2);
},
    T = function (t) {
  return t.toFixed(5);
};

B.__acroform__ = {};

var D = function (t, e) {
  t.prototype = Object.create(e.prototype), t.prototype.constructor = t;
},
    U = function (t) {
  return t * M;
},
    z = function (t) {
  var e = new ot(),
      r = wt.internal.getHeight(t) || 0,
      n = wt.internal.getWidth(t) || 0;
  return e.BBox = [0, 0, Number(R(n)), Number(R(r))], e;
},
    H = B.__acroform__.setBit = function (t, e) {
  if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBit");
  return t |= 1 << e;
},
    V = B.__acroform__.clearBit = function (t, e) {
  if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBit");
  return t &= ~(1 << e);
},
    W = B.__acroform__.getBit = function (t, e) {
  if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBit");
  return 0 == (t & 1 << e) ? 0 : 1;
},
    G = B.__acroform__.getBitForPdf = function (t, e) {
  if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf");
  return W(t, e - 1);
},
    Y = B.__acroform__.setBitForPdf = function (t, e) {
  if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf");
  return H(t, e - 1);
},
    J = B.__acroform__.clearBitForPdf = function (t, e) {
  if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf");
  return V(t, e - 1);
},
    X = B.__acroform__.calculateCoordinates = function (t, e) {
  var r = e.internal.getHorizontalCoordinate,
      n = e.internal.getVerticalCoordinate,
      i = t[0],
      a = t[1],
      o = t[2],
      s = t[3],
      u = {};
  return u.lowerLeft_X = r(i) || 0, u.lowerLeft_Y = n(a + s) || 0, u.upperRight_X = r(i + o) || 0, u.upperRight_Y = n(a) || 0, [Number(R(u.lowerLeft_X)), Number(R(u.lowerLeft_Y)), Number(R(u.upperRight_X)), Number(R(u.upperRight_Y))];
},
    K = function (t) {
  if (t.appearanceStreamContent) return t.appearanceStreamContent;

  if (t.V || t.DV) {
    var e = [],
        r = t._V || t.DV,
        n = Z(t, r),
        i = t.scope.internal.getFont(t.fontName, t.fontStyle).id;
    e.push("/Tx BMC"), e.push("q"), e.push("BT"), e.push(t.scope.__private__.encodeColorString(t.color)), e.push("/" + i + " " + R(n.fontSize) + " Tf"), e.push("1 0 0 1 0 0 Tm"), e.push(n.text), e.push("ET"), e.push("Q"), e.push("EMC");
    var a = z(t);
    return a.scope = t.scope, a.stream = e.join("\n"), a;
  }
},
    Z = function (t, e) {
  var r = 0 === t.fontSize ? t.maxFontSize : t.fontSize,
      n = {
    text: "",
    fontSize: ""
  },
      i = (e = ")" == (e = "(" == e.substr(0, 1) ? e.substr(1) : e).substr(e.length - 1) ? e.substr(0, e.length - 1) : e).split(" "),
      a = r,
      o = wt.internal.getHeight(t) || 0;
  o = o < 0 ? -o : o;
  var s = wt.internal.getWidth(t) || 0;
  s = s < 0 ? -s : s;

  var u = function (e, r, n) {
    if (e + 1 < i.length) {
      var a = r + " " + i[e + 1];
      return $(a, t, n).width <= s - 4;
    }

    return !1;
  };

  a++;

  t: for (; a > 0;) {
    e = "", a--;
    var c,
        l,
        h = $("3", t, a).height,
        f = t.multiline ? o - a : (o - h) / 2,
        d = f += 2,
        p = 0,
        g = 0;

    if (a <= 0) {
      e = "(...) Tj\n", e += "% Width of Text: " + $(e, t, a = 12).width + ", FieldWidth:" + s + "\n";
      break;
    }

    var m = "",
        v = 0;

    for (var b in i) if (i.hasOwnProperty(b)) {
      m = " " == (m += i[b] + " ").substr(m.length - 1) ? m.substr(0, m.length - 1) : m;
      var y = parseInt(b),
          w = u(y, m, a),
          N = b >= i.length - 1;

      if (w && !N) {
        m += " ";
        continue;
      }

      if (w || N) {
        if (N) g = y;else if (t.multiline && (h + 2) * (v + 2) + 2 > o) continue t;
      } else {
        if (!t.multiline) continue t;
        if ((h + 2) * (v + 2) + 2 > o) continue t;
        g = y;
      }

      for (var L = "", A = p; A <= g; A++) L += i[A] + " ";

      switch (L = " " == L.substr(L.length - 1) ? L.substr(0, L.length - 1) : L, l = $(L, t, a).width, t.textAlign) {
        case "right":
          c = s - l - 2;
          break;

        case "center":
          c = (s - l) / 2;
          break;

        case "left":
        default:
          c = 2;
      }

      e += R(c) + " " + R(d) + " Td\n", e += "(" + E(L) + ") Tj\n", e += -R(c) + " 0 Td\n", d = -(a + 2), l = 0, p = g + 1, v++, m = "";
    } else ;

    break;
  }

  return n.text = e, n.fontSize = a, n;
},
    $ = function (t, e, r) {
  var n = e.scope.internal.getFont(e.fontName, e.fontStyle),
      i = e.scope.getStringUnitWidth(t, {
    font: n,
    fontSize: parseFloat(r),
    charSpace: 0
  }) * parseFloat(r);
  return {
    height: e.scope.getStringUnitWidth("3", {
      font: n,
      fontSize: parseFloat(r),
      charSpace: 0
    }) * parseFloat(r) * 1.5,
    width: i
  };
},
    Q = {
  fields: [],
  xForms: [],
  acroFormDictionaryRoot: null,
  printedOut: !1,
  internal: null,
  isInitialized: !1
},
    tt = function (t, e) {
  var r = {
    type: "reference",
    object: t
  };
  void 0 === e.internal.getPageInfo(t.page).pageContext.annotations.find(function (t) {
    return t.type === r.type && t.object === r.object;
  }) && e.internal.getPageInfo(t.page).pageContext.annotations.push(r);
},
    et = function (t, e) {
  for (var r in t) if (t.hasOwnProperty(r)) {
    var n = r,
        i = t[r];
    e.internal.newObjectDeferredBegin(i.objId, !0), "object" == typeof i && "function" == typeof i.putStream && i.putStream(), delete t[n];
  }
},
    rt = function (t, e) {
  if (e.scope = t, void 0 !== t.internal && (void 0 === t.internal.acroformPlugin || !1 === t.internal.acroformPlugin.isInitialized)) {
    if (ut.FieldNum = 0, t.internal.acroformPlugin = JSON.parse(JSON.stringify(Q)), t.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error("Exception while creating AcroformDictionary");
    M = t.internal.scaleFactor, t.internal.acroformPlugin.acroFormDictionaryRoot = new st(), t.internal.acroformPlugin.acroFormDictionaryRoot.scope = t, t.internal.acroformPlugin.acroFormDictionaryRoot._eventID = t.internal.events.subscribe("postPutResources", function () {
      !function (t) {
        t.internal.events.unsubscribe(t.internal.acroformPlugin.acroFormDictionaryRoot._eventID), delete t.internal.acroformPlugin.acroFormDictionaryRoot._eventID, t.internal.acroformPlugin.printedOut = !0;
      }(t);
    }), t.internal.events.subscribe("buildDocument", function () {
      !function (t) {
        t.internal.acroformPlugin.acroFormDictionaryRoot.objId = void 0;
        var e = t.internal.acroformPlugin.acroFormDictionaryRoot.Fields;

        for (var r in e) if (e.hasOwnProperty(r)) {
          var n = e[r];
          n.objId = void 0, n.hasAnnotation && tt(n, t);
        }
      }(t);
    }), t.internal.events.subscribe("putCatalog", function () {
      !function (t) {
        if (void 0 === t.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error("putCatalogCallback: Root missing.");
        t.internal.write("/AcroForm " + t.internal.acroformPlugin.acroFormDictionaryRoot.objId + " 0 R");
      }(t);
    }), t.internal.events.subscribe("postPutPages", function (e) {
      !function (t, e) {
        var r = !t;

        for (var n in t || (e.internal.newObjectDeferredBegin(e.internal.acroformPlugin.acroFormDictionaryRoot.objId, !0), e.internal.acroformPlugin.acroFormDictionaryRoot.putStream()), t = t || e.internal.acroformPlugin.acroFormDictionaryRoot.Kids) if (t.hasOwnProperty(n)) {
          var i = t[n],
              a = [],
              o = i.Rect;

          if (i.Rect && (i.Rect = X(i.Rect, e)), e.internal.newObjectDeferredBegin(i.objId, !0), i.DA = wt.createDefaultAppearanceStream(i), "object" == typeof i && "function" == typeof i.getKeyValueListForStream && (a = i.getKeyValueListForStream()), i.Rect = o, i.hasAppearanceStream && !i.appearanceStreamContent) {
            var s = K(i);
            a.push({
              key: "AP",
              value: "<</N " + s + ">>"
            }), e.internal.acroformPlugin.xForms.push(s);
          }

          if (i.appearanceStreamContent) {
            var u = "";

            for (var c in i.appearanceStreamContent) if (i.appearanceStreamContent.hasOwnProperty(c)) {
              var l = i.appearanceStreamContent[c];

              if (u += "/" + c + " ", u += "<<", Object.keys(l).length >= 1 || Array.isArray(l)) {
                for (var n in l) if (l.hasOwnProperty(n)) {
                  var h = l[n];
                  "function" == typeof h && (h = h.call(e, i)), u += "/" + n + " " + h + " ", e.internal.acroformPlugin.xForms.indexOf(h) >= 0 || e.internal.acroformPlugin.xForms.push(h);
                }
              } else "function" == typeof (h = l) && (h = h.call(e, i)), u += "/" + n + " " + h, e.internal.acroformPlugin.xForms.indexOf(h) >= 0 || e.internal.acroformPlugin.xForms.push(h);

              u += ">>";
            }

            a.push({
              key: "AP",
              value: "<<\n" + u + ">>"
            });
          }

          e.internal.putStream({
            additionalKeyValues: a,
            objectId: i.objId
          }), e.internal.out("endobj");
        }

        r && et(e.internal.acroformPlugin.xForms, e);
      }(e, t);
    }), t.internal.acroformPlugin.isInitialized = !0;
  }
},
    nt = B.__acroform__.arrayToPdfArray = function (t, e, r) {
  var n = function (t) {
    return t;
  };

  if (Array.isArray(t)) {
    for (var i = "[", a = 0; a < t.length; a++) switch (0 !== a && (i += " "), typeof t[a]) {
      case "boolean":
      case "number":
      case "object":
        i += t[a].toString();
        break;

      case "string":
        "/" !== t[a].substr(0, 1) ? (void 0 !== e && r && (n = r.internal.getEncryptor(e)), i += "(" + E(n(t[a].toString())) + ")") : i += t[a].toString();
    }

    return i += "]";
  }

  throw new Error("Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray");
};

var it = function (t, e, r) {
  var n = function (t) {
    return t;
  };

  return void 0 !== e && r && (n = r.internal.getEncryptor(e)), (t = t || "").toString(), t = "(" + E(n(t)) + ")";
},
    at = function () {
  this._objId = void 0, this._scope = void 0, Object.defineProperty(this, "objId", {
    get: function () {
      if (void 0 === this._objId) {
        if (void 0 === this.scope) return;
        this._objId = this.scope.internal.newObjectDeferred();
      }

      return this._objId;
    },
    set: function (t) {
      this._objId = t;
    }
  }), Object.defineProperty(this, "scope", {
    value: this._scope,
    writable: !0
  });
};

at.prototype.toString = function () {
  return this.objId + " 0 R";
}, at.prototype.putStream = function () {
  var t = this.getKeyValueListForStream();
  this.scope.internal.putStream({
    data: this.stream,
    additionalKeyValues: t,
    objectId: this.objId
  }), this.scope.internal.out("endobj");
}, at.prototype.getKeyValueListForStream = function () {
  var t = [],
      e = Object.getOwnPropertyNames(this).filter(function (t) {
    return "content" != t && "appearanceStreamContent" != t && "scope" != t && "objId" != t && "_" != t.substring(0, 1);
  });

  for (var r in e) if (!1 === Object.getOwnPropertyDescriptor(this, e[r]).configurable) {
    var n = e[r],
        i = this[n];
    i && (Array.isArray(i) ? t.push({
      key: n,
      value: nt(i, this.objId, this.scope)
    }) : i instanceof at ? (i.scope = this.scope, t.push({
      key: n,
      value: i.objId + " 0 R"
    })) : "function" != typeof i && t.push({
      key: n,
      value: i
    }));
  }

  return t;
};

var ot = function () {
  at.call(this), Object.defineProperty(this, "Type", {
    value: "/XObject",
    configurable: !1,
    writable: !0
  }), Object.defineProperty(this, "Subtype", {
    value: "/Form",
    configurable: !1,
    writable: !0
  }), Object.defineProperty(this, "FormType", {
    value: 1,
    configurable: !1,
    writable: !0
  });
  var t,
      e = [];
  Object.defineProperty(this, "BBox", {
    configurable: !1,
    get: function () {
      return e;
    },
    set: function (t) {
      e = t;
    }
  }), Object.defineProperty(this, "Resources", {
    value: "2 0 R",
    configurable: !1,
    writable: !0
  }), Object.defineProperty(this, "stream", {
    enumerable: !1,
    configurable: !0,
    set: function (e) {
      t = e.trim();
    },
    get: function () {
      return t || null;
    }
  });
};

D(ot, at);

var st = function () {
  at.call(this);
  var t,
      e = [];
  Object.defineProperty(this, "Kids", {
    enumerable: !1,
    configurable: !0,
    get: function () {
      return e.length > 0 ? e : void 0;
    }
  }), Object.defineProperty(this, "Fields", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return e;
    }
  }), Object.defineProperty(this, "DA", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (t) {
        var e = function (t) {
          return t;
        };

        return this.scope && (e = this.scope.internal.getEncryptor(this.objId)), "(" + E(e(t)) + ")";
      }
    },
    set: function (e) {
      t = e;
    }
  });
};

D(st, at);

var ut = function () {
  at.call(this);
  var t = 4;
  Object.defineProperty(this, "F", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return t;
    },
    set: function (e) {
      if (isNaN(e)) throw new Error('Invalid value "' + e + '" for attribute F supplied.');
      t = e;
    }
  }), Object.defineProperty(this, "showWhenPrinted", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(t, 3));
    },
    set: function (e) {
      !0 === Boolean(e) ? this.F = Y(t, 3) : this.F = J(t, 3);
    }
  });
  var e = 0;
  Object.defineProperty(this, "Ff", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return e;
    },
    set: function (t) {
      if (isNaN(t)) throw new Error('Invalid value "' + t + '" for attribute Ff supplied.');
      e = t;
    }
  });
  var r = [];
  Object.defineProperty(this, "Rect", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (0 !== r.length) return r;
    },
    set: function (t) {
      r = void 0 !== t ? t : [];
    }
  }), Object.defineProperty(this, "x", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return !r || isNaN(r[0]) ? 0 : r[0];
    },
    set: function (t) {
      r[0] = t;
    }
  }), Object.defineProperty(this, "y", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return !r || isNaN(r[1]) ? 0 : r[1];
    },
    set: function (t) {
      r[1] = t;
    }
  }), Object.defineProperty(this, "width", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return !r || isNaN(r[2]) ? 0 : r[2];
    },
    set: function (t) {
      r[2] = t;
    }
  }), Object.defineProperty(this, "height", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return !r || isNaN(r[3]) ? 0 : r[3];
    },
    set: function (t) {
      r[3] = t;
    }
  });
  var n = "";
  Object.defineProperty(this, "FT", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return n;
    },
    set: function (t) {
      switch (t) {
        case "/Btn":
        case "/Tx":
        case "/Ch":
        case "/Sig":
          n = t;
          break;

        default:
          throw new Error('Invalid value "' + t + '" for attribute FT supplied.');
      }
    }
  });
  var i = null;
  Object.defineProperty(this, "T", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      if (!i || i.length < 1) {
        if (this instanceof mt) return;
        i = "FieldObject" + ut.FieldNum++;
      }

      var t = function (t) {
        return t;
      };

      return this.scope && (t = this.scope.internal.getEncryptor(this.objId)), "(" + E(t(i)) + ")";
    },
    set: function (t) {
      i = t.toString();
    }
  }), Object.defineProperty(this, "fieldName", {
    configurable: !0,
    enumerable: !0,
    get: function () {
      return i;
    },
    set: function (t) {
      i = t;
    }
  });
  var a = "helvetica";
  Object.defineProperty(this, "fontName", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return a;
    },
    set: function (t) {
      a = t;
    }
  });
  var o = "normal";
  Object.defineProperty(this, "fontStyle", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return o;
    },
    set: function (t) {
      o = t;
    }
  });
  var s = 0;
  Object.defineProperty(this, "fontSize", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return s;
    },
    set: function (t) {
      s = t;
    }
  });
  var u = void 0;
  Object.defineProperty(this, "maxFontSize", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return void 0 === u ? 50 / M : u;
    },
    set: function (t) {
      u = t;
    }
  });
  var c = "black";
  Object.defineProperty(this, "color", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return c;
    },
    set: function (t) {
      c = t;
    }
  });
  var l = "/F1 0 Tf 0 g";
  Object.defineProperty(this, "DA", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      if (!(!l || this instanceof mt || this instanceof bt)) return it(l, this.objId, this.scope);
    },
    set: function (t) {
      t = t.toString(), l = t;
    }
  });
  var h = null;
  Object.defineProperty(this, "DV", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (h) return this instanceof dt == !1 ? it(h, this.objId, this.scope) : h;
    },
    set: function (t) {
      t = t.toString(), h = this instanceof dt == !1 ? "(" === t.substr(0, 1) ? q(t.substr(1, t.length - 2)) : q(t) : t;
    }
  }), Object.defineProperty(this, "defaultValue", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return this instanceof dt == !0 ? q(h.substr(1, h.length - 1)) : h;
    },
    set: function (t) {
      t = t.toString(), h = this instanceof dt == !0 ? "/" + t : t;
    }
  });
  var f = null;
  Object.defineProperty(this, "_V", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (f) return f;
    },
    set: function (t) {
      this.V = t;
    }
  }), Object.defineProperty(this, "V", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (f) return this instanceof dt == !1 ? it(f, this.objId, this.scope) : f;
    },
    set: function (t) {
      t = t.toString(), f = this instanceof dt == !1 ? "(" === t.substr(0, 1) ? q(t.substr(1, t.length - 2)) : q(t) : t;
    }
  }), Object.defineProperty(this, "value", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return this instanceof dt == !0 ? q(f.substr(1, f.length - 1)) : f;
    },
    set: function (t) {
      t = t.toString(), f = this instanceof dt == !0 ? "/" + t : t;
    }
  }), Object.defineProperty(this, "hasAnnotation", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return this.Rect;
    }
  }), Object.defineProperty(this, "Type", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return this.hasAnnotation ? "/Annot" : null;
    }
  }), Object.defineProperty(this, "Subtype", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return this.hasAnnotation ? "/Widget" : null;
    }
  });
  var d,
      p = !1;
  Object.defineProperty(this, "hasAppearanceStream", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return p;
    },
    set: function (t) {
      t = Boolean(t), p = t;
    }
  }), Object.defineProperty(this, "page", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      if (d) return d;
    },
    set: function (t) {
      d = t;
    }
  }), Object.defineProperty(this, "readOnly", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 1));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 1) : this.Ff = J(this.Ff, 1);
    }
  }), Object.defineProperty(this, "required", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 2));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 2) : this.Ff = J(this.Ff, 2);
    }
  }), Object.defineProperty(this, "noExport", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 3));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 3) : this.Ff = J(this.Ff, 3);
    }
  });
  var g = null;
  Object.defineProperty(this, "Q", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      if (null !== g) return g;
    },
    set: function (t) {
      if (-1 === [0, 1, 2].indexOf(t)) throw new Error('Invalid value "' + t + '" for attribute Q supplied.');
      g = t;
    }
  }), Object.defineProperty(this, "textAlign", {
    get: function () {
      var t;

      switch (g) {
        case 0:
        default:
          t = "left";
          break;

        case 1:
          t = "center";
          break;

        case 2:
          t = "right";
      }

      return t;
    },
    configurable: !0,
    enumerable: !0,
    set: function (t) {
      switch (t) {
        case "right":
        case 2:
          g = 2;
          break;

        case "center":
        case 1:
          g = 1;
          break;

        case "left":
        case 0:
        default:
          g = 0;
      }
    }
  });
};

D(ut, at);

var ct = function () {
  ut.call(this), this.FT = "/Ch", this.V = "()", this.fontName = "zapfdingbats";
  var t = 0;
  Object.defineProperty(this, "TI", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return t;
    },
    set: function (e) {
      t = e;
    }
  }), Object.defineProperty(this, "topIndex", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return t;
    },
    set: function (e) {
      t = e;
    }
  });
  var e = [];
  Object.defineProperty(this, "Opt", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return nt(e, this.objId, this.scope);
    },
    set: function (t) {
      var r, n;
      n = [], "string" == typeof (r = t) && (n = function (t, e, r) {
        r || (r = 1);

        for (var n, i = []; n = e.exec(t);) i.push(n[r]);

        return i;
      }(r, /\((.*?)\)/g)), e = n;
    }
  }), this.getOptions = function () {
    return e;
  }, this.setOptions = function (t) {
    e = t, this.sort && e.sort();
  }, this.addOption = function (t) {
    t = (t = t || "").toString(), e.push(t), this.sort && e.sort();
  }, this.removeOption = function (t, r) {
    for (r = r || !1, t = (t = t || "").toString(); -1 !== e.indexOf(t) && (e.splice(e.indexOf(t), 1), !1 !== r););
  }, Object.defineProperty(this, "combo", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 18));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 18) : this.Ff = J(this.Ff, 18);
    }
  }), Object.defineProperty(this, "edit", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 19));
    },
    set: function (t) {
      !0 === this.combo && (!0 === Boolean(t) ? this.Ff = Y(this.Ff, 19) : this.Ff = J(this.Ff, 19));
    }
  }), Object.defineProperty(this, "sort", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 20));
    },
    set: function (t) {
      !0 === Boolean(t) ? (this.Ff = Y(this.Ff, 20), e.sort()) : this.Ff = J(this.Ff, 20);
    }
  }), Object.defineProperty(this, "multiSelect", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 22));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 22) : this.Ff = J(this.Ff, 22);
    }
  }), Object.defineProperty(this, "doNotSpellCheck", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 23));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 23) : this.Ff = J(this.Ff, 23);
    }
  }), Object.defineProperty(this, "commitOnSelChange", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 27));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 27) : this.Ff = J(this.Ff, 27);
    }
  }), this.hasAppearanceStream = !1;
};

exports.AcroFormChoiceField = ct;
D(ct, ut);

var lt = function () {
  ct.call(this), this.fontName = "helvetica", this.combo = !1;
};

exports.AcroFormListBox = lt;
D(lt, ct);

var ht = function () {
  lt.call(this), this.combo = !0;
};

exports.AcroFormComboBox = ht;
D(ht, lt);

var ft = function () {
  ht.call(this), this.edit = !0;
};

exports.AcroFormEditBox = ft;
D(ft, ht);

var dt = function () {
  ut.call(this), this.FT = "/Btn", Object.defineProperty(this, "noToggleToOff", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 15));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 15) : this.Ff = J(this.Ff, 15);
    }
  }), Object.defineProperty(this, "radio", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 16));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 16) : this.Ff = J(this.Ff, 16);
    }
  }), Object.defineProperty(this, "pushButton", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 17));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 17) : this.Ff = J(this.Ff, 17);
    }
  }), Object.defineProperty(this, "radioIsUnison", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 26));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 26) : this.Ff = J(this.Ff, 26);
    }
  });
  var t,
      e = {};
  Object.defineProperty(this, "MK", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      var t = function (t) {
        return t;
      };

      if (this.scope && (t = this.scope.internal.getEncryptor(this.objId)), 0 !== Object.keys(e).length) {
        var r,
            n = [];

        for (r in n.push("<<"), e) n.push("/" + r + " (" + E(t(e[r])) + ")");

        return n.push(">>"), n.join("\n");
      }
    },
    set: function (t) {
      "object" == typeof t && (e = t);
    }
  }), Object.defineProperty(this, "caption", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return e.CA || "";
    },
    set: function (t) {
      "string" == typeof t && (e.CA = t);
    }
  }), Object.defineProperty(this, "AS", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return t;
    },
    set: function (e) {
      t = e;
    }
  }), Object.defineProperty(this, "appearanceState", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return t.substr(1, t.length - 1);
    },
    set: function (e) {
      t = "/" + e;
    }
  });
};

exports.AcroFormButton = dt;
D(dt, ut);

var pt = function () {
  dt.call(this), this.pushButton = !0;
};

exports.AcroFormPushButton = pt;
D(pt, dt);

var gt = function () {
  dt.call(this), this.radio = !0, this.pushButton = !1;
  var t = [];
  Object.defineProperty(this, "Kids", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return t;
    },
    set: function (e) {
      t = void 0 !== e ? e : [];
    }
  });
};

exports.AcroFormRadioButton = gt;
D(gt, dt);

var mt = function () {
  var t, e;
  ut.call(this), Object.defineProperty(this, "Parent", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return t;
    },
    set: function (e) {
      t = e;
    }
  }), Object.defineProperty(this, "optionName", {
    enumerable: !1,
    configurable: !0,
    get: function () {
      return e;
    },
    set: function (t) {
      e = t;
    }
  });
  var r,
      n = {};
  Object.defineProperty(this, "MK", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      var t = function (t) {
        return t;
      };

      this.scope && (t = this.scope.internal.getEncryptor(this.objId));
      var e,
          r = [];

      for (e in r.push("<<"), n) r.push("/" + e + " (" + E(t(n[e])) + ")");

      return r.push(">>"), r.join("\n");
    },
    set: function (t) {
      "object" == typeof t && (n = t);
    }
  }), Object.defineProperty(this, "caption", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return n.CA || "";
    },
    set: function (t) {
      "string" == typeof t && (n.CA = t);
    }
  }), Object.defineProperty(this, "AS", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return r;
    },
    set: function (t) {
      r = t;
    }
  }), Object.defineProperty(this, "appearanceState", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return r.substr(1, r.length - 1);
    },
    set: function (t) {
      r = "/" + t;
    }
  }), this.caption = "l", this.appearanceState = "Off", this._AppearanceType = wt.RadioButton.Circle, this.appearanceStreamContent = this._AppearanceType.createAppearanceStream(this.optionName);
};

D(mt, ut), gt.prototype.setAppearance = function (t) {
  if (!("createAppearanceStream" in t) || !("getCA" in t)) throw new Error("Couldn't assign Appearance to RadioButton. Appearance was Invalid!");

  for (var e in this.Kids) if (this.Kids.hasOwnProperty(e)) {
    var r = this.Kids[e];
    r.appearanceStreamContent = t.createAppearanceStream(r.optionName), r.caption = t.getCA();
  }
}, gt.prototype.createOption = function (t) {
  var e = new mt();
  return e.Parent = this, e.optionName = t, this.Kids.push(e), Nt.call(this.scope, e), e;
};

var vt = function () {
  dt.call(this), this.fontName = "zapfdingbats", this.caption = "3", this.appearanceState = "On", this.value = "On", this.textAlign = "center", this.appearanceStreamContent = wt.CheckBox.createAppearanceStream();
};

exports.AcroFormCheckBox = vt;
D(vt, dt);

var bt = function () {
  ut.call(this), this.FT = "/Tx", Object.defineProperty(this, "multiline", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 13));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 13) : this.Ff = J(this.Ff, 13);
    }
  }), Object.defineProperty(this, "fileSelect", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 21));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 21) : this.Ff = J(this.Ff, 21);
    }
  }), Object.defineProperty(this, "doNotSpellCheck", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 23));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 23) : this.Ff = J(this.Ff, 23);
    }
  }), Object.defineProperty(this, "doNotScroll", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 24));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 24) : this.Ff = J(this.Ff, 24);
    }
  }), Object.defineProperty(this, "comb", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 25));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 25) : this.Ff = J(this.Ff, 25);
    }
  }), Object.defineProperty(this, "richText", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 26));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 26) : this.Ff = J(this.Ff, 26);
    }
  });
  var t = null;
  Object.defineProperty(this, "MaxLen", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return t;
    },
    set: function (e) {
      t = e;
    }
  }), Object.defineProperty(this, "maxLength", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return t;
    },
    set: function (e) {
      Number.isInteger(e) && (t = e);
    }
  }), Object.defineProperty(this, "hasAppearanceStream", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return this.V || this.DV;
    }
  });
};

exports.AcroFormTextField = bt;
D(bt, ut);

var yt = function () {
  bt.call(this), Object.defineProperty(this, "password", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(G(this.Ff, 14));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = Y(this.Ff, 14) : this.Ff = J(this.Ff, 14);
    }
  }), this.password = !0;
};

exports.AcroFormPasswordField = yt;
D(yt, bt);
var wt = {
  CheckBox: {
    createAppearanceStream: function () {
      return {
        N: {
          On: wt.CheckBox.YesNormal
        },
        D: {
          On: wt.CheckBox.YesPushDown,
          Off: wt.CheckBox.OffPushDown
        }
      };
    },
    YesPushDown: function (t) {
      var e = z(t);
      e.scope = t.scope;

      var r = [],
          n = t.scope.internal.getFont(t.fontName, t.fontStyle).id,
          i = t.scope.__private__.encodeColorString(t.color),
          a = Z(t, t.caption);

      return r.push("0.749023 g"), r.push("0 0 " + R(wt.internal.getWidth(t)) + " " + R(wt.internal.getHeight(t)) + " re"), r.push("f"), r.push("BMC"), r.push("q"), r.push("0 0 1 rg"), r.push("/" + n + " " + R(a.fontSize) + " Tf " + i), r.push("BT"), r.push(a.text), r.push("ET"), r.push("Q"), r.push("EMC"), e.stream = r.join("\n"), e;
    },
    YesNormal: function (t) {
      var e = z(t);
      e.scope = t.scope;

      var r = t.scope.internal.getFont(t.fontName, t.fontStyle).id,
          n = t.scope.__private__.encodeColorString(t.color),
          i = [],
          a = wt.internal.getHeight(t),
          o = wt.internal.getWidth(t),
          s = Z(t, t.caption);

      return i.push("1 g"), i.push("0 0 " + R(o) + " " + R(a) + " re"), i.push("f"), i.push("q"), i.push("0 0 1 rg"), i.push("0 0 " + R(o - 1) + " " + R(a - 1) + " re"), i.push("W"), i.push("n"), i.push("0 g"), i.push("BT"), i.push("/" + r + " " + R(s.fontSize) + " Tf " + n), i.push(s.text), i.push("ET"), i.push("Q"), e.stream = i.join("\n"), e;
    },
    OffPushDown: function (t) {
      var e = z(t);
      e.scope = t.scope;
      var r = [];
      return r.push("0.749023 g"), r.push("0 0 " + R(wt.internal.getWidth(t)) + " " + R(wt.internal.getHeight(t)) + " re"), r.push("f"), e.stream = r.join("\n"), e;
    }
  },
  RadioButton: {
    Circle: {
      createAppearanceStream: function (t) {
        var e = {
          D: {
            Off: wt.RadioButton.Circle.OffPushDown
          },
          N: {}
        };
        return e.N[t] = wt.RadioButton.Circle.YesNormal, e.D[t] = wt.RadioButton.Circle.YesPushDown, e;
      },
      getCA: function () {
        return "l";
      },
      YesNormal: function (t) {
        var e = z(t);
        e.scope = t.scope;
        var r = [],
            n = wt.internal.getWidth(t) <= wt.internal.getHeight(t) ? wt.internal.getWidth(t) / 4 : wt.internal.getHeight(t) / 4;
        n = Number((.9 * n).toFixed(5));
        var i = wt.internal.Bezier_C,
            a = Number((n * i).toFixed(5));
        return r.push("q"), r.push("1 0 0 1 " + T(wt.internal.getWidth(t) / 2) + " " + T(wt.internal.getHeight(t) / 2) + " cm"), r.push(n + " 0 m"), r.push(n + " " + a + " " + a + " " + n + " 0 " + n + " c"), r.push("-" + a + " " + n + " -" + n + " " + a + " -" + n + " 0 c"), r.push("-" + n + " -" + a + " -" + a + " -" + n + " 0 -" + n + " c"), r.push(a + " -" + n + " " + n + " -" + a + " " + n + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
      },
      YesPushDown: function (t) {
        var e = z(t);
        e.scope = t.scope;
        var r = [],
            n = wt.internal.getWidth(t) <= wt.internal.getHeight(t) ? wt.internal.getWidth(t) / 4 : wt.internal.getHeight(t) / 4;
        n = Number((.9 * n).toFixed(5));
        var i = Number((2 * n).toFixed(5)),
            a = Number((i * wt.internal.Bezier_C).toFixed(5)),
            o = Number((n * wt.internal.Bezier_C).toFixed(5));
        return r.push("0.749023 g"), r.push("q"), r.push("1 0 0 1 " + T(wt.internal.getWidth(t) / 2) + " " + T(wt.internal.getHeight(t) / 2) + " cm"), r.push(i + " 0 m"), r.push(i + " " + a + " " + a + " " + i + " 0 " + i + " c"), r.push("-" + a + " " + i + " -" + i + " " + a + " -" + i + " 0 c"), r.push("-" + i + " -" + a + " -" + a + " -" + i + " 0 -" + i + " c"), r.push(a + " -" + i + " " + i + " -" + a + " " + i + " 0 c"), r.push("f"), r.push("Q"), r.push("0 g"), r.push("q"), r.push("1 0 0 1 " + T(wt.internal.getWidth(t) / 2) + " " + T(wt.internal.getHeight(t) / 2) + " cm"), r.push(n + " 0 m"), r.push(n + " " + o + " " + o + " " + n + " 0 " + n + " c"), r.push("-" + o + " " + n + " -" + n + " " + o + " -" + n + " 0 c"), r.push("-" + n + " -" + o + " -" + o + " -" + n + " 0 -" + n + " c"), r.push(o + " -" + n + " " + n + " -" + o + " " + n + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
      },
      OffPushDown: function (t) {
        var e = z(t);
        e.scope = t.scope;
        var r = [],
            n = wt.internal.getWidth(t) <= wt.internal.getHeight(t) ? wt.internal.getWidth(t) / 4 : wt.internal.getHeight(t) / 4;
        n = Number((.9 * n).toFixed(5));
        var i = Number((2 * n).toFixed(5)),
            a = Number((i * wt.internal.Bezier_C).toFixed(5));
        return r.push("0.749023 g"), r.push("q"), r.push("1 0 0 1 " + T(wt.internal.getWidth(t) / 2) + " " + T(wt.internal.getHeight(t) / 2) + " cm"), r.push(i + " 0 m"), r.push(i + " " + a + " " + a + " " + i + " 0 " + i + " c"), r.push("-" + a + " " + i + " -" + i + " " + a + " -" + i + " 0 c"), r.push("-" + i + " -" + a + " -" + a + " -" + i + " 0 -" + i + " c"), r.push(a + " -" + i + " " + i + " -" + a + " " + i + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
      }
    },
    Cross: {
      createAppearanceStream: function (t) {
        var e = {
          D: {
            Off: wt.RadioButton.Cross.OffPushDown
          },
          N: {}
        };
        return e.N[t] = wt.RadioButton.Cross.YesNormal, e.D[t] = wt.RadioButton.Cross.YesPushDown, e;
      },
      getCA: function () {
        return "8";
      },
      YesNormal: function (t) {
        var e = z(t);
        e.scope = t.scope;
        var r = [],
            n = wt.internal.calculateCross(t);
        return r.push("q"), r.push("1 1 " + R(wt.internal.getWidth(t) - 2) + " " + R(wt.internal.getHeight(t) - 2) + " re"), r.push("W"), r.push("n"), r.push(R(n.x1.x) + " " + R(n.x1.y) + " m"), r.push(R(n.x2.x) + " " + R(n.x2.y) + " l"), r.push(R(n.x4.x) + " " + R(n.x4.y) + " m"), r.push(R(n.x3.x) + " " + R(n.x3.y) + " l"), r.push("s"), r.push("Q"), e.stream = r.join("\n"), e;
      },
      YesPushDown: function (t) {
        var e = z(t);
        e.scope = t.scope;
        var r = wt.internal.calculateCross(t),
            n = [];
        return n.push("0.749023 g"), n.push("0 0 " + R(wt.internal.getWidth(t)) + " " + R(wt.internal.getHeight(t)) + " re"), n.push("f"), n.push("q"), n.push("1 1 " + R(wt.internal.getWidth(t) - 2) + " " + R(wt.internal.getHeight(t) - 2) + " re"), n.push("W"), n.push("n"), n.push(R(r.x1.x) + " " + R(r.x1.y) + " m"), n.push(R(r.x2.x) + " " + R(r.x2.y) + " l"), n.push(R(r.x4.x) + " " + R(r.x4.y) + " m"), n.push(R(r.x3.x) + " " + R(r.x3.y) + " l"), n.push("s"), n.push("Q"), e.stream = n.join("\n"), e;
      },
      OffPushDown: function (t) {
        var e = z(t);
        e.scope = t.scope;
        var r = [];
        return r.push("0.749023 g"), r.push("0 0 " + R(wt.internal.getWidth(t)) + " " + R(wt.internal.getHeight(t)) + " re"), r.push("f"), e.stream = r.join("\n"), e;
      }
    }
  },
  createDefaultAppearanceStream: function (t) {
    var e = t.scope.internal.getFont(t.fontName, t.fontStyle).id,
        r = t.scope.__private__.encodeColorString(t.color);

    return "/" + e + " " + t.fontSize + " Tf " + r;
  }
};
exports.AcroFormAppearance = wt;
wt.internal = {
  Bezier_C: .551915024494,
  calculateCross: function (t) {
    var e = wt.internal.getWidth(t),
        r = wt.internal.getHeight(t),
        n = Math.min(e, r);
    return {
      x1: {
        x: (e - n) / 2,
        y: (r - n) / 2 + n
      },
      x2: {
        x: (e - n) / 2 + n,
        y: (r - n) / 2
      },
      x3: {
        x: (e - n) / 2,
        y: (r - n) / 2
      },
      x4: {
        x: (e - n) / 2 + n,
        y: (r - n) / 2 + n
      }
    };
  }
}, wt.internal.getWidth = function (t) {
  var e = 0;
  return "object" == typeof t && (e = U(t.Rect[2])), e;
}, wt.internal.getHeight = function (t) {
  var e = 0;
  return "object" == typeof t && (e = U(t.Rect[3])), e;
};

var Nt = B.addField = function (t) {
  if (rt(this, t), !(t instanceof ut)) throw new Error("Invalid argument passed to jsPDF.addField.");
  var e;
  return (e = t).scope.internal.acroformPlugin.printedOut && (e.scope.internal.acroformPlugin.printedOut = !1, e.scope.internal.acroformPlugin.acroFormDictionaryRoot = null), e.scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(e), t.page = t.scope.internal.getCurrentPageInfo().pageNumber, this;
};

B.AcroFormChoiceField = ct, B.AcroFormListBox = lt, B.AcroFormComboBox = ht, B.AcroFormEditBox = ft, B.AcroFormButton = dt, B.AcroFormPushButton = pt, B.AcroFormRadioButton = gt, B.AcroFormCheckBox = vt, B.AcroFormTextField = bt, B.AcroFormPasswordField = yt, B.AcroFormAppearance = wt, B.AcroForm = {
  ChoiceField: ct,
  ListBox: lt,
  ComboBox: ht,
  EditBox: ft,
  Button: dt,
  PushButton: pt,
  RadioButton: gt,
  CheckBox: vt,
  TextField: bt,
  PasswordField: yt,
  Appearance: wt
}, O.AcroForm = {
  ChoiceField: ct,
  ListBox: lt,
  ComboBox: ht,
  EditBox: ft,
  Button: dt,
  PushButton: pt,
  RadioButton: gt,
  CheckBox: vt,
  TextField: bt,
  PasswordField: yt,
  Appearance: wt
};
var Lt = O.AcroForm;
/** @license
 * jsPDF addImage plugin
 * Copyright (c) 2012 Jason Siefken, https://github.com/siefkenj/
 *               2013 Chris Dowling, https://github.com/gingerchris
 *               2013 Trinh Ho, https://github.com/ineedfat
 *               2013 Edwin Alejandro Perez, https://github.com/eaparango
 *               2013 Norah Smith, https://github.com/burnburnrocket
 *               2014 Diego Casorran, https://github.com/diegocr
 *               2014 James Robb, https://github.com/jamesbrobb
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.AcroForm = Lt;

function At(t) {
  return t.reduce(function (t, e, r) {
    return t[e] = r, t;
  }, {});
}

!function (t) {
  t.__addimage__ = {};

  var e = "UNKNOWN",
      r = {
    PNG: [[137, 80, 78, 71]],
    TIFF: [[77, 77, 0, 42], [73, 73, 42, 0]],
    JPEG: [[255, 216, 255, 224, void 0, void 0, 74, 70, 73, 70, 0], [255, 216, 255, 225, void 0, void 0, 69, 120, 105, 102, 0, 0], [255, 216, 255, 219], [255, 216, 255, 238]],
    JPEG2000: [[0, 0, 0, 12, 106, 80, 32, 32]],
    GIF87a: [[71, 73, 70, 56, 55, 97]],
    GIF89a: [[71, 73, 70, 56, 57, 97]],
    WEBP: [[82, 73, 70, 70, void 0, void 0, void 0, void 0, 87, 69, 66, 80]],
    BMP: [[66, 77], [66, 65], [67, 73], [67, 80], [73, 67], [80, 84]]
  },
      n = t.__addimage__.getImageFileTypeByImageData = function (t, n) {
    var i, a;
    n = n || e;
    var o,
        s,
        u,
        c = e;
    if (x(t)) for (u in r) for (o = r[u], i = 0; i < o.length; i += 1) {
      for (s = !0, a = 0; a < o[i].length; a += 1) if (void 0 !== o[i][a] && o[i][a] !== t[a]) {
        s = !1;
        break;
      }

      if (!0 === s) {
        c = u;
        break;
      }
    } else for (u in r) for (o = r[u], i = 0; i < o.length; i += 1) {
      for (s = !0, a = 0; a < o[i].length; a += 1) if (void 0 !== o[i][a] && o[i][a] !== t.charCodeAt(a)) {
        s = !1;
        break;
      }

      if (!0 === s) {
        c = u;
        break;
      }
    }
    return c === e && n !== e && (c = n), c;
  },
      i = function (t) {
    for (var e = this.internal.write, r = this.internal.putStream, n = (0, this.internal.getFilters)(); -1 !== n.indexOf("FlateEncode");) n.splice(n.indexOf("FlateEncode"), 1);

    t.objectId = this.internal.newObject();
    var a = [];

    if (a.push({
      key: "Type",
      value: "/XObject"
    }), a.push({
      key: "Subtype",
      value: "/Image"
    }), a.push({
      key: "Width",
      value: t.width
    }), a.push({
      key: "Height",
      value: t.height
    }), t.colorSpace === b.INDEXED ? a.push({
      key: "ColorSpace",
      value: "[/Indexed /DeviceRGB " + (t.palette.length / 3 - 1) + " " + ("sMask" in t && void 0 !== t.sMask ? t.objectId + 2 : t.objectId + 1) + " 0 R]"
    }) : (a.push({
      key: "ColorSpace",
      value: "/" + t.colorSpace
    }), t.colorSpace === b.DEVICE_CMYK && a.push({
      key: "Decode",
      value: "[1 0 1 0 1 0 1 0]"
    })), a.push({
      key: "BitsPerComponent",
      value: t.bitsPerComponent
    }), "decodeParameters" in t && void 0 !== t.decodeParameters && a.push({
      key: "DecodeParms",
      value: "<<" + t.decodeParameters + ">>"
    }), "transparency" in t && Array.isArray(t.transparency)) {
      for (var o = "", s = 0, u = t.transparency.length; s < u; s++) o += t.transparency[s] + " " + t.transparency[s] + " ";

      a.push({
        key: "Mask",
        value: "[" + o + "]"
      });
    }

    void 0 !== t.sMask && a.push({
      key: "SMask",
      value: t.objectId + 1 + " 0 R"
    });
    var c = void 0 !== t.filter ? ["/" + t.filter] : void 0;

    if (r({
      data: t.data,
      additionalKeyValues: a,
      alreadyAppliedFilters: c,
      objectId: t.objectId
    }), e("endobj"), "sMask" in t && void 0 !== t.sMask) {
      var l = "/Predictor " + t.predictor + " /Colors 1 /BitsPerComponent " + t.bitsPerComponent + " /Columns " + t.width,
          h = {
        width: t.width,
        height: t.height,
        colorSpace: "DeviceGray",
        bitsPerComponent: t.bitsPerComponent,
        decodeParameters: l,
        data: t.sMask
      };
      "filter" in t && (h.filter = t.filter), i.call(this, h);
    }

    if (t.colorSpace === b.INDEXED) {
      var f = this.internal.newObject();
      r({
        data: _(new Uint8Array(t.palette)),
        objectId: f
      }), e("endobj");
    }
  },
      a = function () {
    var t = this.internal.collections.addImage_images;

    for (var e in t) i.call(this, t[e]);
  },
      o = function () {
    var t,
        e = this.internal.collections.addImage_images,
        r = this.internal.write;

    for (var n in e) r("/I" + (t = e[n]).index, t.objectId, "0", "R");
  },
      s = function () {
    this.internal.collections.addImage_images || (this.internal.collections.addImage_images = {}, this.internal.events.subscribe("putResources", a), this.internal.events.subscribe("putXobjectDict", o));
  },
      l = function () {
    var t = this.internal.collections.addImage_images;
    return s.call(this), t;
  },
      h = function () {
    return Object.keys(this.internal.collections.addImage_images).length;
  },
      f = function (e) {
    return "function" == typeof t["process" + e.toUpperCase()];
  },
      d = function (t) {
    return "object" == typeof t && 1 === t.nodeType;
  },
      p = function (e, r) {
    if ("IMG" === e.nodeName && e.hasAttribute("src")) {
      var n = "" + e.getAttribute("src");
      if (0 === n.indexOf("data:image/")) return u(unescape(n).split("base64,").pop());
      var i = t.loadFile(n, !0);
      if (void 0 !== i) return i;
    }

    if ("CANVAS" === e.nodeName) {
      var a;

      switch (r) {
        case "PNG":
          a = "image/png";
          break;

        case "WEBP":
          a = "image/webp";
          break;

        case "JPEG":
        case "JPG":
        default:
          a = "image/jpeg";
      }

      return u(e.toDataURL(a, 1).split("base64,").pop());
    }
  },
      g = function (t) {
    var e = this.internal.collections.addImage_images;
    if (e) for (var r in e) if (t === e[r].alias) return e[r];
  },
      m = function (t, e, r) {
    return t || e || (t = -96, e = -96), t < 0 && (t = -1 * r.width * 72 / t / this.internal.scaleFactor), e < 0 && (e = -1 * r.height * 72 / e / this.internal.scaleFactor), 0 === t && (t = e * r.width / r.height), 0 === e && (e = t * r.height / r.width), [t, e];
  },
      v = function (t, e, r, n, i, a) {
    var o = m.call(this, r, n, i),
        s = this.internal.getCoordinateString,
        u = this.internal.getVerticalCoordinateString,
        c = l.call(this);

    if (r = o[0], n = o[1], c[i.index] = i, a) {
      a *= Math.PI / 180;

      var h = Math.cos(a),
          f = Math.sin(a),
          d = function (t) {
        return t.toFixed(4);
      },
          p = [d(h), d(f), d(-1 * f), d(h), 0, 0, "cm"];
    }

    this.internal.write("q"), a ? (this.internal.write([1, "0", "0", 1, s(t), u(e + n), "cm"].join(" ")), this.internal.write(p.join(" ")), this.internal.write([s(r), "0", "0", s(n), "0", "0", "cm"].join(" "))) : this.internal.write([s(r), "0", "0", s(n), s(t), u(e + n), "cm"].join(" ")), this.isAdvancedAPI() && this.internal.write([1, 0, 0, -1, 0, 0, "cm"].join(" ")), this.internal.write("/I" + i.index + " Do"), this.internal.write("Q");
  },
      b = t.color_spaces = {
    DEVICE_RGB: "DeviceRGB",
    DEVICE_GRAY: "DeviceGray",
    DEVICE_CMYK: "DeviceCMYK",
    CAL_GREY: "CalGray",
    CAL_RGB: "CalRGB",
    LAB: "Lab",
    ICC_BASED: "ICCBased",
    INDEXED: "Indexed",
    PATTERN: "Pattern",
    SEPARATION: "Separation",
    DEVICE_N: "DeviceN"
  };

  t.decode = {
    DCT_DECODE: "DCTDecode",
    FLATE_DECODE: "FlateDecode",
    LZW_DECODE: "LZWDecode",
    JPX_DECODE: "JPXDecode",
    JBIG2_DECODE: "JBIG2Decode",
    ASCII85_DECODE: "ASCII85Decode",
    ASCII_HEX_DECODE: "ASCIIHexDecode",
    RUN_LENGTH_DECODE: "RunLengthDecode",
    CCITT_FAX_DECODE: "CCITTFaxDecode"
  };

  var y = t.image_compression = {
    NONE: "NONE",
    FAST: "FAST",
    MEDIUM: "MEDIUM",
    SLOW: "SLOW"
  },
      w = t.__addimage__.sHashCode = function (t) {
    var e,
        r,
        n = 0;
    if ("string" == typeof t) for (r = t.length, e = 0; e < r; e++) n = (n << 5) - n + t.charCodeAt(e), n |= 0;else if (x(t)) for (r = t.byteLength / 2, e = 0; e < r; e++) n = (n << 5) - n + t[e], n |= 0;
    return n;
  },
      N = t.__addimage__.validateStringAsBase64 = function (t) {
    (t = t || "").toString().trim();
    var e = !0;
    return 0 === t.length && (e = !1), t.length % 4 != 0 && (e = !1), !1 === /^[A-Za-z0-9+/]+$/.test(t.substr(0, t.length - 2)) && (e = !1), !1 === /^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(t.substr(-2)) && (e = !1), e;
  },
      L = t.__addimage__.extractImageFromDataUrl = function (t) {
    var e = (t = t || "").split("base64,"),
        r = null;

    if (2 === e.length) {
      var n = /^data:(\w*\/\w*);*(charset=(?!charset=)[\w=-]*)*;*$/.exec(e[0]);
      Array.isArray(n) && (r = {
        mimeType: n[1],
        charset: n[2],
        data: e[1]
      });
    }

    return r;
  },
      A = t.__addimage__.supportsArrayBuffer = function () {
    return "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array;
  };

  t.__addimage__.isArrayBuffer = function (t) {
    return A() && t instanceof ArrayBuffer;
  };

  var x = t.__addimage__.isArrayBufferView = function (t) {
    return A() && "undefined" != typeof Uint32Array && (t instanceof Int8Array || t instanceof Uint8Array || "undefined" != typeof Uint8ClampedArray && t instanceof Uint8ClampedArray || t instanceof Int16Array || t instanceof Uint16Array || t instanceof Int32Array || t instanceof Uint32Array || t instanceof Float32Array || t instanceof Float64Array);
  },
      S = t.__addimage__.binaryStringToUint8Array = function (t) {
    for (var e = t.length, r = new Uint8Array(e), n = 0; n < e; n++) r[n] = t.charCodeAt(n);

    return r;
  },
      _ = t.__addimage__.arrayBufferToBinaryString = function (t) {
    try {
      return u(c(String.fromCharCode.apply(null, t)));
    } catch (e) {
      if ("undefined" != typeof Uint8Array && void 0 !== Uint8Array.prototype.reduce) return new Uint8Array(t).reduce(function (t, e) {
        return t.push(String.fromCharCode(e)), t;
      }, []).join("");
    }
  };

  t.addImage = function () {
    var t, r, n, i, a, o, u, c, l;

    if ("number" == typeof arguments[1] ? (r = e, n = arguments[1], i = arguments[2], a = arguments[3], o = arguments[4], u = arguments[5], c = arguments[6], l = arguments[7]) : (r = arguments[1], n = arguments[2], i = arguments[3], a = arguments[4], o = arguments[5], u = arguments[6], c = arguments[7], l = arguments[8]), "object" == typeof (t = arguments[0]) && !d(t) && "imageData" in t) {
      var h = t;
      t = h.imageData, r = h.format || r || e, n = h.x || n || 0, i = h.y || i || 0, a = h.w || h.width || a, o = h.h || h.height || o, u = h.alias || u, c = h.compression || c, l = h.rotation || h.angle || l;
    }

    var f = this.internal.getFilters();
    if (void 0 === c && -1 !== f.indexOf("FlateEncode") && (c = "SLOW"), isNaN(n) || isNaN(i)) throw new Error("Invalid coordinates passed to jsPDF.addImage");
    s.call(this);
    var p = P.call(this, t, r, u, c);
    return v.call(this, n, i, a, o, p, l), this;
  };

  var P = function (r, i, a, o) {
    var s, u, c;

    if ("string" == typeof r && n(r) === e) {
      r = unescape(r);
      var l = k(r, !1);
      ("" !== l || void 0 !== (l = t.loadFile(r, !0))) && (r = l);
    }

    if (d(r) && (r = p(r, i)), i = n(r, i), !f(i)) throw new Error("addImage does not support files of type '" + i + "', please ensure that a plugin for '" + i + "' support is added.");
    if ((null == (c = a) || 0 === c.length) && (a = function (t) {
      return "string" == typeof t || x(t) ? w(t) : null;
    }(r)), (s = g.call(this, a)) || (A() && (r instanceof Uint8Array || (u = r, r = S(r))), s = this["process" + i.toUpperCase()](r, h.call(this), a, function (e) {
      return e && "string" == typeof e && (e = e.toUpperCase()), e in t.image_compression ? e : y.NONE;
    }(o), u)), !s) throw new Error("An unknown error occurred whilst processing the image.");
    return s;
  },
      k = t.__addimage__.convertBase64ToBinaryString = function (t, e) {
    var r;
    e = "boolean" != typeof e || e;
    var n,
        i = "";

    if ("string" == typeof t) {
      n = null !== (r = L(t)) ? r.data : t;

      try {
        i = u(n);
      } catch (t) {
        if (e) throw N(n) ? new Error("atob-Error in jsPDF.convertBase64ToBinaryString " + t.message) : new Error("Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString ");
      }
    }

    return i;
  };

  t.getImageProperties = function (r) {
    var i,
        a,
        o = "";
    if (d(r) && (r = p(r)), "string" == typeof r && n(r) === e && ("" === (o = k(r, !1)) && (o = t.loadFile(r) || ""), r = o), a = n(r), !f(a)) throw new Error("addImage does not support files of type '" + a + "', please ensure that a plugin for '" + a + "' support is added.");
    if (!A() || r instanceof Uint8Array || (r = S(r)), !(i = this["process" + a.toUpperCase()](r))) throw new Error("An unknown error occurred whilst processing the image");
    return i.fileType = a, i;
  };
}(O.API),
/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = function (t) {
    if (void 0 !== t && "" != t) return !0;
  };

  O.API.events.push(["addPage", function (t) {
    this.internal.getPageInfo(t.pageNumber).pageContext.annotations = [];
  }]), t.events.push(["putPage", function (t) {
    for (var r, n, i, a = this.internal.getCoordinateString, o = this.internal.getVerticalCoordinateString, s = this.internal.getPageInfoByObjId(t.objId), u = t.pageContext.annotations, c = !1, l = 0; l < u.length && !c; l++) switch ((r = u[l]).type) {
      case "link":
        (e(r.options.url) || e(r.options.pageNumber)) && (c = !0);
        break;

      case "reference":
      case "text":
      case "freetext":
        c = !0;
    }

    if (0 != c) {
      this.internal.write("/Annots [");

      for (var h = 0; h < u.length; h++) {
        r = u[h];
        var f = this.internal.pdfEscape,
            d = this.internal.getEncryptor(t.objId);

        switch (r.type) {
          case "reference":
            this.internal.write(" " + r.object.objId + " 0 R ");
            break;

          case "text":
            var p = this.internal.newAdditionalObject(),
                g = this.internal.newAdditionalObject(),
                m = this.internal.getEncryptor(p.objId),
                v = r.title || "Note";
            i = "<</Type /Annot /Subtype /Text " + (n = "/Rect [" + a(r.bounds.x) + " " + o(r.bounds.y + r.bounds.h) + " " + a(r.bounds.x + r.bounds.w) + " " + o(r.bounds.y) + "] ") + "/Contents (" + f(m(r.contents)) + ")", i += " /Popup " + g.objId + " 0 R", i += " /P " + s.objId + " 0 R", i += " /T (" + f(m(v)) + ") >>", p.content = i;
            var b = p.objId + " 0 R";
            i = "<</Type /Annot /Subtype /Popup " + (n = "/Rect [" + a(r.bounds.x + 30) + " " + o(r.bounds.y + r.bounds.h) + " " + a(r.bounds.x + r.bounds.w + 30) + " " + o(r.bounds.y) + "] ") + " /Parent " + b, r.open && (i += " /Open true"), i += " >>", g.content = i, this.internal.write(p.objId, "0 R", g.objId, "0 R");
            break;

          case "freetext":
            n = "/Rect [" + a(r.bounds.x) + " " + o(r.bounds.y) + " " + a(r.bounds.x + r.bounds.w) + " " + o(r.bounds.y + r.bounds.h) + "] ";
            var y = r.color || "#000000";
            i = "<</Type /Annot /Subtype /FreeText " + n + "/Contents (" + f(d(r.contents)) + ")", i += " /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#" + y + ")", i += " /Border [0 0 0]", i += " >>", this.internal.write(i);
            break;

          case "link":
            if (r.options.name) {
              var w = this.annotations._nameMap[r.options.name];
              r.options.pageNumber = w.page, r.options.top = w.y;
            } else r.options.top || (r.options.top = 0);

            if (n = "/Rect [" + r.finalBounds.x + " " + r.finalBounds.y + " " + r.finalBounds.w + " " + r.finalBounds.h + "] ", i = "", r.options.url) i = "<</Type /Annot /Subtype /Link " + n + "/Border [0 0 0] /A <</S /URI /URI (" + f(d(r.options.url)) + ") >>";else if (r.options.pageNumber) {
              switch (i = "<</Type /Annot /Subtype /Link " + n + "/Border [0 0 0] /Dest [" + this.internal.getPageInfo(r.options.pageNumber).objId + " 0 R", r.options.magFactor = r.options.magFactor || "XYZ", r.options.magFactor) {
                case "Fit":
                  i += " /Fit]";
                  break;

                case "FitH":
                  i += " /FitH " + r.options.top + "]";
                  break;

                case "FitV":
                  r.options.left = r.options.left || 0, i += " /FitV " + r.options.left + "]";
                  break;

                case "XYZ":
                default:
                  var N = o(r.options.top);
                  r.options.left = r.options.left || 0, void 0 === r.options.zoom && (r.options.zoom = 0), i += " /XYZ " + r.options.left + " " + N + " " + r.options.zoom + "]";
              }
            }
            "" != i && (i += " >>", this.internal.write(i));
        }
      }

      this.internal.write("]");
    }
  }]), t.createAnnotation = function (t) {
    var e = this.internal.getCurrentPageInfo();

    switch (t.type) {
      case "link":
        this.link(t.bounds.x, t.bounds.y, t.bounds.w, t.bounds.h, t);
        break;

      case "text":
      case "freetext":
        e.pageContext.annotations.push(t);
    }
  }, t.link = function (t, e, r, n, i) {
    var a = this.internal.getCurrentPageInfo(),
        o = this.internal.getCoordinateString,
        s = this.internal.getVerticalCoordinateString;
    a.pageContext.annotations.push({
      finalBounds: {
        x: o(t),
        y: s(e),
        w: o(t + r),
        h: s(e + n)
      },
      options: i,
      type: "link"
    });
  }, t.textWithLink = function (t, e, r, n) {
    var i = this.getTextWidth(t),
        a = this.internal.getLineHeight() / this.internal.scaleFactor;
    return this.text(t, e, r, n), r += .2 * a, "center" === n.align && (e -= i / 2), "right" === n.align && (e -= i), this.link(e, r - a, i, a, n), i;
  }, t.getTextWidth = function (t) {
    var e = this.internal.getFontSize();
    return this.getStringUnitWidth(t) * e / this.internal.scaleFactor;
  };
}(O.API),
/**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = {
    1569: [65152],
    1570: [65153, 65154],
    1571: [65155, 65156],
    1572: [65157, 65158],
    1573: [65159, 65160],
    1574: [65161, 65162, 65163, 65164],
    1575: [65165, 65166],
    1576: [65167, 65168, 65169, 65170],
    1577: [65171, 65172],
    1578: [65173, 65174, 65175, 65176],
    1579: [65177, 65178, 65179, 65180],
    1580: [65181, 65182, 65183, 65184],
    1581: [65185, 65186, 65187, 65188],
    1582: [65189, 65190, 65191, 65192],
    1583: [65193, 65194],
    1584: [65195, 65196],
    1585: [65197, 65198],
    1586: [65199, 65200],
    1587: [65201, 65202, 65203, 65204],
    1588: [65205, 65206, 65207, 65208],
    1589: [65209, 65210, 65211, 65212],
    1590: [65213, 65214, 65215, 65216],
    1591: [65217, 65218, 65219, 65220],
    1592: [65221, 65222, 65223, 65224],
    1593: [65225, 65226, 65227, 65228],
    1594: [65229, 65230, 65231, 65232],
    1601: [65233, 65234, 65235, 65236],
    1602: [65237, 65238, 65239, 65240],
    1603: [65241, 65242, 65243, 65244],
    1604: [65245, 65246, 65247, 65248],
    1605: [65249, 65250, 65251, 65252],
    1606: [65253, 65254, 65255, 65256],
    1607: [65257, 65258, 65259, 65260],
    1608: [65261, 65262],
    1609: [65263, 65264, 64488, 64489],
    1610: [65265, 65266, 65267, 65268],
    1649: [64336, 64337],
    1655: [64477],
    1657: [64358, 64359, 64360, 64361],
    1658: [64350, 64351, 64352, 64353],
    1659: [64338, 64339, 64340, 64341],
    1662: [64342, 64343, 64344, 64345],
    1663: [64354, 64355, 64356, 64357],
    1664: [64346, 64347, 64348, 64349],
    1667: [64374, 64375, 64376, 64377],
    1668: [64370, 64371, 64372, 64373],
    1670: [64378, 64379, 64380, 64381],
    1671: [64382, 64383, 64384, 64385],
    1672: [64392, 64393],
    1676: [64388, 64389],
    1677: [64386, 64387],
    1678: [64390, 64391],
    1681: [64396, 64397],
    1688: [64394, 64395],
    1700: [64362, 64363, 64364, 64365],
    1702: [64366, 64367, 64368, 64369],
    1705: [64398, 64399, 64400, 64401],
    1709: [64467, 64468, 64469, 64470],
    1711: [64402, 64403, 64404, 64405],
    1713: [64410, 64411, 64412, 64413],
    1715: [64406, 64407, 64408, 64409],
    1722: [64414, 64415],
    1723: [64416, 64417, 64418, 64419],
    1726: [64426, 64427, 64428, 64429],
    1728: [64420, 64421],
    1729: [64422, 64423, 64424, 64425],
    1733: [64480, 64481],
    1734: [64473, 64474],
    1735: [64471, 64472],
    1736: [64475, 64476],
    1737: [64482, 64483],
    1739: [64478, 64479],
    1740: [64508, 64509, 64510, 64511],
    1744: [64484, 64485, 64486, 64487],
    1746: [64430, 64431],
    1747: [64432, 64433]
  },
      r = {
    65247: {
      65154: 65269,
      65156: 65271,
      65160: 65273,
      65166: 65275
    },
    65248: {
      65154: 65270,
      65156: 65272,
      65160: 65274,
      65166: 65276
    },
    65165: {
      65247: {
        65248: {
          65258: 65010
        }
      }
    },
    1617: {
      1612: 64606,
      1613: 64607,
      1614: 64608,
      1615: 64609,
      1616: 64610
    }
  },
      n = {
    1612: 64606,
    1613: 64607,
    1614: 64608,
    1615: 64609,
    1616: 64610
  },
      i = [1570, 1571, 1573, 1575];
  t.__arabicParser__ = {};

  var a = t.__arabicParser__.isInArabicSubstitutionA = function (t) {
    return void 0 !== e[t.charCodeAt(0)];
  },
      o = t.__arabicParser__.isArabicLetter = function (t) {
    return "string" == typeof t && /^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(t);
  },
      s = t.__arabicParser__.isArabicEndLetter = function (t) {
    return o(t) && a(t) && e[t.charCodeAt(0)].length <= 2;
  },
      u = t.__arabicParser__.isArabicAlfLetter = function (t) {
    return o(t) && i.indexOf(t.charCodeAt(0)) >= 0;
  };

  t.__arabicParser__.arabicLetterHasIsolatedForm = function (t) {
    return o(t) && a(t) && e[t.charCodeAt(0)].length >= 1;
  };

  var c = t.__arabicParser__.arabicLetterHasFinalForm = function (t) {
    return o(t) && a(t) && e[t.charCodeAt(0)].length >= 2;
  };

  t.__arabicParser__.arabicLetterHasInitialForm = function (t) {
    return o(t) && a(t) && e[t.charCodeAt(0)].length >= 3;
  };

  var l = t.__arabicParser__.arabicLetterHasMedialForm = function (t) {
    return o(t) && a(t) && 4 == e[t.charCodeAt(0)].length;
  },
      h = t.__arabicParser__.resolveLigatures = function (t) {
    var e = 0,
        n = r,
        i = "",
        a = 0;

    for (e = 0; e < t.length; e += 1) void 0 !== n[t.charCodeAt(e)] ? (a++, "number" == typeof (n = n[t.charCodeAt(e)]) && (i += String.fromCharCode(n), n = r, a = 0), e === t.length - 1 && (n = r, i += t.charAt(e - (a - 1)), e -= a - 1, a = 0)) : (n = r, i += t.charAt(e - a), e -= a, a = 0);

    return i;
  };

  t.__arabicParser__.isArabicDiacritic = function (t) {
    return void 0 !== t && void 0 !== n[t.charCodeAt(0)];
  };

  var f = t.__arabicParser__.getCorrectForm = function (t, e, r) {
    return o(t) ? !1 === a(t) ? -1 : !c(t) || !o(e) && !o(r) || !o(r) && s(e) || s(t) && !o(e) || s(t) && u(e) || s(t) && s(e) ? 0 : l(t) && o(e) && !s(e) && o(r) && c(r) ? 3 : s(t) || !o(r) ? 1 : 2 : -1;
  },
      d = function (t) {
    var r = 0,
        n = 0,
        i = 0,
        a = "",
        s = "",
        u = "",
        c = (t = t || "").split("\\s+"),
        l = [];

    for (r = 0; r < c.length; r += 1) {
      for (l.push(""), n = 0; n < c[r].length; n += 1) a = c[r][n], s = c[r][n - 1], u = c[r][n + 1], o(a) ? (i = f(a, s, u), l[r] += -1 !== i ? String.fromCharCode(e[a.charCodeAt(0)][i]) : a) : l[r] += a;

      l[r] = h(l[r]);
    }

    return l.join(" ");
  },
      p = t.__arabicParser__.processArabic = t.processArabic = function () {
    var t,
        e = "string" == typeof arguments[0] ? arguments[0] : arguments[0].text,
        r = [];

    if (Array.isArray(e)) {
      var n = 0;

      for (r = [], n = 0; n < e.length; n += 1) Array.isArray(e[n]) ? r.push([d(e[n][0]), e[n][1], e[n][2]]) : r.push([d(e[n])]);

      t = r;
    } else t = d(e);

    return "string" == typeof arguments[0] ? t : (arguments[0].text = t, arguments[0]);
  };

  t.events.push(["preProcessText", p]);
}(O.API), O.API.autoPrint = function (t) {
  var e;

  switch ((t = t || {}).variant = t.variant || "non-conform", t.variant) {
    case "javascript":
      this.addJS("print({});");
      break;

    case "non-conform":
    default:
      this.internal.events.subscribe("postPutResources", function () {
        e = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /Named"), this.internal.out("/Type /Action"), this.internal.out("/N /Print"), this.internal.out(">>"), this.internal.out("endobj");
      }), this.internal.events.subscribe("putCatalog", function () {
        this.internal.out("/OpenAction " + e + " 0 R");
      });
  }

  return this;
},
/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = function () {
    var t = void 0;
    Object.defineProperty(this, "pdf", {
      get: function () {
        return t;
      },
      set: function (e) {
        t = e;
      }
    });
    var e = 150;
    Object.defineProperty(this, "width", {
      get: function () {
        return e;
      },
      set: function (t) {
        e = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 150 : t, this.getContext("2d").pageWrapXEnabled && (this.getContext("2d").pageWrapX = e + 1);
      }
    });
    var r = 300;
    Object.defineProperty(this, "height", {
      get: function () {
        return r;
      },
      set: function (t) {
        r = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 300 : t, this.getContext("2d").pageWrapYEnabled && (this.getContext("2d").pageWrapY = r + 1);
      }
    });
    var n = [];
    Object.defineProperty(this, "childNodes", {
      get: function () {
        return n;
      },
      set: function (t) {
        n = t;
      }
    });
    var i = {};
    Object.defineProperty(this, "style", {
      get: function () {
        return i;
      },
      set: function (t) {
        i = t;
      }
    }), Object.defineProperty(this, "parentNode", {});
  };

  e.prototype.getContext = function (t, e) {
    var r;
    if ("2d" !== (t = t || "2d")) return null;

    for (r in e) this.pdf.context2d.hasOwnProperty(r) && (this.pdf.context2d[r] = e[r]);

    return this.pdf.context2d._canvas = this, this.pdf.context2d;
  }, e.prototype.toDataURL = function () {
    throw new Error("toDataURL is not implemented.");
  }, t.events.push(["initialized", function () {
    this.canvas = new e(), this.canvas.pdf = this;
  }]);
}(O.API),
/**
 * @license
 * ====================================================================
 * Copyright (c) 2013 Youssef Beddad, youssef.beddad@gmail.com
 *               2013 Eduardo Menezes de Morais, eduardo.morais@usp.br
 *               2013 Lee Driscoll, https://github.com/lsdriscoll
 *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
 *               2014 James Hall, james@parall.ax
 *               2014 Diego Casorran, https://github.com/diegocr
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
function (t) {
  var e = {
    left: 0,
    top: 0,
    bottom: 0,
    right: 0
  },
      r = !1,
      n = function () {
    void 0 === this.internal.__cell__ && (this.internal.__cell__ = {}, this.internal.__cell__.padding = 3, this.internal.__cell__.headerFunction = void 0, this.internal.__cell__.margins = Object.assign({}, e), this.internal.__cell__.margins.width = this.getPageWidth(), i.call(this));
  },
      i = function () {
    this.internal.__cell__.lastCell = new a(), this.internal.__cell__.pages = 1;
  },
      a = function () {
    var t = arguments[0];
    Object.defineProperty(this, "x", {
      enumerable: !0,
      get: function () {
        return t;
      },
      set: function (e) {
        t = e;
      }
    });
    var e = arguments[1];
    Object.defineProperty(this, "y", {
      enumerable: !0,
      get: function () {
        return e;
      },
      set: function (t) {
        e = t;
      }
    });
    var r = arguments[2];
    Object.defineProperty(this, "width", {
      enumerable: !0,
      get: function () {
        return r;
      },
      set: function (t) {
        r = t;
      }
    });
    var n = arguments[3];
    Object.defineProperty(this, "height", {
      enumerable: !0,
      get: function () {
        return n;
      },
      set: function (t) {
        n = t;
      }
    });
    var i = arguments[4];
    Object.defineProperty(this, "text", {
      enumerable: !0,
      get: function () {
        return i;
      },
      set: function (t) {
        i = t;
      }
    });
    var a = arguments[5];
    Object.defineProperty(this, "lineNumber", {
      enumerable: !0,
      get: function () {
        return a;
      },
      set: function (t) {
        a = t;
      }
    });
    var o = arguments[6];
    return Object.defineProperty(this, "align", {
      enumerable: !0,
      get: function () {
        return o;
      },
      set: function (t) {
        o = t;
      }
    }), this;
  };

  a.prototype.clone = function () {
    return new a(this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align);
  }, a.prototype.toArray = function () {
    return [this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align];
  }, t.setHeaderFunction = function (t) {
    return n.call(this), this.internal.__cell__.headerFunction = "function" == typeof t ? t : void 0, this;
  }, t.getTextDimensions = function (t, e) {
    n.call(this);
    var r = (e = e || {}).fontSize || this.getFontSize(),
        i = e.font || this.getFont(),
        a = e.scaleFactor || this.internal.scaleFactor,
        o = 0,
        s = 0,
        u = 0,
        c = this;

    if (!Array.isArray(t) && "string" != typeof t) {
      if ("number" != typeof t) throw new Error("getTextDimensions expects text-parameter to be of type String or type Number or an Array of Strings.");
      t = String(t);
    }

    const l = e.maxWidth;
    l > 0 ? "string" == typeof t ? t = this.splitTextToSize(t, l) : "[object Array]" === Object.prototype.toString.call(t) && (t = t.reduce(function (t, e) {
      return t.concat(c.splitTextToSize(e, l));
    }, [])) : t = Array.isArray(t) ? t : [t];

    for (var h = 0; h < t.length; h++) o < (u = this.getStringUnitWidth(t[h], {
      font: i
    }) * r) && (o = u);

    return 0 !== o && (s = t.length), {
      w: o /= a,
      h: Math.max((s * r * this.getLineHeightFactor() - r * (this.getLineHeightFactor() - 1)) / a, 0)
    };
  }, t.cellAddPage = function () {
    n.call(this), this.addPage();
    var t = this.internal.__cell__.margins || e;
    return this.internal.__cell__.lastCell = new a(t.left, t.top, void 0, void 0), this.internal.__cell__.pages += 1, this;
  };

  var o = t.cell = function () {
    var t;
    t = arguments[0] instanceof a ? arguments[0] : new a(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]), n.call(this);
    var i = this.internal.__cell__.lastCell,
        o = this.internal.__cell__.padding,
        s = this.internal.__cell__.margins || e,
        u = this.internal.__cell__.tableHeaderRow,
        c = this.internal.__cell__.printHeaders;
    return void 0 !== i.lineNumber && (i.lineNumber === t.lineNumber ? (t.x = (i.x || 0) + (i.width || 0), t.y = i.y || 0) : i.y + i.height + t.height + s.bottom > this.getPageHeight() ? (this.cellAddPage(), t.y = s.top, c && u && (this.printHeaderRow(t.lineNumber, !0), t.y += u[0].height)) : t.y = i.y + i.height || t.y), void 0 !== t.text[0] && (this.rect(t.x, t.y, t.width, t.height, !0 === r ? "FD" : void 0), "right" === t.align ? this.text(t.text, t.x + t.width - o, t.y + o, {
      align: "right",
      baseline: "top"
    }) : "center" === t.align ? this.text(t.text, t.x + t.width / 2, t.y + o, {
      align: "center",
      baseline: "top",
      maxWidth: t.width - o - o
    }) : this.text(t.text, t.x + o, t.y + o, {
      align: "left",
      baseline: "top",
      maxWidth: t.width - o - o
    })), this.internal.__cell__.lastCell = t, this;
  };

  t.table = function (t, r, u, c, l) {
    if (n.call(this), !u) throw new Error("No data for PDF table.");

    var h,
        f,
        d,
        p,
        g = [],
        m = [],
        v = [],
        b = {},
        y = {},
        w = [],
        N = [],
        L = (l = l || {}).autoSize || !1,
        A = !1 !== l.printHeaders,
        x = l.css && void 0 !== l.css["font-size"] ? 16 * l.css["font-size"] : l.fontSize || 12,
        S = l.margins || Object.assign({
      width: this.getPageWidth()
    }, e),
        _ = "number" == typeof l.padding ? l.padding : 3,
        P = l.headerBackgroundColor || "#c8c8c8";

    if (i.call(this), this.internal.__cell__.printHeaders = A, this.internal.__cell__.margins = S, this.internal.__cell__.table_font_size = x, this.internal.__cell__.padding = _, this.internal.__cell__.headerBackgroundColor = P, this.setFontSize(x), null == c) m = g = Object.keys(u[0]), v = g.map(function () {
      return "left";
    });else if (Array.isArray(c) && "object" == typeof c[0]) for (g = c.map(function (t) {
      return t.name;
    }), m = c.map(function (t) {
      return t.prompt || t.name || "";
    }), v = c.map(function (t) {
      return t.align || "left";
    }), h = 0; h < c.length; h += 1) y[c[h].name] = c[h].width * (19.049976 / 25.4);else Array.isArray(c) && "string" == typeof c[0] && (m = g = c, v = g.map(function () {
      return "left";
    }));
    if (L || Array.isArray(c) && "string" == typeof c[0]) for (h = 0; h < g.length; h += 1) {
      for (b[p = g[h]] = u.map(function (t) {
        return t[p];
      }), this.setFont(void 0, "bold"), w.push(this.getTextDimensions(m[h], {
        fontSize: this.internal.__cell__.table_font_size,
        scaleFactor: this.internal.scaleFactor
      }).w), f = b[p], this.setFont(void 0, "normal"), d = 0; d < f.length; d += 1) w.push(this.getTextDimensions(f[d], {
        fontSize: this.internal.__cell__.table_font_size,
        scaleFactor: this.internal.scaleFactor
      }).w);

      y[p] = Math.max.apply(null, w) + _ + _, w = [];
    }

    if (A) {
      var k = {};

      for (h = 0; h < g.length; h += 1) k[g[h]] = {}, k[g[h]].text = m[h], k[g[h]].align = v[h];

      var I = s.call(this, k, y);
      N = g.map(function (e) {
        return new a(t, r, y[e], I, k[e].text, void 0, k[e].align);
      }), this.setTableHeaderRow(N), this.printHeaderRow(1, !1);
    }

    var F = c.reduce(function (t, e) {
      return t[e.name] = e.align, t;
    }, {});

    for (h = 0; h < u.length; h += 1) {
      var C = s.call(this, u[h], y);

      for (d = 0; d < g.length; d += 1) o.call(this, new a(t, r, y[g[d]], C, u[h][g[d]], h + 2, F[g[d]]));
    }

    return this.internal.__cell__.table_x = t, this.internal.__cell__.table_y = r, this;
  };

  var s = function (t, e) {
    var r = this.internal.__cell__.padding,
        n = this.internal.__cell__.table_font_size,
        i = this.internal.scaleFactor;
    return Object.keys(t).map(function (n) {
      var i = t[n];
      return this.splitTextToSize(i.hasOwnProperty("text") ? i.text : i, e[n] - r - r);
    }, this).map(function (t) {
      return this.getLineHeightFactor() * t.length * n / i + r + r;
    }, this).reduce(function (t, e) {
      return Math.max(t, e);
    }, 0);
  };

  t.setTableHeaderRow = function (t) {
    n.call(this), this.internal.__cell__.tableHeaderRow = t;
  }, t.printHeaderRow = function (t, e) {
    if (n.call(this), !this.internal.__cell__.tableHeaderRow) throw new Error("Property tableHeaderRow does not exist.");
    var i;

    if (r = !0, "function" == typeof this.internal.__cell__.headerFunction) {
      var s = this.internal.__cell__.headerFunction(this, this.internal.__cell__.pages);

      this.internal.__cell__.lastCell = new a(s[0], s[1], s[2], s[3], void 0, -1);
    }

    this.setFont(void 0, "bold");

    for (var u = [], c = 0; c < this.internal.__cell__.tableHeaderRow.length; c += 1) i = this.internal.__cell__.tableHeaderRow[c].clone(), e && (i.y = this.internal.__cell__.margins.top || 0, u.push(i)), i.lineNumber = t, this.setFillColor(this.internal.__cell__.headerBackgroundColor), o.call(this, i);

    u.length > 0 && this.setTableHeaderRow(u), this.setFont(void 0, "normal"), r = !1;
  };
}(O.API);

var xt = {
  italic: ["italic", "oblique", "normal"],
  oblique: ["oblique", "italic", "normal"],
  normal: ["normal", "oblique", "italic"]
},
    St = ["ultra-condensed", "extra-condensed", "condensed", "semi-condensed", "normal", "semi-expanded", "expanded", "extra-expanded", "ultra-expanded"],
    _t = At(St),
    Pt = [100, 200, 300, 400, 500, 600, 700, 800, 900],
    kt = At(Pt);

function It(t) {
  var e = t.family.replace(/"|'/g, "").toLowerCase(),
      r = function (t) {
    return xt[t = t || "normal"] ? t : "normal";
  }(t.style),
      n = function (t) {
    if (!t) return 400;
    if ("number" == typeof t) return t >= 100 && t <= 900 && t % 100 == 0 ? t : 400;
    if (/^\d00$/.test(t)) return parseInt(t);

    switch (t) {
      case "bold":
        return 700;

      case "normal":
      default:
        return 400;
    }
  }(t.weight),
      i = function (t) {
    return "number" == typeof _t[t = t || "normal"] ? t : "normal";
  }(t.stretch);

  return {
    family: e,
    style: r,
    weight: n,
    stretch: i,
    src: t.src || [],
    ref: t.ref || {
      name: e,
      style: [i, r, n].join(" ")
    }
  };
}

function Ft(t, e, r, n) {
  var i;

  for (i = r; i >= 0 && i < e.length; i += n) if (t[e[i]]) return t[e[i]];

  for (i = r; i >= 0 && i < e.length; i -= n) if (t[e[i]]) return t[e[i]];
}

var Ct = {
  "sans-serif": "helvetica",
  fixed: "courier",
  monospace: "courier",
  terminal: "courier",
  cursive: "times",
  fantasy: "times",
  serif: "times"
},
    jt = {
  caption: "times",
  icon: "times",
  menu: "times",
  "message-box": "times",
  "small-caption": "times",
  "status-bar": "times"
};

function Ot(t) {
  return [t.stretch, t.style, t.weight, t.family].join(" ");
}

function Bt(t, e, r) {
  for (var n = (r = r || {}).defaultFontFamily || "times", i = Object.assign({}, Ct, r.genericFontFamilies || {}), a = null, o = null, s = 0; s < e.length; ++s) if (i[(a = It(e[s])).family] && (a.family = i[a.family]), t.hasOwnProperty(a.family)) {
    o = t[a.family];
    break;
  }

  if (!(o = o || t[n])) throw new Error("Could not find a font-family for the rule '" + Ot(a) + "' and default family '" + n + "'.");
  if (o = function (t, e) {
    if (e[t]) return e[t];
    var r = _t[t],
        n = r <= _t.normal ? -1 : 1,
        i = Ft(e, St, r, n);
    if (!i) throw new Error("Could not find a matching font-stretch value for " + t);
    return i;
  }(a.stretch, o), o = function (t, e) {
    if (e[t]) return e[t];

    for (var r = xt[t], n = 0; n < r.length; ++n) if (e[r[n]]) return e[r[n]];

    throw new Error("Could not find a matching font-style for " + t);
  }(a.style, o), !(o = function (t, e) {
    if (e[t]) return e[t];
    if (400 === t && e[500]) return e[500];
    if (500 === t && e[400]) return e[400];
    var r = kt[t],
        n = Ft(e, Pt, r, t < 400 ? -1 : 1);
    if (!n) throw new Error("Could not find a matching font-weight for value " + t);
    return n;
  }(a.weight, o))) throw new Error("Failed to resolve a font for the rule '" + Ot(a) + "'.");
  return o;
}

function Mt(t) {
  return t.trimLeft();
}

function Et(t, e) {
  for (var r = 0; r < t.length;) {
    if (t.charAt(r) === e) return [t.substring(0, r), t.substring(r + 1)];
    r += 1;
  }

  return null;
}

function qt(t) {
  var e = t.match(/^(-[a-z_]|[a-z_])[a-z0-9_-]*/i);
  return null === e ? null : [e[0], t.substring(e[0].length)];
}

var Rt,
    Tt,
    Dt,
    Ut = ["times"];
!function (t) {
  var e,
      r,
      n,
      a,
      o,
      s,
      u,
      c,
      l,
      f = function (t) {
    return t = t || {}, this.isStrokeTransparent = t.isStrokeTransparent || !1, this.strokeOpacity = t.strokeOpacity || 1, this.strokeStyle = t.strokeStyle || "#000000", this.fillStyle = t.fillStyle || "#000000", this.isFillTransparent = t.isFillTransparent || !1, this.fillOpacity = t.fillOpacity || 1, this.font = t.font || "10px sans-serif", this.textBaseline = t.textBaseline || "alphabetic", this.textAlign = t.textAlign || "left", this.lineWidth = t.lineWidth || 1, this.lineJoin = t.lineJoin || "miter", this.lineCap = t.lineCap || "butt", this.path = t.path || [], this.transform = void 0 !== t.transform ? t.transform.clone() : new c(), this.globalCompositeOperation = t.globalCompositeOperation || "normal", this.globalAlpha = t.globalAlpha || 1, this.clip_path = t.clip_path || [], this.currentPoint = t.currentPoint || new s(), this.miterLimit = t.miterLimit || 10, this.lastPoint = t.lastPoint || new s(), this.ignoreClearRect = "boolean" != typeof t.ignoreClearRect || t.ignoreClearRect, this;
  };

  t.events.push(["initialized", function () {
    this.context2d = new d(this), e = this.internal.f2, r = this.internal.getCoordinateString, n = this.internal.getVerticalCoordinateString, a = this.internal.getHorizontalCoordinate, o = this.internal.getVerticalCoordinate, s = this.internal.Point, u = this.internal.Rectangle, c = this.internal.Matrix, l = new f();
  }]);

  var d = function (t) {
    Object.defineProperty(this, "canvas", {
      get: function () {
        return {
          parentNode: !1,
          style: !1
        };
      }
    });
    var e = t;
    Object.defineProperty(this, "pdf", {
      get: function () {
        return e;
      }
    });
    var r = !1;
    Object.defineProperty(this, "pageWrapXEnabled", {
      get: function () {
        return r;
      },
      set: function (t) {
        r = Boolean(t);
      }
    });
    var n = !1;
    Object.defineProperty(this, "pageWrapYEnabled", {
      get: function () {
        return n;
      },
      set: function (t) {
        n = Boolean(t);
      }
    });
    var i = 0;
    Object.defineProperty(this, "posX", {
      get: function () {
        return i;
      },
      set: function (t) {
        isNaN(t) || (i = t);
      }
    });
    var a = 0;
    Object.defineProperty(this, "posY", {
      get: function () {
        return a;
      },
      set: function (t) {
        isNaN(t) || (a = t);
      }
    });
    var o = !1;
    Object.defineProperty(this, "autoPaging", {
      get: function () {
        return o;
      },
      set: function (t) {
        o = Boolean(t);
      }
    });
    var s = 0;
    Object.defineProperty(this, "lastBreak", {
      get: function () {
        return s;
      },
      set: function (t) {
        s = t;
      }
    });
    var u = [];
    Object.defineProperty(this, "pageBreaks", {
      get: function () {
        return u;
      },
      set: function (t) {
        u = t;
      }
    }), Object.defineProperty(this, "ctx", {
      get: function () {
        return l;
      },
      set: function (t) {
        t instanceof f && (l = t);
      }
    }), Object.defineProperty(this, "path", {
      get: function () {
        return l.path;
      },
      set: function (t) {
        l.path = t;
      }
    });
    var c = [];
    Object.defineProperty(this, "ctxStack", {
      get: function () {
        return c;
      },
      set: function (t) {
        c = t;
      }
    }), Object.defineProperty(this, "fillStyle", {
      get: function () {
        return this.ctx.fillStyle;
      },
      set: function (t) {
        var e;
        e = p(t), this.ctx.fillStyle = e.style, this.ctx.isFillTransparent = 0 === e.a, this.ctx.fillOpacity = e.a, this.pdf.setFillColor(e.r, e.g, e.b, {
          a: e.a
        }), this.pdf.setTextColor(e.r, e.g, e.b, {
          a: e.a
        });
      }
    }), Object.defineProperty(this, "strokeStyle", {
      get: function () {
        return this.ctx.strokeStyle;
      },
      set: function (t) {
        var e = p(t);
        this.ctx.strokeStyle = e.style, this.ctx.isStrokeTransparent = 0 === e.a, this.ctx.strokeOpacity = e.a, 0 === e.a ? this.pdf.setDrawColor(255, 255, 255) : (e.a, this.pdf.setDrawColor(e.r, e.g, e.b));
      }
    }), Object.defineProperty(this, "lineCap", {
      get: function () {
        return this.ctx.lineCap;
      },
      set: function (t) {
        -1 !== ["butt", "round", "square"].indexOf(t) && (this.ctx.lineCap = t, this.pdf.setLineCap(t));
      }
    }), Object.defineProperty(this, "lineWidth", {
      get: function () {
        return this.ctx.lineWidth;
      },
      set: function (t) {
        isNaN(t) || (this.ctx.lineWidth = t, this.pdf.setLineWidth(t));
      }
    }), Object.defineProperty(this, "lineJoin", {
      get: function () {
        return this.ctx.lineJoin;
      },
      set: function (t) {
        -1 !== ["bevel", "round", "miter"].indexOf(t) && (this.ctx.lineJoin = t, this.pdf.setLineJoin(t));
      }
    }), Object.defineProperty(this, "miterLimit", {
      get: function () {
        return this.ctx.miterLimit;
      },
      set: function (t) {
        isNaN(t) || (this.ctx.miterLimit = t, this.pdf.setMiterLimit(t));
      }
    }), Object.defineProperty(this, "textBaseline", {
      get: function () {
        return this.ctx.textBaseline;
      },
      set: function (t) {
        this.ctx.textBaseline = t;
      }
    }), Object.defineProperty(this, "textAlign", {
      get: function () {
        return this.ctx.textAlign;
      },
      set: function (t) {
        -1 !== ["right", "end", "center", "left", "start"].indexOf(t) && (this.ctx.textAlign = t);
      }
    });
    var h = null;

    function d(t, e) {
      if (null === h) {
        var r = function (t) {
          var e = [];
          return Object.keys(t).forEach(function (r) {
            t[r].forEach(function (t) {
              var n = null;

              switch (t) {
                case "bold":
                  n = {
                    family: r,
                    weight: "bold"
                  };
                  break;

                case "italic":
                  n = {
                    family: r,
                    style: "italic"
                  };
                  break;

                case "bolditalic":
                  n = {
                    family: r,
                    weight: "bold",
                    style: "italic"
                  };
                  break;

                case "":
                case "normal":
                  n = {
                    family: r
                  };
              }

              null !== n && (n.ref = {
                name: r,
                style: t
              }, e.push(n));
            });
          }), e;
        }(t.getFontList());

        h = function (t) {
          for (var e = {}, r = 0; r < t.length; ++r) {
            var n = It(t[r]),
                i = n.family,
                a = n.stretch,
                o = n.style,
                s = n.weight;
            e[i] = e[i] || {}, e[i][a] = e[i][a] || {}, e[i][a][o] = e[i][a][o] || {}, e[i][a][o][s] = n;
          }

          return e;
        }(r.concat(e));
      }

      return h;
    }

    var g = null;
    Object.defineProperty(this, "fontFaces", {
      get: function () {
        return g;
      },
      set: function (t) {
        h = null, g = t;
      }
    }), Object.defineProperty(this, "font", {
      get: function () {
        return this.ctx.font;
      },
      set: function (t) {
        var e;

        if (this.ctx.font = t, null !== (e = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i.exec(t))) {
          var r = e[1],
              n = (e[2], e[3]),
              i = e[4],
              a = (e[5], e[6]),
              o = /^([.\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i.exec(i)[2];
          i = "px" === o ? Math.floor(parseFloat(i) * this.pdf.internal.scaleFactor) : "em" === o ? Math.floor(parseFloat(i) * this.pdf.getFontSize()) : Math.floor(parseFloat(i) * this.pdf.internal.scaleFactor), this.pdf.setFontSize(i);

          var s = function (t) {
            var e,
                r,
                n = [],
                i = t.trim();
            if ("" === i) return Ut;
            if (i in jt) return [jt[i]];

            for (; "" !== i;) {
              switch (r = null, e = (i = Mt(i)).charAt(0)) {
                case '"':
                case "'":
                  r = Et(i.substring(1), e);
                  break;

                default:
                  r = qt(i);
              }

              if (null === r) return Ut;
              if (n.push(r[0]), "" !== (i = Mt(r[1])) && "," !== i.charAt(0)) return Ut;
              i = i.replace(/^,/, "");
            }

            return n;
          }(a);

          if (this.fontFaces) {
            var u = Bt(d(this.pdf, this.fontFaces), s.map(function (t) {
              return {
                family: t,
                stretch: "normal",
                weight: n,
                style: r
              };
            }));
            this.pdf.setFont(u.ref.name, u.ref.style);
          } else {
            var c = "";
            ("bold" === n || parseInt(n, 10) >= 700 || "bold" === r) && (c = "bold"), "italic" === r && (c += "italic"), 0 === c.length && (c = "normal");

            for (var l = "", h = {
              arial: "Helvetica",
              Arial: "Helvetica",
              verdana: "Helvetica",
              Verdana: "Helvetica",
              helvetica: "Helvetica",
              Helvetica: "Helvetica",
              "sans-serif": "Helvetica",
              fixed: "Courier",
              monospace: "Courier",
              terminal: "Courier",
              cursive: "Times",
              fantasy: "Times",
              serif: "Times"
            }, f = 0; f < s.length; f++) {
              if (void 0 !== this.pdf.internal.getFont(s[f], c, {
                noFallback: !0,
                disableWarning: !0
              })) {
                l = s[f];
                break;
              }

              if ("bolditalic" === c && void 0 !== this.pdf.internal.getFont(s[f], "bold", {
                noFallback: !0,
                disableWarning: !0
              })) l = s[f], c = "bold";else if (void 0 !== this.pdf.internal.getFont(s[f], "normal", {
                noFallback: !0,
                disableWarning: !0
              })) {
                l = s[f], c = "normal";
                break;
              }
            }

            if ("" === l) for (var p = 0; p < s.length; p++) if (h[s[p]]) {
              l = h[s[p]];
              break;
            }
            l = "" === l ? "Times" : l, this.pdf.setFont(l, c);
          }
        }
      }
    }), Object.defineProperty(this, "globalCompositeOperation", {
      get: function () {
        return this.ctx.globalCompositeOperation;
      },
      set: function (t) {
        this.ctx.globalCompositeOperation = t;
      }
    }), Object.defineProperty(this, "globalAlpha", {
      get: function () {
        return this.ctx.globalAlpha;
      },
      set: function (t) {
        this.ctx.globalAlpha = t;
      }
    }), Object.defineProperty(this, "ignoreClearRect", {
      get: function () {
        return this.ctx.ignoreClearRect;
      },
      set: function (t) {
        this.ctx.ignoreClearRect = Boolean(t);
      }
    });
  };

  d.prototype.fill = function () {
    N.call(this, "fill", !1);
  }, d.prototype.stroke = function () {
    N.call(this, "stroke", !1);
  }, d.prototype.beginPath = function () {
    this.path = [{
      type: "begin"
    }];
  }, d.prototype.moveTo = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw i.error("jsPDF.context2d.moveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.moveTo");
    var r = this.ctx.transform.applyToPoint(new s(t, e));
    this.path.push({
      type: "mt",
      x: r.x,
      y: r.y
    }), this.ctx.lastPoint = new s(t, e);
  }, d.prototype.closePath = function () {
    var t = new s(0, 0),
        e = 0;

    for (e = this.path.length - 1; -1 !== e; e--) if ("begin" === this.path[e].type && "object" == typeof this.path[e + 1] && "number" == typeof this.path[e + 1].x) {
      t = new s(this.path[e + 1].x, this.path[e + 1].y), this.path.push({
        type: "lt",
        x: t.x,
        y: t.y
      });
      break;
    }

    "object" == typeof this.path[e + 2] && "number" == typeof this.path[e + 2].x && this.path.push(JSON.parse(JSON.stringify(this.path[e + 2]))), this.path.push({
      type: "close"
    }), this.ctx.lastPoint = new s(t.x, t.y);
  }, d.prototype.lineTo = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw i.error("jsPDF.context2d.lineTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.lineTo");
    var r = this.ctx.transform.applyToPoint(new s(t, e));
    this.path.push({
      type: "lt",
      x: r.x,
      y: r.y
    }), this.ctx.lastPoint = new s(r.x, r.y);
  }, d.prototype.clip = function () {
    this.ctx.clip_path = JSON.parse(JSON.stringify(this.path)), N.call(this, null, !0);
  }, d.prototype.quadraticCurveTo = function (t, e, r, n) {
    if (isNaN(r) || isNaN(n) || isNaN(t) || isNaN(e)) throw i.error("jsPDF.context2d.quadraticCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.quadraticCurveTo");
    var a = this.ctx.transform.applyToPoint(new s(r, n)),
        o = this.ctx.transform.applyToPoint(new s(t, e));
    this.path.push({
      type: "qct",
      x1: o.x,
      y1: o.y,
      x: a.x,
      y: a.y
    }), this.ctx.lastPoint = new s(a.x, a.y);
  }, d.prototype.bezierCurveTo = function (t, e, r, n, a, o) {
    if (isNaN(a) || isNaN(o) || isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw i.error("jsPDF.context2d.bezierCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.bezierCurveTo");
    var u = this.ctx.transform.applyToPoint(new s(a, o)),
        c = this.ctx.transform.applyToPoint(new s(t, e)),
        l = this.ctx.transform.applyToPoint(new s(r, n));
    this.path.push({
      type: "bct",
      x1: c.x,
      y1: c.y,
      x2: l.x,
      y2: l.y,
      x: u.x,
      y: u.y
    }), this.ctx.lastPoint = new s(u.x, u.y);
  }, d.prototype.arc = function (t, e, r, n, a, o) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(a)) throw i.error("jsPDF.context2d.arc: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.arc");

    if (o = Boolean(o), !this.ctx.transform.isIdentity) {
      var u = this.ctx.transform.applyToPoint(new s(t, e));
      t = u.x, e = u.y;
      var c = this.ctx.transform.applyToPoint(new s(0, r)),
          l = this.ctx.transform.applyToPoint(new s(0, 0));
      r = Math.sqrt(Math.pow(c.x - l.x, 2) + Math.pow(c.y - l.y, 2));
    }

    Math.abs(a - n) >= 2 * Math.PI && (n = 0, a = 2 * Math.PI), this.path.push({
      type: "arc",
      x: t,
      y: e,
      radius: r,
      startAngle: n,
      endAngle: a,
      counterclockwise: o
    });
  }, d.prototype.arcTo = function (t, e, r, n, i) {
    throw new Error("arcTo not implemented.");
  }, d.prototype.rect = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw i.error("jsPDF.context2d.rect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rect");
    this.moveTo(t, e), this.lineTo(t + r, e), this.lineTo(t + r, e + n), this.lineTo(t, e + n), this.lineTo(t, e), this.lineTo(t + r, e), this.lineTo(t, e);
  }, d.prototype.fillRect = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw i.error("jsPDF.context2d.fillRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillRect");

    if (!g.call(this)) {
      var a = {};
      "butt" !== this.lineCap && (a.lineCap = this.lineCap, this.lineCap = "butt"), "miter" !== this.lineJoin && (a.lineJoin = this.lineJoin, this.lineJoin = "miter"), this.beginPath(), this.rect(t, e, r, n), this.fill(), a.hasOwnProperty("lineCap") && (this.lineCap = a.lineCap), a.hasOwnProperty("lineJoin") && (this.lineJoin = a.lineJoin);
    }
  }, d.prototype.strokeRect = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw i.error("jsPDF.context2d.strokeRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeRect");
    m.call(this) || (this.beginPath(), this.rect(t, e, r, n), this.stroke());
  }, d.prototype.clearRect = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw i.error("jsPDF.context2d.clearRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.clearRect");
    this.ignoreClearRect || (this.fillStyle = "#ffffff", this.fillRect(t, e, r, n));
  }, d.prototype.save = function (t) {
    t = "boolean" != typeof t || t;

    for (var e = this.pdf.internal.getCurrentPageInfo().pageNumber, r = 0; r < this.pdf.internal.getNumberOfPages(); r++) this.pdf.setPage(r + 1), this.pdf.internal.out("q");

    if (this.pdf.setPage(e), t) {
      this.ctx.fontSize = this.pdf.internal.getFontSize();
      var n = new f(this.ctx);
      this.ctxStack.push(this.ctx), this.ctx = n;
    }
  }, d.prototype.restore = function (t) {
    t = "boolean" != typeof t || t;

    for (var e = this.pdf.internal.getCurrentPageInfo().pageNumber, r = 0; r < this.pdf.internal.getNumberOfPages(); r++) this.pdf.setPage(r + 1), this.pdf.internal.out("Q");

    this.pdf.setPage(e), t && 0 !== this.ctxStack.length && (this.ctx = this.ctxStack.pop(), this.fillStyle = this.ctx.fillStyle, this.strokeStyle = this.ctx.strokeStyle, this.font = this.ctx.font, this.lineCap = this.ctx.lineCap, this.lineWidth = this.ctx.lineWidth, this.lineJoin = this.ctx.lineJoin);
  }, d.prototype.toDataURL = function () {
    throw new Error("toDataUrl not implemented.");
  };

  var p = function (t) {
    var e, r, n, i;
    if (!0 === t.isCanvasGradient && (t = t.getColor()), !t) return {
      r: 0,
      g: 0,
      b: 0,
      a: 0,
      style: t
    };
    if (/transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/.test(t)) e = 0, r = 0, n = 0, i = 0;else {
      var a = /rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t);
      if (null !== a) e = parseInt(a[1]), r = parseInt(a[2]), n = parseInt(a[3]), i = 1;else if (null !== (a = /rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)/.exec(t))) e = parseInt(a[1]), r = parseInt(a[2]), n = parseInt(a[3]), i = parseFloat(a[4]);else {
        if (i = 1, "string" == typeof t && "#" !== t.charAt(0)) {
          var o = new h(t);
          t = o.ok ? o.toHex() : "#000000";
        }

        4 === t.length ? (e = t.substring(1, 2), e += e, r = t.substring(2, 3), r += r, n = t.substring(3, 4), n += n) : (e = t.substring(1, 3), r = t.substring(3, 5), n = t.substring(5, 7)), e = parseInt(e, 16), r = parseInt(r, 16), n = parseInt(n, 16);
      }
    }
    return {
      r: e,
      g: r,
      b: n,
      a: i,
      style: t
    };
  },
      g = function () {
    return this.ctx.isFillTransparent || 0 == this.globalAlpha;
  },
      m = function () {
    return Boolean(this.ctx.isStrokeTransparent || 0 == this.globalAlpha);
  };

  d.prototype.fillText = function (t, e, r, n) {
    if (isNaN(e) || isNaN(r) || "string" != typeof t) throw i.error("jsPDF.context2d.fillText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillText");

    if (n = isNaN(n) ? void 0 : n, !g.call(this)) {
      r = A.call(this, r);
      var a = B(this.ctx.transform.rotation),
          o = this.ctx.transform.scaleX;
      k.call(this, {
        text: t,
        x: e,
        y: r,
        scale: o,
        angle: a,
        align: this.textAlign,
        maxWidth: n
      });
    }
  }, d.prototype.strokeText = function (t, e, r, n) {
    if (isNaN(e) || isNaN(r) || "string" != typeof t) throw i.error("jsPDF.context2d.strokeText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeText");

    if (!m.call(this)) {
      n = isNaN(n) ? void 0 : n, r = A.call(this, r);
      var a = B(this.ctx.transform.rotation),
          o = this.ctx.transform.scaleX;
      k.call(this, {
        text: t,
        x: e,
        y: r,
        scale: o,
        renderingMode: "stroke",
        angle: a,
        align: this.textAlign,
        maxWidth: n
      });
    }
  }, d.prototype.measureText = function (t) {
    if ("string" != typeof t) throw i.error("jsPDF.context2d.measureText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.measureText");

    var e = this.pdf,
        r = this.pdf.internal.scaleFactor,
        n = e.internal.getFontSize(),
        a = e.getStringUnitWidth(t) * n / e.internal.scaleFactor,
        o = function (t) {
      var e = (t = t || {}).width || 0;
      return Object.defineProperty(this, "width", {
        get: function () {
          return e;
        }
      }), this;
    };

    return new o({
      width: a *= Math.round(96 * r / 72 * 1e4) / 1e4
    });
  }, d.prototype.scale = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw i.error("jsPDF.context2d.scale: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.scale");
    var r = new c(t, 0, 0, e, 0, 0);
    this.ctx.transform = this.ctx.transform.multiply(r);
  }, d.prototype.rotate = function (t) {
    if (isNaN(t)) throw i.error("jsPDF.context2d.rotate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rotate");
    var e = new c(Math.cos(t), Math.sin(t), -Math.sin(t), Math.cos(t), 0, 0);
    this.ctx.transform = this.ctx.transform.multiply(e);
  }, d.prototype.translate = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw i.error("jsPDF.context2d.translate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.translate");
    var r = new c(1, 0, 0, 1, t, e);
    this.ctx.transform = this.ctx.transform.multiply(r);
  }, d.prototype.transform = function (t, e, r, n, a, o) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(a) || isNaN(o)) throw i.error("jsPDF.context2d.transform: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.transform");
    var s = new c(t, e, r, n, a, o);
    this.ctx.transform = this.ctx.transform.multiply(s);
  }, d.prototype.setTransform = function (t, e, r, n, i, a) {
    t = isNaN(t) ? 1 : t, e = isNaN(e) ? 0 : e, r = isNaN(r) ? 0 : r, n = isNaN(n) ? 1 : n, i = isNaN(i) ? 0 : i, a = isNaN(a) ? 0 : a, this.ctx.transform = new c(t, e, r, n, i, a);
  }, d.prototype.drawImage = function (t, e, r, n, i, a, o, s, l) {
    var h = this.pdf.getImageProperties(t),
        f = 1,
        d = 1,
        p = 1,
        g = 1;
    void 0 !== n && void 0 !== s && (p = s / n, g = l / i, f = h.width / n * s / n, d = h.height / i * l / i), void 0 === a && (a = e, o = r, e = 0, r = 0), void 0 !== n && void 0 === s && (s = n, l = i), void 0 === n && void 0 === s && (s = h.width, l = h.height);

    for (var m, b = this.ctx.transform.decompose(), N = B(b.rotate.shx), A = new c(), x = (A = (A = (A = A.multiply(b.translate)).multiply(b.skew)).multiply(b.scale)).applyToRectangle(new u(a - e * p, o - r * g, n * f, i * d)), S = v.call(this, x), _ = [], P = 0; P < S.length; P += 1) -1 === _.indexOf(S[P]) && _.push(S[P]);

    if (w(_), this.autoPaging) for (var k = _[0], I = _[_.length - 1], F = k; F < I + 1; F++) {
      if (this.pdf.setPage(F), 0 !== this.ctx.clip_path.length) {
        var C = this.path;
        m = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = y(m, this.posX, -1 * this.pdf.internal.pageSize.height * (F - 1) + this.posY), L.call(this, "fill", !0), this.path = C;
      }

      var j = JSON.parse(JSON.stringify(x));
      j = y([j], this.posX, -1 * this.pdf.internal.pageSize.height * (F - 1) + this.posY)[0], this.pdf.addImage(t, "JPEG", j.x, j.y, j.w, j.h, null, null, N);
    } else this.pdf.addImage(t, "JPEG", x.x, x.y, x.w, x.h, null, null, N);
  };

  var v = function (t, e, r) {
    var n = [];

    switch (e = e || this.pdf.internal.pageSize.width, r = r || this.pdf.internal.pageSize.height, t.type) {
      default:
      case "mt":
      case "lt":
        n.push(Math.floor((t.y + this.posY) / r) + 1);
        break;

      case "arc":
        n.push(Math.floor((t.y + this.posY - t.radius) / r) + 1), n.push(Math.floor((t.y + this.posY + t.radius) / r) + 1);
        break;

      case "qct":
        var i = M(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x, t.y);
        n.push(Math.floor(i.y / r) + 1), n.push(Math.floor((i.y + i.h) / r) + 1);
        break;

      case "bct":
        var a = E(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x2, t.y2, t.x, t.y);
        n.push(Math.floor(a.y / r) + 1), n.push(Math.floor((a.y + a.h) / r) + 1);
        break;

      case "rect":
        n.push(Math.floor((t.y + this.posY) / r) + 1), n.push(Math.floor((t.y + t.h + this.posY) / r) + 1);
    }

    for (var o = 0; o < n.length; o += 1) for (; this.pdf.internal.getNumberOfPages() < n[o];) b.call(this);

    return n;
  },
      b = function () {
    var t = this.fillStyle,
        e = this.strokeStyle,
        r = this.font,
        n = this.lineCap,
        i = this.lineWidth,
        a = this.lineJoin;
    this.pdf.addPage(), this.fillStyle = t, this.strokeStyle = e, this.font = r, this.lineCap = n, this.lineWidth = i, this.lineJoin = a;
  },
      y = function (t, e, r) {
    for (var n = 0; n < t.length; n++) switch (t[n].type) {
      case "bct":
        t[n].x2 += e, t[n].y2 += r;

      case "qct":
        t[n].x1 += e, t[n].y1 += r;

      case "mt":
      case "lt":
      case "arc":
      default:
        t[n].x += e, t[n].y += r;
    }

    return t;
  },
      w = function (t) {
    return t.sort(function (t, e) {
      return t - e;
    });
  },
      N = function (t, e) {
    for (var r, n, i = this.fillStyle, a = this.strokeStyle, o = this.lineCap, s = this.lineWidth, u = s * this.ctx.transform.scaleX, c = this.lineJoin, l = JSON.parse(JSON.stringify(this.path)), h = JSON.parse(JSON.stringify(this.path)), f = [], d = 0; d < h.length; d++) if (void 0 !== h[d].x) for (var p = v.call(this, h[d]), g = 0; g < p.length; g += 1) -1 === f.indexOf(p[g]) && f.push(p[g]);

    for (var m = 0; m < f.length; m++) for (; this.pdf.internal.getNumberOfPages() < f[m];) b.call(this);

    if (w(f), this.autoPaging) for (var N = f[0], A = f[f.length - 1], x = N; x < A + 1; x++) {
      if (this.pdf.setPage(x), this.fillStyle = i, this.strokeStyle = a, this.lineCap = o, this.lineWidth = u, this.lineJoin = c, 0 !== this.ctx.clip_path.length) {
        var S = this.path;
        r = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = y(r, this.posX, -1 * this.pdf.internal.pageSize.height * (x - 1) + this.posY), L.call(this, t, !0), this.path = S;
      }

      n = JSON.parse(JSON.stringify(l)), this.path = y(n, this.posX, -1 * this.pdf.internal.pageSize.height * (x - 1) + this.posY), !1 !== e && 0 !== x || L.call(this, t, e), this.lineWidth = s;
    } else this.lineWidth = u, L.call(this, t, e), this.lineWidth = s;
    this.path = l;
  },
      L = function (t, e) {
    if (("stroke" !== t || e || !m.call(this)) && ("stroke" === t || e || !g.call(this))) {
      for (var r, n, i = [], a = this.path, o = 0; o < a.length; o++) {
        var s = a[o];

        switch (s.type) {
          case "begin":
            i.push({
              begin: !0
            });
            break;

          case "close":
            i.push({
              close: !0
            });
            break;

          case "mt":
            i.push({
              start: s,
              deltas: [],
              abs: []
            });
            break;

          case "lt":
            var u = i.length;
            if (!isNaN(a[o - 1].x) && (r = [s.x - a[o - 1].x, s.y - a[o - 1].y], u > 0)) for (; u >= 0; u--) if (!0 !== i[u - 1].close && !0 !== i[u - 1].begin) {
              i[u - 1].deltas.push(r), i[u - 1].abs.push(s);
              break;
            }
            break;

          case "bct":
            r = [s.x1 - a[o - 1].x, s.y1 - a[o - 1].y, s.x2 - a[o - 1].x, s.y2 - a[o - 1].y, s.x - a[o - 1].x, s.y - a[o - 1].y], i[i.length - 1].deltas.push(r);
            break;

          case "qct":
            var c = a[o - 1].x + 2 / 3 * (s.x1 - a[o - 1].x),
                l = a[o - 1].y + 2 / 3 * (s.y1 - a[o - 1].y),
                h = s.x + 2 / 3 * (s.x1 - s.x),
                f = s.y + 2 / 3 * (s.y1 - s.y),
                d = s.x,
                p = s.y;
            r = [c - a[o - 1].x, l - a[o - 1].y, h - a[o - 1].x, f - a[o - 1].y, d - a[o - 1].x, p - a[o - 1].y], i[i.length - 1].deltas.push(r);
            break;

          case "arc":
            i.push({
              deltas: [],
              abs: [],
              arc: !0
            }), Array.isArray(i[i.length - 1].abs) && i[i.length - 1].abs.push(s);
        }
      }

      n = e ? null : "stroke" === t ? "stroke" : "fill";

      for (var v = 0; v < i.length; v++) {
        if (i[v].arc) {
          for (var b = i[v].abs, y = 0; y < b.length; y++) {
            var w = b[y];
            "arc" === w.type ? x.call(this, w.x, w.y, w.radius, w.startAngle, w.endAngle, w.counterclockwise, void 0, e) : I.call(this, w.x, w.y);
          }

          S.call(this, n), this.pdf.internal.out("h");
        }

        if (!i[v].arc && !0 !== i[v].close && !0 !== i[v].begin) {
          var N = i[v].start.x,
              L = i[v].start.y;
          F.call(this, i[v].deltas, N, L);
        }
      }

      n && S.call(this, n), e && _.call(this);
    }
  },
      A = function (t) {
    var e = this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor,
        r = e * (this.pdf.internal.getLineHeightFactor() - 1);

    switch (this.ctx.textBaseline) {
      case "bottom":
        return t - r;

      case "top":
        return t + e - r;

      case "hanging":
        return t + e - 2 * r;

      case "middle":
        return t + e / 2 - r;

      case "ideographic":
        return t;

      case "alphabetic":
      default:
        return t;
    }
  };

  d.prototype.createLinearGradient = function () {
    var t = function () {};

    return t.colorStops = [], t.addColorStop = function (t, e) {
      this.colorStops.push([t, e]);
    }, t.getColor = function () {
      return 0 === this.colorStops.length ? "#000000" : this.colorStops[0][1];
    }, t.isCanvasGradient = !0, t;
  }, d.prototype.createPattern = function () {
    return this.createLinearGradient();
  }, d.prototype.createRadialGradient = function () {
    return this.createLinearGradient();
  };

  var x = function (t, e, r, n, i, a, o, s) {
    for (var u = j.call(this, r, n, i, a), c = 0; c < u.length; c++) {
      var l = u[c];
      0 === c && P.call(this, l.x1 + t, l.y1 + e), C.call(this, t, e, l.x2, l.y2, l.x3, l.y3, l.x4, l.y4);
    }

    s ? _.call(this) : S.call(this, o);
  },
      S = function (t) {
    switch (t) {
      case "stroke":
        this.pdf.internal.out("S");
        break;

      case "fill":
        this.pdf.internal.out("f");
    }
  },
      _ = function () {
    this.pdf.clip(), this.pdf.discardPath();
  },
      P = function (t, e) {
    this.pdf.internal.out(r(t) + " " + n(e) + " m");
  },
      k = function (t) {
    var e;

    switch (t.align) {
      case "right":
      case "end":
        e = "right";
        break;

      case "center":
        e = "center";
        break;

      case "left":
      case "start":
      default:
        e = "left";
    }

    var r = this.ctx.transform.applyToPoint(new s(t.x, t.y)),
        n = this.ctx.transform.decompose(),
        i = new c();
    i = (i = (i = i.multiply(n.translate)).multiply(n.skew)).multiply(n.scale);

    for (var a, o, l, h = this.pdf.getTextDimensions(t.text), f = this.ctx.transform.applyToRectangle(new u(t.x, t.y, h.w, h.h)), d = i.applyToRectangle(new u(t.x, t.y - h.h, h.w, h.h)), p = v.call(this, d), g = [], m = 0; m < p.length; m += 1) -1 === g.indexOf(p[m]) && g.push(p[m]);

    if (w(g), !0 === this.autoPaging) for (var b = g[0], N = g[g.length - 1], A = b; A < N + 1; A++) {
      if (this.pdf.setPage(A), 0 !== this.ctx.clip_path.length) {
        var x = this.path;
        a = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = y(a, this.posX, -1 * this.pdf.internal.pageSize.height * (A - 1) + this.posY), L.call(this, "fill", !0), this.path = x;
      }

      var S = JSON.parse(JSON.stringify(f));
      S = y([S], this.posX, -1 * this.pdf.internal.pageSize.height * (A - 1) + this.posY)[0], t.scale >= .01 && (o = this.pdf.internal.getFontSize(), this.pdf.setFontSize(o * t.scale), l = this.lineWidth, this.lineWidth = l * t.scale), this.pdf.text(t.text, S.x, S.y, {
        angle: t.angle,
        align: e,
        renderingMode: t.renderingMode,
        maxWidth: t.maxWidth
      }), t.scale >= .01 && (this.pdf.setFontSize(o), this.lineWidth = l);
    } else t.scale >= .01 && (o = this.pdf.internal.getFontSize(), this.pdf.setFontSize(o * t.scale), l = this.lineWidth, this.lineWidth = l * t.scale), this.pdf.text(t.text, r.x + this.posX, r.y + this.posY, {
      angle: t.angle,
      align: e,
      renderingMode: t.renderingMode,
      maxWidth: t.maxWidth
    }), t.scale >= .01 && (this.pdf.setFontSize(o), this.lineWidth = l);
  },
      I = function (t, e, i, a) {
    i = i || 0, a = a || 0, this.pdf.internal.out(r(t + i) + " " + n(e + a) + " l");
  },
      F = function (t, e, r) {
    return this.pdf.lines(t, e, r, null, null);
  },
      C = function (t, r, n, i, s, u, c, l) {
    this.pdf.internal.out([e(a(n + t)), e(o(i + r)), e(a(s + t)), e(o(u + r)), e(a(c + t)), e(o(l + r)), "c"].join(" "));
  },
      j = function (t, e, r, n) {
    for (var i = 2 * Math.PI, a = Math.PI / 2; e > r;) e -= i;

    var o = Math.abs(r - e);
    o < i && n && (o = i - o);

    for (var s = [], u = n ? -1 : 1, c = e; o > 1e-5;) {
      var l = c + u * Math.min(o, a);
      s.push(O.call(this, t, c, l)), o -= Math.abs(l - c), c = l;
    }

    return s;
  },
      O = function (t, e, r) {
    var n = (r - e) / 2,
        i = t * Math.cos(n),
        a = t * Math.sin(n),
        o = i,
        s = -a,
        u = o * o + s * s,
        c = u + o * i + s * a,
        l = 4 / 3 * (Math.sqrt(2 * u * c) - c) / (o * a - s * i),
        h = o - l * s,
        f = s + l * o,
        d = h,
        p = -f,
        g = n + e,
        m = Math.cos(g),
        v = Math.sin(g);
    return {
      x1: t * Math.cos(e),
      y1: t * Math.sin(e),
      x2: h * m - f * v,
      y2: h * v + f * m,
      x3: d * m - p * v,
      y3: d * v + p * m,
      x4: t * Math.cos(r),
      y4: t * Math.sin(r)
    };
  },
      B = function (t) {
    return 180 * t / Math.PI;
  },
      M = function (t, e, r, n, i, a) {
    var o = t + .5 * (r - t),
        s = e + .5 * (n - e),
        c = i + .5 * (r - i),
        l = a + .5 * (n - a),
        h = Math.min(t, i, o, c),
        f = Math.max(t, i, o, c),
        d = Math.min(e, a, s, l),
        p = Math.max(e, a, s, l);
    return new u(h, d, f - h, p - d);
  },
      E = function (t, e, r, n, i, a, o, s) {
    var c,
        l,
        h,
        f,
        d,
        p,
        g,
        m,
        v,
        b,
        y,
        w,
        N,
        L,
        A = r - t,
        x = n - e,
        S = i - r,
        _ = a - n,
        P = o - i,
        k = s - a;

    for (l = 0; l < 41; l++) v = (g = (h = t + (c = l / 40) * A) + c * ((d = r + c * S) - h)) + c * (d + c * (i + c * P - d) - g), b = (m = (f = e + c * x) + c * ((p = n + c * _) - f)) + c * (p + c * (a + c * k - p) - m), 0 == l ? (y = v, w = b, N = v, L = b) : (y = Math.min(y, v), w = Math.min(w, b), N = Math.max(N, v), L = Math.max(L, b));

    return new u(Math.round(y), Math.round(w), Math.round(N - y), Math.round(L - w));
  };
}(O.API),
/**
 * @license
 * jsPDF filters PlugIn
 * Copyright (c) 2014 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (e) {
  var r = function (t) {
    var e, r, n, i, a, o, s, u, c, l;

    for (/[^\x00-\xFF]/.test(t), r = [], n = 0, i = (t += e = "\0\0\0\0".slice(t.length % 4 || 4)).length; i > n; n += 4) 0 !== (a = (t.charCodeAt(n) << 24) + (t.charCodeAt(n + 1) << 16) + (t.charCodeAt(n + 2) << 8) + t.charCodeAt(n + 3)) ? (o = (a = ((a = ((a = ((a = (a - (l = a % 85)) / 85) - (c = a % 85)) / 85) - (u = a % 85)) / 85) - (s = a % 85)) / 85) % 85, r.push(o + 33, s + 33, u + 33, c + 33, l + 33)) : r.push(122);

    return function (t, e) {
      for (var r = e; r > 0; r--) t.pop();
    }(r, e.length), String.fromCharCode.apply(String, r) + "~>";
  },
      n = function (t) {
    var e,
        r,
        n,
        i,
        a,
        o = String,
        s = "length",
        u = 255,
        c = "charCodeAt",
        l = "slice",
        h = "replace";

    for (t[l](-2), t = t[l](0, -2)[h](/\s/g, "")[h]("z", "!!!!!"), n = [], i = 0, a = (t += e = "uuuuu"[l](t[s] % 5 || 5))[s]; a > i; i += 5) r = 52200625 * (t[c](i) - 33) + 614125 * (t[c](i + 1) - 33) + 7225 * (t[c](i + 2) - 33) + 85 * (t[c](i + 3) - 33) + (t[c](i + 4) - 33), n.push(u & r >> 24, u & r >> 16, u & r >> 8, u & r);

    return function (t, e) {
      for (var r = e; r > 0; r--) t.pop();
    }(n, e[s]), o.fromCharCode.apply(o, n);
  },
      i = function (t) {
    var e = new RegExp(/^([0-9A-Fa-f]{2})+$/);
    if (-1 !== (t = t.replace(/\s/g, "")).indexOf(">") && (t = t.substr(0, t.indexOf(">"))), t.length % 2 && (t += "0"), !1 === e.test(t)) return "";

    for (var r = "", n = 0; n < t.length; n += 2) r += String.fromCharCode("0x" + (t[n] + t[n + 1]));

    return r;
  },
      a = function (e) {
    for (var r = new Uint8Array(e.length), n = e.length; n--;) r[n] = e.charCodeAt(n);

    return e = (r = (0, _fflate.zlibSync)(r)).reduce(function (t, e) {
      return t + String.fromCharCode(e);
    }, "");
  };

  e.processDataByFilters = function (t, e) {
    var o = 0,
        s = t || "",
        u = [];

    for ("string" == typeof (e = e || []) && (e = [e]), o = 0; o < e.length; o += 1) switch (e[o]) {
      case "ASCII85Decode":
      case "/ASCII85Decode":
        s = n(s), u.push("/ASCII85Encode");
        break;

      case "ASCII85Encode":
      case "/ASCII85Encode":
        s = r(s), u.push("/ASCII85Decode");
        break;

      case "ASCIIHexDecode":
      case "/ASCIIHexDecode":
        s = i(s), u.push("/ASCIIHexEncode");
        break;

      case "ASCIIHexEncode":
      case "/ASCIIHexEncode":
        s = s.split("").map(function (t) {
          return ("0" + t.charCodeAt().toString(16)).slice(-2);
        }).join("") + ">", u.push("/ASCIIHexDecode");
        break;

      case "FlateEncode":
      case "/FlateEncode":
        s = a(s), u.push("/FlateDecode");
        break;

      default:
        throw new Error('The filter: "' + e[o] + '" is not implemented');
    }

    return {
      data: s,
      reverseChain: u.reverse().join(" ")
    };
  };
}(O.API),
/**
 * @license
 * jsPDF fileloading PlugIn
 * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  t.loadFile = function (t, e, r) {
    return function (t, e, r) {
      e = !1 !== e, r = "function" == typeof r ? r : function () {};
      var n = void 0;

      try {
        n = function (t, e, r) {
          var n = new XMLHttpRequest(),
              i = 0,
              a = function (t) {
            var e = t.length,
                r = [],
                n = String.fromCharCode;

            for (i = 0; i < e; i += 1) r.push(n(255 & t.charCodeAt(i)));

            return r.join("");
          };

          if (n.open("GET", t, !e), n.overrideMimeType("text/plain; charset=x-user-defined"), !1 === e && (n.onload = function () {
            200 === n.status ? r(a(this.responseText)) : r(void 0);
          }), n.send(null), e && 200 === n.status) return a(n.responseText);
        }(t, e, r);
      } catch (t) {}

      return n;
    }(t, e, r);
  }, t.loadImageFile = t.loadFile;
}(O.API),
/**
 * @license
 * Copyright (c) 2018 Erik Koopmans
 * Released under the MIT License.
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  function e() {
    return (r.html2canvas ? Promise.resolve(r.html2canvas) : require("_bundle_loader")(require.resolve("html2canvas"))).catch(function (t) {
      return Promise.reject(new Error("Could not load html2canvas: " + t));
    }).then(function (t) {
      return t.default ? t.default : t;
    });
  }

  function n() {
    return (r.DOMPurify ? Promise.resolve(r.DOMPurify) : require("_bundle_loader")(require.resolve("dompurify"))).catch(function (t) {
      return Promise.reject(new Error("Could not load dompurify: " + t));
    }).then(function (t) {
      return t.default ? t.default : t;
    });
  }

  var i = function (t) {
    var e = typeof t;
    return "undefined" === e ? "undefined" : "string" === e || t instanceof String ? "string" : "number" === e || t instanceof Number ? "number" : "function" === e || t instanceof Function ? "function" : t && t.constructor === Array ? "array" : t && 1 === t.nodeType ? "element" : "object" === e ? "object" : "unknown";
  },
      a = function (t, e) {
    var r = document.createElement(t);

    for (var n in e.className && (r.className = e.className), e.innerHTML && e.dompurify && (r.innerHTML = e.dompurify.sanitize(e.innerHTML)), e.style) r.style[n] = e.style[n];

    return r;
  },
      o = function (t, e) {
    for (var r = 3 === t.nodeType ? document.createTextNode(t.nodeValue) : t.cloneNode(!1), n = t.firstChild; n; n = n.nextSibling) !0 !== e && 1 === n.nodeType && "SCRIPT" === n.nodeName || r.appendChild(o(n, e));

    return 1 === t.nodeType && ("CANVAS" === t.nodeName ? (r.width = t.width, r.height = t.height, r.getContext("2d").drawImage(t, 0, 0)) : "TEXTAREA" !== t.nodeName && "SELECT" !== t.nodeName || (r.value = t.value), r.addEventListener("load", function () {
      r.scrollTop = t.scrollTop, r.scrollLeft = t.scrollLeft;
    }, !0)), r;
  },
      s = function t(e) {
    var r = Object.assign(t.convert(Promise.resolve()), JSON.parse(JSON.stringify(t.template))),
        n = t.convert(Promise.resolve(), r);
    return n = (n = n.setProgress(1, t, 1, [t])).set(e);
  };

  (s.prototype = Object.create(Promise.prototype)).constructor = s, s.convert = function (t, e) {
    return t.__proto__ = e || s.prototype, t;
  }, s.template = {
    prop: {
      src: null,
      container: null,
      overlay: null,
      canvas: null,
      img: null,
      pdf: null,
      pageSize: null,
      callback: function () {}
    },
    progress: {
      val: 0,
      state: null,
      n: 0,
      stack: []
    },
    opt: {
      filename: "file.pdf",
      margin: [0, 0, 0, 0],
      enableLinks: !0,
      x: 0,
      y: 0,
      html2canvas: {},
      jsPDF: {},
      backgroundColor: "transparent"
    }
  }, s.prototype.from = function (t, e) {
    return this.then(function () {
      switch (e = e || function (t) {
        switch (i(t)) {
          case "string":
            return "string";

          case "element":
            return "canvas" === t.nodeName.toLowerCase() ? "canvas" : "element";

          default:
            return "unknown";
        }
      }(t)) {
        case "string":
          return this.then(n).then(function (e) {
            return this.set({
              src: a("div", {
                innerHTML: t,
                dompurify: e
              })
            });
          });

        case "element":
          return this.set({
            src: t
          });

        case "canvas":
          return this.set({
            canvas: t
          });

        case "img":
          return this.set({
            img: t
          });

        default:
          return this.error("Unknown source type.");
      }
    });
  }, s.prototype.to = function (t) {
    switch (t) {
      case "container":
        return this.toContainer();

      case "canvas":
        return this.toCanvas();

      case "img":
        return this.toImg();

      case "pdf":
        return this.toPdf();

      default:
        return this.error("Invalid target.");
    }
  }, s.prototype.toContainer = function () {
    return this.thenList([function () {
      return this.prop.src || this.error("Cannot duplicate - no source HTML.");
    }, function () {
      return this.prop.pageSize || this.setPageSize();
    }]).then(function () {
      var t = {
        position: "relative",
        display: "inline-block",
        width: Math.max(this.prop.src.clientWidth, this.prop.src.scrollWidth, this.prop.src.offsetWidth) + "px",
        left: 0,
        right: 0,
        top: 0,
        margin: "auto",
        backgroundColor: this.opt.backgroundColor
      },
          e = o(this.prop.src, this.opt.html2canvas.javascriptEnabled);
      "BODY" === e.tagName && (t.height = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight) + "px"), this.prop.overlay = a("div", {
        className: "html2pdf__overlay",
        style: {
          position: "fixed",
          overflow: "hidden",
          zIndex: 1e3,
          left: "-100000px",
          right: 0,
          bottom: 0,
          top: 0
        }
      }), this.prop.container = a("div", {
        className: "html2pdf__container",
        style: t
      }), this.prop.container.appendChild(e), this.prop.container.firstChild.appendChild(a("div", {
        style: {
          clear: "both",
          border: "0 none transparent",
          margin: 0,
          padding: 0,
          height: 0
        }
      })), this.prop.container.style.float = "none", this.prop.overlay.appendChild(this.prop.container), document.body.appendChild(this.prop.overlay), this.prop.container.firstChild.style.position = "relative", this.prop.container.height = Math.max(this.prop.container.firstChild.clientHeight, this.prop.container.firstChild.scrollHeight, this.prop.container.firstChild.offsetHeight) + "px";
    });
  }, s.prototype.toCanvas = function () {
    var t = [function () {
      return document.body.contains(this.prop.container) || this.toContainer();
    }];
    return this.thenList(t).then(e).then(function (t) {
      var e = Object.assign({}, this.opt.html2canvas);
      return delete e.onrendered, t(this.prop.container, e);
    }).then(function (t) {
      (this.opt.html2canvas.onrendered || function () {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);
    });
  }, s.prototype.toContext2d = function () {
    var t = [function () {
      return document.body.contains(this.prop.container) || this.toContainer();
    }];
    return this.thenList(t).then(e).then(function (t) {
      var e = this.opt.jsPDF,
          r = this.opt.fontFaces,
          n = Object.assign({
        async: !0,
        allowTaint: !0,
        scale: 1,
        scrollX: this.opt.scrollX || 0,
        scrollY: this.opt.scrollY || 0,
        backgroundColor: "#ffffff",
        imageTimeout: 15e3,
        logging: !0,
        proxy: null,
        removeContainer: !0,
        foreignObjectRendering: !1,
        useCORS: !1
      }, this.opt.html2canvas);
      if (delete n.onrendered, e.context2d.autoPaging = !0, e.context2d.posX = this.opt.x, e.context2d.posY = this.opt.y, e.context2d.fontFaces = r, r) for (var i = 0; i < r.length; ++i) {
        var a = r[i],
            o = a.src.find(function (t) {
          return "truetype" === t.format;
        });
        o && e.addFont(o.url, a.ref.name, a.ref.style);
      }
      return n.windowHeight = n.windowHeight || 0, n.windowHeight = 0 == n.windowHeight ? Math.max(this.prop.container.clientHeight, this.prop.container.scrollHeight, this.prop.container.offsetHeight) : n.windowHeight, t(this.prop.container, n);
    }).then(function (t) {
      (this.opt.html2canvas.onrendered || function () {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);
    });
  }, s.prototype.toImg = function () {
    return this.thenList([function () {
      return this.prop.canvas || this.toCanvas();
    }]).then(function () {
      var t = this.prop.canvas.toDataURL("image/" + this.opt.image.type, this.opt.image.quality);
      this.prop.img = document.createElement("img"), this.prop.img.src = t;
    });
  }, s.prototype.toPdf = function () {
    return this.thenList([function () {
      return this.toContext2d();
    }]).then(function () {
      this.prop.pdf = this.prop.pdf || this.opt.jsPDF;
    });
  }, s.prototype.output = function (t, e, r) {
    return "img" === (r = r || "pdf").toLowerCase() || "image" === r.toLowerCase() ? this.outputImg(t, e) : this.outputPdf(t, e);
  }, s.prototype.outputPdf = function (t, e) {
    return this.thenList([function () {
      return this.prop.pdf || this.toPdf();
    }]).then(function () {
      return this.prop.pdf.output(t, e);
    });
  }, s.prototype.outputImg = function (t) {
    return this.thenList([function () {
      return this.prop.img || this.toImg();
    }]).then(function () {
      switch (t) {
        case void 0:
        case "img":
          return this.prop.img;

        case "datauristring":
        case "dataurlstring":
          return this.prop.img.src;

        case "datauri":
        case "dataurl":
          return document.location.href = this.prop.img.src;

        default:
          throw 'Image output type "' + t + '" is not supported.';
      }
    });
  }, s.prototype.save = function (t) {
    return this.thenList([function () {
      return this.prop.pdf || this.toPdf();
    }]).set(t ? {
      filename: t
    } : null).then(function () {
      this.prop.pdf.save(this.opt.filename);
    });
  }, s.prototype.doCallback = function () {
    return this.thenList([function () {
      return this.prop.pdf || this.toPdf();
    }]).then(function () {
      this.prop.callback(this.prop.pdf);
    });
  }, s.prototype.set = function (t) {
    if ("object" !== i(t)) return this;
    var e = Object.keys(t || {}).map(function (e) {
      if (e in s.template.prop) return function () {
        this.prop[e] = t[e];
      };

      switch (e) {
        case "margin":
          return this.setMargin.bind(this, t.margin);

        case "jsPDF":
          return function () {
            return this.opt.jsPDF = t.jsPDF, this.setPageSize();
          };

        case "pageSize":
          return this.setPageSize.bind(this, t.pageSize);

        default:
          return function () {
            this.opt[e] = t[e];
          };
      }
    }, this);
    return this.then(function () {
      return this.thenList(e);
    });
  }, s.prototype.get = function (t, e) {
    return this.then(function () {
      var r = t in s.template.prop ? this.prop[t] : this.opt[t];
      return e ? e(r) : r;
    });
  }, s.prototype.setMargin = function (t) {
    return this.then(function () {
      switch (i(t)) {
        case "number":
          t = [t, t, t, t];

        case "array":
          if (2 === t.length && (t = [t[0], t[1], t[0], t[1]]), 4 === t.length) break;

        default:
          return this.error("Invalid margin array.");
      }

      this.opt.margin = t;
    }).then(this.setPageSize);
  }, s.prototype.setPageSize = function (t) {
    function e(t, e) {
      return Math.floor(t * e / 72 * 96);
    }

    return this.then(function () {
      (t = t || O.getPageSize(this.opt.jsPDF)).hasOwnProperty("inner") || (t.inner = {
        width: t.width - this.opt.margin[1] - this.opt.margin[3],
        height: t.height - this.opt.margin[0] - this.opt.margin[2]
      }, t.inner.px = {
        width: e(t.inner.width, t.k),
        height: e(t.inner.height, t.k)
      }, t.inner.ratio = t.inner.height / t.inner.width), this.prop.pageSize = t;
    });
  }, s.prototype.setProgress = function (t, e, r, n) {
    return null != t && (this.progress.val = t), null != e && (this.progress.state = e), null != r && (this.progress.n = r), null != n && (this.progress.stack = n), this.progress.ratio = this.progress.val / this.progress.state, this;
  }, s.prototype.updateProgress = function (t, e, r, n) {
    return this.setProgress(t ? this.progress.val + t : null, e || null, r ? this.progress.n + r : null, n ? this.progress.stack.concat(n) : null);
  }, s.prototype.then = function (t, e) {
    var r = this;
    return this.thenCore(t, e, function (t, e) {
      return r.updateProgress(null, null, 1, [t]), Promise.prototype.then.call(this, function (e) {
        return r.updateProgress(null, t), e;
      }).then(t, e).then(function (t) {
        return r.updateProgress(1), t;
      });
    });
  }, s.prototype.thenCore = function (t, e, r) {
    r = r || Promise.prototype.then;
    t && (t = t.bind(this)), e && (e = e.bind(this));
    var n = -1 !== Promise.toString().indexOf("[native code]") && "Promise" === Promise.name ? this : s.convert(Object.assign({}, this), Promise.prototype),
        i = r.call(n, t, e);
    return s.convert(i, this.__proto__);
  }, s.prototype.thenExternal = function (t, e) {
    return Promise.prototype.then.call(this, t, e);
  }, s.prototype.thenList = function (t) {
    var e = this;
    return t.forEach(function (t) {
      e = e.thenCore(t);
    }), e;
  }, s.prototype.catch = function (t) {
    t && (t = t.bind(this));
    var e = Promise.prototype.catch.call(this, t);
    return s.convert(e, this);
  }, s.prototype.catchExternal = function (t) {
    return Promise.prototype.catch.call(this, t);
  }, s.prototype.error = function (t) {
    return this.then(function () {
      throw new Error(t);
    });
  }, s.prototype.using = s.prototype.set, s.prototype.saveAs = s.prototype.save, s.prototype.export = s.prototype.output, s.prototype.run = s.prototype.then, O.getPageSize = function (t, e, r) {
    if ("object" == typeof t) {
      var n = t;
      t = n.orientation, e = n.unit || e, r = n.format || r;
    }

    e = e || "mm", r = r || "a4", t = ("" + (t || "P")).toLowerCase();
    var i,
        a = ("" + r).toLowerCase(),
        o = {
      a0: [2383.94, 3370.39],
      a1: [1683.78, 2383.94],
      a2: [1190.55, 1683.78],
      a3: [841.89, 1190.55],
      a4: [595.28, 841.89],
      a5: [419.53, 595.28],
      a6: [297.64, 419.53],
      a7: [209.76, 297.64],
      a8: [147.4, 209.76],
      a9: [104.88, 147.4],
      a10: [73.7, 104.88],
      b0: [2834.65, 4008.19],
      b1: [2004.09, 2834.65],
      b2: [1417.32, 2004.09],
      b3: [1000.63, 1417.32],
      b4: [708.66, 1000.63],
      b5: [498.9, 708.66],
      b6: [354.33, 498.9],
      b7: [249.45, 354.33],
      b8: [175.75, 249.45],
      b9: [124.72, 175.75],
      b10: [87.87, 124.72],
      c0: [2599.37, 3676.54],
      c1: [1836.85, 2599.37],
      c2: [1298.27, 1836.85],
      c3: [918.43, 1298.27],
      c4: [649.13, 918.43],
      c5: [459.21, 649.13],
      c6: [323.15, 459.21],
      c7: [229.61, 323.15],
      c8: [161.57, 229.61],
      c9: [113.39, 161.57],
      c10: [79.37, 113.39],
      dl: [311.81, 623.62],
      letter: [612, 792],
      "government-letter": [576, 756],
      legal: [612, 1008],
      "junior-legal": [576, 360],
      ledger: [1224, 792],
      tabloid: [792, 1224],
      "credit-card": [153, 243]
    };

    switch (e) {
      case "pt":
        i = 1;
        break;

      case "mm":
        i = 72 / 25.4;
        break;

      case "cm":
        i = 72 / 2.54;
        break;

      case "in":
        i = 72;
        break;

      case "px":
        i = .75;
        break;

      case "pc":
      case "em":
        i = 12;
        break;

      case "ex":
        i = 6;
        break;

      default:
        throw "Invalid unit: " + e;
    }

    var s,
        u = 0,
        c = 0;
    if (o.hasOwnProperty(a)) u = o[a][1] / i, c = o[a][0] / i;else try {
      u = r[1], c = r[0];
    } catch (t) {
      throw new Error("Invalid format: " + r);
    }
    if ("p" === t || "portrait" === t) t = "p", c > u && (s = c, c = u, u = s);else {
      if ("l" !== t && "landscape" !== t) throw "Invalid orientation: " + t;
      t = "l", u > c && (s = c, c = u, u = s);
    }
    return {
      width: c,
      height: u,
      unit: e,
      k: i,
      orientation: t
    };
  }, t.html = function (t, e) {
    (e = e || {}).callback = e.callback || function () {}, e.html2canvas = e.html2canvas || {}, e.html2canvas.canvas = e.html2canvas.canvas || this.canvas, e.jsPDF = e.jsPDF || this, e.fontFaces = e.fontFaces ? e.fontFaces.map(It) : null;
    var r = new s(e);
    return e.worker ? r : r.from(t).doCallback();
  };
}(O.API), O.API.addJS = function (t) {
  return Dt = t, this.internal.events.subscribe("postPutResources", function () {
    Rt = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/Names [(EmbeddedJS) " + (Rt + 1) + " 0 R]"), this.internal.out(">>"), this.internal.out("endobj"), Tt = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /JavaScript"), this.internal.out("/JS (" + Dt + ")"), this.internal.out(">>"), this.internal.out("endobj");
  }), this.internal.events.subscribe("putCatalog", function () {
    void 0 !== Rt && void 0 !== Tt && this.internal.out("/Names <</JavaScript " + Rt + " 0 R>>");
  }), this;
},
/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e;
  t.events.push(["postPutResources", function () {
    var t = this,
        r = /^(\d+) 0 obj$/;
    if (this.outline.root.children.length > 0) for (var n = t.outline.render().split(/\r\n/), i = 0; i < n.length; i++) {
      var a = n[i],
          o = r.exec(a);

      if (null != o) {
        var s = o[1];
        t.internal.newObjectDeferredBegin(s, !1);
      }

      t.internal.write(a);
    }

    if (this.outline.createNamedDestinations) {
      var u = this.internal.pages.length,
          c = [];

      for (i = 0; i < u; i++) {
        var l = t.internal.newObject();
        c.push(l);
        var h = t.internal.getPageInfo(i + 1);
        t.internal.write("<< /D[" + h.objId + " 0 R /XYZ null null null]>> endobj");
      }

      var f = t.internal.newObject();
      t.internal.write("<< /Names [ ");

      for (i = 0; i < c.length; i++) t.internal.write("(page_" + (i + 1) + ")" + c[i] + " 0 R");

      t.internal.write(" ] >>", "endobj"), e = t.internal.newObject(), t.internal.write("<< /Dests " + f + " 0 R"), t.internal.write(">>", "endobj");
    }
  }]), t.events.push(["putCatalog", function () {
    this.outline.root.children.length > 0 && (this.internal.write("/Outlines", this.outline.makeRef(this.outline.root)), this.outline.createNamedDestinations && this.internal.write("/Names " + e + " 0 R"));
  }]), t.events.push(["initialized", function () {
    var t = this;
    t.outline = {
      createNamedDestinations: !1,
      root: {
        children: []
      }
    }, t.outline.add = function (t, e, r) {
      var n = {
        title: e,
        options: r,
        children: []
      };
      return null == t && (t = this.root), t.children.push(n), n;
    }, t.outline.render = function () {
      return this.ctx = {}, this.ctx.val = "", this.ctx.pdf = t, this.genIds_r(this.root), this.renderRoot(this.root), this.renderItems(this.root), this.ctx.val;
    }, t.outline.genIds_r = function (e) {
      e.id = t.internal.newObjectDeferred();

      for (var r = 0; r < e.children.length; r++) this.genIds_r(e.children[r]);
    }, t.outline.renderRoot = function (t) {
      this.objStart(t), this.line("/Type /Outlines"), t.children.length > 0 && (this.line("/First " + this.makeRef(t.children[0])), this.line("/Last " + this.makeRef(t.children[t.children.length - 1]))), this.line("/Count " + this.count_r({
        count: 0
      }, t)), this.objEnd();
    }, t.outline.renderItems = function (e) {
      for (var r = this.ctx.pdf.internal.getVerticalCoordinateString, n = 0; n < e.children.length; n++) {
        var i = e.children[n];
        this.objStart(i), this.line("/Title " + this.makeString(i.title)), this.line("/Parent " + this.makeRef(e)), n > 0 && this.line("/Prev " + this.makeRef(e.children[n - 1])), n < e.children.length - 1 && this.line("/Next " + this.makeRef(e.children[n + 1])), i.children.length > 0 && (this.line("/First " + this.makeRef(i.children[0])), this.line("/Last " + this.makeRef(i.children[i.children.length - 1])));
        var a = this.count = this.count_r({
          count: 0
        }, i);

        if (a > 0 && this.line("/Count " + a), i.options && i.options.pageNumber) {
          var o = t.internal.getPageInfo(i.options.pageNumber);
          this.line("/Dest [" + o.objId + " 0 R /XYZ 0 " + r(0) + " 0]");
        }

        this.objEnd();
      }

      for (var s = 0; s < e.children.length; s++) this.renderItems(e.children[s]);
    }, t.outline.line = function (t) {
      this.ctx.val += t + "\r\n";
    }, t.outline.makeRef = function (t) {
      return t.id + " 0 R";
    }, t.outline.makeString = function (e) {
      return "(" + t.internal.pdfEscape(e) + ")";
    }, t.outline.objStart = function (t) {
      this.ctx.val += "\r\n" + t.id + " 0 obj\r\n<<\r\n";
    }, t.outline.objEnd = function () {
      this.ctx.val += ">> \r\nendobj\r\n";
    }, t.outline.count_r = function (t, e) {
      for (var r = 0; r < e.children.length; r++) t.count++, this.count_r(t, e.children[r]);

      return t.count;
    };
  }]);
}(O.API),
/**
 * @license
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = [192, 193, 194, 195, 196, 197, 198, 199];

  t.processJPEG = function (t, r, n, i, a, o) {
    var s,
        u = this.decode.DCT_DECODE,
        c = null;

    if ("string" == typeof t || this.__addimage__.isArrayBuffer(t) || this.__addimage__.isArrayBufferView(t)) {
      switch (t = a || t, t = this.__addimage__.isArrayBuffer(t) ? new Uint8Array(t) : t, (s = function (t) {
        for (var r, n = 256 * t.charCodeAt(4) + t.charCodeAt(5), i = t.length, a = {
          width: 0,
          height: 0,
          numcomponents: 1
        }, o = 4; o < i; o += 2) {
          if (o += n, -1 !== e.indexOf(t.charCodeAt(o + 1))) {
            r = 256 * t.charCodeAt(o + 5) + t.charCodeAt(o + 6), a = {
              width: 256 * t.charCodeAt(o + 7) + t.charCodeAt(o + 8),
              height: r,
              numcomponents: t.charCodeAt(o + 9)
            };
            break;
          }

          n = 256 * t.charCodeAt(o + 2) + t.charCodeAt(o + 3);
        }

        return a;
      }(t = this.__addimage__.isArrayBufferView(t) ? this.__addimage__.arrayBufferToBinaryString(t) : t)).numcomponents) {
        case 1:
          o = this.color_spaces.DEVICE_GRAY;
          break;

        case 4:
          o = this.color_spaces.DEVICE_CMYK;
          break;

        case 3:
          o = this.color_spaces.DEVICE_RGB;
      }

      c = {
        data: t,
        width: s.width,
        height: s.height,
        colorSpace: o,
        bitsPerComponent: 8,
        filter: u,
        index: r,
        alias: n
      };
    }

    return c;
  };
}(O.API);

var zt,
    Ht,
    Vt,
    Wt,
    Gt,
    Yt = function () {
  var t, n, i;

  function a(t) {
    var e, r, n, i, a, o, s, u, c, l, h, f, d, p;

    for (this.data = t, this.pos = 8, this.palette = [], this.imgData = [], this.transparency = {}, this.animation = null, this.text = {}, o = null;;) {
      switch (e = this.readUInt32(), c = function () {
        var t, e;

        for (e = [], t = 0; t < 4; ++t) e.push(String.fromCharCode(this.data[this.pos++]));

        return e;
      }.call(this).join("")) {
        case "IHDR":
          this.width = this.readUInt32(), this.height = this.readUInt32(), this.bits = this.data[this.pos++], this.colorType = this.data[this.pos++], this.compressionMethod = this.data[this.pos++], this.filterMethod = this.data[this.pos++], this.interlaceMethod = this.data[this.pos++];
          break;

        case "acTL":
          this.animation = {
            numFrames: this.readUInt32(),
            numPlays: this.readUInt32() || 1 / 0,
            frames: []
          };
          break;

        case "PLTE":
          this.palette = this.read(e);
          break;

        case "fcTL":
          o && this.animation.frames.push(o), this.pos += 4, o = {
            width: this.readUInt32(),
            height: this.readUInt32(),
            xOffset: this.readUInt32(),
            yOffset: this.readUInt32()
          }, a = this.readUInt16(), i = this.readUInt16() || 100, o.delay = 1e3 * a / i, o.disposeOp = this.data[this.pos++], o.blendOp = this.data[this.pos++], o.data = [];
          break;

        case "IDAT":
        case "fdAT":
          for ("fdAT" === c && (this.pos += 4, e -= 4), t = (null != o ? o.data : void 0) || this.imgData, f = 0; 0 <= e ? f < e : f > e; 0 <= e ? ++f : --f) t.push(this.data[this.pos++]);

          break;

        case "tRNS":
          switch (this.transparency = {}, this.colorType) {
            case 3:
              if (n = this.palette.length / 3, this.transparency.indexed = this.read(e), this.transparency.indexed.length > n) throw new Error("More transparent colors than palette size");
              if ((l = n - this.transparency.indexed.length) > 0) for (d = 0; 0 <= l ? d < l : d > l; 0 <= l ? ++d : --d) this.transparency.indexed.push(255);
              break;

            case 0:
              this.transparency.grayscale = this.read(e)[0];
              break;

            case 2:
              this.transparency.rgb = this.read(e);
          }

          break;

        case "tEXt":
          s = (h = this.read(e)).indexOf(0), u = String.fromCharCode.apply(String, h.slice(0, s)), this.text[u] = String.fromCharCode.apply(String, h.slice(s + 1));
          break;

        case "IEND":
          return o && this.animation.frames.push(o), this.colors = function () {
            switch (this.colorType) {
              case 0:
              case 3:
              case 4:
                return 1;

              case 2:
              case 6:
                return 3;
            }
          }.call(this), this.hasAlphaChannel = 4 === (p = this.colorType) || 6 === p, r = this.colors + (this.hasAlphaChannel ? 1 : 0), this.pixelBitlength = this.bits * r, this.colorSpace = function () {
            switch (this.colors) {
              case 1:
                return "DeviceGray";

              case 3:
                return "DeviceRGB";
            }
          }.call(this), void (this.imgData = new Uint8Array(this.imgData));

        default:
          this.pos += e;
      }

      if (this.pos += 4, this.pos > this.data.length) throw new Error("Incomplete or corrupt PNG file");
    }
  }

  a.prototype.read = function (t) {
    var e, r;

    for (r = [], e = 0; 0 <= t ? e < t : e > t; 0 <= t ? ++e : --e) r.push(this.data[this.pos++]);

    return r;
  }, a.prototype.readUInt32 = function () {
    return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++];
  }, a.prototype.readUInt16 = function () {
    return this.data[this.pos++] << 8 | this.data[this.pos++];
  }, a.prototype.decodePixels = function (t) {
    var r = this.pixelBitlength / 8,
        n = new Uint8Array(this.width * this.height * r),
        i = 0,
        a = this;
    if (null == t && (t = this.imgData), 0 === t.length) return new Uint8Array(0);

    function o(e, o, s, u) {
      var c,
          l,
          h,
          f,
          d,
          p,
          g,
          m,
          v,
          b,
          y,
          w,
          N,
          L,
          A,
          x,
          S,
          _,
          P,
          k,
          I,
          F = Math.ceil((a.width - e) / s),
          C = Math.ceil((a.height - o) / u),
          j = a.width == F && a.height == C;

      for (L = r * F, w = j ? n : new Uint8Array(L * C), p = t.length, N = 0, l = 0; N < C && i < p;) {
        switch (t[i++]) {
          case 0:
            for (f = S = 0; S < L; f = S += 1) w[l++] = t[i++];

            break;

          case 1:
            for (f = _ = 0; _ < L; f = _ += 1) c = t[i++], d = f < r ? 0 : w[l - r], w[l++] = (c + d) % 256;

            break;

          case 2:
            for (f = P = 0; P < L; f = P += 1) c = t[i++], h = (f - f % r) / r, A = N && w[(N - 1) * L + h * r + f % r], w[l++] = (A + c) % 256;

            break;

          case 3:
            for (f = k = 0; k < L; f = k += 1) c = t[i++], h = (f - f % r) / r, d = f < r ? 0 : w[l - r], A = N && w[(N - 1) * L + h * r + f % r], w[l++] = (c + Math.floor((d + A) / 2)) % 256;

            break;

          case 4:
            for (f = I = 0; I < L; f = I += 1) c = t[i++], h = (f - f % r) / r, d = f < r ? 0 : w[l - r], 0 === N ? A = x = 0 : (A = w[(N - 1) * L + h * r + f % r], x = h && w[(N - 1) * L + (h - 1) * r + f % r]), g = d + A - x, m = Math.abs(g - d), b = Math.abs(g - A), y = Math.abs(g - x), v = m <= b && m <= y ? d : b <= y ? A : x, w[l++] = (c + v) % 256;

            break;

          default:
            throw new Error("Invalid filter algorithm: " + t[i - 1]);
        }

        if (!j) {
          var O = ((o + N * u) * a.width + e) * r,
              B = N * L;

          for (f = 0; f < F; f += 1) {
            for (var M = 0; M < r; M += 1) n[O++] = w[B++];

            O += (s - 1) * r;
          }
        }

        N++;
      }
    }

    return t = (0, _fflate.unzlibSync)(t), 1 == a.interlaceMethod ? (o(0, 0, 8, 8), o(4, 0, 8, 8), o(0, 4, 4, 8), o(2, 0, 4, 4), o(0, 2, 2, 4), o(1, 0, 2, 2), o(0, 1, 1, 2)) : o(0, 0, 1, 1), n;
  }, a.prototype.decodePalette = function () {
    var t, e, r, n, i, a, o, s, u;

    for (r = this.palette, a = this.transparency.indexed || [], i = new Uint8Array((a.length || 0) + r.length), n = 0, t = 0, e = o = 0, s = r.length; o < s; e = o += 3) i[n++] = r[e], i[n++] = r[e + 1], i[n++] = r[e + 2], i[n++] = null != (u = a[t++]) ? u : 255;

    return i;
  }, a.prototype.copyToImageData = function (t, e) {
    var r, n, i, a, o, s, u, c, l, h, f;
    if (n = this.colors, l = null, r = this.hasAlphaChannel, this.palette.length && (l = null != (f = this._decodedPalette) ? f : this._decodedPalette = this.decodePalette(), n = 4, r = !0), c = (i = t.data || t).length, o = l || e, a = s = 0, 1 === n) for (; a < c;) u = l ? 4 * e[a / 4] : s, h = o[u++], i[a++] = h, i[a++] = h, i[a++] = h, i[a++] = r ? o[u++] : 255, s = u;else for (; a < c;) u = l ? 4 * e[a / 4] : s, i[a++] = o[u++], i[a++] = o[u++], i[a++] = o[u++], i[a++] = r ? o[u++] : 255, s = u;
  }, a.prototype.decode = function () {
    var t;
    return t = new Uint8Array(this.width * this.height * 4), this.copyToImageData(t, this.decodePixels()), t;
  };

  var o = function () {
    if ("[object Window]" === Object.prototype.toString.call(r)) {
      try {
        n = r.document.createElement("canvas"), i = n.getContext("2d");
      } catch (t) {
        return !1;
      }

      return !0;
    }

    return !1;
  };

  return o(), t = function (t) {
    var e;
    if (!0 === o()) return i.width = t.width, i.height = t.height, i.clearRect(0, 0, t.width, t.height), i.putImageData(t, 0, 0), (e = new Image()).src = n.toDataURL(), e;
    throw new Error("This method requires a Browser with Canvas-capability.");
  }, a.prototype.decodeFrames = function (e) {
    var r, n, i, a, o, s, u, c;

    if (this.animation) {
      for (c = [], n = o = 0, s = (u = this.animation.frames).length; o < s; n = ++o) r = u[n], i = e.createImageData(r.width, r.height), a = this.decodePixels(new Uint8Array(r.data)), this.copyToImageData(i, a), r.imageData = i, c.push(r.image = t(i));

      return c;
    }
  }, a.prototype.renderFrame = function (t, e) {
    var r, n, i;
    return r = (n = this.animation.frames)[e], i = n[e - 1], 0 === e && t.clearRect(0, 0, this.width, this.height), 1 === (null != i ? i.disposeOp : void 0) ? t.clearRect(i.xOffset, i.yOffset, i.width, i.height) : 2 === (null != i ? i.disposeOp : void 0) && t.putImageData(i.imageData, i.xOffset, i.yOffset), 0 === r.blendOp && t.clearRect(r.xOffset, r.yOffset, r.width, r.height), t.drawImage(r.image, r.xOffset, r.yOffset);
  }, a.prototype.animate = function (t) {
    var e,
        r,
        n,
        i,
        a,
        o,
        s = this;
    return r = 0, o = this.animation, i = o.numFrames, n = o.frames, a = o.numPlays, (e = function () {
      var o, u;
      if (o = r++ % i, u = n[o], s.renderFrame(t, o), i > 1 && r / i < a) return s.animation._timeout = setTimeout(e, u.delay);
    })();
  }, a.prototype.stopAnimation = function () {
    var t;
    return clearTimeout(null != (t = this.animation) ? t._timeout : void 0);
  }, a.prototype.render = function (t) {
    var e, r;
    return t._png && t._png.stopAnimation(), t._png = this, t.width = this.width, t.height = this.height, e = t.getContext("2d"), this.animation ? (this.decodeFrames(e), this.animate(e)) : (r = e.createImageData(this.width, this.height), this.copyToImageData(r, this.decodePixels()), e.putImageData(r, 0, 0));
  }, a;
}();
/**
 * @license
 *
 * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */

/**
 * @license
 * (c) Dean McNamee <dean@gmail.com>, 2013.
 *
 * https://github.com/deanm/omggif
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
 * including animation and compression.  It does not rely on any specific
 * underlying system, so should run in the browser, Node, or Plask.
 */


function Jt(t) {
  var e = 0;
  if (71 !== t[e++] || 73 !== t[e++] || 70 !== t[e++] || 56 !== t[e++] || 56 != (t[e++] + 1 & 253) || 97 !== t[e++]) throw new Error("Invalid GIF 87a/89a header.");
  var r = t[e++] | t[e++] << 8,
      n = t[e++] | t[e++] << 8,
      i = t[e++],
      a = i >> 7,
      o = 1 << (7 & i) + 1;
  t[e++];
  t[e++];
  var s = null,
      u = null;
  a && (s = e, u = o, e += 3 * o);
  var c = !0,
      l = [],
      h = 0,
      f = null,
      d = 0,
      p = null;

  for (this.width = r, this.height = n; c && e < t.length;) switch (t[e++]) {
    case 33:
      switch (t[e++]) {
        case 255:
          if (11 !== t[e] || 78 == t[e + 1] && 69 == t[e + 2] && 84 == t[e + 3] && 83 == t[e + 4] && 67 == t[e + 5] && 65 == t[e + 6] && 80 == t[e + 7] && 69 == t[e + 8] && 50 == t[e + 9] && 46 == t[e + 10] && 48 == t[e + 11] && 3 == t[e + 12] && 1 == t[e + 13] && 0 == t[e + 16]) e += 14, p = t[e++] | t[e++] << 8, e++;else for (e += 12;;) {
            if (!((P = t[e++]) >= 0)) throw Error("Invalid block size");
            if (0 === P) break;
            e += P;
          }
          break;

        case 249:
          if (4 !== t[e++] || 0 !== t[e + 4]) throw new Error("Invalid graphics extension block.");
          var g = t[e++];
          h = t[e++] | t[e++] << 8, f = t[e++], 0 == (1 & g) && (f = null), d = g >> 2 & 7, e++;
          break;

        case 254:
          for (;;) {
            if (!((P = t[e++]) >= 0)) throw Error("Invalid block size");
            if (0 === P) break;
            e += P;
          }

          break;

        default:
          throw new Error("Unknown graphic control label: 0x" + t[e - 1].toString(16));
      }

      break;

    case 44:
      var m = t[e++] | t[e++] << 8,
          v = t[e++] | t[e++] << 8,
          b = t[e++] | t[e++] << 8,
          y = t[e++] | t[e++] << 8,
          w = t[e++],
          N = w >> 6 & 1,
          L = 1 << (7 & w) + 1,
          A = s,
          x = u,
          S = !1;

      if (w >> 7) {
        S = !0;
        A = e, x = L, e += 3 * L;
      }

      var _ = e;

      for (e++;;) {
        var P;
        if (!((P = t[e++]) >= 0)) throw Error("Invalid block size");
        if (0 === P) break;
        e += P;
      }

      l.push({
        x: m,
        y: v,
        width: b,
        height: y,
        has_local_palette: S,
        palette_offset: A,
        palette_size: x,
        data_offset: _,
        data_length: e - _,
        transparent_index: f,
        interlaced: !!N,
        delay: h,
        disposal: d
      });
      break;

    case 59:
      c = !1;
      break;

    default:
      throw new Error("Unknown gif block: 0x" + t[e - 1].toString(16));
  }

  this.numFrames = function () {
    return l.length;
  }, this.loopCount = function () {
    return p;
  }, this.frameInfo = function (t) {
    if (t < 0 || t >= l.length) throw new Error("Frame index out of range.");
    return l[t];
  }, this.decodeAndBlitFrameBGRA = function (e, n) {
    var i = this.frameInfo(e),
        a = i.width * i.height,
        o = new Uint8Array(a);
    Xt(t, i.data_offset, o, a);
    var s = i.palette_offset,
        u = i.transparent_index;
    null === u && (u = 256);
    var c = i.width,
        l = r - c,
        h = c,
        f = 4 * (i.y * r + i.x),
        d = 4 * ((i.y + i.height) * r + i.x),
        p = f,
        g = 4 * l;
    !0 === i.interlaced && (g += 4 * r * 7);

    for (var m = 8, v = 0, b = o.length; v < b; ++v) {
      var y = o[v];
      if (0 === h && (h = c, (p += g) >= d && (g = 4 * l + 4 * r * (m - 1), p = f + (c + l) * (m << 1), m >>= 1)), y === u) p += 4;else {
        var w = t[s + 3 * y],
            N = t[s + 3 * y + 1],
            L = t[s + 3 * y + 2];
        n[p++] = L, n[p++] = N, n[p++] = w, n[p++] = 255;
      }
      --h;
    }
  }, this.decodeAndBlitFrameRGBA = function (e, n) {
    var i = this.frameInfo(e),
        a = i.width * i.height,
        o = new Uint8Array(a);
    Xt(t, i.data_offset, o, a);
    var s = i.palette_offset,
        u = i.transparent_index;
    null === u && (u = 256);
    var c = i.width,
        l = r - c,
        h = c,
        f = 4 * (i.y * r + i.x),
        d = 4 * ((i.y + i.height) * r + i.x),
        p = f,
        g = 4 * l;
    !0 === i.interlaced && (g += 4 * r * 7);

    for (var m = 8, v = 0, b = o.length; v < b; ++v) {
      var y = o[v];
      if (0 === h && (h = c, (p += g) >= d && (g = 4 * l + 4 * r * (m - 1), p = f + (c + l) * (m << 1), m >>= 1)), y === u) p += 4;else {
        var w = t[s + 3 * y],
            N = t[s + 3 * y + 1],
            L = t[s + 3 * y + 2];
        n[p++] = w, n[p++] = N, n[p++] = L, n[p++] = 255;
      }
      --h;
    }
  };
}

function Xt(t, e, r, n) {
  for (var a = t[e++], o = 1 << a, s = o + 1, u = s + 1, c = a + 1, l = (1 << c) - 1, h = 0, f = 0, d = 0, p = t[e++], g = new Int32Array(4096), m = null;;) {
    for (; h < 16 && 0 !== p;) f |= t[e++] << h, h += 8, 1 === p ? p = t[e++] : --p;

    if (h < c) break;
    var v = f & l;

    if (f >>= c, h -= c, v !== o) {
      if (v === s) break;

      for (var b = v < u ? v : m, y = 0, w = b; w > o;) w = g[w] >> 8, ++y;

      var N = w;
      if (d + y + (b !== v ? 1 : 0) > n) return void i.log("Warning, gif stream longer than expected.");
      r[d++] = N;
      var L = d += y;

      for (b !== v && (r[d++] = N), w = b; y--;) w = g[w], r[--L] = 255 & w, w >>= 8;

      null !== m && u < 4096 && (g[u++] = m << 8 | N, u >= l + 1 && c < 12 && (++c, l = l << 1 | 1)), m = v;
    } else u = s + 1, l = (1 << (c = a + 1)) - 1, m = null;
  }

  return d !== n && i.log("Warning, gif stream shorter than expected."), r;
}
/**
 * @license
  Copyright (c) 2008, Adobe Systems Incorporated
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the distribution.
  
  * Neither the name of Adobe Systems Incorporated nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


function Kt(t) {
  var e,
      r,
      n,
      i,
      a,
      o = Math.floor,
      s = new Array(64),
      u = new Array(64),
      c = new Array(64),
      l = new Array(64),
      h = new Array(65535),
      f = new Array(65535),
      d = new Array(64),
      p = new Array(64),
      g = [],
      m = 0,
      v = 7,
      b = new Array(64),
      y = new Array(64),
      w = new Array(64),
      N = new Array(256),
      L = new Array(2048),
      A = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63],
      x = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
      S = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
      _ = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125],
      P = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250],
      k = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
      I = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
      F = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119],
      C = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];

  function j(t, e) {
    for (var r = 0, n = 0, i = new Array(), a = 1; a <= 16; a++) {
      for (var o = 1; o <= t[a]; o++) i[e[n]] = [], i[e[n]][0] = r, i[e[n]][1] = a, n++, r++;

      r *= 2;
    }

    return i;
  }

  function O(t) {
    for (var e = t[0], r = t[1] - 1; r >= 0;) e & 1 << r && (m |= 1 << v), r--, --v < 0 && (255 == m ? (B(255), B(0)) : B(m), v = 7, m = 0);
  }

  function B(t) {
    g.push(t);
  }

  function M(t) {
    B(t >> 8 & 255), B(255 & t);
  }

  function E(t, e, r, n, i) {
    for (var a, o = i[0], s = i[240], u = function (t, e) {
      var r,
          n,
          i,
          a,
          o,
          s,
          u,
          c,
          l,
          h,
          f = 0;

      for (l = 0; l < 8; ++l) {
        r = t[f], n = t[f + 1], i = t[f + 2], a = t[f + 3], o = t[f + 4], s = t[f + 5], u = t[f + 6];
        var p = r + (c = t[f + 7]),
            g = r - c,
            m = n + u,
            v = n - u,
            b = i + s,
            y = i - s,
            w = a + o,
            N = a - o,
            L = p + w,
            A = p - w,
            x = m + b,
            S = m - b;
        t[f] = L + x, t[f + 4] = L - x;

        var _ = .707106781 * (S + A);

        t[f + 2] = A + _, t[f + 6] = A - _;
        var P = .382683433 * ((L = N + y) - (S = v + g)),
            k = .5411961 * L + P,
            I = 1.306562965 * S + P,
            F = .707106781 * (x = y + v),
            C = g + F,
            j = g - F;
        t[f + 5] = j + k, t[f + 3] = j - k, t[f + 1] = C + I, t[f + 7] = C - I, f += 8;
      }

      for (f = 0, l = 0; l < 8; ++l) {
        r = t[f], n = t[f + 8], i = t[f + 16], a = t[f + 24], o = t[f + 32], s = t[f + 40], u = t[f + 48];
        var O = r + (c = t[f + 56]),
            B = r - c,
            M = n + u,
            E = n - u,
            q = i + s,
            R = i - s,
            T = a + o,
            D = a - o,
            U = O + T,
            z = O - T,
            H = M + q,
            V = M - q;
        t[f] = U + H, t[f + 32] = U - H;
        var W = .707106781 * (V + z);
        t[f + 16] = z + W, t[f + 48] = z - W;
        var G = .382683433 * ((U = D + R) - (V = E + B)),
            Y = .5411961 * U + G,
            J = 1.306562965 * V + G,
            X = .707106781 * (H = R + E),
            K = B + X,
            Z = B - X;
        t[f + 40] = Z + Y, t[f + 24] = Z - Y, t[f + 8] = K + J, t[f + 56] = K - J, f++;
      }

      for (l = 0; l < 64; ++l) h = t[l] * e[l], d[l] = h > 0 ? h + .5 | 0 : h - .5 | 0;

      return d;
    }(t, e), c = 0; c < 64; ++c) p[A[c]] = u[c];

    var l = p[0] - r;
    r = p[0], 0 == l ? O(n[0]) : (O(n[f[a = 32767 + l]]), O(h[a]));

    for (var g = 63; g > 0 && 0 == p[g];) g--;

    if (0 == g) return O(o), r;

    for (var m, v = 1; v <= g;) {
      for (var b = v; 0 == p[v] && v <= g;) ++v;

      var y = v - b;

      if (y >= 16) {
        m = y >> 4;

        for (var w = 1; w <= m; ++w) O(s);

        y &= 15;
      }

      a = 32767 + p[v], O(i[(y << 4) + f[a]]), O(h[a]), v++;
    }

    return 63 != g && O(o), r;
  }

  function q(t) {
    (t = Math.min(Math.max(t, 1), 100), a != t) && (!function (t) {
      for (var e = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99], r = 0; r < 64; r++) {
        var n = o((e[r] * t + 50) / 100);
        n = Math.min(Math.max(n, 1), 255), s[A[r]] = n;
      }

      for (var i = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99], a = 0; a < 64; a++) {
        var h = o((i[a] * t + 50) / 100);
        h = Math.min(Math.max(h, 1), 255), u[A[a]] = h;
      }

      for (var f = [1, 1.387039845, 1.306562965, 1.175875602, 1, .785694958, .5411961, .275899379], d = 0, p = 0; p < 8; p++) for (var g = 0; g < 8; g++) c[d] = 1 / (s[A[d]] * f[p] * f[g] * 8), l[d] = 1 / (u[A[d]] * f[p] * f[g] * 8), d++;
    }(t < 50 ? Math.floor(5e3 / t) : Math.floor(200 - 2 * t)), a = t);
  }

  this.encode = function (t, a) {
    a && q(a), g = new Array(), m = 0, v = 7, M(65496), M(65504), M(16), B(74), B(70), B(73), B(70), B(0), B(1), B(1), B(0), M(1), M(1), B(0), B(0), function () {
      M(65499), M(132), B(0);

      for (var t = 0; t < 64; t++) B(s[t]);

      B(1);

      for (var e = 0; e < 64; e++) B(u[e]);
    }(), function (t, e) {
      M(65472), M(17), B(8), M(e), M(t), B(3), B(1), B(17), B(0), B(2), B(17), B(1), B(3), B(17), B(1);
    }(t.width, t.height), function () {
      M(65476), M(418), B(0);

      for (var t = 0; t < 16; t++) B(x[t + 1]);

      for (var e = 0; e <= 11; e++) B(S[e]);

      B(16);

      for (var r = 0; r < 16; r++) B(_[r + 1]);

      for (var n = 0; n <= 161; n++) B(P[n]);

      B(1);

      for (var i = 0; i < 16; i++) B(k[i + 1]);

      for (var a = 0; a <= 11; a++) B(I[a]);

      B(17);

      for (var o = 0; o < 16; o++) B(F[o + 1]);

      for (var s = 0; s <= 161; s++) B(C[s]);
    }(), M(65498), M(12), B(3), B(1), B(0), B(2), B(17), B(3), B(17), B(0), B(63), B(0);
    var o = 0,
        h = 0,
        f = 0;
    m = 0, v = 7, this.encode.displayName = "_encode_";

    for (var d, p, N, A, j, R, T, D, U, z = t.data, H = t.width, V = t.height, W = 4 * H, G = 0; G < V;) {
      for (d = 0; d < W;) {
        for (j = W * G + d, T = -1, D = 0, U = 0; U < 64; U++) R = j + (D = U >> 3) * W + (T = 4 * (7 & U)), G + D >= V && (R -= W * (G + 1 + D - V)), d + T >= W && (R -= d + T - W + 4), p = z[R++], N = z[R++], A = z[R++], b[U] = (L[p] + L[N + 256 >> 0] + L[A + 512 >> 0] >> 16) - 128, y[U] = (L[p + 768 >> 0] + L[N + 1024 >> 0] + L[A + 1280 >> 0] >> 16) - 128, w[U] = (L[p + 1280 >> 0] + L[N + 1536 >> 0] + L[A + 1792 >> 0] >> 16) - 128;

        o = E(b, c, o, e, n), h = E(y, l, h, r, i), f = E(w, l, f, r, i), d += 32;
      }

      G += 8;
    }

    if (v >= 0) {
      var Y = [];
      Y[1] = v + 1, Y[0] = (1 << v + 1) - 1, O(Y);
    }

    return M(65497), new Uint8Array(g);
  }, t = t || 50, function () {
    for (var t = String.fromCharCode, e = 0; e < 256; e++) N[e] = t(e);
  }(), e = j(x, S), r = j(k, I), n = j(_, P), i = j(F, C), function () {
    for (var t = 1, e = 2, r = 1; r <= 15; r++) {
      for (var n = t; n < e; n++) f[32767 + n] = r, h[32767 + n] = [], h[32767 + n][1] = r, h[32767 + n][0] = n;

      for (var i = -(e - 1); i <= -t; i++) f[32767 + i] = r, h[32767 + i] = [], h[32767 + i][1] = r, h[32767 + i][0] = e - 1 + i;

      t <<= 1, e <<= 1;
    }
  }(), function () {
    for (var t = 0; t < 256; t++) L[t] = 19595 * t, L[t + 256 >> 0] = 38470 * t, L[t + 512 >> 0] = 7471 * t + 32768, L[t + 768 >> 0] = -11059 * t, L[t + 1024 >> 0] = -21709 * t, L[t + 1280 >> 0] = 32768 * t + 8421375, L[t + 1536 >> 0] = -27439 * t, L[t + 1792 >> 0] = -5329 * t;
  }(), q(t);
}
/**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */


function Zt(t, e) {
  if (this.pos = 0, this.buffer = t, this.datav = new DataView(t.buffer), this.is_with_alpha = !!e, this.bottom_up = !0, this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1]), this.pos += 2, -1 === ["BM", "BA", "CI", "CP", "IC", "PT"].indexOf(this.flag)) throw new Error("Invalid BMP File");
  this.parseHeader(), this.parseBGR();
}

function $t(t) {
  function e(t) {
    if (!t) throw Error("assert :P");
  }

  function r(t, e, r) {
    for (var n = 0; 4 > n; n++) if (t[e + n] != r.charCodeAt(n)) return !0;

    return !1;
  }

  function n(t, e, r, n, i) {
    for (var a = 0; a < i; a++) t[e + a] = r[n + a];
  }

  function i(t, e, r, n) {
    for (var i = 0; i < n; i++) t[e + i] = r;
  }

  function a(t) {
    return new Int32Array(t);
  }

  function o(t, e) {
    for (var r = [], n = 0; n < t; n++) r.push(new e());

    return r;
  }

  function s(t, e) {
    var r = [];
    return function t(r, n, i) {
      for (var a = i[n], o = 0; o < a && (r.push(i.length > n + 1 ? [] : new e()), !(i.length < n + 1)); o++) t(r[o], n + 1, i);
    }(r, 0, t), r;
  }

  function u(t, e) {
    for (var r = "", n = 0; n < 4; n++) r += String.fromCharCode(t[e++]);

    return r;
  }

  function c(t, e) {
    return (t[e + 0] << 0 | t[e + 1] << 8 | t[e + 2] << 16) >>> 0;
  }

  function l(t, e) {
    return (t[e + 0] << 0 | t[e + 1] << 8 | t[e + 2] << 16 | t[e + 3] << 24) >>> 0;
  }

  new ($t = function () {
    var t = this;

    function u(t, e) {
      for (var r = 1 << e - 1 >>> 0; t & r;) r >>>= 1;

      return r ? (t & r - 1) + r : t;
    }

    function c(t, r, n, i, a) {
      e(!(i % n));

      do {
        t[r + (i -= n)] = a;
      } while (0 < i);
    }

    function l(t, r, n, i, o) {
      if (e(2328 >= o), 512 >= o) var s = a(512);else if (null == (s = a(o))) return 0;
      return function (t, r, n, i, o, s) {
        var l,
            f,
            d = r,
            p = 1 << n,
            g = a(16),
            m = a(16);

        for (e(0 != o), e(null != i), e(null != t), e(0 < n), f = 0; f < o; ++f) {
          if (15 < i[f]) return 0;
          ++g[i[f]];
        }

        if (g[0] == o) return 0;

        for (m[1] = 0, l = 1; 15 > l; ++l) {
          if (g[l] > 1 << l) return 0;
          m[l + 1] = m[l] + g[l];
        }

        for (f = 0; f < o; ++f) l = i[f], 0 < i[f] && (s[m[l]++] = f);

        if (1 == m[15]) return (i = new h()).g = 0, i.value = s[0], c(t, d, 1, p, i), p;
        var v,
            b = -1,
            y = p - 1,
            w = 0,
            N = 1,
            L = 1,
            A = 1 << n;

        for (f = 0, l = 1, o = 2; l <= n; ++l, o <<= 1) {
          if (N += L <<= 1, 0 > (L -= g[l])) return 0;

          for (; 0 < g[l]; --g[l]) (i = new h()).g = l, i.value = s[f++], c(t, d + w, o, A, i), w = u(w, l);
        }

        for (l = n + 1, o = 2; 15 >= l; ++l, o <<= 1) {
          if (N += L <<= 1, 0 > (L -= g[l])) return 0;

          for (; 0 < g[l]; --g[l]) {
            if (i = new h(), (w & y) != b) {
              for (d += A, v = 1 << (b = l) - n; 15 > b && !(0 >= (v -= g[b]));) ++b, v <<= 1;

              p += A = 1 << (v = b - n), t[r + (b = w & y)].g = v + n, t[r + b].value = d - r - b;
            }

            i.g = l - n, i.value = s[f++], c(t, d + (w >> n), o, A, i), w = u(w, l);
          }
        }

        return N != 2 * m[15] - 1 ? 0 : p;
      }(t, r, n, i, o, s);
    }

    function h() {
      this.value = this.g = 0;
    }

    function f() {
      this.value = this.g = 0;
    }

    function d() {
      this.G = o(5, h), this.H = a(5), this.jc = this.Qb = this.qb = this.nd = 0, this.pd = o(Rr, f);
    }

    function p(t, r, n, i) {
      e(null != t), e(null != r), e(2147483648 > i), t.Ca = 254, t.I = 0, t.b = -8, t.Ka = 0, t.oa = r, t.pa = n, t.Jd = r, t.Yc = n + i, t.Zc = 4 <= i ? n + i - 4 + 1 : n, _(t);
    }

    function g(t, e) {
      for (var r = 0; 0 < e--;) r |= k(t, 128) << e;

      return r;
    }

    function m(t, e) {
      var r = g(t, e);
      return P(t) ? -r : r;
    }

    function v(t, r, n, i) {
      var a,
          o = 0;

      for (e(null != t), e(null != r), e(4294967288 > i), t.Sb = i, t.Ra = 0, t.u = 0, t.h = 0, 4 < i && (i = 4), a = 0; a < i; ++a) o += r[n + a] << 8 * a;

      t.Ra = o, t.bb = i, t.oa = r, t.pa = n;
    }

    function b(t) {
      for (; 8 <= t.u && t.bb < t.Sb;) t.Ra >>>= 8, t.Ra += t.oa[t.pa + t.bb] << Ur - 8 >>> 0, ++t.bb, t.u -= 8;

      A(t) && (t.h = 1, t.u = 0);
    }

    function y(t, r) {
      if (e(0 <= r), !t.h && r <= Dr) {
        var n = L(t) & Tr[r];
        return t.u += r, b(t), n;
      }

      return t.h = 1, t.u = 0;
    }

    function w() {
      this.b = this.Ca = this.I = 0, this.oa = [], this.pa = 0, this.Jd = [], this.Yc = 0, this.Zc = [], this.Ka = 0;
    }

    function N() {
      this.Ra = 0, this.oa = [], this.h = this.u = this.bb = this.Sb = this.pa = 0;
    }

    function L(t) {
      return t.Ra >>> (t.u & Ur - 1) >>> 0;
    }

    function A(t) {
      return e(t.bb <= t.Sb), t.h || t.bb == t.Sb && t.u > Ur;
    }

    function x(t, e) {
      t.u = e, t.h = A(t);
    }

    function S(t) {
      t.u >= zr && (e(t.u >= zr), b(t));
    }

    function _(t) {
      e(null != t && null != t.oa), t.pa < t.Zc ? (t.I = (t.oa[t.pa++] | t.I << 8) >>> 0, t.b += 8) : (e(null != t && null != t.oa), t.pa < t.Yc ? (t.b += 8, t.I = t.oa[t.pa++] | t.I << 8) : t.Ka ? t.b = 0 : (t.I <<= 8, t.b += 8, t.Ka = 1));
    }

    function P(t) {
      return g(t, 1);
    }

    function k(t, e) {
      var r = t.Ca;
      0 > t.b && _(t);
      var n = t.b,
          i = r * e >>> 8,
          a = (t.I >>> n > i) + 0;

      for (a ? (r -= i, t.I -= i + 1 << n >>> 0) : r = i + 1, n = r, i = 0; 256 <= n;) i += 8, n >>= 8;

      return n = 7 ^ i + Hr[n], t.b -= n, t.Ca = (r << n) - 1, a;
    }

    function I(t, e, r) {
      t[e + 0] = r >> 24 & 255, t[e + 1] = r >> 16 & 255, t[e + 2] = r >> 8 & 255, t[e + 3] = r >> 0 & 255;
    }

    function F(t, e) {
      return t[e + 0] << 0 | t[e + 1] << 8;
    }

    function C(t, e) {
      return F(t, e) | t[e + 2] << 16;
    }

    function j(t, e) {
      return F(t, e) | F(t, e + 2) << 16;
    }

    function O(t, r) {
      var n = 1 << r;
      return e(null != t), e(0 < r), t.X = a(n), null == t.X ? 0 : (t.Mb = 32 - r, t.Xa = r, 1);
    }

    function B(t, r) {
      e(null != t), e(null != r), e(t.Xa == r.Xa), n(r.X, 0, t.X, 0, 1 << r.Xa);
    }

    function M() {
      this.X = [], this.Xa = this.Mb = 0;
    }

    function E(t, r, n, i) {
      e(null != n), e(null != i);
      var a = n[0],
          o = i[0];
      return 0 == a && (a = (t * o + r / 2) / r), 0 == o && (o = (r * a + t / 2) / t), 0 >= a || 0 >= o ? 0 : (n[0] = a, i[0] = o, 1);
    }

    function q(t, e) {
      return t + (1 << e) - 1 >>> e;
    }

    function R(t, e) {
      return ((4278255360 & t) + (4278255360 & e) >>> 0 & 4278255360) + ((16711935 & t) + (16711935 & e) >>> 0 & 16711935) >>> 0;
    }

    function T(e, r) {
      t[r] = function (r, n, i, a, o, s, u) {
        var c;

        for (c = 0; c < o; ++c) {
          var l = t[e](s[u + c - 1], i, a + c);
          s[u + c] = R(r[n + c], l);
        }
      };
    }

    function D() {
      this.ud = this.hd = this.jd = 0;
    }

    function U(t, e) {
      return ((4278124286 & (t ^ e)) >>> 1) + (t & e) >>> 0;
    }

    function z(t) {
      return 0 <= t && 256 > t ? t : 0 > t ? 0 : 255 < t ? 255 : void 0;
    }

    function H(t, e) {
      return z(t + (t - e + .5 >> 1));
    }

    function V(t, e, r) {
      return Math.abs(e - r) - Math.abs(t - r);
    }

    function W(t, e, r, n, i, a, o) {
      for (n = a[o - 1], r = 0; r < i; ++r) a[o + r] = n = R(t[e + r], n);
    }

    function G(t, e, r, n, i) {
      var a;

      for (a = 0; a < r; ++a) {
        var o = t[e + a],
            s = o >> 8 & 255,
            u = 16711935 & (u = (u = 16711935 & o) + ((s << 16) + s));
        n[i + a] = (4278255360 & o) + u >>> 0;
      }
    }

    function Y(t, e) {
      e.jd = t >> 0 & 255, e.hd = t >> 8 & 255, e.ud = t >> 16 & 255;
    }

    function J(t, e, r, n, i, a) {
      var o;

      for (o = 0; o < n; ++o) {
        var s = e[r + o],
            u = s >>> 8,
            c = s,
            l = 255 & (l = (l = s >>> 16) + ((t.jd << 24 >> 24) * (u << 24 >> 24) >>> 5));
        c = 255 & (c = (c = c + ((t.hd << 24 >> 24) * (u << 24 >> 24) >>> 5)) + ((t.ud << 24 >> 24) * (l << 24 >> 24) >>> 5));
        i[a + o] = (4278255360 & s) + (l << 16) + c;
      }
    }

    function X(e, r, n, i, a) {
      t[r] = function (t, e, r, n, o, s, u, c, l) {
        for (n = u; n < c; ++n) for (u = 0; u < l; ++u) o[s++] = a(r[i(t[e++])]);
      }, t[e] = function (e, r, o, s, u, c, l) {
        var h = 8 >> e.b,
            f = e.Ea,
            d = e.K[0],
            p = e.w;
        if (8 > h) for (e = (1 << e.b) - 1, p = (1 << h) - 1; r < o; ++r) {
          var g,
              m = 0;

          for (g = 0; g < f; ++g) g & e || (m = i(s[u++])), c[l++] = a(d[m & p]), m >>= h;
        } else t["VP8LMapColor" + n](s, u, d, p, c, l, r, o, f);
      };
    }

    function K(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = t[e++];
        n[i++] = a >> 16 & 255, n[i++] = a >> 8 & 255, n[i++] = a >> 0 & 255;
      }
    }

    function Z(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = t[e++];
        n[i++] = a >> 16 & 255, n[i++] = a >> 8 & 255, n[i++] = a >> 0 & 255, n[i++] = a >> 24 & 255;
      }
    }

    function $(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = (o = t[e++]) >> 16 & 240 | o >> 12 & 15,
            o = o >> 0 & 240 | o >> 28 & 15;
        n[i++] = a, n[i++] = o;
      }
    }

    function Q(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = (o = t[e++]) >> 16 & 248 | o >> 13 & 7,
            o = o >> 5 & 224 | o >> 3 & 31;
        n[i++] = a, n[i++] = o;
      }
    }

    function tt(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = t[e++];
        n[i++] = a >> 0 & 255, n[i++] = a >> 8 & 255, n[i++] = a >> 16 & 255;
      }
    }

    function et(t, e, r, i, a, o) {
      if (0 == o) for (r = e + r; e < r;) I(i, ((o = t[e++])[0] >> 24 | o[1] >> 8 & 65280 | o[2] << 8 & 16711680 | o[3] << 24) >>> 0), a += 32;else n(i, a, t, e, r);
    }

    function rt(e, r) {
      t[r][0] = t[e + "0"], t[r][1] = t[e + "1"], t[r][2] = t[e + "2"], t[r][3] = t[e + "3"], t[r][4] = t[e + "4"], t[r][5] = t[e + "5"], t[r][6] = t[e + "6"], t[r][7] = t[e + "7"], t[r][8] = t[e + "8"], t[r][9] = t[e + "9"], t[r][10] = t[e + "10"], t[r][11] = t[e + "11"], t[r][12] = t[e + "12"], t[r][13] = t[e + "13"], t[r][14] = t[e + "0"], t[r][15] = t[e + "0"];
    }

    function nt(t) {
      return t == Hn || t == Vn || t == Wn || t == Gn;
    }

    function it() {
      this.eb = [], this.size = this.A = this.fb = 0;
    }

    function at() {
      this.y = [], this.f = [], this.ea = [], this.F = [], this.Tc = this.Ed = this.Cd = this.Fd = this.lb = this.Db = this.Ab = this.fa = this.J = this.W = this.N = this.O = 0;
    }

    function ot() {
      this.Rd = this.height = this.width = this.S = 0, this.f = {}, this.f.RGBA = new it(), this.f.kb = new at(), this.sd = null;
    }

    function st() {
      this.width = [0], this.height = [0], this.Pd = [0], this.Qd = [0], this.format = [0];
    }

    function ut() {
      this.Id = this.fd = this.Md = this.hb = this.ib = this.da = this.bd = this.cd = this.j = this.v = this.Da = this.Sd = this.ob = 0;
    }

    function ct(t) {
      return alert("todo:WebPSamplerProcessPlane"), t.T;
    }

    function lt(t, e) {
      var r = t.T,
          i = e.ba.f.RGBA,
          a = i.eb,
          o = i.fb + t.ka * i.A,
          s = vi[e.ba.S],
          u = t.y,
          c = t.O,
          l = t.f,
          h = t.N,
          f = t.ea,
          d = t.W,
          p = e.cc,
          g = e.dc,
          m = e.Mc,
          v = e.Nc,
          b = t.ka,
          y = t.ka + t.T,
          w = t.U,
          N = w + 1 >> 1;

      for (0 == b ? s(u, c, null, null, l, h, f, d, l, h, f, d, a, o, null, null, w) : (s(e.ec, e.fc, u, c, p, g, m, v, l, h, f, d, a, o - i.A, a, o, w), ++r); b + 2 < y; b += 2) p = l, g = h, m = f, v = d, h += t.Rc, d += t.Rc, o += 2 * i.A, s(u, (c += 2 * t.fa) - t.fa, u, c, p, g, m, v, l, h, f, d, a, o - i.A, a, o, w);

      return c += t.fa, t.j + y < t.o ? (n(e.ec, e.fc, u, c, w), n(e.cc, e.dc, l, h, N), n(e.Mc, e.Nc, f, d, N), r--) : 1 & y || s(u, c, null, null, l, h, f, d, l, h, f, d, a, o + i.A, null, null, w), r;
    }

    function ht(t, r, n) {
      var i = t.F,
          a = [t.J];

      if (null != i) {
        var o = t.U,
            s = r.ba.S,
            u = s == Dn || s == Wn;
        r = r.ba.f.RGBA;
        var c = [0],
            l = t.ka;
        c[0] = t.T, t.Kb && (0 == l ? --c[0] : (--l, a[0] -= t.width), t.j + t.ka + t.T == t.o && (c[0] = t.o - t.j - l));
        var h = r.eb;
        l = r.fb + l * r.A;
        t = Sn(i, a[0], t.width, o, c, h, l + (u ? 0 : 3), r.A), e(n == c), t && nt(s) && An(h, l, u, o, c, r.A);
      }

      return 0;
    }

    function ft(t) {
      var e = t.ma,
          r = e.ba.S,
          n = 11 > r,
          i = r == qn || r == Tn || r == Dn || r == Un || 12 == r || nt(r);
      if (e.memory = null, e.Ib = null, e.Jb = null, e.Nd = null, !Mr(e.Oa, t, i ? 11 : 12)) return 0;
      if (i && nt(r) && br(), t.da) alert("todo:use_scaling");else {
        if (n) {
          if (e.Ib = ct, t.Kb) {
            if (r = t.U + 1 >> 1, e.memory = a(t.U + 2 * r), null == e.memory) return 0;
            e.ec = e.memory, e.fc = 0, e.cc = e.ec, e.dc = e.fc + t.U, e.Mc = e.cc, e.Nc = e.dc + r, e.Ib = lt, br();
          }
        } else alert("todo:EmitYUV");

        i && (e.Jb = ht, n && mr());
      }

      if (n && !Ci) {
        for (t = 0; 256 > t; ++t) ji[t] = 89858 * (t - 128) + _i >> Si, Mi[t] = -22014 * (t - 128) + _i, Bi[t] = -45773 * (t - 128), Oi[t] = 113618 * (t - 128) + _i >> Si;

        for (t = Pi; t < ki; ++t) e = 76283 * (t - 16) + _i >> Si, Ei[t - Pi] = Wt(e, 255), qi[t - Pi] = Wt(e + 8 >> 4, 15);

        Ci = 1;
      }

      return 1;
    }

    function dt(t) {
      var r = t.ma,
          n = t.U,
          i = t.T;
      return e(!(1 & t.ka)), 0 >= n || 0 >= i ? 0 : (n = r.Ib(t, r), null != r.Jb && r.Jb(t, r, n), r.Dc += n, 1);
    }

    function pt(t) {
      t.ma.memory = null;
    }

    function gt(t, e, r, n) {
      return 47 != y(t, 8) ? 0 : (e[0] = y(t, 14) + 1, r[0] = y(t, 14) + 1, n[0] = y(t, 1), 0 != y(t, 3) ? 0 : !t.h);
    }

    function mt(t, e) {
      if (4 > t) return t + 1;
      var r = t - 2 >> 1;
      return (2 + (1 & t) << r) + y(e, r) + 1;
    }

    function vt(t, e) {
      return 120 < e ? e - 120 : 1 <= (r = ((r = $n[e - 1]) >> 4) * t + (8 - (15 & r))) ? r : 1;
      var r;
    }

    function bt(t, e, r) {
      var n = L(r),
          i = t[e += 255 & n].g - 8;
      return 0 < i && (x(r, r.u + 8), n = L(r), e += t[e].value, e += n & (1 << i) - 1), x(r, r.u + t[e].g), t[e].value;
    }

    function yt(t, r, n) {
      return n.g += t.g, n.value += t.value << r >>> 0, e(8 >= n.g), t.g;
    }

    function wt(t, r, n) {
      var i = t.xc;
      return e((r = 0 == i ? 0 : t.vc[t.md * (n >> i) + (r >> i)]) < t.Wb), t.Ya[r];
    }

    function Nt(t, r, i, a) {
      var o = t.ab,
          s = t.c * r,
          u = t.C;
      r = u + r;
      var c = i,
          l = a;

      for (a = t.Ta, i = t.Ua; 0 < o--;) {
        var h = t.gc[o],
            f = u,
            d = r,
            p = c,
            g = l,
            m = (l = a, c = i, h.Ea);

        switch (e(f < d), e(d <= h.nc), h.hc) {
          case 2:
            Gr(p, g, (d - f) * m, l, c);
            break;

          case 0:
            var v = f,
                b = d,
                y = l,
                w = c,
                N = (_ = h).Ea;
            0 == v && (Vr(p, g, null, null, 1, y, w), W(p, g + 1, 0, 0, N - 1, y, w + 1), g += N, w += N, ++v);

            for (var L = 1 << _.b, A = L - 1, x = q(N, _.b), S = _.K, _ = _.w + (v >> _.b) * x; v < b;) {
              var P = S,
                  k = _,
                  I = 1;

              for (Wr(p, g, y, w - N, 1, y, w); I < N;) {
                var F = (I & ~A) + L;
                F > N && (F = N), (0, Zr[P[k++] >> 8 & 15])(p, g + +I, y, w + I - N, F - I, y, w + I), I = F;
              }

              g += N, w += N, ++v & A || (_ += x);
            }

            d != h.nc && n(l, c - m, l, c + (d - f - 1) * m, m);
            break;

          case 1:
            for (m = p, b = g, N = (p = h.Ea) - (w = p & ~(y = (g = 1 << h.b) - 1)), v = q(p, h.b), L = h.K, h = h.w + (f >> h.b) * v; f < d;) {
              for (A = L, x = h, S = new D(), _ = b + w, P = b + p; b < _;) Y(A[x++], S), $r(S, m, b, g, l, c), b += g, c += g;

              b < P && (Y(A[x++], S), $r(S, m, b, N, l, c), b += N, c += N), ++f & y || (h += v);
            }

            break;

          case 3:
            if (p == l && g == c && 0 < h.b) {
              for (b = l, p = m = c + (d - f) * m - (w = (d - f) * q(h.Ea, h.b)), g = l, y = c, v = [], w = (N = w) - 1; 0 <= w; --w) v[w] = g[y + w];

              for (w = N - 1; 0 <= w; --w) b[p + w] = v[w];

              Yr(h, f, d, l, m, l, c);
            } else Yr(h, f, d, p, g, l, c);

        }

        c = a, l = i;
      }

      l != i && n(a, i, c, l, s);
    }

    function Lt(t, r) {
      var n = t.V,
          i = t.Ba + t.c * t.C,
          a = r - t.C;

      if (e(r <= t.l.o), e(16 >= a), 0 < a) {
        var o = t.l,
            s = t.Ta,
            u = t.Ua,
            c = o.width;

        if (Nt(t, a, n, i), a = u = [u], e((n = t.C) < (i = r)), e(o.v < o.va), i > o.o && (i = o.o), n < o.j) {
          var l = o.j - n;
          n = o.j;
          a[0] += l * c;
        }

        if (n >= i ? n = 0 : (a[0] += 4 * o.v, o.ka = n - o.j, o.U = o.va - o.v, o.T = i - n, n = 1), n) {
          if (u = u[0], 11 > (n = t.ca).S) {
            var h = n.f.RGBA,
                f = (i = n.S, a = o.U, o = o.T, l = h.eb, h.A),
                d = o;

            for (h = h.fb + t.Ma * h.A; 0 < d--;) {
              var p = s,
                  g = u,
                  m = a,
                  v = l,
                  b = h;

              switch (i) {
                case En:
                  Qr(p, g, m, v, b);
                  break;

                case qn:
                  tn(p, g, m, v, b);
                  break;

                case Hn:
                  tn(p, g, m, v, b), An(v, b, 0, m, 1, 0);
                  break;

                case Rn:
                  nn(p, g, m, v, b);
                  break;

                case Tn:
                  et(p, g, m, v, b, 1);
                  break;

                case Vn:
                  et(p, g, m, v, b, 1), An(v, b, 0, m, 1, 0);
                  break;

                case Dn:
                  et(p, g, m, v, b, 0);
                  break;

                case Wn:
                  et(p, g, m, v, b, 0), An(v, b, 1, m, 1, 0);
                  break;

                case Un:
                  en(p, g, m, v, b);
                  break;

                case Gn:
                  en(p, g, m, v, b), xn(v, b, m, 1, 0);
                  break;

                case zn:
                  rn(p, g, m, v, b);
                  break;

                default:
                  e(0);
              }

              u += c, h += f;
            }

            t.Ma += o;
          } else alert("todo:EmitRescaledRowsYUVA");

          e(t.Ma <= n.height);
        }
      }

      t.C = r, e(t.C <= t.i);
    }

    function At(t) {
      var e;
      if (0 < t.ua) return 0;

      for (e = 0; e < t.Wb; ++e) {
        var r = t.Ya[e].G,
            n = t.Ya[e].H;
        if (0 < r[1][n[1] + 0].g || 0 < r[2][n[2] + 0].g || 0 < r[3][n[3] + 0].g) return 0;
      }

      return 1;
    }

    function xt(t, r, n, i, a, o) {
      if (0 != t.Z) {
        var s = t.qd,
            u = t.rd;

        for (e(null != mi[t.Z]); r < n; ++r) mi[t.Z](s, u, i, a, i, a, o), s = i, u = a, a += o;

        t.qd = s, t.rd = u;
      }
    }

    function St(t, r) {
      var n = t.l.ma,
          i = 0 == n.Z || 1 == n.Z ? t.l.j : t.C;
      i = t.C < i ? i : t.C;

      if (e(r <= t.l.o), r > i) {
        var a = t.l.width,
            o = n.ca,
            s = n.tb + a * i,
            u = t.V,
            c = t.Ba + t.c * i,
            l = t.gc;
        e(1 == t.ab), e(3 == l[0].hc), Xr(l[0], i, r, u, c, o, s), xt(n, i, r, o, s, a);
      }

      t.C = t.Ma = r;
    }

    function _t(t, r, n, i, a, o, s) {
      var u = t.$ / i,
          c = t.$ % i,
          l = t.m,
          h = t.s,
          f = n + t.$,
          d = f;
      a = n + i * a;
      var p = n + i * o,
          g = 280 + h.ua,
          m = t.Pb ? u : 16777216,
          v = 0 < h.ua ? h.Wa : null,
          b = h.wc,
          y = f < p ? wt(h, c, u) : null;
      e(t.C < o), e(p <= a);
      var w = !1;

      t: for (;;) {
        for (; w || f < p;) {
          var N = 0;

          if (u >= m) {
            var _ = f - n;

            e((m = t).Pb), m.wd = m.m, m.xd = _, 0 < m.s.ua && B(m.s.Wa, m.s.vb), m = u + ti;
          }

          if (c & b || (y = wt(h, c, u)), e(null != y), y.Qb && (r[f] = y.qb, w = !0), !w) if (S(l), y.jc) {
            N = l, _ = r;
            var P = f,
                k = y.pd[L(N) & Rr - 1];
            e(y.jc), 256 > k.g ? (x(N, N.u + k.g), _[P] = k.value, N = 0) : (x(N, N.u + k.g - 256), e(256 <= k.value), N = k.value), 0 == N && (w = !0);
          } else N = bt(y.G[0], y.H[0], l);
          if (l.h) break;

          if (w || 256 > N) {
            if (!w) if (y.nd) r[f] = (y.qb | N << 8) >>> 0;else {
              if (S(l), w = bt(y.G[1], y.H[1], l), S(l), _ = bt(y.G[2], y.H[2], l), P = bt(y.G[3], y.H[3], l), l.h) break;
              r[f] = (P << 24 | w << 16 | N << 8 | _) >>> 0;
            }
            if (w = !1, ++f, ++c >= i && (c = 0, ++u, null != s && u <= o && !(u % 16) && s(t, u), null != v)) for (; d < f;) N = r[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;
          } else if (280 > N) {
            if (N = mt(N - 256, l), _ = bt(y.G[4], y.H[4], l), S(l), _ = vt(i, _ = mt(_, l)), l.h) break;
            if (f - n < _ || a - f < N) break t;

            for (P = 0; P < N; ++P) r[f + P] = r[f + P - _];

            for (f += N, c += N; c >= i;) c -= i, ++u, null != s && u <= o && !(u % 16) && s(t, u);

            if (e(f <= a), c & b && (y = wt(h, c, u)), null != v) for (; d < f;) N = r[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;
          } else {
            if (!(N < g)) break t;

            for (w = N - 280, e(null != v); d < f;) N = r[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;

            N = f, e(!(w >>> (_ = v).Xa)), r[N] = _.X[w], w = !0;
          }

          w || e(l.h == A(l));
        }

        if (t.Pb && l.h && f < a) e(t.m.h), t.a = 5, t.m = t.wd, t.$ = t.xd, 0 < t.s.ua && B(t.s.vb, t.s.Wa);else {
          if (l.h) break t;
          null != s && s(t, u > o ? o : u), t.a = 0, t.$ = f - n;
        }
        return 1;
      }

      return t.a = 3, 0;
    }

    function Pt(t) {
      e(null != t), t.vc = null, t.yc = null, t.Ya = null;
      var r = t.Wa;
      null != r && (r.X = null), t.vb = null, e(null != t);
    }

    function kt() {
      var e = new or();
      return null == e ? null : (e.a = 0, e.xb = gi, rt("Predictor", "VP8LPredictors"), rt("Predictor", "VP8LPredictors_C"), rt("PredictorAdd", "VP8LPredictorsAdd"), rt("PredictorAdd", "VP8LPredictorsAdd_C"), Gr = G, $r = J, Qr = K, tn = Z, en = $, rn = Q, nn = tt, t.VP8LMapColor32b = Jr, t.VP8LMapColor8b = Kr, e);
    }

    function It(t, r, n, s, u) {
      var c = 1,
          f = [t],
          p = [r],
          g = s.m,
          m = s.s,
          v = null,
          b = 0;

      t: for (;;) {
        if (n) for (; c && y(g, 1);) {
          var w = f,
              N = p,
              A = s,
              _ = 1,
              P = A.m,
              k = A.gc[A.ab],
              I = y(P, 2);
          if (A.Oc & 1 << I) c = 0;else {
            switch (A.Oc |= 1 << I, k.hc = I, k.Ea = w[0], k.nc = N[0], k.K = [null], ++A.ab, e(4 >= A.ab), I) {
              case 0:
              case 1:
                k.b = y(P, 3) + 2, _ = It(q(k.Ea, k.b), q(k.nc, k.b), 0, A, k.K), k.K = k.K[0];
                break;

              case 3:
                var F,
                    C = y(P, 8) + 1,
                    j = 16 < C ? 0 : 4 < C ? 1 : 2 < C ? 2 : 3;

                if (w[0] = q(k.Ea, j), k.b = j, F = _ = It(C, 1, 0, A, k.K)) {
                  var B,
                      M = C,
                      E = k,
                      T = 1 << (8 >> E.b),
                      D = a(T);
                  if (null == D) F = 0;else {
                    var U = E.K[0],
                        z = E.w;

                    for (D[0] = E.K[0][0], B = 1; B < 1 * M; ++B) D[B] = R(U[z + B], D[B - 1]);

                    for (; B < 4 * T; ++B) D[B] = 0;

                    E.K[0] = null, E.K[0] = D, F = 1;
                  }
                }

                _ = F;
                break;

              case 2:
                break;

              default:
                e(0);
            }

            c = _;
          }
        }

        if (f = f[0], p = p[0], c && y(g, 1) && !(c = 1 <= (b = y(g, 4)) && 11 >= b)) {
          s.a = 3;
          break t;
        }

        var H;
        if (H = c) e: {
          var V,
              W,
              G,
              Y = s,
              J = f,
              X = p,
              K = b,
              Z = n,
              $ = Y.m,
              Q = Y.s,
              tt = [null],
              et = 1,
              rt = 0,
              nt = Qn[K];

          r: for (;;) {
            if (Z && y($, 1)) {
              var it = y($, 3) + 2,
                  at = q(J, it),
                  ot = q(X, it),
                  st = at * ot;
              if (!It(at, ot, 0, Y, tt)) break r;

              for (tt = tt[0], Q.xc = it, V = 0; V < st; ++V) {
                var ut = tt[V] >> 8 & 65535;
                tt[V] = ut, ut >= et && (et = ut + 1);
              }
            }

            if ($.h) break r;

            for (W = 0; 5 > W; ++W) {
              var ct = Xn[W];
              !W && 0 < K && (ct += 1 << K), rt < ct && (rt = ct);
            }

            var lt = o(et * nt, h),
                ht = et,
                ft = o(ht, d);
            if (null == ft) var dt = null;else e(65536 >= ht), dt = ft;
            var pt = a(rt);

            if (null == dt || null == pt || null == lt) {
              Y.a = 1;
              break r;
            }

            var gt = lt;

            for (V = G = 0; V < et; ++V) {
              var mt = dt[V],
                  vt = mt.G,
                  bt = mt.H,
                  wt = 0,
                  Nt = 1,
                  Lt = 0;

              for (W = 0; 5 > W; ++W) {
                ct = Xn[W], vt[W] = gt, bt[W] = G, !W && 0 < K && (ct += 1 << K);

                n: {
                  var At,
                      xt = ct,
                      St = Y,
                      kt = pt,
                      Ft = gt,
                      Ct = G,
                      jt = 0,
                      Ot = St.m,
                      Bt = y(Ot, 1);

                  if (i(kt, 0, 0, xt), Bt) {
                    var Mt = y(Ot, 1) + 1,
                        Et = y(Ot, 1),
                        qt = y(Ot, 0 == Et ? 1 : 8);
                    kt[qt] = 1, 2 == Mt && (kt[qt = y(Ot, 8)] = 1);
                    var Rt = 1;
                  } else {
                    var Tt = a(19),
                        Dt = y(Ot, 4) + 4;

                    if (19 < Dt) {
                      St.a = 3;
                      var Ut = 0;
                      break n;
                    }

                    for (At = 0; At < Dt; ++At) Tt[Zn[At]] = y(Ot, 3);

                    var zt = void 0,
                        Ht = void 0,
                        Vt = St,
                        Wt = Tt,
                        Gt = xt,
                        Yt = kt,
                        Jt = 0,
                        Xt = Vt.m,
                        Kt = 8,
                        Zt = o(128, h);

                    i: for (; l(Zt, 0, 7, Wt, 19);) {
                      if (y(Xt, 1)) {
                        var $t = 2 + 2 * y(Xt, 3);
                        if ((zt = 2 + y(Xt, $t)) > Gt) break i;
                      } else zt = Gt;

                      for (Ht = 0; Ht < Gt && zt--;) {
                        S(Xt);
                        var Qt = Zt[0 + (127 & L(Xt))];
                        x(Xt, Xt.u + Qt.g);
                        var te = Qt.value;
                        if (16 > te) Yt[Ht++] = te, 0 != te && (Kt = te);else {
                          var ee = 16 == te,
                              re = te - 16,
                              ne = Jn[re],
                              ie = y(Xt, Yn[re]) + ne;
                          if (Ht + ie > Gt) break i;

                          for (var ae = ee ? Kt : 0; 0 < ie--;) Yt[Ht++] = ae;
                        }
                      }

                      Jt = 1;
                      break i;
                    }

                    Jt || (Vt.a = 3), Rt = Jt;
                  }

                  (Rt = Rt && !Ot.h) && (jt = l(Ft, Ct, 8, kt, xt)), Rt && 0 != jt ? Ut = jt : (St.a = 3, Ut = 0);
                }

                if (0 == Ut) break r;

                if (Nt && 1 == Kn[W] && (Nt = 0 == gt[G].g), wt += gt[G].g, G += Ut, 3 >= W) {
                  var oe,
                      se = pt[0];

                  for (oe = 1; oe < ct; ++oe) pt[oe] > se && (se = pt[oe]);

                  Lt += se;
                }
              }

              if (mt.nd = Nt, mt.Qb = 0, Nt && (mt.qb = (vt[3][bt[3] + 0].value << 24 | vt[1][bt[1] + 0].value << 16 | vt[2][bt[2] + 0].value) >>> 0, 0 == wt && 256 > vt[0][bt[0] + 0].value && (mt.Qb = 1, mt.qb += vt[0][bt[0] + 0].value << 8)), mt.jc = !mt.Qb && 6 > Lt, mt.jc) {
                var ue,
                    ce = mt;

                for (ue = 0; ue < Rr; ++ue) {
                  var le = ue,
                      he = ce.pd[le],
                      fe = ce.G[0][ce.H[0] + le];
                  256 <= fe.value ? (he.g = fe.g + 256, he.value = fe.value) : (he.g = 0, he.value = 0, le >>= yt(fe, 8, he), le >>= yt(ce.G[1][ce.H[1] + le], 16, he), le >>= yt(ce.G[2][ce.H[2] + le], 0, he), yt(ce.G[3][ce.H[3] + le], 24, he));
                }
              }
            }

            Q.vc = tt, Q.Wb = et, Q.Ya = dt, Q.yc = lt, H = 1;
            break e;
          }

          H = 0;
        }

        if (!(c = H)) {
          s.a = 3;
          break t;
        }

        if (0 < b) {
          if (m.ua = 1 << b, !O(m.Wa, b)) {
            s.a = 1, c = 0;
            break t;
          }
        } else m.ua = 0;

        var de = s,
            pe = f,
            ge = p,
            me = de.s,
            ve = me.xc;

        if (de.c = pe, de.i = ge, me.md = q(pe, ve), me.wc = 0 == ve ? -1 : (1 << ve) - 1, n) {
          s.xb = pi;
          break t;
        }

        if (null == (v = a(f * p))) {
          s.a = 1, c = 0;
          break t;
        }

        c = (c = _t(s, v, 0, f, p, p, null)) && !g.h;
        break t;
      }

      return c ? (null != u ? u[0] = v : (e(null == v), e(n)), s.$ = 0, n || Pt(m)) : Pt(m), c;
    }

    function Ft(t, r) {
      var n = t.c * t.i,
          i = n + r + 16 * r;
      return e(t.c <= r), t.V = a(i), null == t.V ? (t.Ta = null, t.Ua = 0, t.a = 1, 0) : (t.Ta = t.V, t.Ua = t.Ba + n + r, 1);
    }

    function Ct(t, r) {
      var n = t.C,
          i = r - n,
          a = t.V,
          o = t.Ba + t.c * n;

      for (e(r <= t.l.o); 0 < i;) {
        var s = 16 < i ? 16 : i,
            u = t.l.ma,
            c = t.l.width,
            l = c * s,
            h = u.ca,
            f = u.tb + c * n,
            d = t.Ta,
            p = t.Ua;
        Nt(t, s, a, o), _n(d, p, h, f, l), xt(u, n, n + s, h, f, c), i -= s, a += s * t.c, n += s;
      }

      e(n == r), t.C = t.Ma = r;
    }

    function jt() {
      this.ub = this.yd = this.td = this.Rb = 0;
    }

    function Ot() {
      this.Kd = this.Ld = this.Ud = this.Td = this.i = this.c = 0;
    }

    function Bt() {
      this.Fb = this.Bb = this.Cb = 0, this.Zb = a(4), this.Lb = a(4);
    }

    function Mt() {
      this.Yb = function () {
        var t = [];
        return function t(e, r, n) {
          for (var i = n[r], a = 0; a < i && (e.push(n.length > r + 1 ? [] : 0), !(n.length < r + 1)); a++) t(e[a], r + 1, n);
        }(t, 0, [3, 11]), t;
      }();
    }

    function Et() {
      this.jb = a(3), this.Wc = s([4, 8], Mt), this.Xc = s([4, 17], Mt);
    }

    function qt() {
      this.Pc = this.wb = this.Tb = this.zd = 0, this.vd = new a(4), this.od = new a(4);
    }

    function Rt() {
      this.ld = this.La = this.dd = this.tc = 0;
    }

    function Tt() {
      this.Na = this.la = 0;
    }

    function Dt() {
      this.Sc = [0, 0], this.Eb = [0, 0], this.Qc = [0, 0], this.ia = this.lc = 0;
    }

    function Ut() {
      this.ad = a(384), this.Za = 0, this.Ob = a(16), this.$b = this.Ad = this.ia = this.Gc = this.Hc = this.Dd = 0;
    }

    function zt() {
      this.uc = this.M = this.Nb = 0, this.wa = Array(new Rt()), this.Y = 0, this.ya = Array(new Ut()), this.aa = 0, this.l = new Gt();
    }

    function Ht() {
      this.y = a(16), this.f = a(8), this.ea = a(8);
    }

    function Vt() {
      this.cb = this.a = 0, this.sc = "", this.m = new w(), this.Od = new jt(), this.Kc = new Ot(), this.ed = new qt(), this.Qa = new Bt(), this.Ic = this.$c = this.Aa = 0, this.D = new zt(), this.Xb = this.Va = this.Hb = this.zb = this.yb = this.Ub = this.za = 0, this.Jc = o(8, w), this.ia = 0, this.pb = o(4, Dt), this.Pa = new Et(), this.Bd = this.kc = 0, this.Ac = [], this.Bc = 0, this.zc = [0, 0, 0, 0], this.Gd = Array(new Ht()), this.Hd = 0, this.rb = Array(new Tt()), this.sb = 0, this.wa = Array(new Rt()), this.Y = 0, this.oc = [], this.pc = 0, this.sa = [], this.ta = 0, this.qa = [], this.ra = 0, this.Ha = [], this.B = this.R = this.Ia = 0, this.Ec = [], this.M = this.ja = this.Vb = this.Fc = 0, this.ya = Array(new Ut()), this.L = this.aa = 0, this.gd = s([4, 2], Rt), this.ga = null, this.Fa = [], this.Cc = this.qc = this.P = 0, this.Gb = [], this.Uc = 0, this.mb = [], this.nb = 0, this.rc = [], this.Ga = this.Vc = 0;
    }

    function Wt(t, e) {
      return 0 > t ? 0 : t > e ? e : t;
    }

    function Gt() {
      this.T = this.U = this.ka = this.height = this.width = 0, this.y = [], this.f = [], this.ea = [], this.Rc = this.fa = this.W = this.N = this.O = 0, this.ma = "void", this.put = "VP8IoPutHook", this.ac = "VP8IoSetupHook", this.bc = "VP8IoTeardownHook", this.ha = this.Kb = 0, this.data = [], this.hb = this.ib = this.da = this.o = this.j = this.va = this.v = this.Da = this.ob = this.w = 0, this.F = [], this.J = 0;
    }

    function Yt() {
      var t = new Vt();
      return null != t && (t.a = 0, t.sc = "OK", t.cb = 0, t.Xb = 0, ni || (ni = Zt)), t;
    }

    function Jt(t, e, r) {
      return 0 == t.a && (t.a = e, t.sc = r, t.cb = 0), 0;
    }

    function Xt(t, e, r) {
      return 3 <= r && 157 == t[e + 0] && 1 == t[e + 1] && 42 == t[e + 2];
    }

    function Kt(t, r) {
      if (null == t) return 0;
      if (t.a = 0, t.sc = "OK", null == r) return Jt(t, 2, "null VP8Io passed to VP8GetHeaders()");
      var n = r.data,
          a = r.w,
          o = r.ha;
      if (4 > o) return Jt(t, 7, "Truncated header.");
      var s = n[a + 0] | n[a + 1] << 8 | n[a + 2] << 16,
          u = t.Od;
      if (u.Rb = !(1 & s), u.td = s >> 1 & 7, u.yd = s >> 4 & 1, u.ub = s >> 5, 3 < u.td) return Jt(t, 3, "Incorrect keyframe parameters.");
      if (!u.yd) return Jt(t, 4, "Frame not displayable.");
      a += 3, o -= 3;
      var c = t.Kc;

      if (u.Rb) {
        if (7 > o) return Jt(t, 7, "cannot parse picture header");
        if (!Xt(n, a, o)) return Jt(t, 3, "Bad code word");
        c.c = 16383 & (n[a + 4] << 8 | n[a + 3]), c.Td = n[a + 4] >> 6, c.i = 16383 & (n[a + 6] << 8 | n[a + 5]), c.Ud = n[a + 6] >> 6, a += 7, o -= 7, t.za = c.c + 15 >> 4, t.Ub = c.i + 15 >> 4, r.width = c.c, r.height = c.i, r.Da = 0, r.j = 0, r.v = 0, r.va = r.width, r.o = r.height, r.da = 0, r.ib = r.width, r.hb = r.height, r.U = r.width, r.T = r.height, i((s = t.Pa).jb, 0, 255, s.jb.length), e(null != (s = t.Qa)), s.Cb = 0, s.Bb = 0, s.Fb = 1, i(s.Zb, 0, 0, s.Zb.length), i(s.Lb, 0, 0, s.Lb);
      }

      if (u.ub > o) return Jt(t, 7, "bad partition length");
      p(s = t.m, n, a, u.ub), a += u.ub, o -= u.ub, u.Rb && (c.Ld = P(s), c.Kd = P(s)), c = t.Qa;
      var l,
          h = t.Pa;

      if (e(null != s), e(null != c), c.Cb = P(s), c.Cb) {
        if (c.Bb = P(s), P(s)) {
          for (c.Fb = P(s), l = 0; 4 > l; ++l) c.Zb[l] = P(s) ? m(s, 7) : 0;

          for (l = 0; 4 > l; ++l) c.Lb[l] = P(s) ? m(s, 6) : 0;
        }

        if (c.Bb) for (l = 0; 3 > l; ++l) h.jb[l] = P(s) ? g(s, 8) : 255;
      } else c.Bb = 0;

      if (s.Ka) return Jt(t, 3, "cannot parse segment header");

      if ((c = t.ed).zd = P(s), c.Tb = g(s, 6), c.wb = g(s, 3), c.Pc = P(s), c.Pc && P(s)) {
        for (h = 0; 4 > h; ++h) P(s) && (c.vd[h] = m(s, 6));

        for (h = 0; 4 > h; ++h) P(s) && (c.od[h] = m(s, 6));
      }

      if (t.L = 0 == c.Tb ? 0 : c.zd ? 1 : 2, s.Ka) return Jt(t, 3, "cannot parse filter header");
      var f = o;
      if (o = l = a, a = l + f, c = f, t.Xb = (1 << g(t.m, 2)) - 1, f < 3 * (h = t.Xb)) n = 7;else {
        for (l += 3 * h, c -= 3 * h, f = 0; f < h; ++f) {
          var d = n[o + 0] | n[o + 1] << 8 | n[o + 2] << 16;
          d > c && (d = c), p(t.Jc[+f], n, l, d), l += d, c -= d, o += 3;
        }

        p(t.Jc[+h], n, l, c), n = l < a ? 0 : 5;
      }
      if (0 != n) return Jt(t, n, "cannot parse partitions");

      for (n = g(l = t.m, 7), o = P(l) ? m(l, 4) : 0, a = P(l) ? m(l, 4) : 0, c = P(l) ? m(l, 4) : 0, h = P(l) ? m(l, 4) : 0, l = P(l) ? m(l, 4) : 0, f = t.Qa, d = 0; 4 > d; ++d) {
        if (f.Cb) {
          var v = f.Zb[d];
          f.Fb || (v += n);
        } else {
          if (0 < d) {
            t.pb[d] = t.pb[0];
            continue;
          }

          v = n;
        }

        var b = t.pb[d];
        b.Sc[0] = ei[Wt(v + o, 127)], b.Sc[1] = ri[Wt(v + 0, 127)], b.Eb[0] = 2 * ei[Wt(v + a, 127)], b.Eb[1] = 101581 * ri[Wt(v + c, 127)] >> 16, 8 > b.Eb[1] && (b.Eb[1] = 8), b.Qc[0] = ei[Wt(v + h, 117)], b.Qc[1] = ri[Wt(v + l, 127)], b.lc = v + l;
      }

      if (!u.Rb) return Jt(t, 4, "Not a key frame.");

      for (P(s), u = t.Pa, n = 0; 4 > n; ++n) {
        for (o = 0; 8 > o; ++o) for (a = 0; 3 > a; ++a) for (c = 0; 11 > c; ++c) h = k(s, ci[n][o][a][c]) ? g(s, 8) : si[n][o][a][c], u.Wc[n][o].Yb[a][c] = h;

        for (o = 0; 17 > o; ++o) u.Xc[n][o] = u.Wc[n][li[o]];
      }

      return t.kc = P(s), t.kc && (t.Bd = g(s, 8)), t.cb = 1;
    }

    function Zt(t, e, r, n, i, a, o) {
      var s = e[i].Yb[r];

      for (r = 0; 16 > i; ++i) {
        if (!k(t, s[r + 0])) return i;

        for (; !k(t, s[r + 1]);) if (s = e[++i].Yb[0], r = 0, 16 == i) return 16;

        var u = e[i + 1].Yb;

        if (k(t, s[r + 2])) {
          var c = t,
              l = 0;
          if (k(c, (f = s)[(h = r) + 3])) {
            if (k(c, f[h + 6])) {
              for (s = 0, h = 2 * (l = k(c, f[h + 8])) + (f = k(c, f[h + 9 + l])), l = 0, f = ii[h]; f[s]; ++s) l += l + k(c, f[s]);

              l += 3 + (8 << h);
            } else k(c, f[h + 7]) ? (l = 7 + 2 * k(c, 165), l += k(c, 145)) : l = 5 + k(c, 159);
          } else l = k(c, f[h + 4]) ? 3 + k(c, f[h + 5]) : 2;
          s = u[2];
        } else l = 1, s = u[1];

        u = o + ai[i], 0 > (c = t).b && _(c);
        var h,
            f = c.b,
            d = (h = c.Ca >> 1) - (c.I >> f) >> 31;
        --c.b, c.Ca += d, c.Ca |= 1, c.I -= (h + 1 & d) << f, a[u] = ((l ^ d) - d) * n[(0 < i) + 0];
      }

      return 16;
    }

    function $t(t) {
      var e = t.rb[t.sb - 1];
      e.la = 0, e.Na = 0, i(t.zc, 0, 0, t.zc.length), t.ja = 0;
    }

    function Qt(t, r) {
      if (null == t) return 0;
      if (null == r) return Jt(t, 2, "NULL VP8Io parameter in VP8Decode().");
      if (!t.cb && !Kt(t, r)) return 0;

      if (e(t.cb), null == r.ac || r.ac(r)) {
        r.ob && (t.L = 0);
        var s = Ti[t.L];

        if (2 == t.L ? (t.yb = 0, t.zb = 0) : (t.yb = r.v - s >> 4, t.zb = r.j - s >> 4, 0 > t.yb && (t.yb = 0), 0 > t.zb && (t.zb = 0)), t.Va = r.o + 15 + s >> 4, t.Hb = r.va + 15 + s >> 4, t.Hb > t.za && (t.Hb = t.za), t.Va > t.Ub && (t.Va = t.Ub), 0 < t.L) {
          var u = t.ed;

          for (s = 0; 4 > s; ++s) {
            var c;

            if (t.Qa.Cb) {
              var l = t.Qa.Lb[s];
              t.Qa.Fb || (l += u.Tb);
            } else l = u.Tb;

            for (c = 0; 1 >= c; ++c) {
              var h = t.gd[s][c],
                  f = l;

              if (u.Pc && (f += u.vd[0], c && (f += u.od[0])), 0 < (f = 0 > f ? 0 : 63 < f ? 63 : f)) {
                var d = f;
                0 < u.wb && (d = 4 < u.wb ? d >> 2 : d >> 1) > 9 - u.wb && (d = 9 - u.wb), 1 > d && (d = 1), h.dd = d, h.tc = 2 * f + d, h.ld = 40 <= f ? 2 : 15 <= f ? 1 : 0;
              } else h.tc = 0;

              h.La = c;
            }
          }
        }

        s = 0;
      } else Jt(t, 6, "Frame setup failed"), s = t.a;

      if (s = 0 == s) {
        if (s) {
          t.$c = 0, 0 < t.Aa || (t.Ic = Ui);

          t: {
            s = t.Ic;
            u = 4 * (d = t.za);
            var p = 32 * d,
                g = d + 1,
                m = 0 < t.L ? d * (0 < t.Aa ? 2 : 1) : 0,
                v = (2 == t.Aa ? 2 : 1) * d;
            if ((h = u + 832 + (c = 3 * (16 * s + Ti[t.L]) / 2 * p) + (l = null != t.Fa && 0 < t.Fa.length ? t.Kc.c * t.Kc.i : 0)) != h) s = 0;else {
              if (h > t.Vb) {
                if (t.Vb = 0, t.Ec = a(h), t.Fc = 0, null == t.Ec) {
                  s = Jt(t, 1, "no memory during frame initialization.");
                  break t;
                }

                t.Vb = h;
              }

              h = t.Ec, f = t.Fc, t.Ac = h, t.Bc = f, f += u, t.Gd = o(p, Ht), t.Hd = 0, t.rb = o(g + 1, Tt), t.sb = 1, t.wa = m ? o(m, Rt) : null, t.Y = 0, t.D.Nb = 0, t.D.wa = t.wa, t.D.Y = t.Y, 0 < t.Aa && (t.D.Y += d), e(!0), t.oc = h, t.pc = f, f += 832, t.ya = o(v, Ut), t.aa = 0, t.D.ya = t.ya, t.D.aa = t.aa, 2 == t.Aa && (t.D.aa += d), t.R = 16 * d, t.B = 8 * d, d = (p = Ti[t.L]) * t.R, p = p / 2 * t.B, t.sa = h, t.ta = f + d, t.qa = t.sa, t.ra = t.ta + 16 * s * t.R + p, t.Ha = t.qa, t.Ia = t.ra + 8 * s * t.B + p, t.$c = 0, f += c, t.mb = l ? h : null, t.nb = l ? f : null, e(f + l <= t.Fc + t.Vb), $t(t), i(t.Ac, t.Bc, 0, u), s = 1;
            }
          }

          if (s) {
            if (r.ka = 0, r.y = t.sa, r.O = t.ta, r.f = t.qa, r.N = t.ra, r.ea = t.Ha, r.Vd = t.Ia, r.fa = t.R, r.Rc = t.B, r.F = null, r.J = 0, !Cn) {
              for (s = -255; 255 >= s; ++s) Pn[255 + s] = 0 > s ? -s : s;

              for (s = -1020; 1020 >= s; ++s) kn[1020 + s] = -128 > s ? -128 : 127 < s ? 127 : s;

              for (s = -112; 112 >= s; ++s) In[112 + s] = -16 > s ? -16 : 15 < s ? 15 : s;

              for (s = -255; 510 >= s; ++s) Fn[255 + s] = 0 > s ? 0 : 255 < s ? 255 : s;

              Cn = 1;
            }

            an = ce, on = ae, un = oe, cn = se, ln = ue, sn = ie, hn = Je, fn = Xe, dn = $e, pn = Qe, gn = Ke, mn = Ze, vn = tr, bn = er, yn = ze, wn = He, Nn = Ve, Ln = We, fi[0] = xe, fi[1] = he, fi[2] = Le, fi[3] = Ae, fi[4] = Se, fi[5] = Pe, fi[6] = _e, fi[7] = ke, fi[8] = Fe, fi[9] = Ie, hi[0] = ve, hi[1] = de, hi[2] = pe, hi[3] = ge, hi[4] = be, hi[5] = ye, hi[6] = we, di[0] = Be, di[1] = fe, di[2] = Ce, di[3] = je, di[4] = Ee, di[5] = Me, di[6] = qe, s = 1;
          } else s = 0;
        }

        s && (s = function (t, r) {
          for (t.M = 0; t.M < t.Va; ++t.M) {
            var o,
                s = t.Jc[t.M & t.Xb],
                u = t.m,
                c = t;

            for (o = 0; o < c.za; ++o) {
              var l = u,
                  h = c,
                  f = h.Ac,
                  d = h.Bc + 4 * o,
                  p = h.zc,
                  g = h.ya[h.aa + o];

              if (h.Qa.Bb ? g.$b = k(l, h.Pa.jb[0]) ? 2 + k(l, h.Pa.jb[2]) : k(l, h.Pa.jb[1]) : g.$b = 0, h.kc && (g.Ad = k(l, h.Bd)), g.Za = !k(l, 145) + 0, g.Za) {
                var m = g.Ob,
                    v = 0;

                for (h = 0; 4 > h; ++h) {
                  var b,
                      y = p[0 + h];

                  for (b = 0; 4 > b; ++b) {
                    y = ui[f[d + b]][y];

                    for (var w = oi[k(l, y[0])]; 0 < w;) w = oi[2 * w + k(l, y[w])];

                    y = -w, f[d + b] = y;
                  }

                  n(m, v, f, d, 4), v += 4, p[0 + h] = y;
                }
              } else y = k(l, 156) ? k(l, 128) ? 1 : 3 : k(l, 163) ? 2 : 0, g.Ob[0] = y, i(f, d, y, 4), i(p, 0, y, 4);

              g.Dd = k(l, 142) ? k(l, 114) ? k(l, 183) ? 1 : 3 : 2 : 0;
            }

            if (c.m.Ka) return Jt(t, 7, "Premature end-of-partition0 encountered.");

            for (; t.ja < t.za; ++t.ja) {
              if (c = s, l = (u = t).rb[u.sb - 1], f = u.rb[u.sb + u.ja], o = u.ya[u.aa + u.ja], d = u.kc ? o.Ad : 0) l.la = f.la = 0, o.Za || (l.Na = f.Na = 0), o.Hc = 0, o.Gc = 0, o.ia = 0;else {
                var N, L;
                l = f, f = c, d = u.Pa.Xc, p = u.ya[u.aa + u.ja], g = u.pb[p.$b];
                if (h = p.ad, m = 0, v = u.rb[u.sb - 1], y = b = 0, i(h, m, 0, 384), p.Za) var A = 0,
                    x = d[3];else {
                  w = a(16);
                  var S = l.Na + v.Na;
                  if (S = ni(f, d[1], S, g.Eb, 0, w, 0), l.Na = v.Na = (0 < S) + 0, 1 < S) an(w, 0, h, m);else {
                    var _ = w[0] + 3 >> 3;

                    for (w = 0; 256 > w; w += 16) h[m + w] = _;
                  }
                  A = 1, x = d[0];
                }
                var P = 15 & l.la,
                    I = 15 & v.la;

                for (w = 0; 4 > w; ++w) {
                  var F = 1 & I;

                  for (_ = L = 0; 4 > _; ++_) P = P >> 1 | (F = (S = ni(f, x, S = F + (1 & P), g.Sc, A, h, m)) > A) << 7, L = L << 2 | (3 < S ? 3 : 1 < S ? 2 : 0 != h[m + 0]), m += 16;

                  P >>= 4, I = I >> 1 | F << 7, b = (b << 8 | L) >>> 0;
                }

                for (x = P, A = I >> 4, N = 0; 4 > N; N += 2) {
                  for (L = 0, P = l.la >> 4 + N, I = v.la >> 4 + N, w = 0; 2 > w; ++w) {
                    for (F = 1 & I, _ = 0; 2 > _; ++_) S = F + (1 & P), P = P >> 1 | (F = 0 < (S = ni(f, d[2], S, g.Qc, 0, h, m))) << 3, L = L << 2 | (3 < S ? 3 : 1 < S ? 2 : 0 != h[m + 0]), m += 16;

                    P >>= 2, I = I >> 1 | F << 5;
                  }

                  y |= L << 4 * N, x |= P << 4 << N, A |= (240 & I) << N;
                }

                l.la = x, v.la = A, p.Hc = b, p.Gc = y, p.ia = 43690 & y ? 0 : g.ia, d = !(b | y);
              }
              if (0 < u.L && (u.wa[u.Y + u.ja] = u.gd[o.$b][o.Za], u.wa[u.Y + u.ja].La |= !d), c.Ka) return Jt(t, 7, "Premature end-of-file encountered.");
            }

            if ($t(t), u = r, c = 1, o = (s = t).D, l = 0 < s.L && s.M >= s.zb && s.M <= s.Va, 0 == s.Aa) t: {
              if (o.M = s.M, o.uc = l, Or(s, o), c = 1, o = (L = s.D).Nb, l = (y = Ti[s.L]) * s.R, f = y / 2 * s.B, w = 16 * o * s.R, _ = 8 * o * s.B, d = s.sa, p = s.ta - l + w, g = s.qa, h = s.ra - f + _, m = s.Ha, v = s.Ia - f + _, I = 0 == (P = L.M), b = P >= s.Va - 1, 2 == s.Aa && Or(s, L), L.uc) for (F = (S = s).D.M, e(S.D.uc), L = S.yb; L < S.Hb; ++L) {
                A = L, x = F;
                var C = (j = (U = S).D).Nb;
                N = U.R;
                var j = j.wa[j.Y + A],
                    O = U.sa,
                    B = U.ta + 16 * C * N + 16 * A,
                    M = j.dd,
                    E = j.tc;
                if (0 != E) if (e(3 <= E), 1 == U.L) 0 < A && wn(O, B, N, E + 4), j.La && Ln(O, B, N, E), 0 < x && yn(O, B, N, E + 4), j.La && Nn(O, B, N, E);else {
                  var q = U.B,
                      R = U.qa,
                      T = U.ra + 8 * C * q + 8 * A,
                      D = U.Ha,
                      U = U.Ia + 8 * C * q + 8 * A;
                  C = j.ld;
                  0 < A && (fn(O, B, N, E + 4, M, C), pn(R, T, D, U, q, E + 4, M, C)), j.La && (mn(O, B, N, E, M, C), bn(R, T, D, U, q, E, M, C)), 0 < x && (hn(O, B, N, E + 4, M, C), dn(R, T, D, U, q, E + 4, M, C)), j.La && (gn(O, B, N, E, M, C), vn(R, T, D, U, q, E, M, C));
                }
              }

              if (s.ia && alert("todo:DitherRow"), null != u.put) {
                if (L = 16 * P, P = 16 * (P + 1), I ? (u.y = s.sa, u.O = s.ta + w, u.f = s.qa, u.N = s.ra + _, u.ea = s.Ha, u.W = s.Ia + _) : (L -= y, u.y = d, u.O = p, u.f = g, u.N = h, u.ea = m, u.W = v), b || (P -= y), P > u.o && (P = u.o), u.F = null, u.J = null, null != s.Fa && 0 < s.Fa.length && L < P && (u.J = hr(s, u, L, P - L), u.F = s.mb, null == u.F && 0 == u.F.length)) {
                  c = Jt(s, 3, "Could not decode alpha data.");
                  break t;
                }

                L < u.j && (y = u.j - L, L = u.j, e(!(1 & y)), u.O += s.R * y, u.N += s.B * (y >> 1), u.W += s.B * (y >> 1), null != u.F && (u.J += u.width * y)), L < P && (u.O += u.v, u.N += u.v >> 1, u.W += u.v >> 1, null != u.F && (u.J += u.v), u.ka = L - u.j, u.U = u.va - u.v, u.T = P - L, c = u.put(u));
              }

              o + 1 != s.Ic || b || (n(s.sa, s.ta - l, d, p + 16 * s.R, l), n(s.qa, s.ra - f, g, h + 8 * s.B, f), n(s.Ha, s.Ia - f, m, v + 8 * s.B, f));
            }
            if (!c) return Jt(t, 6, "Output aborted.");
          }

          return 1;
        }(t, r)), null != r.bc && r.bc(r), s &= 1;
      }

      return s ? (t.cb = 0, s) : 0;
    }

    function te(t, e, r, n, i) {
      i = t[e + r + 32 * n] + (i >> 3), t[e + r + 32 * n] = -256 & i ? 0 > i ? 0 : 255 : i;
    }

    function ee(t, e, r, n, i, a) {
      te(t, e, 0, r, n + i), te(t, e, 1, r, n + a), te(t, e, 2, r, n - a), te(t, e, 3, r, n - i);
    }

    function re(t) {
      return (20091 * t >> 16) + t;
    }

    function ne(t, e, r, n) {
      var i,
          o = 0,
          s = a(16);

      for (i = 0; 4 > i; ++i) {
        var u = t[e + 0] + t[e + 8],
            c = t[e + 0] - t[e + 8],
            l = (35468 * t[e + 4] >> 16) - re(t[e + 12]),
            h = re(t[e + 4]) + (35468 * t[e + 12] >> 16);
        s[o + 0] = u + h, s[o + 1] = c + l, s[o + 2] = c - l, s[o + 3] = u - h, o += 4, e++;
      }

      for (i = o = 0; 4 > i; ++i) u = (t = s[o + 0] + 4) + s[o + 8], c = t - s[o + 8], l = (35468 * s[o + 4] >> 16) - re(s[o + 12]), te(r, n, 0, 0, u + (h = re(s[o + 4]) + (35468 * s[o + 12] >> 16))), te(r, n, 1, 0, c + l), te(r, n, 2, 0, c - l), te(r, n, 3, 0, u - h), o++, n += 32;
    }

    function ie(t, e, r, n) {
      var i = t[e + 0] + 4,
          a = 35468 * t[e + 4] >> 16,
          o = re(t[e + 4]),
          s = 35468 * t[e + 1] >> 16;
      ee(r, n, 0, i + o, t = re(t[e + 1]), s), ee(r, n, 1, i + a, t, s), ee(r, n, 2, i - a, t, s), ee(r, n, 3, i - o, t, s);
    }

    function ae(t, e, r, n, i) {
      ne(t, e, r, n), i && ne(t, e + 16, r, n + 4);
    }

    function oe(t, e, r, n) {
      on(t, e + 0, r, n, 1), on(t, e + 32, r, n + 128, 1);
    }

    function se(t, e, r, n) {
      var i;

      for (t = t[e + 0] + 4, i = 0; 4 > i; ++i) for (e = 0; 4 > e; ++e) te(r, n, e, i, t);
    }

    function ue(t, e, r, n) {
      t[e + 0] && cn(t, e + 0, r, n), t[e + 16] && cn(t, e + 16, r, n + 4), t[e + 32] && cn(t, e + 32, r, n + 128), t[e + 48] && cn(t, e + 48, r, n + 128 + 4);
    }

    function ce(t, e, r, n) {
      var i,
          o = a(16);

      for (i = 0; 4 > i; ++i) {
        var s = t[e + 0 + i] + t[e + 12 + i],
            u = t[e + 4 + i] + t[e + 8 + i],
            c = t[e + 4 + i] - t[e + 8 + i],
            l = t[e + 0 + i] - t[e + 12 + i];
        o[0 + i] = s + u, o[8 + i] = s - u, o[4 + i] = l + c, o[12 + i] = l - c;
      }

      for (i = 0; 4 > i; ++i) s = (t = o[0 + 4 * i] + 3) + o[3 + 4 * i], u = o[1 + 4 * i] + o[2 + 4 * i], c = o[1 + 4 * i] - o[2 + 4 * i], l = t - o[3 + 4 * i], r[n + 0] = s + u >> 3, r[n + 16] = l + c >> 3, r[n + 32] = s - u >> 3, r[n + 48] = l - c >> 3, n += 64;
    }

    function le(t, e, r) {
      var n,
          i = e - 32,
          a = Bn,
          o = 255 - t[i - 1];

      for (n = 0; n < r; ++n) {
        var s,
            u = a,
            c = o + t[e - 1];

        for (s = 0; s < r; ++s) t[e + s] = u[c + t[i + s]];

        e += 32;
      }
    }

    function he(t, e) {
      le(t, e, 4);
    }

    function fe(t, e) {
      le(t, e, 8);
    }

    function de(t, e) {
      le(t, e, 16);
    }

    function pe(t, e) {
      var r;

      for (r = 0; 16 > r; ++r) n(t, e + 32 * r, t, e - 32, 16);
    }

    function ge(t, e) {
      var r;

      for (r = 16; 0 < r; --r) i(t, e, t[e - 1], 16), e += 32;
    }

    function me(t, e, r) {
      var n;

      for (n = 0; 16 > n; ++n) i(e, r + 32 * n, t, 16);
    }

    function ve(t, e) {
      var r,
          n = 16;

      for (r = 0; 16 > r; ++r) n += t[e - 1 + 32 * r] + t[e + r - 32];

      me(n >> 5, t, e);
    }

    function be(t, e) {
      var r,
          n = 8;

      for (r = 0; 16 > r; ++r) n += t[e - 1 + 32 * r];

      me(n >> 4, t, e);
    }

    function ye(t, e) {
      var r,
          n = 8;

      for (r = 0; 16 > r; ++r) n += t[e + r - 32];

      me(n >> 4, t, e);
    }

    function we(t, e) {
      me(128, t, e);
    }

    function Ne(t, e, r) {
      return t + 2 * e + r + 2 >> 2;
    }

    function Le(t, e) {
      var r,
          i = e - 32;
      i = new Uint8Array([Ne(t[i - 1], t[i + 0], t[i + 1]), Ne(t[i + 0], t[i + 1], t[i + 2]), Ne(t[i + 1], t[i + 2], t[i + 3]), Ne(t[i + 2], t[i + 3], t[i + 4])]);

      for (r = 0; 4 > r; ++r) n(t, e + 32 * r, i, 0, i.length);
    }

    function Ae(t, e) {
      var r = t[e - 1],
          n = t[e - 1 + 32],
          i = t[e - 1 + 64],
          a = t[e - 1 + 96];
      I(t, e + 0, 16843009 * Ne(t[e - 1 - 32], r, n)), I(t, e + 32, 16843009 * Ne(r, n, i)), I(t, e + 64, 16843009 * Ne(n, i, a)), I(t, e + 96, 16843009 * Ne(i, a, a));
    }

    function xe(t, e) {
      var r,
          n = 4;

      for (r = 0; 4 > r; ++r) n += t[e + r - 32] + t[e - 1 + 32 * r];

      for (n >>= 3, r = 0; 4 > r; ++r) i(t, e + 32 * r, n, 4);
    }

    function Se(t, e) {
      var r = t[e - 1 + 0],
          n = t[e - 1 + 32],
          i = t[e - 1 + 64],
          a = t[e - 1 - 32],
          o = t[e + 0 - 32],
          s = t[e + 1 - 32],
          u = t[e + 2 - 32],
          c = t[e + 3 - 32];
      t[e + 0 + 96] = Ne(n, i, t[e - 1 + 96]), t[e + 1 + 96] = t[e + 0 + 64] = Ne(r, n, i), t[e + 2 + 96] = t[e + 1 + 64] = t[e + 0 + 32] = Ne(a, r, n), t[e + 3 + 96] = t[e + 2 + 64] = t[e + 1 + 32] = t[e + 0 + 0] = Ne(o, a, r), t[e + 3 + 64] = t[e + 2 + 32] = t[e + 1 + 0] = Ne(s, o, a), t[e + 3 + 32] = t[e + 2 + 0] = Ne(u, s, o), t[e + 3 + 0] = Ne(c, u, s);
    }

    function _e(t, e) {
      var r = t[e + 1 - 32],
          n = t[e + 2 - 32],
          i = t[e + 3 - 32],
          a = t[e + 4 - 32],
          o = t[e + 5 - 32],
          s = t[e + 6 - 32],
          u = t[e + 7 - 32];
      t[e + 0 + 0] = Ne(t[e + 0 - 32], r, n), t[e + 1 + 0] = t[e + 0 + 32] = Ne(r, n, i), t[e + 2 + 0] = t[e + 1 + 32] = t[e + 0 + 64] = Ne(n, i, a), t[e + 3 + 0] = t[e + 2 + 32] = t[e + 1 + 64] = t[e + 0 + 96] = Ne(i, a, o), t[e + 3 + 32] = t[e + 2 + 64] = t[e + 1 + 96] = Ne(a, o, s), t[e + 3 + 64] = t[e + 2 + 96] = Ne(o, s, u), t[e + 3 + 96] = Ne(s, u, u);
    }

    function Pe(t, e) {
      var r = t[e - 1 + 0],
          n = t[e - 1 + 32],
          i = t[e - 1 + 64],
          a = t[e - 1 - 32],
          o = t[e + 0 - 32],
          s = t[e + 1 - 32],
          u = t[e + 2 - 32],
          c = t[e + 3 - 32];
      t[e + 0 + 0] = t[e + 1 + 64] = a + o + 1 >> 1, t[e + 1 + 0] = t[e + 2 + 64] = o + s + 1 >> 1, t[e + 2 + 0] = t[e + 3 + 64] = s + u + 1 >> 1, t[e + 3 + 0] = u + c + 1 >> 1, t[e + 0 + 96] = Ne(i, n, r), t[e + 0 + 64] = Ne(n, r, a), t[e + 0 + 32] = t[e + 1 + 96] = Ne(r, a, o), t[e + 1 + 32] = t[e + 2 + 96] = Ne(a, o, s), t[e + 2 + 32] = t[e + 3 + 96] = Ne(o, s, u), t[e + 3 + 32] = Ne(s, u, c);
    }

    function ke(t, e) {
      var r = t[e + 0 - 32],
          n = t[e + 1 - 32],
          i = t[e + 2 - 32],
          a = t[e + 3 - 32],
          o = t[e + 4 - 32],
          s = t[e + 5 - 32],
          u = t[e + 6 - 32],
          c = t[e + 7 - 32];
      t[e + 0 + 0] = r + n + 1 >> 1, t[e + 1 + 0] = t[e + 0 + 64] = n + i + 1 >> 1, t[e + 2 + 0] = t[e + 1 + 64] = i + a + 1 >> 1, t[e + 3 + 0] = t[e + 2 + 64] = a + o + 1 >> 1, t[e + 0 + 32] = Ne(r, n, i), t[e + 1 + 32] = t[e + 0 + 96] = Ne(n, i, a), t[e + 2 + 32] = t[e + 1 + 96] = Ne(i, a, o), t[e + 3 + 32] = t[e + 2 + 96] = Ne(a, o, s), t[e + 3 + 64] = Ne(o, s, u), t[e + 3 + 96] = Ne(s, u, c);
    }

    function Ie(t, e) {
      var r = t[e - 1 + 0],
          n = t[e - 1 + 32],
          i = t[e - 1 + 64],
          a = t[e - 1 + 96];
      t[e + 0 + 0] = r + n + 1 >> 1, t[e + 2 + 0] = t[e + 0 + 32] = n + i + 1 >> 1, t[e + 2 + 32] = t[e + 0 + 64] = i + a + 1 >> 1, t[e + 1 + 0] = Ne(r, n, i), t[e + 3 + 0] = t[e + 1 + 32] = Ne(n, i, a), t[e + 3 + 32] = t[e + 1 + 64] = Ne(i, a, a), t[e + 3 + 64] = t[e + 2 + 64] = t[e + 0 + 96] = t[e + 1 + 96] = t[e + 2 + 96] = t[e + 3 + 96] = a;
    }

    function Fe(t, e) {
      var r = t[e - 1 + 0],
          n = t[e - 1 + 32],
          i = t[e - 1 + 64],
          a = t[e - 1 + 96],
          o = t[e - 1 - 32],
          s = t[e + 0 - 32],
          u = t[e + 1 - 32],
          c = t[e + 2 - 32];
      t[e + 0 + 0] = t[e + 2 + 32] = r + o + 1 >> 1, t[e + 0 + 32] = t[e + 2 + 64] = n + r + 1 >> 1, t[e + 0 + 64] = t[e + 2 + 96] = i + n + 1 >> 1, t[e + 0 + 96] = a + i + 1 >> 1, t[e + 3 + 0] = Ne(s, u, c), t[e + 2 + 0] = Ne(o, s, u), t[e + 1 + 0] = t[e + 3 + 32] = Ne(r, o, s), t[e + 1 + 32] = t[e + 3 + 64] = Ne(n, r, o), t[e + 1 + 64] = t[e + 3 + 96] = Ne(i, n, r), t[e + 1 + 96] = Ne(a, i, n);
    }

    function Ce(t, e) {
      var r;

      for (r = 0; 8 > r; ++r) n(t, e + 32 * r, t, e - 32, 8);
    }

    function je(t, e) {
      var r;

      for (r = 0; 8 > r; ++r) i(t, e, t[e - 1], 8), e += 32;
    }

    function Oe(t, e, r) {
      var n;

      for (n = 0; 8 > n; ++n) i(e, r + 32 * n, t, 8);
    }

    function Be(t, e) {
      var r,
          n = 8;

      for (r = 0; 8 > r; ++r) n += t[e + r - 32] + t[e - 1 + 32 * r];

      Oe(n >> 4, t, e);
    }

    function Me(t, e) {
      var r,
          n = 4;

      for (r = 0; 8 > r; ++r) n += t[e + r - 32];

      Oe(n >> 3, t, e);
    }

    function Ee(t, e) {
      var r,
          n = 4;

      for (r = 0; 8 > r; ++r) n += t[e - 1 + 32 * r];

      Oe(n >> 3, t, e);
    }

    function qe(t, e) {
      Oe(128, t, e);
    }

    function Re(t, e, r) {
      var n = t[e - r],
          i = t[e + 0],
          a = 3 * (i - n) + jn[1020 + t[e - 2 * r] - t[e + r]],
          o = On[112 + (a + 4 >> 3)];
      t[e - r] = Bn[255 + n + On[112 + (a + 3 >> 3)]], t[e + 0] = Bn[255 + i - o];
    }

    function Te(t, e, r, n) {
      var i = t[e + 0],
          a = t[e + r];
      return Mn[255 + t[e - 2 * r] - t[e - r]] > n || Mn[255 + a - i] > n;
    }

    function De(t, e, r, n) {
      return 4 * Mn[255 + t[e - r] - t[e + 0]] + Mn[255 + t[e - 2 * r] - t[e + r]] <= n;
    }

    function Ue(t, e, r, n, i) {
      var a = t[e - 3 * r],
          o = t[e - 2 * r],
          s = t[e - r],
          u = t[e + 0],
          c = t[e + r],
          l = t[e + 2 * r],
          h = t[e + 3 * r];
      return 4 * Mn[255 + s - u] + Mn[255 + o - c] > n ? 0 : Mn[255 + t[e - 4 * r] - a] <= i && Mn[255 + a - o] <= i && Mn[255 + o - s] <= i && Mn[255 + h - l] <= i && Mn[255 + l - c] <= i && Mn[255 + c - u] <= i;
    }

    function ze(t, e, r, n) {
      var i = 2 * n + 1;

      for (n = 0; 16 > n; ++n) De(t, e + n, r, i) && Re(t, e + n, r);
    }

    function He(t, e, r, n) {
      var i = 2 * n + 1;

      for (n = 0; 16 > n; ++n) De(t, e + n * r, 1, i) && Re(t, e + n * r, 1);
    }

    function Ve(t, e, r, n) {
      var i;

      for (i = 3; 0 < i; --i) ze(t, e += 4 * r, r, n);
    }

    function We(t, e, r, n) {
      var i;

      for (i = 3; 0 < i; --i) He(t, e += 4, r, n);
    }

    function Ge(t, e, r, n, i, a, o, s) {
      for (a = 2 * a + 1; 0 < i--;) {
        if (Ue(t, e, r, a, o)) if (Te(t, e, r, s)) Re(t, e, r);else {
          var u = t,
              c = e,
              l = r,
              h = u[c - 2 * l],
              f = u[c - l],
              d = u[c + 0],
              p = u[c + l],
              g = u[c + 2 * l],
              m = 27 * (b = jn[1020 + 3 * (d - f) + jn[1020 + h - p]]) + 63 >> 7,
              v = 18 * b + 63 >> 7,
              b = 9 * b + 63 >> 7;
          u[c - 3 * l] = Bn[255 + u[c - 3 * l] + b], u[c - 2 * l] = Bn[255 + h + v], u[c - l] = Bn[255 + f + m], u[c + 0] = Bn[255 + d - m], u[c + l] = Bn[255 + p - v], u[c + 2 * l] = Bn[255 + g - b];
        }
        e += n;
      }
    }

    function Ye(t, e, r, n, i, a, o, s) {
      for (a = 2 * a + 1; 0 < i--;) {
        if (Ue(t, e, r, a, o)) if (Te(t, e, r, s)) Re(t, e, r);else {
          var u = t,
              c = e,
              l = r,
              h = u[c - l],
              f = u[c + 0],
              d = u[c + l],
              p = On[112 + ((g = 3 * (f - h)) + 4 >> 3)],
              g = On[112 + (g + 3 >> 3)],
              m = p + 1 >> 1;
          u[c - 2 * l] = Bn[255 + u[c - 2 * l] + m], u[c - l] = Bn[255 + h + g], u[c + 0] = Bn[255 + f - p], u[c + l] = Bn[255 + d - m];
        }
        e += n;
      }
    }

    function Je(t, e, r, n, i, a) {
      Ge(t, e, r, 1, 16, n, i, a);
    }

    function Xe(t, e, r, n, i, a) {
      Ge(t, e, 1, r, 16, n, i, a);
    }

    function Ke(t, e, r, n, i, a) {
      var o;

      for (o = 3; 0 < o; --o) Ye(t, e += 4 * r, r, 1, 16, n, i, a);
    }

    function Ze(t, e, r, n, i, a) {
      var o;

      for (o = 3; 0 < o; --o) Ye(t, e += 4, 1, r, 16, n, i, a);
    }

    function $e(t, e, r, n, i, a, o, s) {
      Ge(t, e, i, 1, 8, a, o, s), Ge(r, n, i, 1, 8, a, o, s);
    }

    function Qe(t, e, r, n, i, a, o, s) {
      Ge(t, e, 1, i, 8, a, o, s), Ge(r, n, 1, i, 8, a, o, s);
    }

    function tr(t, e, r, n, i, a, o, s) {
      Ye(t, e + 4 * i, i, 1, 8, a, o, s), Ye(r, n + 4 * i, i, 1, 8, a, o, s);
    }

    function er(t, e, r, n, i, a, o, s) {
      Ye(t, e + 4, 1, i, 8, a, o, s), Ye(r, n + 4, 1, i, 8, a, o, s);
    }

    function rr() {
      this.ba = new ot(), this.ec = [], this.cc = [], this.Mc = [], this.Dc = this.Nc = this.dc = this.fc = 0, this.Oa = new ut(), this.memory = 0, this.Ib = "OutputFunc", this.Jb = "OutputAlphaFunc", this.Nd = "OutputRowFunc";
    }

    function nr() {
      this.data = [], this.offset = this.kd = this.ha = this.w = 0, this.na = [], this.xa = this.gb = this.Ja = this.Sa = this.P = 0;
    }

    function ir() {
      this.nc = this.Ea = this.b = this.hc = 0, this.K = [], this.w = 0;
    }

    function ar() {
      this.ua = 0, this.Wa = new M(), this.vb = new M(), this.md = this.xc = this.wc = 0, this.vc = [], this.Wb = 0, this.Ya = new d(), this.yc = new h();
    }

    function or() {
      this.xb = this.a = 0, this.l = new Gt(), this.ca = new ot(), this.V = [], this.Ba = 0, this.Ta = [], this.Ua = 0, this.m = new N(), this.Pb = 0, this.wd = new N(), this.Ma = this.$ = this.C = this.i = this.c = this.xd = 0, this.s = new ar(), this.ab = 0, this.gc = o(4, ir), this.Oc = 0;
    }

    function sr() {
      this.Lc = this.Z = this.$a = this.i = this.c = 0, this.l = new Gt(), this.ic = 0, this.ca = [], this.tb = 0, this.qd = null, this.rd = 0;
    }

    function ur(t, e, r, n, i, a, o) {
      for (t = null == t ? 0 : t[e + 0], e = 0; e < o; ++e) i[a + e] = t + r[n + e] & 255, t = i[a + e];
    }

    function cr(t, e, r, n, i, a, o) {
      var s;
      if (null == t) ur(null, null, r, n, i, a, o);else for (s = 0; s < o; ++s) i[a + s] = t[e + s] + r[n + s] & 255;
    }

    function lr(t, e, r, n, i, a, o) {
      if (null == t) ur(null, null, r, n, i, a, o);else {
        var s,
            u = t[e + 0],
            c = u,
            l = u;

        for (s = 0; s < o; ++s) c = l + (u = t[e + s]) - c, l = r[n + s] + (-256 & c ? 0 > c ? 0 : 255 : c) & 255, c = u, i[a + s] = l;
      }
    }

    function hr(t, r, i, o) {
      var s = r.width,
          u = r.o;
      if (e(null != t && null != r), 0 > i || 0 >= o || i + o > u) return null;

      if (!t.Cc) {
        if (null == t.ga) {
          var c;

          if (t.ga = new sr(), (c = null == t.ga) || (c = r.width * r.o, e(0 == t.Gb.length), t.Gb = a(c), t.Uc = 0, null == t.Gb ? c = 0 : (t.mb = t.Gb, t.nb = t.Uc, t.rc = null, c = 1), c = !c), !c) {
            c = t.ga;
            var l = t.Fa,
                h = t.P,
                f = t.qc,
                d = t.mb,
                p = t.nb,
                g = h + 1,
                m = f - 1,
                b = c.l;
            if (e(null != l && null != d && null != r), mi[0] = null, mi[1] = ur, mi[2] = cr, mi[3] = lr, c.ca = d, c.tb = p, c.c = r.width, c.i = r.height, e(0 < c.c && 0 < c.i), 1 >= f) r = 0;else if (c.$a = l[h + 0] >> 0 & 3, c.Z = l[h + 0] >> 2 & 3, c.Lc = l[h + 0] >> 4 & 3, h = l[h + 0] >> 6 & 3, 0 > c.$a || 1 < c.$a || 4 <= c.Z || 1 < c.Lc || h) r = 0;else if (b.put = dt, b.ac = ft, b.bc = pt, b.ma = c, b.width = r.width, b.height = r.height, b.Da = r.Da, b.v = r.v, b.va = r.va, b.j = r.j, b.o = r.o, c.$a) t: {
              e(1 == c.$a), r = kt();

              e: for (;;) {
                if (null == r) {
                  r = 0;
                  break t;
                }

                if (e(null != c), c.mc = r, r.c = c.c, r.i = c.i, r.l = c.l, r.l.ma = c, r.l.width = c.c, r.l.height = c.i, r.a = 0, v(r.m, l, g, m), !It(c.c, c.i, 1, r, null)) break e;
                if (1 == r.ab && 3 == r.gc[0].hc && At(r.s) ? (c.ic = 1, l = r.c * r.i, r.Ta = null, r.Ua = 0, r.V = a(l), r.Ba = 0, null == r.V ? (r.a = 1, r = 0) : r = 1) : (c.ic = 0, r = Ft(r, c.c)), !r) break e;
                r = 1;
                break t;
              }

              c.mc = null, r = 0;
            } else r = m >= c.c * c.i;
            c = !r;
          }

          if (c) return null;
          1 != t.ga.Lc ? t.Ga = 0 : o = u - i;
        }

        e(null != t.ga), e(i + o <= u);

        t: {
          if (r = (l = t.ga).c, u = l.l.o, 0 == l.$a) {
            if (g = t.rc, m = t.Vc, b = t.Fa, h = t.P + 1 + i * r, f = t.mb, d = t.nb + i * r, e(h <= t.P + t.qc), 0 != l.Z) for (e(null != mi[l.Z]), c = 0; c < o; ++c) mi[l.Z](g, m, b, h, f, d, r), g = f, m = d, d += r, h += r;else for (c = 0; c < o; ++c) n(f, d, b, h, r), g = f, m = d, d += r, h += r;
            t.rc = g, t.Vc = m;
          } else {
            if (e(null != l.mc), r = i + o, e(null != (c = l.mc)), e(r <= c.i), c.C >= r) r = 1;else if (l.ic || mr(), l.ic) {
              l = c.V, g = c.Ba, m = c.c;

              var y = c.i,
                  w = (b = 1, h = c.$ / m, f = c.$ % m, d = c.m, p = c.s, c.$),
                  N = m * y,
                  L = m * r,
                  x = p.wc,
                  _ = w < L ? wt(p, f, h) : null;

              e(w <= N), e(r <= y), e(At(p));

              e: for (;;) {
                for (; !d.h && w < L;) {
                  if (f & x || (_ = wt(p, f, h)), e(null != _), S(d), 256 > (y = bt(_.G[0], _.H[0], d))) l[g + w] = y, ++w, ++f >= m && (f = 0, ++h <= r && !(h % 16) && St(c, h));else {
                    if (!(280 > y)) {
                      b = 0;
                      break e;
                    }

                    y = mt(y - 256, d);
                    var P,
                        k = bt(_.G[4], _.H[4], d);

                    if (S(d), !(w >= (k = vt(m, k = mt(k, d))) && N - w >= y)) {
                      b = 0;
                      break e;
                    }

                    for (P = 0; P < y; ++P) l[g + w + P] = l[g + w + P - k];

                    for (w += y, f += y; f >= m;) f -= m, ++h <= r && !(h % 16) && St(c, h);

                    w < L && f & x && (_ = wt(p, f, h));
                  }
                  e(d.h == A(d));
                }

                St(c, h > r ? r : h);
                break e;
              }

              !b || d.h && w < N ? (b = 0, c.a = d.h ? 5 : 3) : c.$ = w, r = b;
            } else r = _t(c, c.V, c.Ba, c.c, c.i, r, Ct);

            if (!r) {
              o = 0;
              break t;
            }
          }

          i + o >= u && (t.Cc = 1), o = 1;
        }

        if (!o) return null;
        if (t.Cc && (null != (o = t.ga) && (o.mc = null), t.ga = null, 0 < t.Ga)) return alert("todo:WebPDequantizeLevels"), null;
      }

      return t.nb + i * s;
    }

    function fr(t, e, r, n, i, a) {
      for (; 0 < i--;) {
        var o,
            s = t,
            u = e + (r ? 1 : 0),
            c = t,
            l = e + (r ? 0 : 3);

        for (o = 0; o < n; ++o) {
          var h = c[l + 4 * o];
          255 != h && (h *= 32897, s[u + 4 * o + 0] = s[u + 4 * o + 0] * h >> 23, s[u + 4 * o + 1] = s[u + 4 * o + 1] * h >> 23, s[u + 4 * o + 2] = s[u + 4 * o + 2] * h >> 23);
        }

        e += a;
      }
    }

    function dr(t, e, r, n, i) {
      for (; 0 < n--;) {
        var a;

        for (a = 0; a < r; ++a) {
          var o = t[e + 2 * a + 0],
              s = 15 & (c = t[e + 2 * a + 1]),
              u = 4369 * s,
              c = (240 & c | c >> 4) * u >> 16;
          t[e + 2 * a + 0] = (240 & o | o >> 4) * u >> 16 & 240 | (15 & o | o << 4) * u >> 16 >> 4 & 15, t[e + 2 * a + 1] = 240 & c | s;
        }

        e += i;
      }
    }

    function pr(t, e, r, n, i, a, o, s) {
      var u,
          c,
          l = 255;

      for (c = 0; c < i; ++c) {
        for (u = 0; u < n; ++u) {
          var h = t[e + u];
          a[o + 4 * u] = h, l &= h;
        }

        e += r, o += s;
      }

      return 255 != l;
    }

    function gr(t, e, r, n, i) {
      var a;

      for (a = 0; a < i; ++a) r[n + a] = t[e + a] >> 8;
    }

    function mr() {
      An = fr, xn = dr, Sn = pr, _n = gr;
    }

    function vr(r, n, i) {
      t[r] = function (t, r, a, o, s, u, c, l, h, f, d, p, g, m, v, b, y) {
        var w,
            N = y - 1 >> 1,
            L = s[u + 0] | c[l + 0] << 16,
            A = h[f + 0] | d[p + 0] << 16;
        e(null != t);
        var x = 3 * L + A + 131074 >> 2;

        for (n(t[r + 0], 255 & x, x >> 16, g, m), null != a && (x = 3 * A + L + 131074 >> 2, n(a[o + 0], 255 & x, x >> 16, v, b)), w = 1; w <= N; ++w) {
          var S = s[u + w] | c[l + w] << 16,
              _ = h[f + w] | d[p + w] << 16,
              P = L + S + A + _ + 524296,
              k = P + 2 * (S + A) >> 3;

          x = k + L >> 1, L = (P = P + 2 * (L + _) >> 3) + S >> 1, n(t[r + 2 * w - 1], 255 & x, x >> 16, g, m + (2 * w - 1) * i), n(t[r + 2 * w - 0], 255 & L, L >> 16, g, m + (2 * w - 0) * i), null != a && (x = P + A >> 1, L = k + _ >> 1, n(a[o + 2 * w - 1], 255 & x, x >> 16, v, b + (2 * w - 1) * i), n(a[o + 2 * w + 0], 255 & L, L >> 16, v, b + (2 * w + 0) * i)), L = S, A = _;
        }

        1 & y || (x = 3 * L + A + 131074 >> 2, n(t[r + y - 1], 255 & x, x >> 16, g, m + (y - 1) * i), null != a && (x = 3 * A + L + 131074 >> 2, n(a[o + y - 1], 255 & x, x >> 16, v, b + (y - 1) * i)));
      };
    }

    function br() {
      vi[En] = bi, vi[qn] = wi, vi[Rn] = yi, vi[Tn] = Ni, vi[Dn] = Li, vi[Un] = Ai, vi[zn] = xi, vi[Hn] = wi, vi[Vn] = Ni, vi[Wn] = Li, vi[Gn] = Ai;
    }

    function yr(t) {
      return t & ~Fi ? 0 > t ? 0 : 255 : t >> Ii;
    }

    function wr(t, e) {
      return yr((19077 * t >> 8) + (26149 * e >> 8) - 14234);
    }

    function Nr(t, e, r) {
      return yr((19077 * t >> 8) - (6419 * e >> 8) - (13320 * r >> 8) + 8708);
    }

    function Lr(t, e) {
      return yr((19077 * t >> 8) + (33050 * e >> 8) - 17685);
    }

    function Ar(t, e, r, n, i) {
      n[i + 0] = wr(t, r), n[i + 1] = Nr(t, e, r), n[i + 2] = Lr(t, e);
    }

    function xr(t, e, r, n, i) {
      n[i + 0] = Lr(t, e), n[i + 1] = Nr(t, e, r), n[i + 2] = wr(t, r);
    }

    function Sr(t, e, r, n, i) {
      var a = Nr(t, e, r);
      e = a << 3 & 224 | Lr(t, e) >> 3, n[i + 0] = 248 & wr(t, r) | a >> 5, n[i + 1] = e;
    }

    function _r(t, e, r, n, i) {
      var a = 240 & Lr(t, e) | 15;
      n[i + 0] = 240 & wr(t, r) | Nr(t, e, r) >> 4, n[i + 1] = a;
    }

    function Pr(t, e, r, n, i) {
      n[i + 0] = 255, Ar(t, e, r, n, i + 1);
    }

    function kr(t, e, r, n, i) {
      xr(t, e, r, n, i), n[i + 3] = 255;
    }

    function Ir(t, e, r, n, i) {
      Ar(t, e, r, n, i), n[i + 3] = 255;
    }

    function Wt(t, e) {
      return 0 > t ? 0 : t > e ? e : t;
    }

    function Fr(e, r, n) {
      t[e] = function (t, e, i, a, o, s, u, c, l) {
        for (var h = c + (-2 & l) * n; c != h;) r(t[e + 0], i[a + 0], o[s + 0], u, c), r(t[e + 1], i[a + 0], o[s + 0], u, c + n), e += 2, ++a, ++s, c += 2 * n;

        1 & l && r(t[e + 0], i[a + 0], o[s + 0], u, c);
      };
    }

    function Cr(t, e, r) {
      return 0 == r ? 0 == t ? 0 == e ? 6 : 5 : 0 == e ? 4 : 0 : r;
    }

    function jr(t, e, r, n, i) {
      switch (t >>> 30) {
        case 3:
          on(e, r, n, i, 0);
          break;

        case 2:
          sn(e, r, n, i);
          break;

        case 1:
          cn(e, r, n, i);
      }
    }

    function Or(t, e) {
      var r,
          a,
          o = e.M,
          s = e.Nb,
          u = t.oc,
          c = t.pc + 40,
          l = t.oc,
          h = t.pc + 584,
          f = t.oc,
          d = t.pc + 600;

      for (r = 0; 16 > r; ++r) u[c + 32 * r - 1] = 129;

      for (r = 0; 8 > r; ++r) l[h + 32 * r - 1] = 129, f[d + 32 * r - 1] = 129;

      for (0 < o ? u[c - 1 - 32] = l[h - 1 - 32] = f[d - 1 - 32] = 129 : (i(u, c - 32 - 1, 127, 21), i(l, h - 32 - 1, 127, 9), i(f, d - 32 - 1, 127, 9)), a = 0; a < t.za; ++a) {
        var p = e.ya[e.aa + a];

        if (0 < a) {
          for (r = -1; 16 > r; ++r) n(u, c + 32 * r - 4, u, c + 32 * r + 12, 4);

          for (r = -1; 8 > r; ++r) n(l, h + 32 * r - 4, l, h + 32 * r + 4, 4), n(f, d + 32 * r - 4, f, d + 32 * r + 4, 4);
        }

        var g = t.Gd,
            m = t.Hd + a,
            v = p.ad,
            b = p.Hc;

        if (0 < o && (n(u, c - 32, g[m].y, 0, 16), n(l, h - 32, g[m].f, 0, 8), n(f, d - 32, g[m].ea, 0, 8)), p.Za) {
          var y = u,
              w = c - 32 + 16;

          for (0 < o && (a >= t.za - 1 ? i(y, w, g[m].y[15], 4) : n(y, w, g[m + 1].y, 0, 4)), r = 0; 4 > r; r++) y[w + 128 + r] = y[w + 256 + r] = y[w + 384 + r] = y[w + 0 + r];

          for (r = 0; 16 > r; ++r, b <<= 2) y = u, w = c + Ri[r], fi[p.Ob[r]](y, w), jr(b, v, 16 * +r, y, w);
        } else if (y = Cr(a, o, p.Ob[0]), hi[y](u, c), 0 != b) for (r = 0; 16 > r; ++r, b <<= 2) jr(b, v, 16 * +r, u, c + Ri[r]);

        for (r = p.Gc, y = Cr(a, o, p.Dd), di[y](l, h), di[y](f, d), b = v, y = l, w = h, 255 & (p = r >> 0) && (170 & p ? un(b, 256, y, w) : ln(b, 256, y, w)), p = f, b = d, 255 & (r >>= 8) && (170 & r ? un(v, 320, p, b) : ln(v, 320, p, b)), o < t.Ub - 1 && (n(g[m].y, 0, u, c + 480, 16), n(g[m].f, 0, l, h + 224, 8), n(g[m].ea, 0, f, d + 224, 8)), r = 8 * s * t.B, g = t.sa, m = t.ta + 16 * a + 16 * s * t.R, v = t.qa, p = t.ra + 8 * a + r, b = t.Ha, y = t.Ia + 8 * a + r, r = 0; 16 > r; ++r) n(g, m + r * t.R, u, c + 32 * r, 16);

        for (r = 0; 8 > r; ++r) n(v, p + r * t.B, l, h + 32 * r, 8), n(b, y + r * t.B, f, d + 32 * r, 8);
      }
    }

    function Br(t, n, i, a, o, s, u, c, l) {
      var h = [0],
          f = [0],
          d = 0,
          p = null != l ? l.kd : 0,
          g = null != l ? l : new nr();
      if (null == t || 12 > i) return 7;
      g.data = t, g.w = n, g.ha = i, n = [n], i = [i], g.gb = [g.gb];

      t: {
        var m = n,
            b = i,
            y = g.gb;

        if (e(null != t), e(null != b), e(null != y), y[0] = 0, 12 <= b[0] && !r(t, m[0], "RIFF")) {
          if (r(t, m[0] + 8, "WEBP")) {
            y = 3;
            break t;
          }

          var w = j(t, m[0] + 4);

          if (12 > w || 4294967286 < w) {
            y = 3;
            break t;
          }

          if (p && w > b[0] - 8) {
            y = 7;
            break t;
          }

          y[0] = w, m[0] += 12, b[0] -= 12;
        }

        y = 0;
      }

      if (0 != y) return y;

      for (w = 0 < g.gb[0], i = i[0];;) {
        t: {
          var L = t;
          b = n, y = i;
          var A = h,
              x = f,
              S = m = [0];
          if ((k = d = [d])[0] = 0, 8 > y[0]) y = 7;else {
            if (!r(L, b[0], "VP8X")) {
              if (10 != j(L, b[0] + 4)) {
                y = 3;
                break t;
              }

              if (18 > y[0]) {
                y = 7;
                break t;
              }

              var _ = j(L, b[0] + 8),
                  P = 1 + C(L, b[0] + 12);

              if (2147483648 <= P * (L = 1 + C(L, b[0] + 15))) {
                y = 3;
                break t;
              }

              null != S && (S[0] = _), null != A && (A[0] = P), null != x && (x[0] = L), b[0] += 18, y[0] -= 18, k[0] = 1;
            }

            y = 0;
          }
        }

        if (d = d[0], m = m[0], 0 != y) return y;
        if (b = !!(2 & m), !w && d) return 3;

        if (null != s && (s[0] = !!(16 & m)), null != u && (u[0] = b), null != c && (c[0] = 0), u = h[0], m = f[0], d && b && null == l) {
          y = 0;
          break;
        }

        if (4 > i) {
          y = 7;
          break;
        }

        if (w && d || !w && !d && !r(t, n[0], "ALPH")) {
          i = [i], g.na = [g.na], g.P = [g.P], g.Sa = [g.Sa];

          t: {
            _ = t, y = n, w = i;
            var k = g.gb;
            A = g.na, x = g.P, S = g.Sa;
            P = 22, e(null != _), e(null != w), L = y[0];
            var I = w[0];

            for (e(null != A), e(null != S), A[0] = null, x[0] = null, S[0] = 0;;) {
              if (y[0] = L, w[0] = I, 8 > I) {
                y = 7;
                break t;
              }

              var F = j(_, L + 4);

              if (4294967286 < F) {
                y = 3;
                break t;
              }

              var O = 8 + F + 1 & -2;

              if (P += O, 0 < k && P > k) {
                y = 3;
                break t;
              }

              if (!r(_, L, "VP8 ") || !r(_, L, "VP8L")) {
                y = 0;
                break t;
              }

              if (I[0] < O) {
                y = 7;
                break t;
              }

              r(_, L, "ALPH") || (A[0] = _, x[0] = L + 8, S[0] = F), L += O, I -= O;
            }
          }

          if (i = i[0], g.na = g.na[0], g.P = g.P[0], g.Sa = g.Sa[0], 0 != y) break;
        }

        i = [i], g.Ja = [g.Ja], g.xa = [g.xa];

        t: if (k = t, y = n, w = i, A = g.gb[0], x = g.Ja, S = g.xa, _ = y[0], L = !r(k, _, "VP8 "), P = !r(k, _, "VP8L"), e(null != k), e(null != w), e(null != x), e(null != S), 8 > w[0]) y = 7;else {
          if (L || P) {
            if (k = j(k, _ + 4), 12 <= A && k > A - 12) {
              y = 3;
              break t;
            }

            if (p && k > w[0] - 8) {
              y = 7;
              break t;
            }

            x[0] = k, y[0] += 8, w[0] -= 8, S[0] = P;
          } else S[0] = 5 <= w[0] && 47 == k[_ + 0] && !(k[_ + 4] >> 5), x[0] = w[0];

          y = 0;
        }

        if (i = i[0], g.Ja = g.Ja[0], g.xa = g.xa[0], n = n[0], 0 != y) break;
        if (4294967286 < g.Ja) return 3;

        if (null == c || b || (c[0] = g.xa ? 2 : 1), u = [u], m = [m], g.xa) {
          if (5 > i) {
            y = 7;
            break;
          }

          c = u, p = m, b = s, null == t || 5 > i ? t = 0 : 5 <= i && 47 == t[n + 0] && !(t[n + 4] >> 5) ? (w = [0], k = [0], A = [0], v(x = new N(), t, n, i), gt(x, w, k, A) ? (null != c && (c[0] = w[0]), null != p && (p[0] = k[0]), null != b && (b[0] = A[0]), t = 1) : t = 0) : t = 0;
        } else {
          if (10 > i) {
            y = 7;
            break;
          }

          c = m, null == t || 10 > i || !Xt(t, n + 3, i - 3) ? t = 0 : (p = t[n + 0] | t[n + 1] << 8 | t[n + 2] << 16, b = 16383 & (t[n + 7] << 8 | t[n + 6]), t = 16383 & (t[n + 9] << 8 | t[n + 8]), 1 & p || 3 < (p >> 1 & 7) || !(p >> 4 & 1) || p >> 5 >= g.Ja || !b || !t ? t = 0 : (u && (u[0] = b), c && (c[0] = t), t = 1));
        }

        if (!t) return 3;
        if (u = u[0], m = m[0], d && (h[0] != u || f[0] != m)) return 3;
        null != l && (l[0] = g, l.offset = n - l.w, e(4294967286 > n - l.w), e(l.offset == l.ha - i));
        break;
      }

      return 0 == y || 7 == y && d && null == l ? (null != s && (s[0] |= null != g.na && 0 < g.na.length), null != a && (a[0] = u), null != o && (o[0] = m), 0) : y;
    }

    function Mr(t, e, r) {
      var n = e.width,
          i = e.height,
          a = 0,
          o = 0,
          s = n,
          u = i;
      if (e.Da = null != t && 0 < t.Da, e.Da && (s = t.cd, u = t.bd, a = t.v, o = t.j, 11 > r || (a &= -2, o &= -2), 0 > a || 0 > o || 0 >= s || 0 >= u || a + s > n || o + u > i)) return 0;

      if (e.v = a, e.j = o, e.va = a + s, e.o = o + u, e.U = s, e.T = u, e.da = null != t && 0 < t.da, e.da) {
        if (!E(s, u, r = [t.ib], a = [t.hb])) return 0;
        e.ib = r[0], e.hb = a[0];
      }

      return e.ob = null != t && t.ob, e.Kb = null == t || !t.Sd, e.da && (e.ob = e.ib < 3 * n / 4 && e.hb < 3 * i / 4, e.Kb = 0), 1;
    }

    function Er(t) {
      if (null == t) return 2;

      if (11 > t.S) {
        var e = t.f.RGBA;
        e.fb += (t.height - 1) * e.A, e.A = -e.A;
      } else e = t.f.kb, t = t.height, e.O += (t - 1) * e.fa, e.fa = -e.fa, e.N += (t - 1 >> 1) * e.Ab, e.Ab = -e.Ab, e.W += (t - 1 >> 1) * e.Db, e.Db = -e.Db, null != e.F && (e.J += (t - 1) * e.lb, e.lb = -e.lb);

      return 0;
    }

    function qr(t, e, r, n) {
      if (null == n || 0 >= t || 0 >= e) return 2;

      if (null != r) {
        if (r.Da) {
          var i = r.cd,
              o = r.bd,
              s = -2 & r.v,
              u = -2 & r.j;
          if (0 > s || 0 > u || 0 >= i || 0 >= o || s + i > t || u + o > e) return 2;
          t = i, e = o;
        }

        if (r.da) {
          if (!E(t, e, i = [r.ib], o = [r.hb])) return 2;
          t = i[0], e = o[0];
        }
      }

      n.width = t, n.height = e;

      t: {
        var c = n.width,
            l = n.height;
        if (t = n.S, 0 >= c || 0 >= l || !(t >= En && 13 > t)) t = 2;else {
          if (0 >= n.Rd && null == n.sd) {
            s = o = i = e = 0;
            var h = (u = c * zi[t]) * l;

            if (11 > t || (o = (l + 1) / 2 * (e = (c + 1) / 2), 12 == t && (s = (i = c) * l)), null == (l = a(h + 2 * o + s))) {
              t = 1;
              break t;
            }

            n.sd = l, 11 > t ? ((c = n.f.RGBA).eb = l, c.fb = 0, c.A = u, c.size = h) : ((c = n.f.kb).y = l, c.O = 0, c.fa = u, c.Fd = h, c.f = l, c.N = 0 + h, c.Ab = e, c.Cd = o, c.ea = l, c.W = 0 + h + o, c.Db = e, c.Ed = o, 12 == t && (c.F = l, c.J = 0 + h + 2 * o), c.Tc = s, c.lb = i);
          }

          if (e = 1, i = n.S, o = n.width, s = n.height, i >= En && 13 > i) {
            if (11 > i) t = n.f.RGBA, e &= (u = Math.abs(t.A)) * (s - 1) + o <= t.size, e &= u >= o * zi[i], e &= null != t.eb;else {
              t = n.f.kb, u = (o + 1) / 2, h = (s + 1) / 2, c = Math.abs(t.fa);
              l = Math.abs(t.Ab);
              var f = Math.abs(t.Db),
                  d = Math.abs(t.lb),
                  p = d * (s - 1) + o;
              e &= c * (s - 1) + o <= t.Fd, e &= l * (h - 1) + u <= t.Cd, e = (e &= f * (h - 1) + u <= t.Ed) & c >= o & l >= u & f >= u, e &= null != t.y, e &= null != t.f, e &= null != t.ea, 12 == i && (e &= d >= o, e &= p <= t.Tc, e &= null != t.F);
            }
          } else e = 0;
          t = e ? 0 : 2;
        }
      }

      return 0 != t || null != r && r.fd && (t = Er(n)), t;
    }

    var Rr = 64,
        Tr = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215],
        Dr = 24,
        Ur = 32,
        zr = 8,
        Hr = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7];
    T("Predictor0", "PredictorAdd0"), t.Predictor0 = function () {
      return 4278190080;
    }, t.Predictor1 = function (t) {
      return t;
    }, t.Predictor2 = function (t, e, r) {
      return e[r + 0];
    }, t.Predictor3 = function (t, e, r) {
      return e[r + 1];
    }, t.Predictor4 = function (t, e, r) {
      return e[r - 1];
    }, t.Predictor5 = function (t, e, r) {
      return U(U(t, e[r + 1]), e[r + 0]);
    }, t.Predictor6 = function (t, e, r) {
      return U(t, e[r - 1]);
    }, t.Predictor7 = function (t, e, r) {
      return U(t, e[r + 0]);
    }, t.Predictor8 = function (t, e, r) {
      return U(e[r - 1], e[r + 0]);
    }, t.Predictor9 = function (t, e, r) {
      return U(e[r + 0], e[r + 1]);
    }, t.Predictor10 = function (t, e, r) {
      return U(U(t, e[r - 1]), U(e[r + 0], e[r + 1]));
    }, t.Predictor11 = function (t, e, r) {
      var n = e[r + 0];
      return 0 >= V(n >> 24 & 255, t >> 24 & 255, (e = e[r - 1]) >> 24 & 255) + V(n >> 16 & 255, t >> 16 & 255, e >> 16 & 255) + V(n >> 8 & 255, t >> 8 & 255, e >> 8 & 255) + V(255 & n, 255 & t, 255 & e) ? n : t;
    }, t.Predictor12 = function (t, e, r) {
      var n = e[r + 0];
      return (z((t >> 24 & 255) + (n >> 24 & 255) - ((e = e[r - 1]) >> 24 & 255)) << 24 | z((t >> 16 & 255) + (n >> 16 & 255) - (e >> 16 & 255)) << 16 | z((t >> 8 & 255) + (n >> 8 & 255) - (e >> 8 & 255)) << 8 | z((255 & t) + (255 & n) - (255 & e))) >>> 0;
    }, t.Predictor13 = function (t, e, r) {
      var n = e[r - 1];
      return (H((t = U(t, e[r + 0])) >> 24 & 255, n >> 24 & 255) << 24 | H(t >> 16 & 255, n >> 16 & 255) << 16 | H(t >> 8 & 255, n >> 8 & 255) << 8 | H(t >> 0 & 255, n >> 0 & 255)) >>> 0;
    };
    var Vr = t.PredictorAdd0;
    t.PredictorAdd1 = W, T("Predictor2", "PredictorAdd2"), T("Predictor3", "PredictorAdd3"), T("Predictor4", "PredictorAdd4"), T("Predictor5", "PredictorAdd5"), T("Predictor6", "PredictorAdd6"), T("Predictor7", "PredictorAdd7"), T("Predictor8", "PredictorAdd8"), T("Predictor9", "PredictorAdd9"), T("Predictor10", "PredictorAdd10"), T("Predictor11", "PredictorAdd11"), T("Predictor12", "PredictorAdd12"), T("Predictor13", "PredictorAdd13");
    var Wr = t.PredictorAdd2;
    X("ColorIndexInverseTransform", "MapARGB", "32b", function (t) {
      return t >> 8 & 255;
    }, function (t) {
      return t;
    }), X("VP8LColorIndexInverseTransformAlpha", "MapAlpha", "8b", function (t) {
      return t;
    }, function (t) {
      return t >> 8 & 255;
    });
    var Gr,
        Yr = t.ColorIndexInverseTransform,
        Jr = t.MapARGB,
        Xr = t.VP8LColorIndexInverseTransformAlpha,
        Kr = t.MapAlpha,
        Zr = t.VP8LPredictorsAdd = [];
    Zr.length = 16, (t.VP8LPredictors = []).length = 16, (t.VP8LPredictorsAdd_C = []).length = 16, (t.VP8LPredictors_C = []).length = 16;

    var $r,
        Qr,
        tn,
        en,
        rn,
        nn,
        an,
        on,
        sn,
        un,
        cn,
        ln,
        hn,
        fn,
        dn,
        pn,
        gn,
        mn,
        vn,
        bn,
        yn,
        wn,
        Nn,
        Ln,
        An,
        xn,
        Sn,
        _n,
        Pn = a(511),
        kn = a(2041),
        In = a(225),
        Fn = a(767),
        Cn = 0,
        jn = kn,
        On = In,
        Bn = Fn,
        Mn = Pn,
        En = 0,
        qn = 1,
        Rn = 2,
        Tn = 3,
        Dn = 4,
        Un = 5,
        zn = 6,
        Hn = 7,
        Vn = 8,
        Wn = 9,
        Gn = 10,
        Yn = [2, 3, 7],
        Jn = [3, 3, 11],
        Xn = [280, 256, 256, 256, 40],
        Kn = [0, 1, 1, 1, 0],
        Zn = [17, 18, 0, 1, 2, 3, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        $n = [24, 7, 23, 25, 40, 6, 39, 41, 22, 26, 38, 42, 56, 5, 55, 57, 21, 27, 54, 58, 37, 43, 72, 4, 71, 73, 20, 28, 53, 59, 70, 74, 36, 44, 88, 69, 75, 52, 60, 3, 87, 89, 19, 29, 86, 90, 35, 45, 68, 76, 85, 91, 51, 61, 104, 2, 103, 105, 18, 30, 102, 106, 34, 46, 84, 92, 67, 77, 101, 107, 50, 62, 120, 1, 119, 121, 83, 93, 17, 31, 100, 108, 66, 78, 118, 122, 33, 47, 117, 123, 49, 63, 99, 109, 82, 94, 0, 116, 124, 65, 79, 16, 32, 98, 110, 48, 115, 125, 81, 95, 64, 114, 126, 97, 111, 80, 113, 127, 96, 112],
        Qn = [2954, 2956, 2958, 2962, 2970, 2986, 3018, 3082, 3212, 3468, 3980, 5004],
        ti = 8,
        ei = [4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 95, 96, 98, 100, 101, 102, 104, 106, 108, 110, 112, 114, 116, 118, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 145, 148, 151, 154, 157],
        ri = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284],
        ni = null,
        ii = [[173, 148, 140, 0], [176, 155, 140, 135, 0], [180, 157, 141, 134, 130, 0], [254, 254, 243, 230, 196, 177, 153, 140, 133, 130, 129, 0]],
        ai = [0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15],
        oi = [-0, 1, -1, 2, -2, 3, 4, 6, -3, 5, -4, -5, -6, 7, -7, 8, -8, -9],
        si = [[[[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]], [[253, 136, 254, 255, 228, 219, 128, 128, 128, 128, 128], [189, 129, 242, 255, 227, 213, 255, 219, 128, 128, 128], [106, 126, 227, 252, 214, 209, 255, 255, 128, 128, 128]], [[1, 98, 248, 255, 236, 226, 255, 255, 128, 128, 128], [181, 133, 238, 254, 221, 234, 255, 154, 128, 128, 128], [78, 134, 202, 247, 198, 180, 255, 219, 128, 128, 128]], [[1, 185, 249, 255, 243, 255, 128, 128, 128, 128, 128], [184, 150, 247, 255, 236, 224, 128, 128, 128, 128, 128], [77, 110, 216, 255, 236, 230, 128, 128, 128, 128, 128]], [[1, 101, 251, 255, 241, 255, 128, 128, 128, 128, 128], [170, 139, 241, 252, 236, 209, 255, 255, 128, 128, 128], [37, 116, 196, 243, 228, 255, 255, 255, 128, 128, 128]], [[1, 204, 254, 255, 245, 255, 128, 128, 128, 128, 128], [207, 160, 250, 255, 238, 128, 128, 128, 128, 128, 128], [102, 103, 231, 255, 211, 171, 128, 128, 128, 128, 128]], [[1, 152, 252, 255, 240, 255, 128, 128, 128, 128, 128], [177, 135, 243, 255, 234, 225, 128, 128, 128, 128, 128], [80, 129, 211, 255, 194, 224, 128, 128, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [246, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[198, 35, 237, 223, 193, 187, 162, 160, 145, 155, 62], [131, 45, 198, 221, 172, 176, 220, 157, 252, 221, 1], [68, 47, 146, 208, 149, 167, 221, 162, 255, 223, 128]], [[1, 149, 241, 255, 221, 224, 255, 255, 128, 128, 128], [184, 141, 234, 253, 222, 220, 255, 199, 128, 128, 128], [81, 99, 181, 242, 176, 190, 249, 202, 255, 255, 128]], [[1, 129, 232, 253, 214, 197, 242, 196, 255, 255, 128], [99, 121, 210, 250, 201, 198, 255, 202, 128, 128, 128], [23, 91, 163, 242, 170, 187, 247, 210, 255, 255, 128]], [[1, 200, 246, 255, 234, 255, 128, 128, 128, 128, 128], [109, 178, 241, 255, 231, 245, 255, 255, 128, 128, 128], [44, 130, 201, 253, 205, 192, 255, 255, 128, 128, 128]], [[1, 132, 239, 251, 219, 209, 255, 165, 128, 128, 128], [94, 136, 225, 251, 218, 190, 255, 255, 128, 128, 128], [22, 100, 174, 245, 186, 161, 255, 199, 128, 128, 128]], [[1, 182, 249, 255, 232, 235, 128, 128, 128, 128, 128], [124, 143, 241, 255, 227, 234, 128, 128, 128, 128, 128], [35, 77, 181, 251, 193, 211, 255, 205, 128, 128, 128]], [[1, 157, 247, 255, 236, 231, 255, 255, 128, 128, 128], [121, 141, 235, 255, 225, 227, 255, 255, 128, 128, 128], [45, 99, 188, 251, 195, 217, 255, 224, 128, 128, 128]], [[1, 1, 251, 255, 213, 255, 128, 128, 128, 128, 128], [203, 1, 248, 255, 255, 128, 128, 128, 128, 128, 128], [137, 1, 177, 255, 224, 255, 128, 128, 128, 128, 128]]], [[[253, 9, 248, 251, 207, 208, 255, 192, 128, 128, 128], [175, 13, 224, 243, 193, 185, 249, 198, 255, 255, 128], [73, 17, 171, 221, 161, 179, 236, 167, 255, 234, 128]], [[1, 95, 247, 253, 212, 183, 255, 255, 128, 128, 128], [239, 90, 244, 250, 211, 209, 255, 255, 128, 128, 128], [155, 77, 195, 248, 188, 195, 255, 255, 128, 128, 128]], [[1, 24, 239, 251, 218, 219, 255, 205, 128, 128, 128], [201, 51, 219, 255, 196, 186, 128, 128, 128, 128, 128], [69, 46, 190, 239, 201, 218, 255, 228, 128, 128, 128]], [[1, 191, 251, 255, 255, 128, 128, 128, 128, 128, 128], [223, 165, 249, 255, 213, 255, 128, 128, 128, 128, 128], [141, 124, 248, 255, 255, 128, 128, 128, 128, 128, 128]], [[1, 16, 248, 255, 255, 128, 128, 128, 128, 128, 128], [190, 36, 230, 255, 236, 255, 128, 128, 128, 128, 128], [149, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 226, 255, 128, 128, 128, 128, 128, 128, 128, 128], [247, 192, 255, 128, 128, 128, 128, 128, 128, 128, 128], [240, 128, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 134, 252, 255, 255, 128, 128, 128, 128, 128, 128], [213, 62, 250, 255, 255, 128, 128, 128, 128, 128, 128], [55, 93, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[202, 24, 213, 235, 186, 191, 220, 160, 240, 175, 255], [126, 38, 182, 232, 169, 184, 228, 174, 255, 187, 128], [61, 46, 138, 219, 151, 178, 240, 170, 255, 216, 128]], [[1, 112, 230, 250, 199, 191, 247, 159, 255, 255, 128], [166, 109, 228, 252, 211, 215, 255, 174, 128, 128, 128], [39, 77, 162, 232, 172, 180, 245, 178, 255, 255, 128]], [[1, 52, 220, 246, 198, 199, 249, 220, 255, 255, 128], [124, 74, 191, 243, 183, 193, 250, 221, 255, 255, 128], [24, 71, 130, 219, 154, 170, 243, 182, 255, 255, 128]], [[1, 182, 225, 249, 219, 240, 255, 224, 128, 128, 128], [149, 150, 226, 252, 216, 205, 255, 171, 128, 128, 128], [28, 108, 170, 242, 183, 194, 254, 223, 255, 255, 128]], [[1, 81, 230, 252, 204, 203, 255, 192, 128, 128, 128], [123, 102, 209, 247, 188, 196, 255, 233, 128, 128, 128], [20, 95, 153, 243, 164, 173, 255, 203, 128, 128, 128]], [[1, 222, 248, 255, 216, 213, 128, 128, 128, 128, 128], [168, 175, 246, 252, 235, 205, 255, 255, 128, 128, 128], [47, 116, 215, 255, 211, 212, 255, 255, 128, 128, 128]], [[1, 121, 236, 253, 212, 214, 255, 255, 128, 128, 128], [141, 84, 213, 252, 201, 202, 255, 219, 128, 128, 128], [42, 80, 160, 240, 162, 185, 255, 205, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [244, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [238, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]]]],
        ui = [[[231, 120, 48, 89, 115, 113, 120, 152, 112], [152, 179, 64, 126, 170, 118, 46, 70, 95], [175, 69, 143, 80, 85, 82, 72, 155, 103], [56, 58, 10, 171, 218, 189, 17, 13, 152], [114, 26, 17, 163, 44, 195, 21, 10, 173], [121, 24, 80, 195, 26, 62, 44, 64, 85], [144, 71, 10, 38, 171, 213, 144, 34, 26], [170, 46, 55, 19, 136, 160, 33, 206, 71], [63, 20, 8, 114, 114, 208, 12, 9, 226], [81, 40, 11, 96, 182, 84, 29, 16, 36]], [[134, 183, 89, 137, 98, 101, 106, 165, 148], [72, 187, 100, 130, 157, 111, 32, 75, 80], [66, 102, 167, 99, 74, 62, 40, 234, 128], [41, 53, 9, 178, 241, 141, 26, 8, 107], [74, 43, 26, 146, 73, 166, 49, 23, 157], [65, 38, 105, 160, 51, 52, 31, 115, 128], [104, 79, 12, 27, 217, 255, 87, 17, 7], [87, 68, 71, 44, 114, 51, 15, 186, 23], [47, 41, 14, 110, 182, 183, 21, 17, 194], [66, 45, 25, 102, 197, 189, 23, 18, 22]], [[88, 88, 147, 150, 42, 46, 45, 196, 205], [43, 97, 183, 117, 85, 38, 35, 179, 61], [39, 53, 200, 87, 26, 21, 43, 232, 171], [56, 34, 51, 104, 114, 102, 29, 93, 77], [39, 28, 85, 171, 58, 165, 90, 98, 64], [34, 22, 116, 206, 23, 34, 43, 166, 73], [107, 54, 32, 26, 51, 1, 81, 43, 31], [68, 25, 106, 22, 64, 171, 36, 225, 114], [34, 19, 21, 102, 132, 188, 16, 76, 124], [62, 18, 78, 95, 85, 57, 50, 48, 51]], [[193, 101, 35, 159, 215, 111, 89, 46, 111], [60, 148, 31, 172, 219, 228, 21, 18, 111], [112, 113, 77, 85, 179, 255, 38, 120, 114], [40, 42, 1, 196, 245, 209, 10, 25, 109], [88, 43, 29, 140, 166, 213, 37, 43, 154], [61, 63, 30, 155, 67, 45, 68, 1, 209], [100, 80, 8, 43, 154, 1, 51, 26, 71], [142, 78, 78, 16, 255, 128, 34, 197, 171], [41, 40, 5, 102, 211, 183, 4, 1, 221], [51, 50, 17, 168, 209, 192, 23, 25, 82]], [[138, 31, 36, 171, 27, 166, 38, 44, 229], [67, 87, 58, 169, 82, 115, 26, 59, 179], [63, 59, 90, 180, 59, 166, 93, 73, 154], [40, 40, 21, 116, 143, 209, 34, 39, 175], [47, 15, 16, 183, 34, 223, 49, 45, 183], [46, 17, 33, 183, 6, 98, 15, 32, 183], [57, 46, 22, 24, 128, 1, 54, 17, 37], [65, 32, 73, 115, 28, 128, 23, 128, 205], [40, 3, 9, 115, 51, 192, 18, 6, 223], [87, 37, 9, 115, 59, 77, 64, 21, 47]], [[104, 55, 44, 218, 9, 54, 53, 130, 226], [64, 90, 70, 205, 40, 41, 23, 26, 57], [54, 57, 112, 184, 5, 41, 38, 166, 213], [30, 34, 26, 133, 152, 116, 10, 32, 134], [39, 19, 53, 221, 26, 114, 32, 73, 255], [31, 9, 65, 234, 2, 15, 1, 118, 73], [75, 32, 12, 51, 192, 255, 160, 43, 51], [88, 31, 35, 67, 102, 85, 55, 186, 85], [56, 21, 23, 111, 59, 205, 45, 37, 192], [55, 38, 70, 124, 73, 102, 1, 34, 98]], [[125, 98, 42, 88, 104, 85, 117, 175, 82], [95, 84, 53, 89, 128, 100, 113, 101, 45], [75, 79, 123, 47, 51, 128, 81, 171, 1], [57, 17, 5, 71, 102, 57, 53, 41, 49], [38, 33, 13, 121, 57, 73, 26, 1, 85], [41, 10, 67, 138, 77, 110, 90, 47, 114], [115, 21, 2, 10, 102, 255, 166, 23, 6], [101, 29, 16, 10, 85, 128, 101, 196, 26], [57, 18, 10, 102, 102, 213, 34, 20, 43], [117, 20, 15, 36, 163, 128, 68, 1, 26]], [[102, 61, 71, 37, 34, 53, 31, 243, 192], [69, 60, 71, 38, 73, 119, 28, 222, 37], [68, 45, 128, 34, 1, 47, 11, 245, 171], [62, 17, 19, 70, 146, 85, 55, 62, 70], [37, 43, 37, 154, 100, 163, 85, 160, 1], [63, 9, 92, 136, 28, 64, 32, 201, 85], [75, 15, 9, 9, 64, 255, 184, 119, 16], [86, 6, 28, 5, 64, 255, 25, 248, 1], [56, 8, 17, 132, 137, 255, 55, 116, 128], [58, 15, 20, 82, 135, 57, 26, 121, 40]], [[164, 50, 31, 137, 154, 133, 25, 35, 218], [51, 103, 44, 131, 131, 123, 31, 6, 158], [86, 40, 64, 135, 148, 224, 45, 183, 128], [22, 26, 17, 131, 240, 154, 14, 1, 209], [45, 16, 21, 91, 64, 222, 7, 1, 197], [56, 21, 39, 155, 60, 138, 23, 102, 213], [83, 12, 13, 54, 192, 255, 68, 47, 28], [85, 26, 85, 85, 128, 128, 32, 146, 171], [18, 11, 7, 63, 144, 171, 4, 4, 246], [35, 27, 10, 146, 174, 171, 12, 26, 128]], [[190, 80, 35, 99, 180, 80, 126, 54, 45], [85, 126, 47, 87, 176, 51, 41, 20, 32], [101, 75, 128, 139, 118, 146, 116, 128, 85], [56, 41, 15, 176, 236, 85, 37, 9, 62], [71, 30, 17, 119, 118, 255, 17, 18, 138], [101, 38, 60, 138, 55, 70, 43, 26, 142], [146, 36, 19, 30, 171, 255, 97, 27, 20], [138, 45, 61, 62, 219, 1, 81, 188, 64], [32, 41, 20, 117, 151, 142, 20, 21, 163], [112, 19, 12, 61, 195, 128, 48, 4, 24]]],
        ci = [[[[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[176, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 241, 252, 255, 255, 255, 255, 255, 255, 255, 255], [249, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 244, 252, 255, 255, 255, 255, 255, 255, 255, 255], [234, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 246, 254, 255, 255, 255, 255, 255, 255, 255, 255], [239, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 254, 255, 255, 255, 255, 255, 255], [250, 255, 254, 255, 254, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [225, 252, 241, 253, 255, 255, 254, 255, 255, 255, 255], [234, 250, 241, 250, 253, 255, 253, 254, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [238, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255], [247, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[186, 251, 250, 255, 255, 255, 255, 255, 255, 255, 255], [234, 251, 244, 254, 255, 255, 255, 255, 255, 255, 255], [251, 251, 243, 253, 254, 255, 254, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [236, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [250, 254, 252, 254, 255, 255, 255, 255, 255, 255, 255], [248, 254, 249, 253, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [246, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 254, 251, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 252, 255, 255, 255, 255, 255, 255, 255, 255], [248, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [245, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255], [249, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]]],
        li = [0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0],
        hi = [],
        fi = [],
        di = [],
        pi = 1,
        gi = 2,
        mi = [],
        vi = [];

    vr("UpsampleRgbLinePair", Ar, 3), vr("UpsampleBgrLinePair", xr, 3), vr("UpsampleRgbaLinePair", Ir, 4), vr("UpsampleBgraLinePair", kr, 4), vr("UpsampleArgbLinePair", Pr, 4), vr("UpsampleRgba4444LinePair", _r, 2), vr("UpsampleRgb565LinePair", Sr, 2);

    var bi = t.UpsampleRgbLinePair,
        yi = t.UpsampleBgrLinePair,
        wi = t.UpsampleRgbaLinePair,
        Ni = t.UpsampleBgraLinePair,
        Li = t.UpsampleArgbLinePair,
        Ai = t.UpsampleRgba4444LinePair,
        xi = t.UpsampleRgb565LinePair,
        Si = 16,
        _i = 1 << Si - 1,
        Pi = -227,
        ki = 482,
        Ii = 6,
        Fi = (256 << Ii) - 1,
        Ci = 0,
        ji = a(256),
        Oi = a(256),
        Bi = a(256),
        Mi = a(256),
        Ei = a(ki - Pi),
        qi = a(ki - Pi);

    Fr("YuvToRgbRow", Ar, 3), Fr("YuvToBgrRow", xr, 3), Fr("YuvToRgbaRow", Ir, 4), Fr("YuvToBgraRow", kr, 4), Fr("YuvToArgbRow", Pr, 4), Fr("YuvToRgba4444Row", _r, 2), Fr("YuvToRgb565Row", Sr, 2);
    var Ri = [0, 4, 8, 12, 128, 132, 136, 140, 256, 260, 264, 268, 384, 388, 392, 396],
        Ti = [0, 2, 8],
        Di = [8, 7, 6, 4, 4, 2, 2, 2, 1, 1, 1, 1],
        Ui = 1;

    this.WebPDecodeRGBA = function (t, r, n, i, a) {
      var o = qn,
          s = new rr(),
          u = new ot();
      s.ba = u, u.S = o, u.width = [u.width], u.height = [u.height];
      var c = u.width,
          l = u.height,
          h = new st();
      if (null == h || null == t) var f = 2;else e(null != h), f = Br(t, r, n, h.width, h.height, h.Pd, h.Qd, h.format, null);

      if (0 != f ? c = 0 : (null != c && (c[0] = h.width[0]), null != l && (l[0] = h.height[0]), c = 1), c) {
        u.width = u.width[0], u.height = u.height[0], null != i && (i[0] = u.width), null != a && (a[0] = u.height);

        t: {
          if (i = new Gt(), (a = new nr()).data = t, a.w = r, a.ha = n, a.kd = 1, r = [0], e(null != a), (0 == (t = Br(a.data, a.w, a.ha, null, null, null, r, null, a)) || 7 == t) && r[0] && (t = 4), 0 == (r = t)) {
            if (e(null != s), i.data = a.data, i.w = a.w + a.offset, i.ha = a.ha - a.offset, i.put = dt, i.ac = ft, i.bc = pt, i.ma = s, a.xa) {
              if (null == (t = kt())) {
                s = 1;
                break t;
              }

              if (function (t, r) {
                var n = [0],
                    i = [0],
                    a = [0];

                e: for (;;) {
                  if (null == t) return 0;
                  if (null == r) return t.a = 2, 0;

                  if (t.l = r, t.a = 0, v(t.m, r.data, r.w, r.ha), !gt(t.m, n, i, a)) {
                    t.a = 3;
                    break e;
                  }

                  if (t.xb = gi, r.width = n[0], r.height = i[0], !It(n[0], i[0], 1, t, null)) break e;
                  return 1;
                }

                return e(0 != t.a), 0;
              }(t, i)) {
                if (i = 0 == (r = qr(i.width, i.height, s.Oa, s.ba))) {
                  e: {
                    i = t;

                    r: for (;;) {
                      if (null == i) {
                        i = 0;
                        break e;
                      }

                      if (e(null != i.s.yc), e(null != i.s.Ya), e(0 < i.s.Wb), e(null != (n = i.l)), e(null != (a = n.ma)), 0 != i.xb) {
                        if (i.ca = a.ba, i.tb = a.tb, e(null != i.ca), !Mr(a.Oa, n, Tn)) {
                          i.a = 2;
                          break r;
                        }

                        if (!Ft(i, n.width)) break r;
                        if (n.da) break r;

                        if ((n.da || nt(i.ca.S)) && mr(), 11 > i.ca.S || (alert("todo:WebPInitConvertARGBToYUV"), null != i.ca.f.kb.F && mr()), i.Pb && 0 < i.s.ua && null == i.s.vb.X && !O(i.s.vb, i.s.Wa.Xa)) {
                          i.a = 1;
                          break r;
                        }

                        i.xb = 0;
                      }

                      if (!_t(i, i.V, i.Ba, i.c, i.i, n.o, Lt)) break r;
                      a.Dc = i.Ma, i = 1;
                      break e;
                    }

                    e(0 != i.a), i = 0;
                  }

                  i = !i;
                }

                i && (r = t.a);
              } else r = t.a;
            } else {
              if (null == (t = new Yt())) {
                s = 1;
                break t;
              }

              if (t.Fa = a.na, t.P = a.P, t.qc = a.Sa, Kt(t, i)) {
                if (0 == (r = qr(i.width, i.height, s.Oa, s.ba))) {
                  if (t.Aa = 0, n = s.Oa, e(null != (a = t)), null != n) {
                    if (0 < (c = 0 > (c = n.Md) ? 0 : 100 < c ? 255 : 255 * c / 100)) {
                      for (l = h = 0; 4 > l; ++l) 12 > (f = a.pb[l]).lc && (f.ia = c * Di[0 > f.lc ? 0 : f.lc] >> 3), h |= f.ia;

                      h && (alert("todo:VP8InitRandom"), a.ia = 1);
                    }

                    a.Ga = n.Id, 100 < a.Ga ? a.Ga = 100 : 0 > a.Ga && (a.Ga = 0);
                  }

                  Qt(t, i) || (r = t.a);
                }
              } else r = t.a;
            }

            0 == r && null != s.Oa && s.Oa.fd && (r = Er(s.ba));
          }

          s = r;
        }

        o = 0 != s ? null : 11 > o ? u.f.RGBA.eb : u.f.kb.y;
      } else o = null;

      return o;
    };

    var zi = [3, 4, 3, 4, 4, 2, 2, 4, 4, 4, 2, 1, 1];
  })();

  var h = [0],
      f = [0],
      d = [],
      p = new $t(),
      g = t,
      m = function (t, e) {
    var r = {},
        n = 0,
        i = !1,
        a = 0,
        o = 0;

    if (r.frames = [], !
    /** @license
       * Copyright (c) 2017 Dominik Homberger
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    https://webpjs.appspot.com
    WebPRiffParser dominikhlbg@gmail.com
    */
    function (t, e, r, n) {
      for (var i = 0; i < n; i++) if (t[e + i] != r.charCodeAt(i)) return !0;

      return !1;
    }(t, e, "RIFF", 4)) {
      var s, h;
      l(t, e += 4);

      for (e += 8; e < t.length;) {
        var f = u(t, e),
            d = l(t, e += 4);
        e += 4;
        var p = d + (1 & d);

        switch (f) {
          case "VP8 ":
          case "VP8L":
            void 0 === r.frames[n] && (r.frames[n] = {});
            (v = r.frames[n]).src_off = i ? o : e - 8, v.src_size = a + d + 8, n++, i && (i = !1, a = 0, o = 0);
            break;

          case "VP8X":
            (v = r.header = {}).feature_flags = t[e];
            var g = e + 4;
            v.canvas_width = 1 + c(t, g);
            g += 3;
            v.canvas_height = 1 + c(t, g);
            g += 3;
            break;

          case "ALPH":
            i = !0, a = p + 8, o = e - 8;
            break;

          case "ANIM":
            (v = r.header).bgcolor = l(t, e);
            g = e + 4;
            v.loop_count = (s = t)[(h = g) + 0] << 0 | s[h + 1] << 8;
            g += 2;
            break;

          case "ANMF":
            var m, v;
            (v = r.frames[n] = {}).offset_x = 2 * c(t, e), e += 3, v.offset_y = 2 * c(t, e), e += 3, v.width = 1 + c(t, e), e += 3, v.height = 1 + c(t, e), e += 3, v.duration = c(t, e), e += 3, m = t[e++], v.dispose = 1 & m, v.blend = m >> 1 & 1;
        }

        "ANMF" != f && (e += p);
      }

      return r;
    }
  }(g, 0);

  m.response = g, m.rgbaoutput = !0, m.dataurl = !1;
  var v = m.header ? m.header : null,
      b = m.frames ? m.frames : null;

  if (v) {
    v.loop_counter = v.loop_count, h = [v.canvas_height], f = [v.canvas_width];

    for (var y = 0; y < b.length && 0 != b[y].blend; y++);
  }

  var w = b[0],
      N = p.WebPDecodeRGBA(g, w.src_off, w.src_size, f, h);
  w.rgba = N, w.imgwidth = f[0], w.imgheight = h[0];

  for (var L = 0; L < f[0] * h[0] * 4; L++) d[L] = N[L];

  return this.width = f, this.height = h, this.data = d, this;
}

!function (e) {
  var r = function () {
    return "function" == typeof _fflate.zlibSync;
  },
      n = function (r, n, a, l) {
    var h = 4,
        f = s;

    switch (l) {
      case e.image_compression.FAST:
        h = 1, f = o;
        break;

      case e.image_compression.MEDIUM:
        h = 6, f = u;
        break;

      case e.image_compression.SLOW:
        h = 9, f = c;
    }

    r = i(r, n, a, f);
    var d = (0, _fflate.zlibSync)(r, {
      level: h
    });
    return e.__addimage__.arrayBufferToBinaryString(d);
  },
      i = function (t, e, r, n) {
    for (var i, a, o, s = t.length / e, u = new Uint8Array(t.length + s), c = h(), l = 0; l < s; l += 1) {
      if (o = l * e, i = t.subarray(o, o + e), n) u.set(n(i, r, a), o + l);else {
        for (var d, p = c.length, g = []; d < p; d += 1) g[d] = c[d](i, r, a);

        var m = f(g.concat());
        u.set(g[m], o + l);
      }
      a = i;
    }

    return u;
  },
      a = function (t) {
    var e = Array.apply([], t);
    return e.unshift(0), e;
  },
      o = function (t, e) {
    var r,
        n = [],
        i = t.length;
    n[0] = 1;

    for (var a = 0; a < i; a += 1) r = t[a - e] || 0, n[a + 1] = t[a] - r + 256 & 255;

    return n;
  },
      s = function (t, e, r) {
    var n,
        i = [],
        a = t.length;
    i[0] = 2;

    for (var o = 0; o < a; o += 1) n = r && r[o] || 0, i[o + 1] = t[o] - n + 256 & 255;

    return i;
  },
      u = function (t, e, r) {
    var n,
        i,
        a = [],
        o = t.length;
    a[0] = 3;

    for (var s = 0; s < o; s += 1) n = t[s - e] || 0, i = r && r[s] || 0, a[s + 1] = t[s] + 256 - (n + i >>> 1) & 255;

    return a;
  },
      c = function (t, e, r) {
    var n,
        i,
        a,
        o,
        s = [],
        u = t.length;
    s[0] = 4;

    for (var c = 0; c < u; c += 1) n = t[c - e] || 0, i = r && r[c] || 0, a = r && r[c - e] || 0, o = l(n, i, a), s[c + 1] = t[c] - o + 256 & 255;

    return s;
  },
      l = function (t, e, r) {
    if (t === e && e === r) return t;
    var n = Math.abs(e - r),
        i = Math.abs(t - r),
        a = Math.abs(t + e - r - r);
    return n <= i && n <= a ? t : i <= a ? e : r;
  },
      h = function () {
    return [a, o, s, u, c];
  },
      f = function (t) {
    var e = t.map(function (t) {
      return t.reduce(function (t, e) {
        return t + Math.abs(e);
      }, 0);
    });
    return e.indexOf(Math.min.apply(null, e));
  };

  e.processPNG = function (t, i, a, o) {
    var s,
        u,
        c,
        l,
        h,
        f,
        d,
        p,
        g,
        m,
        v,
        b,
        y,
        w,
        N,
        L = this.decode.FLATE_DECODE,
        A = "";

    if (this.__addimage__.isArrayBuffer(t) && (t = new Uint8Array(t)), this.__addimage__.isArrayBufferView(t)) {
      if (t = (c = new Yt(t)).imgData, u = c.bits, s = c.colorSpace, h = c.colors, -1 !== [4, 6].indexOf(c.colorType)) {
        if (8 === c.bits) {
          g = (p = 32 == c.pixelBitlength ? new Uint32Array(c.decodePixels().buffer) : 16 == c.pixelBitlength ? new Uint16Array(c.decodePixels().buffer) : new Uint8Array(c.decodePixels().buffer)).length, v = new Uint8Array(g * c.colors), m = new Uint8Array(g);
          var x,
              S = c.pixelBitlength - c.bits;

          for (w = 0, N = 0; w < g; w++) {
            for (y = p[w], x = 0; x < S;) v[N++] = y >>> x & 255, x += c.bits;

            m[w] = y >>> x & 255;
          }
        }

        if (16 === c.bits) {
          g = (p = new Uint32Array(c.decodePixels().buffer)).length, v = new Uint8Array(g * (32 / c.pixelBitlength) * c.colors), m = new Uint8Array(g * (32 / c.pixelBitlength)), b = c.colors > 1, w = 0, N = 0;

          for (var _ = 0; w < g;) y = p[w++], v[N++] = y >>> 0 & 255, b && (v[N++] = y >>> 16 & 255, y = p[w++], v[N++] = y >>> 0 & 255), m[_++] = y >>> 16 & 255;

          u = 8;
        }

        o !== e.image_compression.NONE && r() ? (t = n(v, c.width * c.colors, c.colors, o), d = n(m, c.width, 1, o)) : (t = v, d = m, L = void 0);
      }

      if (3 === c.colorType && (s = this.color_spaces.INDEXED, f = c.palette, c.transparency.indexed)) {
        var P = c.transparency.indexed,
            k = 0;

        for (w = 0, g = P.length; w < g; ++w) k += P[w];

        if ((k /= 255) === g - 1 && -1 !== P.indexOf(0)) l = [P.indexOf(0)];else if (k !== g) {
          for (p = c.decodePixels(), m = new Uint8Array(p.length), w = 0, g = p.length; w < g; w++) m[w] = P[p[w]];

          d = n(m, c.width, 1);
        }
      }

      var I = function (t) {
        var r;

        switch (t) {
          case e.image_compression.FAST:
            r = 11;
            break;

          case e.image_compression.MEDIUM:
            r = 13;
            break;

          case e.image_compression.SLOW:
            r = 14;
            break;

          default:
            r = 12;
        }

        return r;
      }(o);

      return L === this.decode.FLATE_DECODE && (A = "/Predictor " + I + " "), A += "/Colors " + h + " /BitsPerComponent " + u + " /Columns " + c.width, (this.__addimage__.isArrayBuffer(t) || this.__addimage__.isArrayBufferView(t)) && (t = this.__addimage__.arrayBufferToBinaryString(t)), (d && this.__addimage__.isArrayBuffer(d) || this.__addimage__.isArrayBufferView(d)) && (d = this.__addimage__.arrayBufferToBinaryString(d)), {
        alias: a,
        data: t,
        index: i,
        filter: L,
        decodeParameters: A,
        transparency: l,
        palette: f,
        sMask: d,
        predictor: I,
        width: c.width,
        height: c.height,
        bitsPerComponent: u,
        colorSpace: s
      };
    }
  };
}(O.API), function (t) {
  t.processGIF89A = function (e, r, n, i) {
    var a = new Jt(e),
        o = a.width,
        s = a.height,
        u = [];
    a.decodeAndBlitFrameRGBA(0, u);
    var c = {
      data: u,
      width: o,
      height: s
    },
        l = new Kt(100).encode(c, 100);
    return t.processJPEG.call(this, l, r, n, i);
  }, t.processGIF87A = t.processGIF89A;
}(O.API), Zt.prototype.parseHeader = function () {
  if (this.fileSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.reserved = this.datav.getUint32(this.pos, !0), this.pos += 4, this.offset = this.datav.getUint32(this.pos, !0), this.pos += 4, this.headerSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.width = this.datav.getUint32(this.pos, !0), this.pos += 4, this.height = this.datav.getInt32(this.pos, !0), this.pos += 4, this.planes = this.datav.getUint16(this.pos, !0), this.pos += 2, this.bitPP = this.datav.getUint16(this.pos, !0), this.pos += 2, this.compress = this.datav.getUint32(this.pos, !0), this.pos += 4, this.rawSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.hr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.vr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.colors = this.datav.getUint32(this.pos, !0), this.pos += 4, this.importantColors = this.datav.getUint32(this.pos, !0), this.pos += 4, 16 === this.bitPP && this.is_with_alpha && (this.bitPP = 15), this.bitPP < 15) {
    var t = 0 === this.colors ? 1 << this.bitPP : this.colors;
    this.palette = new Array(t);

    for (var e = 0; e < t; e++) {
      var r = this.datav.getUint8(this.pos++, !0),
          n = this.datav.getUint8(this.pos++, !0),
          i = this.datav.getUint8(this.pos++, !0),
          a = this.datav.getUint8(this.pos++, !0);
      this.palette[e] = {
        red: i,
        green: n,
        blue: r,
        quad: a
      };
    }
  }

  this.height < 0 && (this.height *= -1, this.bottom_up = !1);
}, Zt.prototype.parseBGR = function () {
  this.pos = this.offset;

  try {
    var t = "bit" + this.bitPP,
        e = this.width * this.height * 4;
    this.data = new Uint8Array(e), this[t]();
  } catch (t) {
    i.log("bit decode error:" + t);
  }
}, Zt.prototype.bit1 = function () {
  var t,
      e = Math.ceil(this.width / 8),
      r = e % 4;

  for (t = this.height - 1; t >= 0; t--) {
    for (var n = this.bottom_up ? t : this.height - 1 - t, i = 0; i < e; i++) for (var a = this.datav.getUint8(this.pos++, !0), o = n * this.width * 4 + 8 * i * 4, s = 0; s < 8 && 8 * i + s < this.width; s++) {
      var u = this.palette[a >> 7 - s & 1];
      this.data[o + 4 * s] = u.blue, this.data[o + 4 * s + 1] = u.green, this.data[o + 4 * s + 2] = u.red, this.data[o + 4 * s + 3] = 255;
    }

    0 !== r && (this.pos += 4 - r);
  }
}, Zt.prototype.bit4 = function () {
  for (var t = Math.ceil(this.width / 2), e = t % 4, r = this.height - 1; r >= 0; r--) {
    for (var n = this.bottom_up ? r : this.height - 1 - r, i = 0; i < t; i++) {
      var a = this.datav.getUint8(this.pos++, !0),
          o = n * this.width * 4 + 2 * i * 4,
          s = a >> 4,
          u = 15 & a,
          c = this.palette[s];
      if (this.data[o] = c.blue, this.data[o + 1] = c.green, this.data[o + 2] = c.red, this.data[o + 3] = 255, 2 * i + 1 >= this.width) break;
      c = this.palette[u], this.data[o + 4] = c.blue, this.data[o + 4 + 1] = c.green, this.data[o + 4 + 2] = c.red, this.data[o + 4 + 3] = 255;
    }

    0 !== e && (this.pos += 4 - e);
  }
}, Zt.prototype.bit8 = function () {
  for (var t = this.width % 4, e = this.height - 1; e >= 0; e--) {
    for (var r = this.bottom_up ? e : this.height - 1 - e, n = 0; n < this.width; n++) {
      var i = this.datav.getUint8(this.pos++, !0),
          a = r * this.width * 4 + 4 * n;

      if (i < this.palette.length) {
        var o = this.palette[i];
        this.data[a] = o.red, this.data[a + 1] = o.green, this.data[a + 2] = o.blue, this.data[a + 3] = 255;
      } else this.data[a] = 255, this.data[a + 1] = 255, this.data[a + 2] = 255, this.data[a + 3] = 255;
    }

    0 !== t && (this.pos += 4 - t);
  }
}, Zt.prototype.bit15 = function () {
  for (var t = this.width % 3, e = parseInt("11111", 2), r = this.height - 1; r >= 0; r--) {
    for (var n = this.bottom_up ? r : this.height - 1 - r, i = 0; i < this.width; i++) {
      var a = this.datav.getUint16(this.pos, !0);
      this.pos += 2;
      var o = (a & e) / e * 255 | 0,
          s = (a >> 5 & e) / e * 255 | 0,
          u = (a >> 10 & e) / e * 255 | 0,
          c = a >> 15 ? 255 : 0,
          l = n * this.width * 4 + 4 * i;
      this.data[l] = u, this.data[l + 1] = s, this.data[l + 2] = o, this.data[l + 3] = c;
    }

    this.pos += t;
  }
}, Zt.prototype.bit16 = function () {
  for (var t = this.width % 3, e = parseInt("11111", 2), r = parseInt("111111", 2), n = this.height - 1; n >= 0; n--) {
    for (var i = this.bottom_up ? n : this.height - 1 - n, a = 0; a < this.width; a++) {
      var o = this.datav.getUint16(this.pos, !0);
      this.pos += 2;
      var s = (o & e) / e * 255 | 0,
          u = (o >> 5 & r) / r * 255 | 0,
          c = (o >> 11) / e * 255 | 0,
          l = i * this.width * 4 + 4 * a;
      this.data[l] = c, this.data[l + 1] = u, this.data[l + 2] = s, this.data[l + 3] = 255;
    }

    this.pos += t;
  }
}, Zt.prototype.bit24 = function () {
  for (var t = this.height - 1; t >= 0; t--) {
    for (var e = this.bottom_up ? t : this.height - 1 - t, r = 0; r < this.width; r++) {
      var n = this.datav.getUint8(this.pos++, !0),
          i = this.datav.getUint8(this.pos++, !0),
          a = this.datav.getUint8(this.pos++, !0),
          o = e * this.width * 4 + 4 * r;
      this.data[o] = a, this.data[o + 1] = i, this.data[o + 2] = n, this.data[o + 3] = 255;
    }

    this.pos += this.width % 4;
  }
}, Zt.prototype.bit32 = function () {
  for (var t = this.height - 1; t >= 0; t--) for (var e = this.bottom_up ? t : this.height - 1 - t, r = 0; r < this.width; r++) {
    var n = this.datav.getUint8(this.pos++, !0),
        i = this.datav.getUint8(this.pos++, !0),
        a = this.datav.getUint8(this.pos++, !0),
        o = this.datav.getUint8(this.pos++, !0),
        s = e * this.width * 4 + 4 * r;
    this.data[s] = a, this.data[s + 1] = i, this.data[s + 2] = n, this.data[s + 3] = o;
  }
}, Zt.prototype.getData = function () {
  return this.data;
},
/**
 * @license
 * Copyright (c) 2018 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  t.processBMP = function (e, r, n, i) {
    var a = new Zt(e, !1),
        o = a.width,
        s = a.height,
        u = {
      data: a.getData(),
      width: o,
      height: s
    },
        c = new Kt(100).encode(u, 100);
    return t.processJPEG.call(this, c, r, n, i);
  };
}(O.API), $t.prototype.getData = function () {
  return this.data;
},
/**
 * @license
 * Copyright (c) 2019 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  t.processWEBP = function (e, r, n, i) {
    var a = new $t(e, !1),
        o = a.width,
        s = a.height,
        u = {
      data: a.getData(),
      width: o,
      height: s
    },
        c = new Kt(100).encode(u, 100);
    return t.processJPEG.call(this, c, r, n, i);
  };
}(O.API), O.API.setLanguage = function (t) {
  return void 0 === this.internal.languageSettings && (this.internal.languageSettings = {}, this.internal.languageSettings.isSubscribed = !1), void 0 !== {
    af: "Afrikaans",
    sq: "Albanian",
    ar: "Arabic (Standard)",
    "ar-DZ": "Arabic (Algeria)",
    "ar-BH": "Arabic (Bahrain)",
    "ar-EG": "Arabic (Egypt)",
    "ar-IQ": "Arabic (Iraq)",
    "ar-JO": "Arabic (Jordan)",
    "ar-KW": "Arabic (Kuwait)",
    "ar-LB": "Arabic (Lebanon)",
    "ar-LY": "Arabic (Libya)",
    "ar-MA": "Arabic (Morocco)",
    "ar-OM": "Arabic (Oman)",
    "ar-QA": "Arabic (Qatar)",
    "ar-SA": "Arabic (Saudi Arabia)",
    "ar-SY": "Arabic (Syria)",
    "ar-TN": "Arabic (Tunisia)",
    "ar-AE": "Arabic (U.A.E.)",
    "ar-YE": "Arabic (Yemen)",
    an: "Aragonese",
    hy: "Armenian",
    as: "Assamese",
    ast: "Asturian",
    az: "Azerbaijani",
    eu: "Basque",
    be: "Belarusian",
    bn: "Bengali",
    bs: "Bosnian",
    br: "Breton",
    bg: "Bulgarian",
    my: "Burmese",
    ca: "Catalan",
    ch: "Chamorro",
    ce: "Chechen",
    zh: "Chinese",
    "zh-HK": "Chinese (Hong Kong)",
    "zh-CN": "Chinese (PRC)",
    "zh-SG": "Chinese (Singapore)",
    "zh-TW": "Chinese (Taiwan)",
    cv: "Chuvash",
    co: "Corsican",
    cr: "Cree",
    hr: "Croatian",
    cs: "Czech",
    da: "Danish",
    nl: "Dutch (Standard)",
    "nl-BE": "Dutch (Belgian)",
    en: "English",
    "en-AU": "English (Australia)",
    "en-BZ": "English (Belize)",
    "en-CA": "English (Canada)",
    "en-IE": "English (Ireland)",
    "en-JM": "English (Jamaica)",
    "en-NZ": "English (New Zealand)",
    "en-PH": "English (Philippines)",
    "en-ZA": "English (South Africa)",
    "en-TT": "English (Trinidad & Tobago)",
    "en-GB": "English (United Kingdom)",
    "en-US": "English (United States)",
    "en-ZW": "English (Zimbabwe)",
    eo: "Esperanto",
    et: "Estonian",
    fo: "Faeroese",
    fj: "Fijian",
    fi: "Finnish",
    fr: "French (Standard)",
    "fr-BE": "French (Belgium)",
    "fr-CA": "French (Canada)",
    "fr-FR": "French (France)",
    "fr-LU": "French (Luxembourg)",
    "fr-MC": "French (Monaco)",
    "fr-CH": "French (Switzerland)",
    fy: "Frisian",
    fur: "Friulian",
    gd: "Gaelic (Scots)",
    "gd-IE": "Gaelic (Irish)",
    gl: "Galacian",
    ka: "Georgian",
    de: "German (Standard)",
    "de-AT": "German (Austria)",
    "de-DE": "German (Germany)",
    "de-LI": "German (Liechtenstein)",
    "de-LU": "German (Luxembourg)",
    "de-CH": "German (Switzerland)",
    el: "Greek",
    gu: "Gujurati",
    ht: "Haitian",
    he: "Hebrew",
    hi: "Hindi",
    hu: "Hungarian",
    is: "Icelandic",
    id: "Indonesian",
    iu: "Inuktitut",
    ga: "Irish",
    it: "Italian (Standard)",
    "it-CH": "Italian (Switzerland)",
    ja: "Japanese",
    kn: "Kannada",
    ks: "Kashmiri",
    kk: "Kazakh",
    km: "Khmer",
    ky: "Kirghiz",
    tlh: "Klingon",
    ko: "Korean",
    "ko-KP": "Korean (North Korea)",
    "ko-KR": "Korean (South Korea)",
    la: "Latin",
    lv: "Latvian",
    lt: "Lithuanian",
    lb: "Luxembourgish",
    mk: "FYRO Macedonian",
    ms: "Malay",
    ml: "Malayalam",
    mt: "Maltese",
    mi: "Maori",
    mr: "Marathi",
    mo: "Moldavian",
    nv: "Navajo",
    ng: "Ndonga",
    ne: "Nepali",
    no: "Norwegian",
    nb: "Norwegian (Bokmal)",
    nn: "Norwegian (Nynorsk)",
    oc: "Occitan",
    or: "Oriya",
    om: "Oromo",
    fa: "Persian",
    "fa-IR": "Persian/Iran",
    pl: "Polish",
    pt: "Portuguese",
    "pt-BR": "Portuguese (Brazil)",
    pa: "Punjabi",
    "pa-IN": "Punjabi (India)",
    "pa-PK": "Punjabi (Pakistan)",
    qu: "Quechua",
    rm: "Rhaeto-Romanic",
    ro: "Romanian",
    "ro-MO": "Romanian (Moldavia)",
    ru: "Russian",
    "ru-MO": "Russian (Moldavia)",
    sz: "Sami (Lappish)",
    sg: "Sango",
    sa: "Sanskrit",
    sc: "Sardinian",
    sd: "Sindhi",
    si: "Singhalese",
    sr: "Serbian",
    sk: "Slovak",
    sl: "Slovenian",
    so: "Somani",
    sb: "Sorbian",
    es: "Spanish",
    "es-AR": "Spanish (Argentina)",
    "es-BO": "Spanish (Bolivia)",
    "es-CL": "Spanish (Chile)",
    "es-CO": "Spanish (Colombia)",
    "es-CR": "Spanish (Costa Rica)",
    "es-DO": "Spanish (Dominican Republic)",
    "es-EC": "Spanish (Ecuador)",
    "es-SV": "Spanish (El Salvador)",
    "es-GT": "Spanish (Guatemala)",
    "es-HN": "Spanish (Honduras)",
    "es-MX": "Spanish (Mexico)",
    "es-NI": "Spanish (Nicaragua)",
    "es-PA": "Spanish (Panama)",
    "es-PY": "Spanish (Paraguay)",
    "es-PE": "Spanish (Peru)",
    "es-PR": "Spanish (Puerto Rico)",
    "es-ES": "Spanish (Spain)",
    "es-UY": "Spanish (Uruguay)",
    "es-VE": "Spanish (Venezuela)",
    sx: "Sutu",
    sw: "Swahili",
    sv: "Swedish",
    "sv-FI": "Swedish (Finland)",
    "sv-SV": "Swedish (Sweden)",
    ta: "Tamil",
    tt: "Tatar",
    te: "Teluga",
    th: "Thai",
    tig: "Tigre",
    ts: "Tsonga",
    tn: "Tswana",
    tr: "Turkish",
    tk: "Turkmen",
    uk: "Ukrainian",
    hsb: "Upper Sorbian",
    ur: "Urdu",
    ve: "Venda",
    vi: "Vietnamese",
    vo: "Volapuk",
    wa: "Walloon",
    cy: "Welsh",
    xh: "Xhosa",
    ji: "Yiddish",
    zu: "Zulu"
  }[t] && (this.internal.languageSettings.languageCode = t, !1 === this.internal.languageSettings.isSubscribed && (this.internal.events.subscribe("putCatalog", function () {
    this.internal.write("/Lang (" + this.internal.languageSettings.languageCode + ")");
  }), this.internal.languageSettings.isSubscribed = !0)), this;
},
/** @license
 * MIT license.
 * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com
 *               2014 Diego Casorran, https://github.com/diegocr
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
zt = O.API, Ht = zt.getCharWidthsArray = function (t, e) {
  var r,
      n,
      i = (e = e || {}).font || this.internal.getFont(),
      a = e.fontSize || this.internal.getFontSize(),
      o = e.charSpace || this.internal.getCharSpace(),
      s = e.widths ? e.widths : i.metadata.Unicode.widths,
      u = s.fof ? s.fof : 1,
      c = e.kerning ? e.kerning : i.metadata.Unicode.kerning,
      l = c.fof ? c.fof : 1,
      h = !1 !== e.doKerning,
      f = 0,
      d = t.length,
      p = 0,
      g = s[0] || u,
      m = [];

  for (r = 0; r < d; r++) n = t.charCodeAt(r), "function" == typeof i.metadata.widthOfString ? m.push((i.metadata.widthOfGlyph(i.metadata.characterToGlyph(n)) + o * (1e3 / a) || 0) / 1e3) : (f = h && "object" == typeof c[n] && !isNaN(parseInt(c[n][p], 10)) ? c[n][p] / l : 0, m.push((s[n] || g) / u + f)), p = n;

  return m;
}, Vt = zt.getStringUnitWidth = function (t, e) {
  var r = (e = e || {}).fontSize || this.internal.getFontSize(),
      n = e.font || this.internal.getFont(),
      i = e.charSpace || this.internal.getCharSpace();
  return zt.processArabic && (t = zt.processArabic(t)), "function" == typeof n.metadata.widthOfString ? n.metadata.widthOfString(t, r, i) / r : Ht.apply(this, arguments).reduce(function (t, e) {
    return t + e;
  }, 0);
}, Wt = function (t, e, r, n) {
  for (var i = [], a = 0, o = t.length, s = 0; a !== o && s + e[a] < r;) s += e[a], a++;

  i.push(t.slice(0, a));
  var u = a;

  for (s = 0; a !== o;) s + e[a] > n && (i.push(t.slice(u, a)), s = 0, u = a), s += e[a], a++;

  return u !== a && i.push(t.slice(u, a)), i;
}, Gt = function (t, e, r) {
  r || (r = {});
  var n,
      i,
      a,
      o,
      s,
      u,
      c,
      l = [],
      h = [l],
      f = r.textIndent || 0,
      d = 0,
      p = 0,
      g = t.split(" "),
      m = Ht.apply(this, [" ", r])[0];

  if (u = -1 === r.lineIndent ? g[0].length + 2 : r.lineIndent || 0) {
    var v = Array(u).join(" "),
        b = [];
    g.map(function (t) {
      (t = t.split(/\s*\n/)).length > 1 ? b = b.concat(t.map(function (t, e) {
        return (e && t.length ? "\n" : "") + t;
      })) : b.push(t[0]);
    }), g = b, u = Vt.apply(this, [v, r]);
  }

  for (a = 0, o = g.length; a < o; a++) {
    var y = 0;

    if (n = g[a], u && "\n" == n[0] && (n = n.substr(1), y = 1), f + d + (p = (i = Ht.apply(this, [n, r])).reduce(function (t, e) {
      return t + e;
    }, 0)) > e || y) {
      if (p > e) {
        for (s = Wt.apply(this, [n, i, e - (f + d), e]), l.push(s.shift()), l = [s.pop()]; s.length;) h.push([s.shift()]);

        p = i.slice(n.length - (l[0] ? l[0].length : 0)).reduce(function (t, e) {
          return t + e;
        }, 0);
      } else l = [n];

      h.push(l), f = p + u, d = m;
    } else l.push(n), f += d + p, d = m;
  }

  return c = u ? function (t, e) {
    return (e ? v : "") + t.join(" ");
  } : function (t) {
    return t.join(" ");
  }, h.map(c);
}, zt.splitTextToSize = function (t, e, r) {
  var n,
      i = (r = r || {}).fontSize || this.internal.getFontSize(),
      a = function (t) {
    if (t.widths && t.kerning) return {
      widths: t.widths,
      kerning: t.kerning
    };
    var e = this.internal.getFont(t.fontName, t.fontStyle);
    return e.metadata.Unicode ? {
      widths: e.metadata.Unicode.widths || {
        0: 1
      },
      kerning: e.metadata.Unicode.kerning || {}
    } : {
      font: e.metadata,
      fontSize: this.internal.getFontSize(),
      charSpace: this.internal.getCharSpace()
    };
  }.call(this, r);

  n = Array.isArray(t) ? t : String(t).split(/\r?\n/);
  var o = 1 * this.internal.scaleFactor * e / i;
  a.textIndent = r.textIndent ? 1 * r.textIndent * this.internal.scaleFactor / i : 0, a.lineIndent = r.lineIndent;
  var s,
      u,
      c = [];

  for (s = 0, u = n.length; s < u; s++) c = c.concat(Gt.apply(this, [n[s], o, a]));

  return c;
},
/** @license
 jsPDF standard_fonts_metrics plugin
 * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com
 * MIT license.
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
function (t) {
  t.__fontmetrics__ = t.__fontmetrics__ || {};

  for (var e = "klmnopqrstuvwxyz", r = {}, n = {}, i = 0; i < e.length; i++) r[e[i]] = "0123456789abcdef"[i], n["0123456789abcdef"[i]] = e[i];

  var a = function (t) {
    return "0x" + parseInt(t, 10).toString(16);
  },
      o = t.__fontmetrics__.compress = function (t) {
    var e,
        r,
        i,
        s,
        u = ["{"];

    for (var c in t) {
      if (e = t[c], isNaN(parseInt(c, 10)) ? r = "'" + c + "'" : (c = parseInt(c, 10), r = (r = a(c).slice(2)).slice(0, -1) + n[r.slice(-1)]), "number" == typeof e) e < 0 ? (i = a(e).slice(3), s = "-") : (i = a(e).slice(2), s = ""), i = s + i.slice(0, -1) + n[i.slice(-1)];else {
        if ("object" != typeof e) throw new Error("Don't know what to do with value type " + typeof e + ".");
        i = o(e);
      }
      u.push(r + i);
    }

    return u.push("}"), u.join("");
  },
      s = t.__fontmetrics__.uncompress = function (t) {
    if ("string" != typeof t) throw new Error("Invalid argument passed to uncompress.");

    for (var e, n, i, a, o = {}, s = 1, u = o, c = [], l = "", h = "", f = t.length - 1, d = 1; d < f; d += 1) "'" == (a = t[d]) ? e ? (i = e.join(""), e = void 0) : e = [] : e ? e.push(a) : "{" == a ? (c.push([u, i]), u = {}, i = void 0) : "}" == a ? ((n = c.pop())[0][n[1]] = u, i = void 0, u = n[0]) : "-" == a ? s = -1 : void 0 === i ? r.hasOwnProperty(a) ? (l += r[a], i = parseInt(l, 16) * s, s = 1, l = "") : l += a : r.hasOwnProperty(a) ? (h += r[a], u[i] = parseInt(h, 16) * s, s = 1, i = void 0, h = "") : h += a;

    return o;
  },
      u = {
    codePages: ["WinAnsiEncoding"],
    WinAnsiEncoding: s("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}")
  },
      c = {
    Unicode: {
      Courier: u,
      "Courier-Bold": u,
      "Courier-BoldOblique": u,
      "Courier-Oblique": u,
      Helvetica: u,
      "Helvetica-Bold": u,
      "Helvetica-BoldOblique": u,
      "Helvetica-Oblique": u,
      "Times-Roman": u,
      "Times-Bold": u,
      "Times-BoldItalic": u,
      "Times-Italic": u
    }
  },
      l = {
    Unicode: {
      "Courier-Oblique": s("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
      "Times-BoldItalic": s("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"),
      "Helvetica-Bold": s("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
      Courier: s("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
      "Courier-BoldOblique": s("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
      "Times-Bold": s("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"),
      Symbol: s("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"),
      Helvetica: s("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"),
      "Helvetica-BoldOblique": s("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
      ZapfDingbats: s("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"),
      "Courier-Bold": s("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
      "Times-Italic": s("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"),
      "Times-Roman": s("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"),
      "Helvetica-Oblique": s("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}")
    }
  };

  t.events.push(["addFont", function (t) {
    var e = t.font,
        r = l.Unicode[e.postScriptName];
    r && (e.metadata.Unicode = {}, e.metadata.Unicode.widths = r.widths, e.metadata.Unicode.kerning = r.kerning);
    var n = c.Unicode[e.postScriptName];
    n && (e.metadata.Unicode.encoding = n, e.encoding = n.codePages[0]);
  }]);
}(O.API),
/**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = function (t) {
    for (var e = t.length, r = new Uint8Array(e), n = 0; n < e; n++) r[n] = t.charCodeAt(n);

    return r;
  };

  t.API.events.push(["addFont", function (r) {
    var n = void 0,
        i = r.font,
        a = r.instance;

    if (!i.isStandardFont) {
      if (void 0 === a) throw new Error("Font does not exist in vFS, import fonts or remove declaration doc.addFont('" + i.postScriptName + "').");
      if ("string" != typeof (n = !1 === a.existsFileInVFS(i.postScriptName) ? a.loadFile(i.postScriptName) : a.getFileFromVFS(i.postScriptName))) throw new Error("Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('" + i.postScriptName + "').");
      !function (r, n) {
        n = /^\x00\x01\x00\x00/.test(n) ? e(n) : e(u(n)), r.metadata = t.API.TTFFont.open(n), r.metadata.Unicode = r.metadata.Unicode || {
          encoding: {},
          kerning: {},
          widths: []
        }, r.metadata.glyIdsUsed = [0];
      }(i, n);
    }
  }]);
}(O),
/** @license
 * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
function (t) {
  function e() {
    return (r.canvg ? Promise.resolve(r.canvg) : require("_bundle_loader")(require.resolve("canvg"))).catch(function (t) {
      return Promise.reject(new Error("Could not load canvg: " + t));
    }).then(function (t) {
      return t.default ? t.default : t;
    });
  }

  O.API.addSvgAsImage = function (t, r, n, a, o, s, u, c) {
    if (isNaN(r) || isNaN(n)) throw i.error("jsPDF.addSvgAsImage: Invalid coordinates", arguments), new Error("Invalid coordinates passed to jsPDF.addSvgAsImage");
    if (isNaN(a) || isNaN(o)) throw i.error("jsPDF.addSvgAsImage: Invalid measurements", arguments), new Error("Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage");
    var l = document.createElement("canvas");
    l.width = a, l.height = o;
    var h = l.getContext("2d");
    h.fillStyle = "#fff", h.fillRect(0, 0, l.width, l.height);
    var f = {
      ignoreMouse: !0,
      ignoreAnimation: !0,
      ignoreDimensions: !0
    },
        d = this;
    return e().then(function (e) {
      return e.fromString(h, t, f);
    }, function () {
      return Promise.reject(new Error("Could not load canvg."));
    }).then(function (t) {
      return t.render(f);
    }).then(function () {
      d.addImage(l.toDataURL("image/jpeg", 1), r, n, a, o, u, c);
    });
  };
}(), O.API.putTotalPages = function (t) {
  var e,
      r = 0;
  parseInt(this.internal.getFont().id.substr(1), 10) < 15 ? (e = new RegExp(t, "g"), r = this.internal.getNumberOfPages()) : (e = new RegExp(this.pdfEscape16(t, this.internal.getFont()), "g"), r = this.pdfEscape16(this.internal.getNumberOfPages() + "", this.internal.getFont()));

  for (var n = 1; n <= this.internal.getNumberOfPages(); n++) for (var i = 0; i < this.internal.pages[n].length; i++) this.internal.pages[n][i] = this.internal.pages[n][i].replace(e, r);

  return this;
}, O.API.viewerPreferences = function (t, e) {
  var r;
  t = t || {}, e = e || !1;
  var n,
      i,
      a,
      o = {
    HideToolbar: {
      defaultValue: !1,
      value: !1,
      type: "boolean",
      explicitSet: !1,
      valueSet: [!0, !1],
      pdfVersion: 1.3
    },
    HideMenubar: {
      defaultValue: !1,
      value: !1,
      type: "boolean",
      explicitSet: !1,
      valueSet: [!0, !1],
      pdfVersion: 1.3
    },
    HideWindowUI: {
      defaultValue: !1,
      value: !1,
      type: "boolean",
      explicitSet: !1,
      valueSet: [!0, !1],
      pdfVersion: 1.3
    },
    FitWindow: {
      defaultValue: !1,
      value: !1,
      type: "boolean",
      explicitSet: !1,
      valueSet: [!0, !1],
      pdfVersion: 1.3
    },
    CenterWindow: {
      defaultValue: !1,
      value: !1,
      type: "boolean",
      explicitSet: !1,
      valueSet: [!0, !1],
      pdfVersion: 1.3
    },
    DisplayDocTitle: {
      defaultValue: !1,
      value: !1,
      type: "boolean",
      explicitSet: !1,
      valueSet: [!0, !1],
      pdfVersion: 1.4
    },
    NonFullScreenPageMode: {
      defaultValue: "UseNone",
      value: "UseNone",
      type: "name",
      explicitSet: !1,
      valueSet: ["UseNone", "UseOutlines", "UseThumbs", "UseOC"],
      pdfVersion: 1.3
    },
    Direction: {
      defaultValue: "L2R",
      value: "L2R",
      type: "name",
      explicitSet: !1,
      valueSet: ["L2R", "R2L"],
      pdfVersion: 1.3
    },
    ViewArea: {
      defaultValue: "CropBox",
      value: "CropBox",
      type: "name",
      explicitSet: !1,
      valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
      pdfVersion: 1.4
    },
    ViewClip: {
      defaultValue: "CropBox",
      value: "CropBox",
      type: "name",
      explicitSet: !1,
      valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
      pdfVersion: 1.4
    },
    PrintArea: {
      defaultValue: "CropBox",
      value: "CropBox",
      type: "name",
      explicitSet: !1,
      valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
      pdfVersion: 1.4
    },
    PrintClip: {
      defaultValue: "CropBox",
      value: "CropBox",
      type: "name",
      explicitSet: !1,
      valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
      pdfVersion: 1.4
    },
    PrintScaling: {
      defaultValue: "AppDefault",
      value: "AppDefault",
      type: "name",
      explicitSet: !1,
      valueSet: ["AppDefault", "None"],
      pdfVersion: 1.6
    },
    Duplex: {
      defaultValue: "",
      value: "none",
      type: "name",
      explicitSet: !1,
      valueSet: ["Simplex", "DuplexFlipShortEdge", "DuplexFlipLongEdge", "none"],
      pdfVersion: 1.7
    },
    PickTrayByPDFSize: {
      defaultValue: !1,
      value: !1,
      type: "boolean",
      explicitSet: !1,
      valueSet: [!0, !1],
      pdfVersion: 1.7
    },
    PrintPageRange: {
      defaultValue: "",
      value: "",
      type: "array",
      explicitSet: !1,
      valueSet: null,
      pdfVersion: 1.7
    },
    NumCopies: {
      defaultValue: 1,
      value: 1,
      type: "integer",
      explicitSet: !1,
      valueSet: null,
      pdfVersion: 1.7
    }
  },
      s = Object.keys(o),
      u = [],
      c = 0,
      l = 0,
      h = 0;

  function f(t, e) {
    var r,
        n = !1;

    for (r = 0; r < t.length; r += 1) t[r] === e && (n = !0);

    return n;
  }

  if (void 0 === this.internal.viewerpreferences && (this.internal.viewerpreferences = {}, this.internal.viewerpreferences.configuration = JSON.parse(JSON.stringify(o)), this.internal.viewerpreferences.isSubscribed = !1), r = this.internal.viewerpreferences.configuration, "reset" === t || !0 === e) {
    var d = s.length;

    for (h = 0; h < d; h += 1) r[s[h]].value = r[s[h]].defaultValue, r[s[h]].explicitSet = !1;
  }

  if ("object" == typeof t) for (i in t) if (a = t[i], f(s, i) && void 0 !== a) {
    if ("boolean" === r[i].type && "boolean" == typeof a) r[i].value = a;else if ("name" === r[i].type && f(r[i].valueSet, a)) r[i].value = a;else if ("integer" === r[i].type && Number.isInteger(a)) r[i].value = a;else if ("array" === r[i].type) {
      for (c = 0; c < a.length; c += 1) if (n = !0, 1 === a[c].length && "number" == typeof a[c][0]) u.push(String(a[c] - 1));else if (a[c].length > 1) {
        for (l = 0; l < a[c].length; l += 1) "number" != typeof a[c][l] && (n = !1);

        !0 === n && u.push([a[c][0] - 1, a[c][1] - 1].join(" "));
      }

      r[i].value = "[" + u.join(" ") + "]";
    } else r[i].value = r[i].defaultValue;
    r[i].explicitSet = !0;
  }
  return !1 === this.internal.viewerpreferences.isSubscribed && (this.internal.events.subscribe("putCatalog", function () {
    var t,
        e = [];

    for (t in r) !0 === r[t].explicitSet && ("name" === r[t].type ? e.push("/" + t + " /" + r[t].value) : e.push("/" + t + " " + r[t].value));

    0 !== e.length && this.internal.write("/ViewerPreferences\n<<\n" + e.join("\n") + "\n>>");
  }), this.internal.viewerpreferences.isSubscribed = !0), this.internal.viewerpreferences.configuration = r, this;
},
/** ====================================================================
 * @license
 * jsPDF XMP metadata plugin
 * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
function (t) {
  var e = function () {
    var t = '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="' + this.internal.__metadata__.namespaceuri + '"><jspdf:metadata>',
        e = unescape(encodeURIComponent('<x:xmpmeta xmlns:x="adobe:ns:meta/">')),
        r = unescape(encodeURIComponent(t)),
        n = unescape(encodeURIComponent(this.internal.__metadata__.metadata)),
        i = unescape(encodeURIComponent("</jspdf:metadata></rdf:Description></rdf:RDF>")),
        a = unescape(encodeURIComponent("</x:xmpmeta>")),
        o = r.length + n.length + i.length + e.length + a.length;
    this.internal.__metadata__.metadata_object_number = this.internal.newObject(), this.internal.write("<< /Type /Metadata /Subtype /XML /Length " + o + " >>"), this.internal.write("stream"), this.internal.write(e + r + n + i + a), this.internal.write("endstream"), this.internal.write("endobj");
  },
      r = function () {
    this.internal.__metadata__.metadata_object_number && this.internal.write("/Metadata " + this.internal.__metadata__.metadata_object_number + " 0 R");
  };

  t.addMetadata = function (t, n) {
    return void 0 === this.internal.__metadata__ && (this.internal.__metadata__ = {
      metadata: t,
      namespaceuri: n || "http://jspdf.default.namespaceuri/"
    }, this.internal.events.subscribe("putCatalog", r), this.internal.events.subscribe("postPutResources", e)), this;
  };
}(O.API), function (t) {
  var e = t.API,
      r = e.pdfEscape16 = function (t, e) {
    for (var r, n = e.metadata.Unicode.widths, i = ["", "0", "00", "000", "0000"], a = [""], o = 0, s = t.length; o < s; ++o) {
      if (r = e.metadata.characterToGlyph(t.charCodeAt(o)), e.metadata.glyIdsUsed.push(r), e.metadata.toUnicode[r] = t.charCodeAt(o), -1 == n.indexOf(r) && (n.push(r), n.push([parseInt(e.metadata.widthOfGlyph(r), 10)])), "0" == r) return a.join("");
      r = r.toString(16), a.push(i[4 - r.length], r);
    }

    return a.join("");
  },
      n = function (t) {
    var e, r, n, i, a, o, s;

    for (a = "/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange", n = [], o = 0, s = (r = Object.keys(t).sort(function (t, e) {
      return t - e;
    })).length; o < s; o++) e = r[o], n.length >= 100 && (a += "\n" + n.length + " beginbfchar\n" + n.join("\n") + "\nendbfchar", n = []), void 0 !== t[e] && null !== t[e] && "function" == typeof t[e].toString && (i = ("0000" + t[e].toString(16)).slice(-4), e = ("0000" + (+e).toString(16)).slice(-4), n.push("<" + e + "><" + i + ">"));

    return n.length && (a += "\n" + n.length + " beginbfchar\n" + n.join("\n") + "\nendbfchar\n"), a += "endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend";
  };

  e.events.push(["putFont", function (e) {
    !function (e) {
      var r = e.font,
          i = e.out,
          a = e.newObject,
          o = e.putStream,
          s = e.pdfEscapeWithNeededParanthesis;

      if (r.metadata instanceof t.API.TTFFont && "Identity-H" === r.encoding) {
        for (var u = r.metadata.Unicode.widths, c = r.metadata.subset.encode(r.metadata.glyIdsUsed, 1), l = "", h = 0; h < c.length; h++) l += String.fromCharCode(c[h]);

        var f = a();
        o({
          data: l,
          addLength1: !0,
          objectId: f
        }), i("endobj");
        var d = a();
        o({
          data: n(r.metadata.toUnicode),
          addLength1: !0,
          objectId: d
        }), i("endobj");
        var p = a();
        i("<<"), i("/Type /FontDescriptor"), i("/FontName /" + s(r.fontName)), i("/FontFile2 " + f + " 0 R"), i("/FontBBox " + t.API.PDFObject.convert(r.metadata.bbox)), i("/Flags " + r.metadata.flags), i("/StemV " + r.metadata.stemV), i("/ItalicAngle " + r.metadata.italicAngle), i("/Ascent " + r.metadata.ascender), i("/Descent " + r.metadata.decender), i("/CapHeight " + r.metadata.capHeight), i(">>"), i("endobj");
        var g = a();
        i("<<"), i("/Type /Font"), i("/BaseFont /" + s(r.fontName)), i("/FontDescriptor " + p + " 0 R"), i("/W " + t.API.PDFObject.convert(u)), i("/CIDToGIDMap /Identity"), i("/DW 1000"), i("/Subtype /CIDFontType2"), i("/CIDSystemInfo"), i("<<"), i("/Supplement 0"), i("/Registry (Adobe)"), i("/Ordering (" + r.encoding + ")"), i(">>"), i(">>"), i("endobj"), r.objectNumber = a(), i("<<"), i("/Type /Font"), i("/Subtype /Type0"), i("/ToUnicode " + d + " 0 R"), i("/BaseFont /" + s(r.fontName)), i("/Encoding /" + r.encoding), i("/DescendantFonts [" + g + " 0 R]"), i(">>"), i("endobj"), r.isAlreadyPutted = !0;
      }
    }(e);
  }]);
  e.events.push(["putFont", function (e) {
    !function (e) {
      var r = e.font,
          i = e.out,
          a = e.newObject,
          o = e.putStream,
          s = e.pdfEscapeWithNeededParanthesis;

      if (r.metadata instanceof t.API.TTFFont && "WinAnsiEncoding" === r.encoding) {
        for (var u = r.metadata.rawData, c = "", l = 0; l < u.length; l++) c += String.fromCharCode(u[l]);

        var h = a();
        o({
          data: c,
          addLength1: !0,
          objectId: h
        }), i("endobj");
        var f = a();
        o({
          data: n(r.metadata.toUnicode),
          addLength1: !0,
          objectId: f
        }), i("endobj");
        var d = a();
        i("<<"), i("/Descent " + r.metadata.decender), i("/CapHeight " + r.metadata.capHeight), i("/StemV " + r.metadata.stemV), i("/Type /FontDescriptor"), i("/FontFile2 " + h + " 0 R"), i("/Flags 96"), i("/FontBBox " + t.API.PDFObject.convert(r.metadata.bbox)), i("/FontName /" + s(r.fontName)), i("/ItalicAngle " + r.metadata.italicAngle), i("/Ascent " + r.metadata.ascender), i(">>"), i("endobj"), r.objectNumber = a();

        for (var p = 0; p < r.metadata.hmtx.widths.length; p++) r.metadata.hmtx.widths[p] = parseInt(r.metadata.hmtx.widths[p] * (1e3 / r.metadata.head.unitsPerEm));

        i("<</Subtype/TrueType/Type/Font/ToUnicode " + f + " 0 R/BaseFont/" + s(r.fontName) + "/FontDescriptor " + d + " 0 R/Encoding/" + r.encoding + " /FirstChar 29 /LastChar 255 /Widths " + t.API.PDFObject.convert(r.metadata.hmtx.widths) + ">>"), i("endobj"), r.isAlreadyPutted = !0;
      }
    }(e);
  }]);

  var i = function (t) {
    var e,
        n = t.text || "",
        i = t.x,
        a = t.y,
        o = t.options || {},
        s = t.mutex || {},
        u = s.pdfEscape,
        c = s.activeFontKey,
        l = s.fonts,
        h = c,
        f = "",
        d = 0,
        p = "",
        g = l[h].encoding;
    if ("Identity-H" !== l[h].encoding) return {
      text: n,
      x: i,
      y: a,
      options: o,
      mutex: s
    };

    for (p = n, h = c, Array.isArray(n) && (p = n[0]), d = 0; d < p.length; d += 1) l[h].metadata.hasOwnProperty("cmap") && (e = l[h].metadata.cmap.unicode.codeMap[p[d].charCodeAt(0)]), e || p[d].charCodeAt(0) < 256 && l[h].metadata.hasOwnProperty("Unicode") ? f += p[d] : f += "";

    var m = "";
    return parseInt(h.slice(1)) < 14 || "WinAnsiEncoding" === g ? m = u(f, h).split("").map(function (t) {
      return t.charCodeAt(0).toString(16);
    }).join("") : "Identity-H" === g && (m = r(f, l[h])), s.isHex = !0, {
      text: m,
      x: i,
      y: a,
      options: o,
      mutex: s
    };
  };

  e.events.push(["postProcessText", function (t) {
    var e = t.text || "",
        r = [],
        n = {
      text: e,
      x: t.x,
      y: t.y,
      options: t.options,
      mutex: t.mutex
    };

    if (Array.isArray(e)) {
      var a = 0;

      for (a = 0; a < e.length; a += 1) Array.isArray(e[a]) && 3 === e[a].length ? r.push([i(Object.assign({}, n, {
        text: e[a][0]
      })).text, e[a][1], e[a][2]]) : r.push(i(Object.assign({}, n, {
        text: e[a]
      })).text);

      t.text = r;
    } else t.text = i(Object.assign({}, n, {
      text: e
    })).text;
  }]);
}(O),
/**
 * @license
 * jsPDF virtual FileSystem functionality
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = function () {
    return void 0 === this.internal.vFS && (this.internal.vFS = {}), !0;
  };

  t.existsFileInVFS = function (t) {
    return e.call(this), void 0 !== this.internal.vFS[t];
  }, t.addFileToVFS = function (t, r) {
    return e.call(this), this.internal.vFS[t] = r, this;
  }, t.getFileFromVFS = function (t) {
    return e.call(this), void 0 !== this.internal.vFS[t] ? this.internal.vFS[t] : null;
  };
}(O.API),
/**
 * @license
 * Unicode Bidi Engine based on the work of Alex Shensis (@asthensis)
 * MIT License
 */
function (t) {
  t.__bidiEngine__ = t.prototype.__bidiEngine__ = function (t) {
    var r,
        n,
        i,
        a,
        o,
        s,
        u,
        c = e,
        l = [[0, 3, 0, 1, 0, 0, 0], [0, 3, 0, 1, 2, 2, 0], [0, 3, 0, 17, 2, 0, 1], [0, 3, 5, 5, 4, 1, 0], [0, 3, 21, 21, 4, 0, 1], [0, 3, 5, 5, 4, 2, 0]],
        h = [[2, 0, 1, 1, 0, 1, 0], [2, 0, 1, 1, 0, 2, 0], [2, 0, 2, 1, 3, 2, 0], [2, 0, 2, 33, 3, 1, 1]],
        f = {
      L: 0,
      R: 1,
      EN: 2,
      AN: 3,
      N: 4,
      B: 5,
      S: 6
    },
        d = {
      0: 0,
      5: 1,
      6: 2,
      7: 3,
      32: 4,
      251: 5,
      254: 6,
      255: 7
    },
        p = ["(", ")", "(", "<", ">", "<", "[", "]", "[", "{", "}", "{", "Â«", "Â»", "Â«", "â¹", "âº", "â¹", "â", "â", "â", "â½", "â¾", "â½", "â", "â", "â", "â¤", "â¥", "â¤", "â©", "âª", "â©", "ï¹", "ï¹", "ï¹", "ï¹", "ï¹", "ï¹", "ï¹", "ï¹", "ï¹", "ï¹¤", "ï¹¥", "ï¹¤"],
        g = new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/),
        m = !1,
        v = 0;
    this.__bidiEngine__ = {};

    var b = function (t) {
      var e = t.charCodeAt(),
          r = e >> 8,
          n = d[r];
      return void 0 !== n ? c[256 * n + (255 & e)] : 252 === r || 253 === r ? "AL" : g.test(r) ? "L" : 8 === r ? "R" : "N";
    },
        y = function (t) {
      for (var e, r = 0; r < t.length; r++) {
        if ("L" === (e = b(t.charAt(r)))) return !1;
        if ("R" === e) return !0;
      }

      return !1;
    },
        w = function (t, e, o, s) {
      var u,
          c,
          l,
          h,
          f = e[s];

      switch (f) {
        case "L":
        case "R":
          m = !1;
          break;

        case "N":
        case "AN":
          break;

        case "EN":
          m && (f = "AN");
          break;

        case "AL":
          m = !0, f = "R";
          break;

        case "WS":
          f = "N";
          break;

        case "CS":
          s < 1 || s + 1 >= e.length || "EN" !== (u = o[s - 1]) && "AN" !== u || "EN" !== (c = e[s + 1]) && "AN" !== c ? f = "N" : m && (c = "AN"), f = c === u ? c : "N";
          break;

        case "ES":
          f = "EN" === (u = s > 0 ? o[s - 1] : "B") && s + 1 < e.length && "EN" === e[s + 1] ? "EN" : "N";
          break;

        case "ET":
          if (s > 0 && "EN" === o[s - 1]) {
            f = "EN";
            break;
          }

          if (m) {
            f = "N";
            break;
          }

          for (l = s + 1, h = e.length; l < h && "ET" === e[l];) l++;

          f = l < h && "EN" === e[l] ? "EN" : "N";
          break;

        case "NSM":
          if (i && !a) {
            for (h = e.length, l = s + 1; l < h && "NSM" === e[l];) l++;

            if (l < h) {
              var d = t[s],
                  p = d >= 1425 && d <= 2303 || 64286 === d;

              if (u = e[l], p && ("R" === u || "AL" === u)) {
                f = "R";
                break;
              }
            }
          }

          f = s < 1 || "B" === (u = e[s - 1]) ? "N" : o[s - 1];
          break;

        case "B":
          m = !1, r = !0, f = v;
          break;

        case "S":
          n = !0, f = "N";
          break;

        case "LRE":
        case "RLE":
        case "LRO":
        case "RLO":
        case "PDF":
          m = !1;
          break;

        case "BN":
          f = "N";
      }

      return f;
    },
        N = function (t, e, r) {
      var n = t.split("");
      return r && L(n, r, {
        hiLevel: v
      }), n.reverse(), e && e.reverse(), n.join("");
    },
        L = function (t, e, i) {
      var a,
          o,
          s,
          u,
          c,
          d = -1,
          p = t.length,
          g = 0,
          y = [],
          N = v ? h : l,
          L = [];

      for (m = !1, r = !1, n = !1, o = 0; o < p; o++) L[o] = b(t[o]);

      for (s = 0; s < p; s++) {
        if (c = g, y[s] = w(t, L, y, s), a = 240 & (g = N[c][f[y[s]]]), g &= 15, e[s] = u = N[g][5], a > 0) if (16 === a) {
          for (o = d; o < s; o++) e[o] = 1;

          d = -1;
        } else d = -1;
        if (N[g][6]) -1 === d && (d = s);else if (d > -1) {
          for (o = d; o < s; o++) e[o] = u;

          d = -1;
        }
        "B" === L[s] && (e[s] = 0), i.hiLevel |= u;
      }

      n && function (t, e, r) {
        for (var n = 0; n < r; n++) if ("S" === t[n]) {
          e[n] = v;

          for (var i = n - 1; i >= 0 && "WS" === t[i]; i--) e[i] = v;
        }
      }(L, e, p);
    },
        A = function (t, e, n, i, a) {
      if (!(a.hiLevel < t)) {
        if (1 === t && 1 === v && !r) return e.reverse(), void (n && n.reverse());

        for (var o, s, u, c, l = e.length, h = 0; h < l;) {
          if (i[h] >= t) {
            for (u = h + 1; u < l && i[u] >= t;) u++;

            for (c = h, s = u - 1; c < s; c++, s--) o = e[c], e[c] = e[s], e[s] = o, n && (o = n[c], n[c] = n[s], n[s] = o);

            h = u;
          }

          h++;
        }
      }
    },
        x = function (t, e, r) {
      var n = t.split(""),
          i = {
        hiLevel: v
      };
      return r || (r = []), L(n, r, i), function (t, e, r) {
        if (0 !== r.hiLevel && u) for (var n, i = 0; i < t.length; i++) 1 === e[i] && (n = p.indexOf(t[i])) >= 0 && (t[i] = p[n + 1]);
      }(n, r, i), A(2, n, e, r, i), A(1, n, e, r, i), n.join("");
    };

    return this.__bidiEngine__.doBidiReorder = function (t, e, r) {
      if (function (t, e) {
        if (e) for (var r = 0; r < t.length; r++) e[r] = r;
        void 0 === a && (a = y(t)), void 0 === s && (s = y(t));
      }(t, e), i || !o || s) {
        if (i && o && a ^ s) v = a ? 1 : 0, t = N(t, e, r);else if (!i && o && s) v = a ? 1 : 0, t = x(t, e, r), t = N(t, e);else if (!i || a || o || s) {
          if (i && !o && a ^ s) t = N(t, e), a ? (v = 0, t = x(t, e, r)) : (v = 1, t = x(t, e, r), t = N(t, e));else if (i && a && !o && s) v = 1, t = x(t, e, r), t = N(t, e);else if (!i && !o && a ^ s) {
            var n = u;
            a ? (v = 1, t = x(t, e, r), v = 0, u = !1, t = x(t, e, r), u = n) : (v = 0, t = x(t, e, r), t = N(t, e), v = 1, u = !1, t = x(t, e, r), u = n, t = N(t, e));
          }
        } else v = 0, t = x(t, e, r);
      } else v = a ? 1 : 0, t = x(t, e, r);
      return t;
    }, this.__bidiEngine__.setOptions = function (t) {
      t && (i = t.isInputVisual, o = t.isOutputVisual, a = t.isInputRtl, s = t.isOutputRtl, u = t.isSymmetricSwapping);
    }, this.__bidiEngine__.setOptions(t), this.__bidiEngine__;
  };

  var e = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "N", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "L", "N", "N", "BN", "N", "N", "ET", "ET", "EN", "EN", "N", "L", "N", "N", "N", "EN", "L", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "N", "N", "N", "N", "N", "ET", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "NSM", "R", "NSM", "NSM", "R", "NSM", "NSM", "R", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AN", "AN", "AN", "AN", "AN", "AN", "N", "N", "AL", "ET", "ET", "AL", "CS", "AL", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "ET", "AN", "AN", "AL", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "NSM", "NSM", "N", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "R", "N", "N", "N", "N", "R", "N", "N", "N", "N", "N", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "BN", "BN", "BN", "L", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "B", "LRE", "RLE", "PDF", "LRO", "RLO", "CS", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "BN", "BN", "BN", "BN", "BN", "N", "LRI", "RLI", "FSI", "PDI", "BN", "BN", "BN", "BN", "BN", "BN", "EN", "L", "N", "N", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "L", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "R", "NSM", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "ES", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "R", "R", "R", "R", "R", "N", "R", "N", "R", "R", "N", "R", "R", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "CS", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "ET", "N", "N", "ES", "ES", "N", "N", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "BN", "N", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "N", "N", "N", "ET", "ET", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N"],
      r = new t.__bidiEngine__({
    isInputVisual: !0
  });
  t.API.events.push(["postProcessText", function (t) {
    var e = t.text,
        n = (t.x, t.y, t.options || {}),
        i = (t.mutex, n.lang, []);

    if (n.isInputVisual = "boolean" != typeof n.isInputVisual || n.isInputVisual, r.setOptions(n), "[object Array]" === Object.prototype.toString.call(e)) {
      var a = 0;

      for (i = [], a = 0; a < e.length; a += 1) "[object Array]" === Object.prototype.toString.call(e[a]) ? i.push([r.doBidiReorder(e[a][0]), e[a][1], e[a][2]]) : i.push([r.doBidiReorder(e[a])]);

      t.text = i;
    } else t.text = r.doBidiReorder(e);

    r.setOptions({
      isInputVisual: !0
    });
  }]);
}(O), O.API.TTFFont = function () {
  function t(t) {
    var e;
    if (this.rawData = t, e = this.contents = new te(t), this.contents.pos = 4, "ttcf" === e.readString(4)) throw new Error("TTCF not supported.");
    e.pos = 0, this.parse(), this.subset = new ye(this), this.registerTTF();
  }

  return t.open = function (e) {
    return new t(e);
  }, t.prototype.parse = function () {
    return this.directory = new ee(this.contents), this.head = new ie(this), this.name = new he(this), this.cmap = new oe(this), this.toUnicode = {}, this.hhea = new se(this), this.maxp = new fe(this), this.hmtx = new de(this), this.post = new ce(this), this.os2 = new ue(this), this.loca = new be(this), this.glyf = new ge(this), this.ascender = this.os2.exists && this.os2.ascender || this.hhea.ascender, this.decender = this.os2.exists && this.os2.decender || this.hhea.decender, this.lineGap = this.os2.exists && this.os2.lineGap || this.hhea.lineGap, this.bbox = [this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax];
  }, t.prototype.registerTTF = function () {
    var t, e, r, n, i;
    if (this.scaleFactor = 1e3 / this.head.unitsPerEm, this.bbox = function () {
      var e, r, n, i;

      for (i = [], e = 0, r = (n = this.bbox).length; e < r; e++) t = n[e], i.push(Math.round(t * this.scaleFactor));

      return i;
    }.call(this), this.stemV = 0, this.post.exists ? (r = 255 & (n = this.post.italic_angle), 0 != (32768 & (e = n >> 16)) && (e = -(1 + (65535 ^ e))), this.italicAngle = +(e + "." + r)) : this.italicAngle = 0, this.ascender = Math.round(this.ascender * this.scaleFactor), this.decender = Math.round(this.decender * this.scaleFactor), this.lineGap = Math.round(this.lineGap * this.scaleFactor), this.capHeight = this.os2.exists && this.os2.capHeight || this.ascender, this.xHeight = this.os2.exists && this.os2.xHeight || 0, this.familyClass = (this.os2.exists && this.os2.familyClass || 0) >> 8, this.isSerif = 1 === (i = this.familyClass) || 2 === i || 3 === i || 4 === i || 5 === i || 7 === i, this.isScript = 10 === this.familyClass, this.flags = 0, this.post.isFixedPitch && (this.flags |= 1), this.isSerif && (this.flags |= 2), this.isScript && (this.flags |= 8), 0 !== this.italicAngle && (this.flags |= 64), this.flags |= 32, !this.cmap.unicode) throw new Error("No unicode cmap for font");
  }, t.prototype.characterToGlyph = function (t) {
    var e;
    return (null != (e = this.cmap.unicode) ? e.codeMap[t] : void 0) || 0;
  }, t.prototype.widthOfGlyph = function (t) {
    var e;
    return e = 1e3 / this.head.unitsPerEm, this.hmtx.forGlyph(t).advance * e;
  }, t.prototype.widthOfString = function (t, e, r) {
    var n, i, a, o;

    for (a = 0, i = 0, o = (t = "" + t).length; 0 <= o ? i < o : i > o; i = 0 <= o ? ++i : --i) n = t.charCodeAt(i), a += this.widthOfGlyph(this.characterToGlyph(n)) + r * (1e3 / e) || 0;

    return a * (e / 1e3);
  }, t.prototype.lineHeight = function (t, e) {
    var r;
    return null == e && (e = !1), r = e ? this.lineGap : 0, (this.ascender + r - this.decender) / 1e3 * t;
  }, t;
}();

var Qt,
    te = function () {
  function t(t) {
    this.data = null != t ? t : [], this.pos = 0, this.length = this.data.length;
  }

  return t.prototype.readByte = function () {
    return this.data[this.pos++];
  }, t.prototype.writeByte = function (t) {
    return this.data[this.pos++] = t;
  }, t.prototype.readUInt32 = function () {
    return 16777216 * this.readByte() + (this.readByte() << 16) + (this.readByte() << 8) + this.readByte();
  }, t.prototype.writeUInt32 = function (t) {
    return this.writeByte(t >>> 24 & 255), this.writeByte(t >> 16 & 255), this.writeByte(t >> 8 & 255), this.writeByte(255 & t);
  }, t.prototype.readInt32 = function () {
    var t;
    return (t = this.readUInt32()) >= 2147483648 ? t - 4294967296 : t;
  }, t.prototype.writeInt32 = function (t) {
    return t < 0 && (t += 4294967296), this.writeUInt32(t);
  }, t.prototype.readUInt16 = function () {
    return this.readByte() << 8 | this.readByte();
  }, t.prototype.writeUInt16 = function (t) {
    return this.writeByte(t >> 8 & 255), this.writeByte(255 & t);
  }, t.prototype.readInt16 = function () {
    var t;
    return (t = this.readUInt16()) >= 32768 ? t - 65536 : t;
  }, t.prototype.writeInt16 = function (t) {
    return t < 0 && (t += 65536), this.writeUInt16(t);
  }, t.prototype.readString = function (t) {
    var e, r;

    for (r = [], e = 0; 0 <= t ? e < t : e > t; e = 0 <= t ? ++e : --e) r[e] = String.fromCharCode(this.readByte());

    return r.join("");
  }, t.prototype.writeString = function (t) {
    var e, r, n;

    for (n = [], e = 0, r = t.length; 0 <= r ? e < r : e > r; e = 0 <= r ? ++e : --e) n.push(this.writeByte(t.charCodeAt(e)));

    return n;
  }, t.prototype.readShort = function () {
    return this.readInt16();
  }, t.prototype.writeShort = function (t) {
    return this.writeInt16(t);
  }, t.prototype.readLongLong = function () {
    var t, e, r, n, i, a, o, s;
    return t = this.readByte(), e = this.readByte(), r = this.readByte(), n = this.readByte(), i = this.readByte(), a = this.readByte(), o = this.readByte(), s = this.readByte(), 128 & t ? -1 * (72057594037927940 * (255 ^ t) + 281474976710656 * (255 ^ e) + 1099511627776 * (255 ^ r) + 4294967296 * (255 ^ n) + 16777216 * (255 ^ i) + 65536 * (255 ^ a) + 256 * (255 ^ o) + (255 ^ s) + 1) : 72057594037927940 * t + 281474976710656 * e + 1099511627776 * r + 4294967296 * n + 16777216 * i + 65536 * a + 256 * o + s;
  }, t.prototype.writeLongLong = function (t) {
    var e, r;
    return e = Math.floor(t / 4294967296), r = 4294967295 & t, this.writeByte(e >> 24 & 255), this.writeByte(e >> 16 & 255), this.writeByte(e >> 8 & 255), this.writeByte(255 & e), this.writeByte(r >> 24 & 255), this.writeByte(r >> 16 & 255), this.writeByte(r >> 8 & 255), this.writeByte(255 & r);
  }, t.prototype.readInt = function () {
    return this.readInt32();
  }, t.prototype.writeInt = function (t) {
    return this.writeInt32(t);
  }, t.prototype.read = function (t) {
    var e, r;

    for (e = [], r = 0; 0 <= t ? r < t : r > t; r = 0 <= t ? ++r : --r) e.push(this.readByte());

    return e;
  }, t.prototype.write = function (t) {
    var e, r, n, i;

    for (i = [], r = 0, n = t.length; r < n; r++) e = t[r], i.push(this.writeByte(e));

    return i;
  }, t;
}(),
    ee = function () {
  var t;

  function e(t) {
    var e, r, n;

    for (this.scalarType = t.readInt(), this.tableCount = t.readShort(), this.searchRange = t.readShort(), this.entrySelector = t.readShort(), this.rangeShift = t.readShort(), this.tables = {}, r = 0, n = this.tableCount; 0 <= n ? r < n : r > n; r = 0 <= n ? ++r : --r) e = {
      tag: t.readString(4),
      checksum: t.readInt(),
      offset: t.readInt(),
      length: t.readInt()
    }, this.tables[e.tag] = e;
  }

  return e.prototype.encode = function (e) {
    var r, n, i, a, o, s, u, c, l, h, f, d, p;

    for (p in f = Object.keys(e).length, s = Math.log(2), l = 16 * Math.floor(Math.log(f) / s), a = Math.floor(l / s), c = 16 * f - l, (n = new te()).writeInt(this.scalarType), n.writeShort(f), n.writeShort(l), n.writeShort(a), n.writeShort(c), i = 16 * f, u = n.pos + i, o = null, d = [], e) for (h = e[p], n.writeString(p), n.writeInt(t(h)), n.writeInt(u), n.writeInt(h.length), d = d.concat(h), "head" === p && (o = u), u += h.length; u % 4;) d.push(0), u++;

    return n.write(d), r = 2981146554 - t(n.data), n.pos = o + 8, n.writeUInt32(r), n.data;
  }, t = function (t) {
    var e, r, n, i;

    for (t = pe.call(t); t.length % 4;) t.push(0);

    for (n = new te(t), r = 0, e = 0, i = t.length; e < i; e = e += 4) r += n.readUInt32();

    return 4294967295 & r;
  }, e;
}(),
    re = {}.hasOwnProperty,
    ne = function (t, e) {
  for (var r in e) re.call(e, r) && (t[r] = e[r]);

  function n() {
    this.constructor = t;
  }

  return n.prototype = e.prototype, t.prototype = new n(), t.__super__ = e.prototype, t;
};

Qt = function () {
  function t(t) {
    var e;
    this.file = t, e = this.file.directory.tables[this.tag], this.exists = !!e, e && (this.offset = e.offset, this.length = e.length, this.parse(this.file.contents));
  }

  return t.prototype.parse = function () {}, t.prototype.encode = function () {}, t.prototype.raw = function () {
    return this.exists ? (this.file.contents.pos = this.offset, this.file.contents.read(this.length)) : null;
  }, t;
}();

var ie = function (t) {
  function e() {
    return e.__super__.constructor.apply(this, arguments);
  }

  return ne(e, Qt), e.prototype.tag = "head", e.prototype.parse = function (t) {
    return t.pos = this.offset, this.version = t.readInt(), this.revision = t.readInt(), this.checkSumAdjustment = t.readInt(), this.magicNumber = t.readInt(), this.flags = t.readShort(), this.unitsPerEm = t.readShort(), this.created = t.readLongLong(), this.modified = t.readLongLong(), this.xMin = t.readShort(), this.yMin = t.readShort(), this.xMax = t.readShort(), this.yMax = t.readShort(), this.macStyle = t.readShort(), this.lowestRecPPEM = t.readShort(), this.fontDirectionHint = t.readShort(), this.indexToLocFormat = t.readShort(), this.glyphDataFormat = t.readShort();
  }, e.prototype.encode = function (t) {
    var e;
    return (e = new te()).writeInt(this.version), e.writeInt(this.revision), e.writeInt(this.checkSumAdjustment), e.writeInt(this.magicNumber), e.writeShort(this.flags), e.writeShort(this.unitsPerEm), e.writeLongLong(this.created), e.writeLongLong(this.modified), e.writeShort(this.xMin), e.writeShort(this.yMin), e.writeShort(this.xMax), e.writeShort(this.yMax), e.writeShort(this.macStyle), e.writeShort(this.lowestRecPPEM), e.writeShort(this.fontDirectionHint), e.writeShort(t), e.writeShort(this.glyphDataFormat), e.data;
  }, e;
}(),
    ae = function () {
  function t(t, e) {
    var r, n, i, a, o, s, u, c, l, h, f, d, p, g, m, v, b;

    switch (this.platformID = t.readUInt16(), this.encodingID = t.readShort(), this.offset = e + t.readInt(), l = t.pos, t.pos = this.offset, this.format = t.readUInt16(), this.length = t.readUInt16(), this.language = t.readUInt16(), this.isUnicode = 3 === this.platformID && 1 === this.encodingID && 4 === this.format || 0 === this.platformID && 4 === this.format, this.codeMap = {}, this.format) {
      case 0:
        for (s = 0; s < 256; ++s) this.codeMap[s] = t.readByte();

        break;

      case 4:
        for (f = t.readUInt16(), h = f / 2, t.pos += 6, i = function () {
          var e, r;

          for (r = [], s = e = 0; 0 <= h ? e < h : e > h; s = 0 <= h ? ++e : --e) r.push(t.readUInt16());

          return r;
        }(), t.pos += 2, p = function () {
          var e, r;

          for (r = [], s = e = 0; 0 <= h ? e < h : e > h; s = 0 <= h ? ++e : --e) r.push(t.readUInt16());

          return r;
        }(), u = function () {
          var e, r;

          for (r = [], s = e = 0; 0 <= h ? e < h : e > h; s = 0 <= h ? ++e : --e) r.push(t.readUInt16());

          return r;
        }(), c = function () {
          var e, r;

          for (r = [], s = e = 0; 0 <= h ? e < h : e > h; s = 0 <= h ? ++e : --e) r.push(t.readUInt16());

          return r;
        }(), n = (this.length - t.pos + this.offset) / 2, o = function () {
          var e, r;

          for (r = [], s = e = 0; 0 <= n ? e < n : e > n; s = 0 <= n ? ++e : --e) r.push(t.readUInt16());

          return r;
        }(), s = m = 0, b = i.length; m < b; s = ++m) for (g = i[s], r = v = d = p[s]; d <= g ? v <= g : v >= g; r = d <= g ? ++v : --v) 0 === c[s] ? a = r + u[s] : 0 !== (a = o[c[s] / 2 + (r - d) - (h - s)] || 0) && (a += u[s]), this.codeMap[r] = 65535 & a;

    }

    t.pos = l;
  }

  return t.encode = function (t, e) {
    var r, n, i, a, o, s, u, c, l, h, f, d, p, g, m, v, b, y, w, N, L, A, x, S, _, P, k, I, F, C, j, O, B, M, E, q, R, T, D, U, z, H, V, W, G, Y;

    switch (I = new te(), a = Object.keys(t).sort(function (t, e) {
      return t - e;
    }), e) {
      case "macroman":
        for (p = 0, g = function () {
          var t = [];

          for (d = 0; d < 256; ++d) t.push(0);

          return t;
        }(), v = {
          0: 0
        }, i = {}, F = 0, B = a.length; F < B; F++) null == v[V = t[n = a[F]]] && (v[V] = ++p), i[n] = {
          old: t[n],
          new: v[t[n]]
        }, g[n] = v[t[n]];

        return I.writeUInt16(1), I.writeUInt16(0), I.writeUInt32(12), I.writeUInt16(0), I.writeUInt16(262), I.writeUInt16(0), I.write(g), {
          charMap: i,
          subtable: I.data,
          maxGlyphID: p + 1
        };

      case "unicode":
        for (P = [], l = [], b = 0, v = {}, r = {}, m = u = null, C = 0, M = a.length; C < M; C++) null == v[w = t[n = a[C]]] && (v[w] = ++b), r[n] = {
          old: w,
          new: v[w]
        }, o = v[w] - n, null != m && o === u || (m && l.push(m), P.push(n), u = o), m = n;

        for (m && l.push(m), l.push(65535), P.push(65535), S = 2 * (x = P.length), A = 2 * Math.pow(Math.log(x) / Math.LN2, 2), h = Math.log(A / 2) / Math.LN2, L = 2 * x - A, s = [], N = [], f = [], d = j = 0, E = P.length; j < E; d = ++j) {
          if (_ = P[d], c = l[d], 65535 === _) {
            s.push(0), N.push(0);
            break;
          }

          if (_ - (k = r[_].new) >= 32768) for (s.push(0), N.push(2 * (f.length + x - d)), n = O = _; _ <= c ? O <= c : O >= c; n = _ <= c ? ++O : --O) f.push(r[n].new);else s.push(k - _), N.push(0);
        }

        for (I.writeUInt16(3), I.writeUInt16(1), I.writeUInt32(12), I.writeUInt16(4), I.writeUInt16(16 + 8 * x + 2 * f.length), I.writeUInt16(0), I.writeUInt16(S), I.writeUInt16(A), I.writeUInt16(h), I.writeUInt16(L), z = 0, q = l.length; z < q; z++) n = l[z], I.writeUInt16(n);

        for (I.writeUInt16(0), H = 0, R = P.length; H < R; H++) n = P[H], I.writeUInt16(n);

        for (W = 0, T = s.length; W < T; W++) o = s[W], I.writeUInt16(o);

        for (G = 0, D = N.length; G < D; G++) y = N[G], I.writeUInt16(y);

        for (Y = 0, U = f.length; Y < U; Y++) p = f[Y], I.writeUInt16(p);

        return {
          charMap: r,
          subtable: I.data,
          maxGlyphID: b + 1
        };
    }
  }, t;
}(),
    oe = function (t) {
  function e() {
    return e.__super__.constructor.apply(this, arguments);
  }

  return ne(e, Qt), e.prototype.tag = "cmap", e.prototype.parse = function (t) {
    var e, r, n;

    for (t.pos = this.offset, this.version = t.readUInt16(), n = t.readUInt16(), this.tables = [], this.unicode = null, r = 0; 0 <= n ? r < n : r > n; r = 0 <= n ? ++r : --r) e = new ae(t, this.offset), this.tables.push(e), e.isUnicode && null == this.unicode && (this.unicode = e);

    return !0;
  }, e.encode = function (t, e) {
    var r, n;
    return null == e && (e = "macroman"), r = ae.encode(t, e), (n = new te()).writeUInt16(0), n.writeUInt16(1), r.table = n.data.concat(r.subtable), r;
  }, e;
}(),
    se = function (t) {
  function e() {
    return e.__super__.constructor.apply(this, arguments);
  }

  return ne(e, Qt), e.prototype.tag = "hhea", e.prototype.parse = function (t) {
    return t.pos = this.offset, this.version = t.readInt(), this.ascender = t.readShort(), this.decender = t.readShort(), this.lineGap = t.readShort(), this.advanceWidthMax = t.readShort(), this.minLeftSideBearing = t.readShort(), this.minRightSideBearing = t.readShort(), this.xMaxExtent = t.readShort(), this.caretSlopeRise = t.readShort(), this.caretSlopeRun = t.readShort(), this.caretOffset = t.readShort(), t.pos += 8, this.metricDataFormat = t.readShort(), this.numberOfMetrics = t.readUInt16();
  }, e;
}(),
    ue = function (t) {
  function e() {
    return e.__super__.constructor.apply(this, arguments);
  }

  return ne(e, Qt), e.prototype.tag = "OS/2", e.prototype.parse = function (t) {
    if (t.pos = this.offset, this.version = t.readUInt16(), this.averageCharWidth = t.readShort(), this.weightClass = t.readUInt16(), this.widthClass = t.readUInt16(), this.type = t.readShort(), this.ySubscriptXSize = t.readShort(), this.ySubscriptYSize = t.readShort(), this.ySubscriptXOffset = t.readShort(), this.ySubscriptYOffset = t.readShort(), this.ySuperscriptXSize = t.readShort(), this.ySuperscriptYSize = t.readShort(), this.ySuperscriptXOffset = t.readShort(), this.ySuperscriptYOffset = t.readShort(), this.yStrikeoutSize = t.readShort(), this.yStrikeoutPosition = t.readShort(), this.familyClass = t.readShort(), this.panose = function () {
      var e, r;

      for (r = [], e = 0; e < 10; ++e) r.push(t.readByte());

      return r;
    }(), this.charRange = function () {
      var e, r;

      for (r = [], e = 0; e < 4; ++e) r.push(t.readInt());

      return r;
    }(), this.vendorID = t.readString(4), this.selection = t.readShort(), this.firstCharIndex = t.readShort(), this.lastCharIndex = t.readShort(), this.version > 0 && (this.ascent = t.readShort(), this.descent = t.readShort(), this.lineGap = t.readShort(), this.winAscent = t.readShort(), this.winDescent = t.readShort(), this.codePageRange = function () {
      var e, r;

      for (r = [], e = 0; e < 2; e = ++e) r.push(t.readInt());

      return r;
    }(), this.version > 1)) return this.xHeight = t.readShort(), this.capHeight = t.readShort(), this.defaultChar = t.readShort(), this.breakChar = t.readShort(), this.maxContext = t.readShort();
  }, e;
}(),
    ce = function (t) {
  function e() {
    return e.__super__.constructor.apply(this, arguments);
  }

  return ne(e, Qt), e.prototype.tag = "post", e.prototype.parse = function (t) {
    var e, r, n;

    switch (t.pos = this.offset, this.format = t.readInt(), this.italicAngle = t.readInt(), this.underlinePosition = t.readShort(), this.underlineThickness = t.readShort(), this.isFixedPitch = t.readInt(), this.minMemType42 = t.readInt(), this.maxMemType42 = t.readInt(), this.minMemType1 = t.readInt(), this.maxMemType1 = t.readInt(), this.format) {
      case 65536:
        break;

      case 131072:
        var i;

        for (r = t.readUInt16(), this.glyphNameIndex = [], i = 0; 0 <= r ? i < r : i > r; i = 0 <= r ? ++i : --i) this.glyphNameIndex.push(t.readUInt16());

        for (this.names = [], n = []; t.pos < this.offset + this.length;) e = t.readByte(), n.push(this.names.push(t.readString(e)));

        return n;

      case 151552:
        return r = t.readUInt16(), this.offsets = t.read(r);

      case 196608:
        break;

      case 262144:
        return this.map = function () {
          var e, r, n;

          for (n = [], i = e = 0, r = this.file.maxp.numGlyphs; 0 <= r ? e < r : e > r; i = 0 <= r ? ++e : --e) n.push(t.readUInt32());

          return n;
        }.call(this);
    }
  }, e;
}(),
    le = function (t, e) {
  this.raw = t, this.length = t.length, this.platformID = e.platformID, this.encodingID = e.encodingID, this.languageID = e.languageID;
},
    he = function (t) {
  function e() {
    return e.__super__.constructor.apply(this, arguments);
  }

  return ne(e, Qt), e.prototype.tag = "name", e.prototype.parse = function (t) {
    var e, r, n, i, a, o, s, u, c, l, h;

    for (t.pos = this.offset, t.readShort(), e = t.readShort(), o = t.readShort(), r = [], i = 0; 0 <= e ? i < e : i > e; i = 0 <= e ? ++i : --i) r.push({
      platformID: t.readShort(),
      encodingID: t.readShort(),
      languageID: t.readShort(),
      nameID: t.readShort(),
      length: t.readShort(),
      offset: this.offset + o + t.readShort()
    });

    for (s = {}, i = c = 0, l = r.length; c < l; i = ++c) n = r[i], t.pos = n.offset, u = t.readString(n.length), a = new le(u, n), null == s[h = n.nameID] && (s[h] = []), s[n.nameID].push(a);

    this.strings = s, this.copyright = s[0], this.fontFamily = s[1], this.fontSubfamily = s[2], this.uniqueSubfamily = s[3], this.fontName = s[4], this.version = s[5];

    try {
      this.postscriptName = s[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
    } catch (t) {
      this.postscriptName = s[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
    }

    return this.trademark = s[7], this.manufacturer = s[8], this.designer = s[9], this.description = s[10], this.vendorUrl = s[11], this.designerUrl = s[12], this.license = s[13], this.licenseUrl = s[14], this.preferredFamily = s[15], this.preferredSubfamily = s[17], this.compatibleFull = s[18], this.sampleText = s[19];
  }, e;
}(),
    fe = function (t) {
  function e() {
    return e.__super__.constructor.apply(this, arguments);
  }

  return ne(e, Qt), e.prototype.tag = "maxp", e.prototype.parse = function (t) {
    return t.pos = this.offset, this.version = t.readInt(), this.numGlyphs = t.readUInt16(), this.maxPoints = t.readUInt16(), this.maxContours = t.readUInt16(), this.maxCompositePoints = t.readUInt16(), this.maxComponentContours = t.readUInt16(), this.maxZones = t.readUInt16(), this.maxTwilightPoints = t.readUInt16(), this.maxStorage = t.readUInt16(), this.maxFunctionDefs = t.readUInt16(), this.maxInstructionDefs = t.readUInt16(), this.maxStackElements = t.readUInt16(), this.maxSizeOfInstructions = t.readUInt16(), this.maxComponentElements = t.readUInt16(), this.maxComponentDepth = t.readUInt16();
  }, e;
}(),
    de = function (t) {
  function e() {
    return e.__super__.constructor.apply(this, arguments);
  }

  return ne(e, Qt), e.prototype.tag = "hmtx", e.prototype.parse = function (t) {
    var e, r, n, i, a, o, s;

    for (t.pos = this.offset, this.metrics = [], e = 0, o = this.file.hhea.numberOfMetrics; 0 <= o ? e < o : e > o; e = 0 <= o ? ++e : --e) this.metrics.push({
      advance: t.readUInt16(),
      lsb: t.readInt16()
    });

    for (n = this.file.maxp.numGlyphs - this.file.hhea.numberOfMetrics, this.leftSideBearings = function () {
      var r, i;

      for (i = [], e = r = 0; 0 <= n ? r < n : r > n; e = 0 <= n ? ++r : --r) i.push(t.readInt16());

      return i;
    }(), this.widths = function () {
      var t, e, r, n;

      for (n = [], t = 0, e = (r = this.metrics).length; t < e; t++) i = r[t], n.push(i.advance);

      return n;
    }.call(this), r = this.widths[this.widths.length - 1], s = [], e = a = 0; 0 <= n ? a < n : a > n; e = 0 <= n ? ++a : --a) s.push(this.widths.push(r));

    return s;
  }, e.prototype.forGlyph = function (t) {
    return t in this.metrics ? this.metrics[t] : {
      advance: this.metrics[this.metrics.length - 1].advance,
      lsb: this.leftSideBearings[t - this.metrics.length]
    };
  }, e;
}(),
    pe = [].slice,
    ge = function (t) {
  function e() {
    return e.__super__.constructor.apply(this, arguments);
  }

  return ne(e, Qt), e.prototype.tag = "glyf", e.prototype.parse = function () {
    return this.cache = {};
  }, e.prototype.glyphFor = function (t) {
    var e, r, n, i, a, o, s, u, c, l;
    return t in this.cache ? this.cache[t] : (i = this.file.loca, e = this.file.contents, r = i.indexOf(t), 0 === (n = i.lengthOf(t)) ? this.cache[t] = null : (e.pos = this.offset + r, a = (o = new te(e.read(n))).readShort(), u = o.readShort(), l = o.readShort(), s = o.readShort(), c = o.readShort(), this.cache[t] = -1 === a ? new ve(o, u, l, s, c) : new me(o, a, u, l, s, c), this.cache[t]));
  }, e.prototype.encode = function (t, e, r) {
    var n, i, a, o, s;

    for (a = [], i = [], o = 0, s = e.length; o < s; o++) n = t[e[o]], i.push(a.length), n && (a = a.concat(n.encode(r)));

    return i.push(a.length), {
      table: a,
      offsets: i
    };
  }, e;
}(),
    me = function () {
  function t(t, e, r, n, i, a) {
    this.raw = t, this.numberOfContours = e, this.xMin = r, this.yMin = n, this.xMax = i, this.yMax = a, this.compound = !1;
  }

  return t.prototype.encode = function () {
    return this.raw.data;
  }, t;
}(),
    ve = function () {
  function t(t, e, r, n, i) {
    var a, o;

    for (this.raw = t, this.xMin = e, this.yMin = r, this.xMax = n, this.yMax = i, this.compound = !0, this.glyphIDs = [], this.glyphOffsets = [], a = this.raw; o = a.readShort(), this.glyphOffsets.push(a.pos), this.glyphIDs.push(a.readUInt16()), 32 & o;) a.pos += 1 & o ? 4 : 2, 128 & o ? a.pos += 8 : 64 & o ? a.pos += 4 : 8 & o && (a.pos += 2);
  }

  return 1, 8, 32, 64, 128, t.prototype.encode = function () {
    var t, e, r;

    for (e = new te(pe.call(this.raw.data)), t = 0, r = this.glyphIDs.length; t < r; ++t) e.pos = this.glyphOffsets[t];

    return e.data;
  }, t;
}(),
    be = function (t) {
  function e() {
    return e.__super__.constructor.apply(this, arguments);
  }

  return ne(e, Qt), e.prototype.tag = "loca", e.prototype.parse = function (t) {
    var e, r;
    return t.pos = this.offset, e = this.file.head.indexToLocFormat, this.offsets = 0 === e ? function () {
      var e, n;

      for (n = [], r = 0, e = this.length; r < e; r += 2) n.push(2 * t.readUInt16());

      return n;
    }.call(this) : function () {
      var e, n;

      for (n = [], r = 0, e = this.length; r < e; r += 4) n.push(t.readUInt32());

      return n;
    }.call(this);
  }, e.prototype.indexOf = function (t) {
    return this.offsets[t];
  }, e.prototype.lengthOf = function (t) {
    return this.offsets[t + 1] - this.offsets[t];
  }, e.prototype.encode = function (t, e) {
    for (var r = new Uint32Array(this.offsets.length), n = 0, i = 0, a = 0; a < r.length; ++a) if (r[a] = n, i < e.length && e[i] == a) {
      ++i, r[a] = n;
      var o = this.offsets[a],
          s = this.offsets[a + 1] - o;
      s > 0 && (n += s);
    }

    for (var u = new Array(4 * r.length), c = 0; c < r.length; ++c) u[4 * c + 3] = 255 & r[c], u[4 * c + 2] = (65280 & r[c]) >> 8, u[4 * c + 1] = (16711680 & r[c]) >> 16, u[4 * c] = (4278190080 & r[c]) >> 24;

    return u;
  }, e;
}(),
    ye = function () {
  function t(t) {
    this.font = t, this.subset = {}, this.unicodes = {}, this.next = 33;
  }

  return t.prototype.generateCmap = function () {
    var t, e, r, n, i;

    for (e in n = this.font.cmap.tables[0].codeMap, t = {}, i = this.subset) r = i[e], t[e] = n[r];

    return t;
  }, t.prototype.glyphsFor = function (t) {
    var e, r, n, i, a, o, s;

    for (n = {}, a = 0, o = t.length; a < o; a++) n[i = t[a]] = this.font.glyf.glyphFor(i);

    for (i in e = [], n) (null != (r = n[i]) ? r.compound : void 0) && e.push.apply(e, r.glyphIDs);

    if (e.length > 0) for (i in s = this.glyphsFor(e)) r = s[i], n[i] = r;
    return n;
  }, t.prototype.encode = function (t, e) {
    var r, n, i, a, o, s, u, c, l, h, f, d, p, g, m;

    for (n in r = oe.encode(this.generateCmap(), "unicode"), a = this.glyphsFor(t), f = {
      0: 0
    }, m = r.charMap) f[(s = m[n]).old] = s.new;

    for (d in h = r.maxGlyphID, a) d in f || (f[d] = h++);

    return c = function (t) {
      var e, r;

      for (e in r = {}, t) r[t[e]] = e;

      return r;
    }(f), l = Object.keys(c).sort(function (t, e) {
      return t - e;
    }), p = function () {
      var t, e, r;

      for (r = [], t = 0, e = l.length; t < e; t++) o = l[t], r.push(c[o]);

      return r;
    }(), i = this.font.glyf.encode(a, p, f), u = this.font.loca.encode(i.offsets, p), g = {
      cmap: this.font.cmap.raw(),
      glyf: i.table,
      loca: u,
      hmtx: this.font.hmtx.raw(),
      hhea: this.font.hhea.raw(),
      maxp: this.font.maxp.raw(),
      post: this.font.post.raw(),
      name: this.font.name.raw(),
      head: this.font.head.encode(e)
    }, this.font.os2.exists && (g["OS/2"] = this.font.os2.raw()), this.font.directory.encode(g);
  }, t;
}();

O.API.PDFObject = function () {
  var t;

  function e() {}

  return t = function (t, e) {
    return (Array(e + 1).join("0") + t).slice(-e);
  }, e.convert = function (r) {
    var n, i, a, o;
    if (Array.isArray(r)) return "[" + function () {
      var t, i, a;

      for (a = [], t = 0, i = r.length; t < i; t++) n = r[t], a.push(e.convert(n));

      return a;
    }().join(" ") + "]";
    if ("string" == typeof r) return "/" + r;
    if (null != r ? r.isString : void 0) return "(" + r + ")";
    if (r instanceof Date) return "(D:" + t(r.getUTCFullYear(), 4) + t(r.getUTCMonth(), 2) + t(r.getUTCDate(), 2) + t(r.getUTCHours(), 2) + t(r.getUTCMinutes(), 2) + t(r.getUTCSeconds(), 2) + "Z)";

    if ("[object Object]" === {}.toString.call(r)) {
      for (i in a = ["<<"], r) o = r[i], a.push("/" + i + " " + e.convert(o));

      return a.push(">>"), a.join("\n");
    }

    return "" + r;
  }, e;
}();

var _default = O;
exports.default = _default;
},{"fflate":"../../node_modules/jspdf/node_modules/fflate/esm/browser.js","_bundle_loader":"../../node_modules/parcel-bundler/src/builtins/bundle-loader.js","html2canvas":[["html2canvas.389d8a0d.js","../../node_modules/html2canvas/dist/html2canvas.js"],"html2canvas.389d8a0d.js.map","../../node_modules/html2canvas/dist/html2canvas.js"],"dompurify":[["purify.7461be3b.js","../../node_modules/dompurify/dist/purify.js"],"purify.7461be3b.js.map","../../node_modules/dompurify/dist/purify.js"],"canvg":[["index.es.70f16b3d.js","../../node_modules/canvg/lib/index.es.js"],"index.es.70f16b3d.js.map","../../node_modules/canvg/lib/index.es.js"]}],"common/downloadDocument.js":[function(require,module,exports) {
"use strict";

var _jspdf = require("jspdf");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function createHeaders(keys) {
  var result = [];

  for (var i = 0; i < keys.length; i += 1) {
    result.push({
      id: keys[i],
      name: keys[i],
      prompt: keys[i],
      width: 50,
      align: 'center',
      padding: 0
    });
  }

  return result;
}

var exportBtn = document.getElementById('export');

if (exportBtn) {
  // Default export is a4 paper, portrait, using millimeters for units
  exportBtn.onclick = function () {
    var trs = _toConsumableArray(document.getElementsByTagName('tr')).filter(function (tr) {
      return tr.style.display === '';
    });

    trs = trs.splice(1, trs.length);
    var students = trs.map(function (tr) {
      var dataset = _toConsumableArray(tr.children).map(function (td) {
        return td.textContent;
      });

      return {
        'Roll No.': dataset[0],
        Section: dataset[3],
        Name: dataset[1],
        'Fees Paid Upto': dataset[4]
      };
    });
    var headers = createHeaders(['Roll No.', 'Section', 'Name', 'Fees Paid Upto']);
    var doc = new _jspdf.jsPDF();
    doc.table(10, 10, students, headers, {
      printHeaders: true
    }, {
      autoSize: true
    });
    doc.save("example.pdf");
  };
} // For user : paymnet-history download reciept buttons


var downloadBtn = document.getElementsByName('past-pay-dnld');

if (downloadBtn.length) {
  downloadBtn.forEach(function (btn) {
    btn.onclick = function () {
      var details = [{
        'Paid For': 'Amit Shekhar',
        Amount: '500',
        Status: 'Success',
        'Paid on': '2-July-2021'
      }];
      var headers = createHeaders(['Paid For', 'Amount', 'Status', 'Paid on']);
      var doc = new _jspdf.jsPDF();
      doc.table(10, 10, details, headers, {
        printHeaders: true
      }, {
        autoSize: true
      });
      doc.save("reciept.pdf");
    };
  });
} //Add downloading of fees reciept just after the paymnet has been made
},{"jspdf":"../../node_modules/jspdf/dist/jspdf.es.min.js"}],"common/errorHandler.js":[function(require,module,exports) {
var queryString = document.location.href.split('?');

if (queryString.length > 1) {
  var error = queryString[1].split('=')[1];

  switch (error) {
    case 'error-parsing-file':
      {
        var errElem = document.getElementById('error');
        errElem.textContent = 'Error : File parse error, Please try uploading an excel file.';
        errElem.style.color = 'red';
        break;
      }
  }
}
},{}],"index.js":[function(require,module,exports) {
"use strict";

require("core-js/modules/es6.array.copy-within.js");

require("core-js/modules/es6.array.fill.js");

require("core-js/modules/es6.array.filter.js");

require("core-js/modules/es6.array.find.js");

require("core-js/modules/es6.array.find-index.js");

require("core-js/modules/es7.array.flat-map.js");

require("core-js/modules/es6.array.from.js");

require("core-js/modules/es7.array.includes.js");

require("core-js/modules/es6.array.iterator.js");

require("core-js/modules/es6.array.map.js");

require("core-js/modules/es6.array.of.js");

require("core-js/modules/es6.array.slice.js");

require("core-js/modules/es6.array.sort.js");

require("core-js/modules/es6.array.species.js");

require("core-js/modules/es6.date.to-primitive.js");

require("core-js/modules/es6.function.has-instance.js");

require("core-js/modules/es6.function.name.js");

require("core-js/modules/es6.map.js");

require("core-js/modules/es6.math.acosh.js");

require("core-js/modules/es6.math.asinh.js");

require("core-js/modules/es6.math.atanh.js");

require("core-js/modules/es6.math.cbrt.js");

require("core-js/modules/es6.math.clz32.js");

require("core-js/modules/es6.math.cosh.js");

require("core-js/modules/es6.math.expm1.js");

require("core-js/modules/es6.math.fround.js");

require("core-js/modules/es6.math.hypot.js");

require("core-js/modules/es6.math.imul.js");

require("core-js/modules/es6.math.log1p.js");

require("core-js/modules/es6.math.log10.js");

require("core-js/modules/es6.math.log2.js");

require("core-js/modules/es6.math.sign.js");

require("core-js/modules/es6.math.sinh.js");

require("core-js/modules/es6.math.tanh.js");

require("core-js/modules/es6.math.trunc.js");

require("core-js/modules/es6.number.constructor.js");

require("core-js/modules/es6.number.epsilon.js");

require("core-js/modules/es6.number.is-finite.js");

require("core-js/modules/es6.number.is-integer.js");

require("core-js/modules/es6.number.is-nan.js");

require("core-js/modules/es6.number.is-safe-integer.js");

require("core-js/modules/es6.number.max-safe-integer.js");

require("core-js/modules/es6.number.min-safe-integer.js");

require("core-js/modules/es6.number.parse-float.js");

require("core-js/modules/es6.number.parse-int.js");

require("core-js/modules/es6.object.assign.js");

require("core-js/modules/es7.object.define-getter.js");

require("core-js/modules/es7.object.define-setter.js");

require("core-js/modules/es7.object.entries.js");

require("core-js/modules/es6.object.freeze.js");

require("core-js/modules/es6.object.get-own-property-descriptor.js");

require("core-js/modules/es7.object.get-own-property-descriptors.js");

require("core-js/modules/es6.object.get-own-property-names.js");

require("core-js/modules/es6.object.get-prototype-of.js");

require("core-js/modules/es7.object.lookup-getter.js");

require("core-js/modules/es7.object.lookup-setter.js");

require("core-js/modules/es6.object.prevent-extensions.js");

require("core-js/modules/es6.object.to-string.js");

require("core-js/modules/es6.object.is.js");

require("core-js/modules/es6.object.is-frozen.js");

require("core-js/modules/es6.object.is-sealed.js");

require("core-js/modules/es6.object.is-extensible.js");

require("core-js/modules/es6.object.keys.js");

require("core-js/modules/es6.object.seal.js");

require("core-js/modules/es7.object.values.js");

require("core-js/modules/es6.promise.js");

require("core-js/modules/es7.promise.finally.js");

require("core-js/modules/es6.reflect.apply.js");

require("core-js/modules/es6.reflect.construct.js");

require("core-js/modules/es6.reflect.define-property.js");

require("core-js/modules/es6.reflect.delete-property.js");

require("core-js/modules/es6.reflect.get.js");

require("core-js/modules/es6.reflect.get-own-property-descriptor.js");

require("core-js/modules/es6.reflect.get-prototype-of.js");

require("core-js/modules/es6.reflect.has.js");

require("core-js/modules/es6.reflect.is-extensible.js");

require("core-js/modules/es6.reflect.own-keys.js");

require("core-js/modules/es6.reflect.prevent-extensions.js");

require("core-js/modules/es6.reflect.set.js");

require("core-js/modules/es6.reflect.set-prototype-of.js");

require("core-js/modules/es6.regexp.constructor.js");

require("core-js/modules/es6.regexp.flags.js");

require("core-js/modules/es6.regexp.match.js");

require("core-js/modules/es6.regexp.replace.js");

require("core-js/modules/es6.regexp.split.js");

require("core-js/modules/es6.regexp.search.js");

require("core-js/modules/es6.regexp.to-string.js");

require("core-js/modules/es6.set.js");

require("core-js/modules/es6.symbol.js");

require("core-js/modules/es7.symbol.async-iterator.js");

require("core-js/modules/es6.string.anchor.js");

require("core-js/modules/es6.string.big.js");

require("core-js/modules/es6.string.blink.js");

require("core-js/modules/es6.string.bold.js");

require("core-js/modules/es6.string.code-point-at.js");

require("core-js/modules/es6.string.ends-with.js");

require("core-js/modules/es6.string.fixed.js");

require("core-js/modules/es6.string.fontcolor.js");

require("core-js/modules/es6.string.fontsize.js");

require("core-js/modules/es6.string.from-code-point.js");

require("core-js/modules/es6.string.includes.js");

require("core-js/modules/es6.string.italics.js");

require("core-js/modules/es6.string.iterator.js");

require("core-js/modules/es6.string.link.js");

require("core-js/modules/es7.string.pad-start.js");

require("core-js/modules/es7.string.pad-end.js");

require("core-js/modules/es6.string.raw.js");

require("core-js/modules/es6.string.repeat.js");

require("core-js/modules/es6.string.small.js");

require("core-js/modules/es6.string.starts-with.js");

require("core-js/modules/es6.string.strike.js");

require("core-js/modules/es6.string.sub.js");

require("core-js/modules/es6.string.sup.js");

require("core-js/modules/es7.string.trim-left.js");

require("core-js/modules/es7.string.trim-right.js");

require("core-js/modules/es6.typed.array-buffer.js");

require("core-js/modules/es6.typed.int8-array.js");

require("core-js/modules/es6.typed.uint8-array.js");

require("core-js/modules/es6.typed.uint8-clamped-array.js");

require("core-js/modules/es6.typed.int16-array.js");

require("core-js/modules/es6.typed.uint16-array.js");

require("core-js/modules/es6.typed.int32-array.js");

require("core-js/modules/es6.typed.uint32-array.js");

require("core-js/modules/es6.typed.float32-array.js");

require("core-js/modules/es6.typed.float64-array.js");

require("core-js/modules/es6.weak-map.js");

require("core-js/modules/es6.weak-set.js");

require("core-js/modules/web.timers.js");

require("core-js/modules/web.immediate.js");

require("core-js/modules/web.dom.iterable.js");

require("regenerator-runtime/runtime.js");

require('./common/utilities');

require('./common/redirectToMain');

require('./common/loginSignupRedirect');

require('./common/loginSignupHandler');

require('./user/dashboard');

require('./user/cart');

require('./user/payment');

require('./user/linkStudent');

require('./institute/searchStudent');

require('./institute/studentDetails');

require('./institute/viewStudents');

require('./institute/addInstituteDetails');

require('./institute/dashboard');

require('./admin/instituteManagement');

require('./institute/feesManagement');

require('./common/downloadDocument'); // keep this at the end


require('./common/errorHandler');
},{"core-js/modules/es6.array.copy-within.js":"../../node_modules/core-js/modules/es6.array.copy-within.js","core-js/modules/es6.array.fill.js":"../../node_modules/core-js/modules/es6.array.fill.js","core-js/modules/es6.array.filter.js":"../../node_modules/core-js/modules/es6.array.filter.js","core-js/modules/es6.array.find.js":"../../node_modules/core-js/modules/es6.array.find.js","core-js/modules/es6.array.find-index.js":"../../node_modules/core-js/modules/es6.array.find-index.js","core-js/modules/es7.array.flat-map.js":"../../node_modules/core-js/modules/es7.array.flat-map.js","core-js/modules/es6.array.from.js":"../../node_modules/core-js/modules/es6.array.from.js","core-js/modules/es7.array.includes.js":"../../node_modules/core-js/modules/es7.array.includes.js","core-js/modules/es6.array.iterator.js":"../../node_modules/core-js/modules/es6.array.iterator.js","core-js/modules/es6.array.map.js":"../../node_modules/core-js/modules/es6.array.map.js","core-js/modules/es6.array.of.js":"../../node_modules/core-js/modules/es6.array.of.js","core-js/modules/es6.array.slice.js":"../../node_modules/core-js/modules/es6.array.slice.js","core-js/modules/es6.array.sort.js":"../../node_modules/core-js/modules/es6.array.sort.js","core-js/modules/es6.array.species.js":"../../node_modules/core-js/modules/es6.array.species.js","core-js/modules/es6.date.to-primitive.js":"../../node_modules/core-js/modules/es6.date.to-primitive.js","core-js/modules/es6.function.has-instance.js":"../../node_modules/core-js/modules/es6.function.has-instance.js","core-js/modules/es6.function.name.js":"../../node_modules/core-js/modules/es6.function.name.js","core-js/modules/es6.map.js":"../../node_modules/core-js/modules/es6.map.js","core-js/modules/es6.math.acosh.js":"../../node_modules/core-js/modules/es6.math.acosh.js","core-js/modules/es6.math.asinh.js":"../../node_modules/core-js/modules/es6.math.asinh.js","core-js/modules/es6.math.atanh.js":"../../node_modules/core-js/modules/es6.math.atanh.js","core-js/modules/es6.math.cbrt.js":"../../node_modules/core-js/modules/es6.math.cbrt.js","core-js/modules/es6.math.clz32.js":"../../node_modules/core-js/modules/es6.math.clz32.js","core-js/modules/es6.math.cosh.js":"../../node_modules/core-js/modules/es6.math.cosh.js","core-js/modules/es6.math.expm1.js":"../../node_modules/core-js/modules/es6.math.expm1.js","core-js/modules/es6.math.fround.js":"../../node_modules/core-js/modules/es6.math.fround.js","core-js/modules/es6.math.hypot.js":"../../node_modules/core-js/modules/es6.math.hypot.js","core-js/modules/es6.math.imul.js":"../../node_modules/core-js/modules/es6.math.imul.js","core-js/modules/es6.math.log1p.js":"../../node_modules/core-js/modules/es6.math.log1p.js","core-js/modules/es6.math.log10.js":"../../node_modules/core-js/modules/es6.math.log10.js","core-js/modules/es6.math.log2.js":"../../node_modules/core-js/modules/es6.math.log2.js","core-js/modules/es6.math.sign.js":"../../node_modules/core-js/modules/es6.math.sign.js","core-js/modules/es6.math.sinh.js":"../../node_modules/core-js/modules/es6.math.sinh.js","core-js/modules/es6.math.tanh.js":"../../node_modules/core-js/modules/es6.math.tanh.js","core-js/modules/es6.math.trunc.js":"../../node_modules/core-js/modules/es6.math.trunc.js","core-js/modules/es6.number.constructor.js":"../../node_modules/core-js/modules/es6.number.constructor.js","core-js/modules/es6.number.epsilon.js":"../../node_modules/core-js/modules/es6.number.epsilon.js","core-js/modules/es6.number.is-finite.js":"../../node_modules/core-js/modules/es6.number.is-finite.js","core-js/modules/es6.number.is-integer.js":"../../node_modules/core-js/modules/es6.number.is-integer.js","core-js/modules/es6.number.is-nan.js":"../../node_modules/core-js/modules/es6.number.is-nan.js","core-js/modules/es6.number.is-safe-integer.js":"../../node_modules/core-js/modules/es6.number.is-safe-integer.js","core-js/modules/es6.number.max-safe-integer.js":"../../node_modules/core-js/modules/es6.number.max-safe-integer.js","core-js/modules/es6.number.min-safe-integer.js":"../../node_modules/core-js/modules/es6.number.min-safe-integer.js","core-js/modules/es6.number.parse-float.js":"../../node_modules/core-js/modules/es6.number.parse-float.js","core-js/modules/es6.number.parse-int.js":"../../node_modules/core-js/modules/es6.number.parse-int.js","core-js/modules/es6.object.assign.js":"../../node_modules/core-js/modules/es6.object.assign.js","core-js/modules/es7.object.define-getter.js":"../../node_modules/core-js/modules/es7.object.define-getter.js","core-js/modules/es7.object.define-setter.js":"../../node_modules/core-js/modules/es7.object.define-setter.js","core-js/modules/es7.object.entries.js":"../../node_modules/core-js/modules/es7.object.entries.js","core-js/modules/es6.object.freeze.js":"../../node_modules/core-js/modules/es6.object.freeze.js","core-js/modules/es6.object.get-own-property-descriptor.js":"../../node_modules/core-js/modules/es6.object.get-own-property-descriptor.js","core-js/modules/es7.object.get-own-property-descriptors.js":"../../node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","core-js/modules/es6.object.get-own-property-names.js":"../../node_modules/core-js/modules/es6.object.get-own-property-names.js","core-js/modules/es6.object.get-prototype-of.js":"../../node_modules/core-js/modules/es6.object.get-prototype-of.js","core-js/modules/es7.object.lookup-getter.js":"../../node_modules/core-js/modules/es7.object.lookup-getter.js","core-js/modules/es7.object.lookup-setter.js":"../../node_modules/core-js/modules/es7.object.lookup-setter.js","core-js/modules/es6.object.prevent-extensions.js":"../../node_modules/core-js/modules/es6.object.prevent-extensions.js","core-js/modules/es6.object.to-string.js":"../../node_modules/core-js/modules/es6.object.to-string.js","core-js/modules/es6.object.is.js":"../../node_modules/core-js/modules/es6.object.is.js","core-js/modules/es6.object.is-frozen.js":"../../node_modules/core-js/modules/es6.object.is-frozen.js","core-js/modules/es6.object.is-sealed.js":"../../node_modules/core-js/modules/es6.object.is-sealed.js","core-js/modules/es6.object.is-extensible.js":"../../node_modules/core-js/modules/es6.object.is-extensible.js","core-js/modules/es6.object.keys.js":"../../node_modules/core-js/modules/es6.object.keys.js","core-js/modules/es6.object.seal.js":"../../node_modules/core-js/modules/es6.object.seal.js","core-js/modules/es7.object.values.js":"../../node_modules/core-js/modules/es7.object.values.js","core-js/modules/es6.promise.js":"../../node_modules/core-js/modules/es6.promise.js","core-js/modules/es7.promise.finally.js":"../../node_modules/core-js/modules/es7.promise.finally.js","core-js/modules/es6.reflect.apply.js":"../../node_modules/core-js/modules/es6.reflect.apply.js","core-js/modules/es6.reflect.construct.js":"../../node_modules/core-js/modules/es6.reflect.construct.js","core-js/modules/es6.reflect.define-property.js":"../../node_modules/core-js/modules/es6.reflect.define-property.js","core-js/modules/es6.reflect.delete-property.js":"../../node_modules/core-js/modules/es6.reflect.delete-property.js","core-js/modules/es6.reflect.get.js":"../../node_modules/core-js/modules/es6.reflect.get.js","core-js/modules/es6.reflect.get-own-property-descriptor.js":"../../node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js","core-js/modules/es6.reflect.get-prototype-of.js":"../../node_modules/core-js/modules/es6.reflect.get-prototype-of.js","core-js/modules/es6.reflect.has.js":"../../node_modules/core-js/modules/es6.reflect.has.js","core-js/modules/es6.reflect.is-extensible.js":"../../node_modules/core-js/modules/es6.reflect.is-extensible.js","core-js/modules/es6.reflect.own-keys.js":"../../node_modules/core-js/modules/es6.reflect.own-keys.js","core-js/modules/es6.reflect.prevent-extensions.js":"../../node_modules/core-js/modules/es6.reflect.prevent-extensions.js","core-js/modules/es6.reflect.set.js":"../../node_modules/core-js/modules/es6.reflect.set.js","core-js/modules/es6.reflect.set-prototype-of.js":"../../node_modules/core-js/modules/es6.reflect.set-prototype-of.js","core-js/modules/es6.regexp.constructor.js":"../../node_modules/core-js/modules/es6.regexp.constructor.js","core-js/modules/es6.regexp.flags.js":"../../node_modules/core-js/modules/es6.regexp.flags.js","core-js/modules/es6.regexp.match.js":"../../node_modules/core-js/modules/es6.regexp.match.js","core-js/modules/es6.regexp.replace.js":"../../node_modules/core-js/modules/es6.regexp.replace.js","core-js/modules/es6.regexp.split.js":"../../node_modules/core-js/modules/es6.regexp.split.js","core-js/modules/es6.regexp.search.js":"../../node_modules/core-js/modules/es6.regexp.search.js","core-js/modules/es6.regexp.to-string.js":"../../node_modules/core-js/modules/es6.regexp.to-string.js","core-js/modules/es6.set.js":"../../node_modules/core-js/modules/es6.set.js","core-js/modules/es6.symbol.js":"../../node_modules/core-js/modules/es6.symbol.js","core-js/modules/es7.symbol.async-iterator.js":"../../node_modules/core-js/modules/es7.symbol.async-iterator.js","core-js/modules/es6.string.anchor.js":"../../node_modules/core-js/modules/es6.string.anchor.js","core-js/modules/es6.string.big.js":"../../node_modules/core-js/modules/es6.string.big.js","core-js/modules/es6.string.blink.js":"../../node_modules/core-js/modules/es6.string.blink.js","core-js/modules/es6.string.bold.js":"../../node_modules/core-js/modules/es6.string.bold.js","core-js/modules/es6.string.code-point-at.js":"../../node_modules/core-js/modules/es6.string.code-point-at.js","core-js/modules/es6.string.ends-with.js":"../../node_modules/core-js/modules/es6.string.ends-with.js","core-js/modules/es6.string.fixed.js":"../../node_modules/core-js/modules/es6.string.fixed.js","core-js/modules/es6.string.fontcolor.js":"../../node_modules/core-js/modules/es6.string.fontcolor.js","core-js/modules/es6.string.fontsize.js":"../../node_modules/core-js/modules/es6.string.fontsize.js","core-js/modules/es6.string.from-code-point.js":"../../node_modules/core-js/modules/es6.string.from-code-point.js","core-js/modules/es6.string.includes.js":"../../node_modules/core-js/modules/es6.string.includes.js","core-js/modules/es6.string.italics.js":"../../node_modules/core-js/modules/es6.string.italics.js","core-js/modules/es6.string.iterator.js":"../../node_modules/core-js/modules/es6.string.iterator.js","core-js/modules/es6.string.link.js":"../../node_modules/core-js/modules/es6.string.link.js","core-js/modules/es7.string.pad-start.js":"../../node_modules/core-js/modules/es7.string.pad-start.js","core-js/modules/es7.string.pad-end.js":"../../node_modules/core-js/modules/es7.string.pad-end.js","core-js/modules/es6.string.raw.js":"../../node_modules/core-js/modules/es6.string.raw.js","core-js/modules/es6.string.repeat.js":"../../node_modules/core-js/modules/es6.string.repeat.js","core-js/modules/es6.string.small.js":"../../node_modules/core-js/modules/es6.string.small.js","core-js/modules/es6.string.starts-with.js":"../../node_modules/core-js/modules/es6.string.starts-with.js","core-js/modules/es6.string.strike.js":"../../node_modules/core-js/modules/es6.string.strike.js","core-js/modules/es6.string.sub.js":"../../node_modules/core-js/modules/es6.string.sub.js","core-js/modules/es6.string.sup.js":"../../node_modules/core-js/modules/es6.string.sup.js","core-js/modules/es7.string.trim-left.js":"../../node_modules/core-js/modules/es7.string.trim-left.js","core-js/modules/es7.string.trim-right.js":"../../node_modules/core-js/modules/es7.string.trim-right.js","core-js/modules/es6.typed.array-buffer.js":"../../node_modules/core-js/modules/es6.typed.array-buffer.js","core-js/modules/es6.typed.int8-array.js":"../../node_modules/core-js/modules/es6.typed.int8-array.js","core-js/modules/es6.typed.uint8-array.js":"../../node_modules/core-js/modules/es6.typed.uint8-array.js","core-js/modules/es6.typed.uint8-clamped-array.js":"../../node_modules/core-js/modules/es6.typed.uint8-clamped-array.js","core-js/modules/es6.typed.int16-array.js":"../../node_modules/core-js/modules/es6.typed.int16-array.js","core-js/modules/es6.typed.uint16-array.js":"../../node_modules/core-js/modules/es6.typed.uint16-array.js","core-js/modules/es6.typed.int32-array.js":"../../node_modules/core-js/modules/es6.typed.int32-array.js","core-js/modules/es6.typed.uint32-array.js":"../../node_modules/core-js/modules/es6.typed.uint32-array.js","core-js/modules/es6.typed.float32-array.js":"../../node_modules/core-js/modules/es6.typed.float32-array.js","core-js/modules/es6.typed.float64-array.js":"../../node_modules/core-js/modules/es6.typed.float64-array.js","core-js/modules/es6.weak-map.js":"../../node_modules/core-js/modules/es6.weak-map.js","core-js/modules/es6.weak-set.js":"../../node_modules/core-js/modules/es6.weak-set.js","core-js/modules/web.timers.js":"../../node_modules/core-js/modules/web.timers.js","core-js/modules/web.immediate.js":"../../node_modules/core-js/modules/web.immediate.js","core-js/modules/web.dom.iterable.js":"../../node_modules/core-js/modules/web.dom.iterable.js","regenerator-runtime/runtime.js":"../../node_modules/regenerator-runtime/runtime.js","./common/utilities":"common/utilities.js","./common/redirectToMain":"common/redirectToMain.js","./common/loginSignupRedirect":"common/loginSignupRedirect.js","./common/loginSignupHandler":"common/loginSignupHandler.js","./user/dashboard":"user/dashboard.js","./user/cart":"user/cart.js","./user/payment":"user/payment.js","./user/linkStudent":"user/linkStudent.js","./institute/searchStudent":"institute/searchStudent.js","./institute/studentDetails":"institute/studentDetails.js","./institute/viewStudents":"institute/viewStudents.js","./institute/addInstituteDetails":"institute/addInstituteDetails.js","./institute/dashboard":"institute/dashboard.js","./admin/instituteManagement":"admin/instituteManagement.js","./institute/feesManagement":"institute/feesManagement.js","./common/downloadDocument":"common/downloadDocument.js","./common/errorHandler":"common/errorHandler.js"}],"../../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "51743" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] â¨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] ð¨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">ð¨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}],"../../node_modules/parcel-bundler/src/builtins/loaders/browser/js-loader.js":[function(require,module,exports) {
module.exports = function loadJSBundle(bundle) {
  return new Promise(function (resolve, reject) {
    var script = document.createElement('script');
    script.async = true;
    script.type = 'text/javascript';
    script.charset = 'utf-8';
    script.src = bundle;

    script.onerror = function (e) {
      script.onerror = script.onload = null;
      reject(e);
    };

    script.onload = function () {
      script.onerror = script.onload = null;
      resolve();
    };

    document.getElementsByTagName('head')[0].appendChild(script);
  });
};
},{}],0:[function(require,module,exports) {
var b=require("../../node_modules/parcel-bundler/src/builtins/bundle-loader.js");b.register("js",require("../../node_modules/parcel-bundler/src/builtins/loaders/browser/js-loader.js"));
},{}]},{},["../../node_modules/parcel-bundler/src/builtins/hmr-runtime.js",0,"index.js"], null)
//# sourceMappingURL=/bundle.js.map